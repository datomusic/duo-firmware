
duo-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010680  00002000  00002000  00002000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fini         00000004  00012680  00012680  00012680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  00012684  00012684  00012684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .usbdescriptortable 000000a0  1fff8000  1fff8000  00020000  2**2
                  ALLOC
  4 .dmabuffers   00008600  1fff8200  1fff8200  00020000  2**9
                  ALLOC
  5 .usbbuffers   00000480  20000800  20000800  00020000  2**2
                  ALLOC
  6 .data         000009e4  20000c80  0001268c  00018c80  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001200  20001664  00013070  00019664  2**2
                  ALLOC
  8 .ARM.attributes 0000002a  00000000  00000000  00019664  2**0
                  CONTENTS, READONLY
  9 .comment      00000070  00000000  00000000  0001968e  2**0
                  CONTENTS, READONLY
 10 .debug_info   000482c4  00000000  00000000  000196fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c2e4  00000000  00000000  000619c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000170c5  00000000  00000000  0006dca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001510  00000000  00000000  00084d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00005328  00000000  00000000  0008627b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000cc41  00000000  00000000  0008b5a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000f1a1  00000000  00000000  000981e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00003e88  00000000  00000000  000a7388  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <_VectorsFlash>:
    2000:	00 80 00 20 bd 21 00 00 c1 6b 00 00 79 6b 00 00     ... .!...k..yk..
    2010:	79 6b 00 00 79 6b 00 00 79 6b 00 00 79 6b 00 00     yk..yk..yk..yk..
    2020:	79 6b 00 00 79 6b 00 00 79 6b 00 00 c1 6b 00 00     yk..yk..yk...k..
    2030:	c1 6b 00 00 79 6b 00 00 c1 6b 00 00 69 6b 00 00     .k..yk...k..ik..
    2040:	c1 6b 00 00 c1 6b 00 00 c1 6b 00 00 c1 6b 00 00     .k...k...k...k..
    2050:	c1 6b 00 00 c1 6b 00 00 c1 6b 00 00 c1 6b 00 00     .k...k...k...k..
    2060:	c1 6b 00 00 c1 6b 00 00 c1 6b 00 00 c1 6b 00 00     .k...k...k...k..
    2070:	c1 6b 00 00 c1 6b 00 00 c1 6b 00 00 c1 6b 00 00     .k...k...k...k..
    2080:	c1 6b 00 00 c1 6b 00 00 c1 6b 00 00 c1 6b 00 00     .k...k...k...k..
    2090:	c1 6b 00 00 c1 6b 00 00 c1 6b 00 00 c1 6b 00 00     .k...k...k...k..
    20a0:	c1 6b 00 00 c1 6b 00 00 c1 6b 00 00 c1 6b 00 00     .k...k...k...k..
    20b0:	c1 6b 00 00 c1 6b 00 00 c1 6b 00 00 c1 6b 00 00     .k...k...k...k..
    20c0:	c1 6b 00 00 c1 6b 00 00 c1 6b 00 00 c1 6b 00 00     .k...k...k...k..
    20d0:	c1 6b 00 00 c1 6b 00 00 c1 6b 00 00 c1 6b 00 00     .k...k...k...k..
    20e0:	c1 6b 00 00 c1 6b 00 00 c1 6b 00 00 c1 6b 00 00     .k...k...k...k..
    20f0:	c1 6b 00 00 9d 77 00 00 c1 6b 00 00 f9 7e 00 00     .k...w...k...~..
    2100:	c1 6b 00 00 75 84 00 00 c1 6b 00 00 c1 6b 00 00     .k..u....k...k..
    2110:	c1 6b 00 00 c1 6b 00 00 c1 6b 00 00 c1 6b 00 00     .k...k...k...k..
    2120:	c1 6b 00 00 c1 6b 00 00 c1 6b 00 00 c1 6b 00 00     .k...k...k...k..
    2130:	c1 6b 00 00 c1 6b 00 00 c1 6b 00 00 c1 6b 00 00     .k...k...k...k..
    2140:	c1 6b 00 00 c1 6b 00 00 c1 6b 00 00 c1 6b 00 00     .k...k...k...k..
    2150:	25 9f 00 00 3d 9f 00 00 55 9f 00 00 6d 9f 00 00     %...=...U...m...
    2160:	c1 6b 00 00 dd 87 00 00 c1 6b 00 00 c1 6b 00 00     .k.......k...k..
    2170:	c1 6b 00 00 c1 6b 00 00 c1 6b 00 00 c1 6b 00 00     .k...k...k...k..
    2180:	c1 6b 00 00 c1 6b 00 00 c1 6b 00 00 c1 6b 00 00     .k...k...k...k..
    2190:	c1 6b 00 00 c1 6b 00 00 c1 6b 00 00 c1 6b 00 00     .k...k...k...k..
    21a0:	c1 6b 00 00 c1 6b 00 00 c1 6b 00 00 c1 6b 00 00     .k...k...k...k..
    21b0:	c1 6b 00 00 c1 6b 00 00 bd 99 00 00                 .k...k......

000021bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
    21bc:	4b57      	ldr	r3, [pc, #348]	; (231c <ResetHandler+0x160>)
    21be:	f24c 5220 	movw	r2, #50464	; 0xc520
{
    21c2:	b510      	push	{r4, lr}
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
    21c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    21c6:	f64d 1228 	movw	r2, #55592	; 0xd928
    21ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
    21cc:	bf00      	nop
	__asm__ volatile ("nop");
    21ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
    21d0:	f004 fcfa 	bl	6bc8 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
    21d4:	4b52      	ldr	r3, [pc, #328]	; (2320 <ResetHandler+0x164>)
    21d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
    21da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
    21dc:	4a51      	ldr	r2, [pc, #324]	; (2324 <ResetHandler+0x168>)
    21de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
    21e0:	4a51      	ldr	r2, [pc, #324]	; (2328 <ResetHandler+0x16c>)
    21e2:	60da      	str	r2, [r3, #12]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
    21e4:	f5a3 4330 	sub.w	r3, r3, #45056	; 0xb000
    21e8:	3b20      	subs	r3, #32
    21ea:	681a      	ldr	r2, [r3, #0]
    21ec:	f412 7280 	ands.w	r2, r2, #256	; 0x100
    21f0:	d104      	bne.n	21fc <ResetHandler+0x40>
		RTC_SR = 0;
    21f2:	494e      	ldr	r1, [pc, #312]	; (232c <ResetHandler+0x170>)
    21f4:	600a      	str	r2, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
    21f6:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
    21fa:	601a      	str	r2, [r3, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
    21fc:	4b4c      	ldr	r3, [pc, #304]	; (2330 <ResetHandler+0x174>)
    21fe:	781a      	ldrb	r2, [r3, #0]
    2200:	0711      	lsls	r1, r2, #28
    2202:	d503      	bpl.n	220c <ResetHandler+0x50>
    2204:	781a      	ldrb	r2, [r3, #0]
    2206:	f042 0208 	orr.w	r2, r2, #8
    220a:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
    220c:	4b49      	ldr	r3, [pc, #292]	; (2334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
    220e:	4c4a      	ldr	r4, [pc, #296]	; (2338 <ResetHandler+0x17c>)
    2210:	484a      	ldr	r0, [pc, #296]	; (233c <ResetHandler+0x180>)
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
    2212:	222a      	movs	r2, #42	; 0x2a
    2214:	701a      	strb	r2, [r3, #0]
    2216:	4a4a      	ldr	r2, [pc, #296]	; (2340 <ResetHandler+0x184>)
	while (dest < &_edata) *dest++ = *src++;
    2218:	2300      	movs	r3, #0
    221a:	1899      	adds	r1, r3, r2
    221c:	42a1      	cmp	r1, r4
    221e:	d203      	bcs.n	2228 <ResetHandler+0x6c>
    2220:	5819      	ldr	r1, [r3, r0]
    2222:	5099      	str	r1, [r3, r2]
    2224:	3304      	adds	r3, #4
    2226:	e7f8      	b.n	221a <ResetHandler+0x5e>
    2228:	4b46      	ldr	r3, [pc, #280]	; (2344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
    222a:	4947      	ldr	r1, [pc, #284]	; (2348 <ResetHandler+0x18c>)
    222c:	2200      	movs	r2, #0
    222e:	428b      	cmp	r3, r1
    2230:	d202      	bcs.n	2238 <ResetHandler+0x7c>
    2232:	f843 2b04 	str.w	r2, [r3], #4
    2236:	e7fa      	b.n	222e <ResetHandler+0x72>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
    2238:	4844      	ldr	r0, [pc, #272]	; (234c <ResetHandler+0x190>)
    223a:	4945      	ldr	r1, [pc, #276]	; (2350 <ResetHandler+0x194>)
	while (dest < &_ebss) *dest++ = 0;
    223c:	2300      	movs	r3, #0
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
    223e:	585a      	ldr	r2, [r3, r1]
    2240:	501a      	str	r2, [r3, r0]
    2242:	3304      	adds	r3, #4
    2244:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
    2248:	d1f9      	bne.n	223e <ResetHandler+0x82>
    224a:	4b42      	ldr	r3, [pc, #264]	; (2354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
    224c:	4a42      	ldr	r2, [pc, #264]	; (2358 <ResetHandler+0x19c>)
    224e:	2180      	movs	r1, #128	; 0x80
    2250:	f803 1b01 	strb.w	r1, [r3], #1
    2254:	4293      	cmp	r3, r2
    2256:	d1fb      	bne.n	2250 <ResetHandler+0x94>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
    2258:	4b40      	ldr	r3, [pc, #256]	; (235c <ResetHandler+0x1a0>)
    225a:	4a3c      	ldr	r2, [pc, #240]	; (234c <ResetHandler+0x190>)
    225c:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    225e:	4b40      	ldr	r3, [pc, #256]	; (2360 <ResetHandler+0x1a4>)
    2260:	228a      	movs	r2, #138	; 0x8a
    2262:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
    2264:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    2268:	2224      	movs	r2, #36	; 0x24
    226a:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
    226c:	22a0      	movs	r2, #160	; 0xa0
    226e:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
    2270:	799a      	ldrb	r2, [r3, #6]
    2272:	0792      	lsls	r2, r2, #30
    2274:	d5fc      	bpl.n	2270 <ResetHandler+0xb4>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
    2276:	799a      	ldrb	r2, [r3, #6]
    2278:	06d4      	lsls	r4, r2, #27
    227a:	d4fc      	bmi.n	2276 <ResetHandler+0xba>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
    227c:	4a39      	ldr	r2, [pc, #228]	; (2364 <ResetHandler+0x1a8>)
    227e:	7993      	ldrb	r3, [r2, #6]
    2280:	f003 030c 	and.w	r3, r3, #12
    2284:	2b08      	cmp	r3, #8
    2286:	4b37      	ldr	r3, [pc, #220]	; (2364 <ResetHandler+0x1a8>)
    2288:	d1f9      	bne.n	227e <ResetHandler+0xc2>
    #elif F_CPU > 16000000
    #error "MK66FX1M0 does not support this clock speed yet...."
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    228a:	2205      	movs	r2, #5
    228c:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 144000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(12); // config PLL for 144 MHz output
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    228e:	2243      	movs	r2, #67	; 0x43
    2290:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
    2292:	799a      	ldrb	r2, [r3, #6]
    2294:	0690      	lsls	r0, r2, #26
    2296:	d5fc      	bpl.n	2292 <ResetHandler+0xd6>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
    2298:	4a32      	ldr	r2, [pc, #200]	; (2364 <ResetHandler+0x1a8>)
    229a:	7991      	ldrb	r1, [r2, #6]
    229c:	4b31      	ldr	r3, [pc, #196]	; (2364 <ResetHandler+0x1a8>)
    229e:	0649      	lsls	r1, r1, #25
    22a0:	d5fb      	bpl.n	229a <ResetHandler+0xde>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
#elif F_CPU == 72000000
	// config divisors: 72 MHz core, 36 MHz bus, 24 MHz flash, USB = 72 * 2 / 3
	#if F_BUS == 36000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(2);
    22a2:	4a31      	ldr	r2, [pc, #196]	; (2368 <ResetHandler+0x1ac>)
    22a4:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
    22a8:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 72000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(2);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(2) | SIM_CLKDIV2_USBFRAC;
    22aa:	2105      	movs	r1, #5
    22ac:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
    22ae:	2220      	movs	r2, #32
    22b0:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
    22b2:	799a      	ldrb	r2, [r3, #6]
    22b4:	f002 020c 	and.w	r2, r2, #12
    22b8:	2a0c      	cmp	r2, #12
    22ba:	d1fa      	bne.n	22b2 <ResetHandler+0xf6>
	// USB uses PLL clock, trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 216000000 || F_CPU == 180000000
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
    22bc:	4b2b      	ldr	r3, [pc, #172]	; (236c <ResetHandler+0x1b0>)
    22be:	4a2c      	ldr	r2, [pc, #176]	; (2370 <ResetHandler+0x1b4>)
    22c0:	601a      	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
    22c2:	4b2c      	ldr	r3, [pc, #176]	; (2374 <ResetHandler+0x1b8>)
    22c4:	4a2c      	ldr	r2, [pc, #176]	; (2378 <ResetHandler+0x1bc>)
    22c6:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
    22c8:	2200      	movs	r2, #0
    22ca:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
    22cc:	2207      	movs	r2, #7
    22ce:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
    22d2:	4a2a      	ldr	r2, [pc, #168]	; (237c <ResetHandler+0x1c0>)
    22d4:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
    22d8:	b662      	cpsie	i

	_init_Teensyduino_internal_();
    22da:	f004 fea7 	bl	702c <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
    22de:	4b13      	ldr	r3, [pc, #76]	; (232c <ResetHandler+0x170>)
    22e0:	681b      	ldr	r3, [r3, #0]
    22e2:	07da      	lsls	r2, r3, #31
    22e4:	d505      	bpl.n	22f2 <ResetHandler+0x136>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
    22e6:	4826      	ldr	r0, [pc, #152]	; (2380 <ResetHandler+0x1c4>)
    22e8:	f004 fd3a 	bl	6d60 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
    22ec:	4b25      	ldr	r3, [pc, #148]	; (2384 <ResetHandler+0x1c8>)
    22ee:	4a26      	ldr	r2, [pc, #152]	; (2388 <ResetHandler+0x1cc>)
    22f0:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
    22f2:	4b26      	ldr	r3, [pc, #152]	; (238c <ResetHandler+0x1d0>)
    22f4:	781b      	ldrb	r3, [r3, #0]
    22f6:	065b      	lsls	r3, r3, #25
    22f8:	d509      	bpl.n	230e <ResetHandler+0x152>
    22fa:	4c22      	ldr	r4, [pc, #136]	; (2384 <ResetHandler+0x1c8>)
    22fc:	4a22      	ldr	r2, [pc, #136]	; (2388 <ResetHandler+0x1cc>)
    22fe:	6823      	ldr	r3, [r4, #0]
    2300:	4293      	cmp	r3, r2
    2302:	d104      	bne.n	230e <ResetHandler+0x152>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
    2304:	481e      	ldr	r0, [pc, #120]	; (2380 <ResetHandler+0x1c4>)
    2306:	f004 fd2b 	bl	6d60 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
    230a:	2300      	movs	r3, #0
    230c:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
    230e:	f00b fbe7 	bl	dae0 <__libc_init_array>

	startup_late_hook();
    2312:	f004 fc5f 	bl	6bd4 <startup_late_hook>
	main();
    2316:	f007 fefb 	bl	a110 <main>
    231a:	e7fe      	b.n	231a <ResetHandler+0x15e>
    231c:	4005200e 	.word	0x4005200e
    2320:	40048030 	.word	0x40048030
    2324:	00043f82 	.word	0x00043f82
    2328:	2b000001 	.word	0x2b000001
    232c:	4003d014 	.word	0x4003d014
    2330:	4007d002 	.word	0x4007d002
    2334:	4007e000 	.word	0x4007e000
    2338:	20001664 	.word	0x20001664
    233c:	0001268c 	.word	0x0001268c
    2340:	20000c80 	.word	0x20000c80
    2344:	20001664 	.word	0x20001664
    2348:	20002864 	.word	0x20002864
    234c:	20000400 	.word	0x20000400
    2350:	00002000 	.word	0x00002000
    2354:	e000e400 	.word	0xe000e400
    2358:	e000e45f 	.word	0xe000e45f
    235c:	e000ed08 	.word	0xe000ed08
    2360:	40065000 	.word	0x40065000
    2364:	40064000 	.word	0x40064000
    2368:	40048044 	.word	0x40048044
    236c:	40048004 	.word	0x40048004
    2370:	000510c0 	.word	0x000510c0
    2374:	e000e014 	.word	0xe000e014
    2378:	0001193f 	.word	0x0001193f
    237c:	20200000 	.word	0x20200000
    2380:	00000000 	.word	0x00000000
    2384:	4003e01c 	.word	0x4003e01c
    2388:	5a94c3a5 	.word	0x5a94c3a5
    238c:	4007f000 	.word	0x4007f000
    2390:	ffffffff 	.word	0xffffffff
    2394:	ffffffff 	.word	0xffffffff
    2398:	ffffffff 	.word	0xffffffff
    239c:	ffffffff 	.word	0xffffffff
    23a0:	ffffffff 	.word	0xffffffff
    23a4:	ffffffff 	.word	0xffffffff
    23a8:	ffffffff 	.word	0xffffffff
    23ac:	ffffffff 	.word	0xffffffff
    23b0:	ffffffff 	.word	0xffffffff
    23b4:	ffffffff 	.word	0xffffffff
    23b8:	ffffffff 	.word	0xffffffff
    23bc:	ffffffff 	.word	0xffffffff
    23c0:	ffffffff 	.word	0xffffffff
    23c4:	ffffffff 	.word	0xffffffff
    23c8:	ffffffff 	.word	0xffffffff
    23cc:	ffffffff 	.word	0xffffffff
    23d0:	ffffffff 	.word	0xffffffff
    23d4:	ffffffff 	.word	0xffffffff
    23d8:	ffffffff 	.word	0xffffffff
    23dc:	ffffffff 	.word	0xffffffff
    23e0:	ffffffff 	.word	0xffffffff
    23e4:	ffffffff 	.word	0xffffffff
    23e8:	ffffffff 	.word	0xffffffff
    23ec:	ffffffff 	.word	0xffffffff
    23f0:	ffffffff 	.word	0xffffffff
    23f4:	ffffffff 	.word	0xffffffff
    23f8:	ffffffff 	.word	0xffffffff
    23fc:	ffffffff 	.word	0xffffffff

00002400 <flashconfigbytes>:
    2400:	ffffffff ffffffff ffffffff fffff9de     ................

00002410 <__do_global_dtors_aux>:
    2410:	b510      	push	{r4, lr}
    2412:	4c05      	ldr	r4, [pc, #20]	; (2428 <__do_global_dtors_aux+0x18>)
    2414:	7823      	ldrb	r3, [r4, #0]
    2416:	b933      	cbnz	r3, 2426 <__do_global_dtors_aux+0x16>
    2418:	4b04      	ldr	r3, [pc, #16]	; (242c <__do_global_dtors_aux+0x1c>)
    241a:	b113      	cbz	r3, 2422 <__do_global_dtors_aux+0x12>
    241c:	4804      	ldr	r0, [pc, #16]	; (2430 <__do_global_dtors_aux+0x20>)
    241e:	f3af 8000 	nop.w
    2422:	2301      	movs	r3, #1
    2424:	7023      	strb	r3, [r4, #0]
    2426:	bd10      	pop	{r4, pc}
    2428:	20001664 	.word	0x20001664
    242c:	00000000 	.word	0x00000000
    2430:	00012684 	.word	0x00012684

00002434 <frame_dummy>:
    2434:	b508      	push	{r3, lr}
    2436:	4b06      	ldr	r3, [pc, #24]	; (2450 <frame_dummy+0x1c>)
    2438:	b11b      	cbz	r3, 2442 <frame_dummy+0xe>
    243a:	4806      	ldr	r0, [pc, #24]	; (2454 <frame_dummy+0x20>)
    243c:	4906      	ldr	r1, [pc, #24]	; (2458 <frame_dummy+0x24>)
    243e:	f3af 8000 	nop.w
    2442:	4806      	ldr	r0, [pc, #24]	; (245c <frame_dummy+0x28>)
    2444:	6803      	ldr	r3, [r0, #0]
    2446:	b113      	cbz	r3, 244e <frame_dummy+0x1a>
    2448:	4b05      	ldr	r3, [pc, #20]	; (2460 <frame_dummy+0x2c>)
    244a:	b103      	cbz	r3, 244e <frame_dummy+0x1a>
    244c:	4798      	blx	r3
    244e:	bd08      	pop	{r3, pc}
    2450:	00000000 	.word	0x00000000
    2454:	00012684 	.word	0x00012684
    2458:	20001668 	.word	0x20001668
    245c:	20001664 	.word	0x20001664
    2460:	00000000 	.word	0x00000000

00002464 <_ZN25AudioEffectCustomEnvelope9updateEnvEv>:
  }
  return static_cast<int>(milliseconds*SAMPLES_PER_MSEC);
}


void AudioEffectCustomEnvelope::updateEnv(){
    2464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2468:	4604      	mov	r4, r0
  env.adsr(
      static_cast<int>(milliseconds2count(attackMs))
      ,static_cast<int>(milliseconds2count(decayMs))
      ,sustainVal
      ,static_cast<int>(milliseconds2count(releaseMs))
    );
    246a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    246c:	f00a fe02 	bl	d074 <__aeabi_i2f>
  if (milliseconds < 0.0){
    2470:	2100      	movs	r1, #0
    );
    2472:	4605      	mov	r5, r0
  if (milliseconds < 0.0){
    2474:	f00a fff0 	bl	d458 <__aeabi_fcmplt>
    2478:	2800      	cmp	r0, #0
    247a:	d178      	bne.n	256e <_ZN25AudioEffectCustomEnvelope9updateEnvEv+0x10a>
    247c:	493d      	ldr	r1, [pc, #244]	; (2574 <_ZN25AudioEffectCustomEnvelope9updateEnvEv+0x110>)
    247e:	4628      	mov	r0, r5
    2480:	f00a fe4c 	bl	d11c <__aeabi_fmul>
    2484:	f00b f810 	bl	d4a8 <__aeabi_f2iz>
    2488:	4680      	mov	r8, r0
    );
    248a:	6c20      	ldr	r0, [r4, #64]	; 0x40
    248c:	f00a fdf2 	bl	d074 <__aeabi_i2f>
  if (milliseconds < 0.0){
    2490:	2100      	movs	r1, #0
    );
    2492:	4605      	mov	r5, r0
  if (milliseconds < 0.0){
    2494:	f00a ffe0 	bl	d458 <__aeabi_fcmplt>
    2498:	2800      	cmp	r0, #0
    249a:	d166      	bne.n	256a <_ZN25AudioEffectCustomEnvelope9updateEnvEv+0x106>
    249c:	4935      	ldr	r1, [pc, #212]	; (2574 <_ZN25AudioEffectCustomEnvelope9updateEnvEv+0x110>)
    249e:	4628      	mov	r0, r5
    24a0:	f00a fe3c 	bl	d11c <__aeabi_fmul>
    24a4:	f00b f800 	bl	d4a8 <__aeabi_f2iz>
    24a8:	4607      	mov	r7, r0
    );
    24aa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    24ac:	6c65      	ldr	r5, [r4, #68]	; 0x44
    24ae:	f00a fde1 	bl	d074 <__aeabi_i2f>
  if (milliseconds < 0.0){
    24b2:	2100      	movs	r1, #0
    );
    24b4:	4606      	mov	r6, r0
  if (milliseconds < 0.0){
    24b6:	f00a ffcf 	bl	d458 <__aeabi_fcmplt>
    24ba:	2800      	cmp	r0, #0
    24bc:	d144      	bne.n	2548 <_ZN25AudioEffectCustomEnvelope9updateEnvEv+0xe4>
    24be:	4630      	mov	r0, r6
    24c0:	492c      	ldr	r1, [pc, #176]	; (2574 <_ZN25AudioEffectCustomEnvelope9updateEnvEv+0x110>)
    24c2:	f00a fe2b 	bl	d11c <__aeabi_fmul>
    24c6:	f00a ffef 	bl	d4a8 <__aeabi_f2iz>
      int decayRate = 0;
      int releaseRate = 0;
      int sustainLevel = 0;

      static inline int calcRate(int val, int time) {
        if(time > 0){
    24ca:	f1b8 0f00 	cmp.w	r8, #0
    24ce:	4681      	mov	r9, r0
    conf = Envelope::Config(maxValue, attack, decay, sustain, release);
    24d0:	6a26      	ldr	r6, [r4, #32]
        if(time > 0){
    24d2:	dd3f      	ble.n	2554 <_ZN25AudioEffectCustomEnvelope9updateEnvEv+0xf0>
          return static_cast<int>(static_cast<float>(val)/time);
    24d4:	4630      	mov	r0, r6
    24d6:	f00a fdcd 	bl	d074 <__aeabi_i2f>
    24da:	4682      	mov	sl, r0
    24dc:	4640      	mov	r0, r8
    24de:	f00a fdc9 	bl	d074 <__aeabi_i2f>
    24e2:	4601      	mov	r1, r0
    24e4:	4650      	mov	r0, sl
    24e6:	f00a fecd 	bl	d284 <__aeabi_fdiv>
    24ea:	f00a ffdd 	bl	d4a8 <__aeabi_f2iz>
        if(time > 0){
    24ee:	2f00      	cmp	r7, #0
          return static_cast<int>(static_cast<float>(val)/time);
    24f0:	4680      	mov	r8, r0
        if(time > 0){
    24f2:	dd33      	ble.n	255c <_ZN25AudioEffectCustomEnvelope9updateEnvEv+0xf8>
          return static_cast<int>(static_cast<float>(val)/time);
    24f4:	1b70      	subs	r0, r6, r5
    24f6:	f00a fdbd 	bl	d074 <__aeabi_i2f>
    24fa:	4682      	mov	sl, r0
    24fc:	4638      	mov	r0, r7
    24fe:	f00a fdb9 	bl	d074 <__aeabi_i2f>
    2502:	4601      	mov	r1, r0
    2504:	4650      	mov	r0, sl
    2506:	f00a febd 	bl	d284 <__aeabi_fdiv>
    250a:	f00a ffcd 	bl	d4a8 <__aeabi_f2iz>
        if(time > 0){
    250e:	f1b9 0f00 	cmp.w	r9, #0
    2512:	f1c0 0700 	rsb	r7, r0, #0
    2516:	dd26      	ble.n	2566 <_ZN25AudioEffectCustomEnvelope9updateEnvEv+0x102>
          return static_cast<int>(static_cast<float>(val)/time);
    2518:	4628      	mov	r0, r5
    251a:	f00a fdab 	bl	d074 <__aeabi_i2f>
    251e:	4682      	mov	sl, r0
    2520:	4648      	mov	r0, r9
    2522:	f00a fda7 	bl	d074 <__aeabi_i2f>
    2526:	4601      	mov	r1, r0
    2528:	4650      	mov	r0, sl
    252a:	f00a feab 	bl	d284 <__aeabi_fdiv>
    252e:	f00a ffbb 	bl	d4a8 <__aeabi_f2iz>
    2532:	4240      	negs	r0, r0
    conf = Envelope::Config(maxValue, attack, decay, sustain, release);
    2534:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    2538:	6327      	str	r7, [r4, #48]	; 0x30
    253a:	6360      	str	r0, [r4, #52]	; 0x34
    253c:	42ae      	cmp	r6, r5
    253e:	bfd4      	ite	le
    2540:	63a6      	strle	r6, [r4, #56]	; 0x38
    2542:	63a5      	strgt	r5, [r4, #56]	; 0x38
    2544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(time > 0){
    2548:	f1b8 0f00 	cmp.w	r8, #0
    254c:	f04f 0900 	mov.w	r9, #0
    conf = Envelope::Config(maxValue, attack, decay, sustain, release);
    2550:	6a26      	ldr	r6, [r4, #32]
        if(time > 0){
    2552:	dcbf      	bgt.n	24d4 <_ZN25AudioEffectCustomEnvelope9updateEnvEv+0x70>
    2554:	2f00      	cmp	r7, #0
        }else{
          return 0;
    2556:	f04f 0800 	mov.w	r8, #0
        if(time > 0){
    255a:	dccb      	bgt.n	24f4 <_ZN25AudioEffectCustomEnvelope9updateEnvEv+0x90>
    255c:	f1b9 0f00 	cmp.w	r9, #0
    2560:	f04f 0700 	mov.w	r7, #0
    2564:	dcd8      	bgt.n	2518 <_ZN25AudioEffectCustomEnvelope9updateEnvEv+0xb4>
    2566:	2000      	movs	r0, #0
    2568:	e7e4      	b.n	2534 <_ZN25AudioEffectCustomEnvelope9updateEnvEv+0xd0>
    256a:	2700      	movs	r7, #0
    256c:	e79d      	b.n	24aa <_ZN25AudioEffectCustomEnvelope9updateEnvEv+0x46>
    256e:	f04f 0800 	mov.w	r8, #0
    2572:	e78a      	b.n	248a <_ZN25AudioEffectCustomEnvelope9updateEnvEv+0x26>
    2574:	42300000 	.word	0x42300000

00002578 <_ZN25AudioEffectCustomEnvelope6attackEi>:
}

void AudioEffectCustomEnvelope::attack(int milliseconds) {
  attackMs = milliseconds;
    2578:	63c1      	str	r1, [r0, #60]	; 0x3c
  updateEnv();
    257a:	f7ff bf73 	b.w	2464 <_ZN25AudioEffectCustomEnvelope9updateEnvEv>
    257e:	bf00      	nop

00002580 <_ZN25AudioEffectCustomEnvelope5decayEi>:
}


void AudioEffectCustomEnvelope::decay(int milliseconds){
  decayMs = milliseconds;
    2580:	6401      	str	r1, [r0, #64]	; 0x40
  updateEnv();
    2582:	f7ff bf6f 	b.w	2464 <_ZN25AudioEffectCustomEnvelope9updateEnvEv>
    2586:	bf00      	nop

00002588 <_ZN25AudioEffectCustomEnvelope7sustainEf>:
}


void AudioEffectCustomEnvelope::sustain(float level) {
    2588:	b510      	push	{r4, lr}
    258a:	4604      	mov	r4, r0
  sustainVal = static_cast<int>(level * ENVELOPE_MAX);
    258c:	4608      	mov	r0, r1
    258e:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
    2592:	f00a fdc3 	bl	d11c <__aeabi_fmul>
    2596:	f00a ff87 	bl	d4a8 <__aeabi_f2iz>
    259a:	6460      	str	r0, [r4, #68]	; 0x44
  updateEnv();
    259c:	4620      	mov	r0, r4
}
    259e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  updateEnv();
    25a2:	f7ff bf5f 	b.w	2464 <_ZN25AudioEffectCustomEnvelope9updateEnvEv>
    25a6:	bf00      	nop

000025a8 <_ZN25AudioEffectCustomEnvelope7releaseEi>:


void AudioEffectCustomEnvelope::release(int milliseconds) {
  releaseMs = milliseconds;
    25a8:	6481      	str	r1, [r0, #72]	; 0x48
  updateEnv();
    25aa:	f7ff bf5b 	b.w	2464 <_ZN25AudioEffectCustomEnvelope9updateEnvEv>
    25ae:	bf00      	nop

000025b0 <_ZN25AudioEffectCustomEnvelope6noteOnEv>:
}

void AudioEffectCustomEnvelope::noteOn(void) {
  __disable_irq();
    25b0:	b672      	cpsid	i
  inline void on(){ state = Attack; }
    25b2:	2301      	movs	r3, #1
    25b4:	7703      	strb	r3, [r0, #28]
  env.on();
  __enable_irq();
    25b6:	b662      	cpsie	i
    25b8:	4770      	bx	lr
    25ba:	bf00      	nop

000025bc <_ZN25AudioEffectCustomEnvelope7noteOffEv>:
}

void AudioEffectCustomEnvelope::noteOff(void) {
  __disable_irq();
    25bc:	b672      	cpsid	i
  inline void off(){ state = Release; }
    25be:	2304      	movs	r3, #4
    25c0:	7703      	strb	r3, [r0, #28]
  env.off();
  __enable_irq();
    25c2:	b662      	cpsie	i
    25c4:	4770      	bx	lr
    25c6:	bf00      	nop

000025c8 <_ZN9NoteStack7NoteOffEh>:
    sorted_ptr_[size_] = free_slot;
  }
  ++size_;
}

void NoteStack::NoteOff(uint8_t note) {
    25c8:	b4f0      	push	{r4, r5, r6, r7}
  uint8_t current = root_ptr_;
    25ca:	f890 6022 	ldrb.w	r6, [r0, #34]	; 0x22
  uint8_t previous = 0;
  while (current) {
    25ce:	b1ae      	cbz	r6, 25fc <_ZN9NoteStack7NoteOffEh+0x34>
    if (pool_[current].note == note) {
    25d0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    25d4:	4402      	add	r2, r0
    25d6:	4633      	mov	r3, r6
    25d8:	7854      	ldrb	r4, [r2, #1]
    25da:	428c      	cmp	r4, r1
    25dc:	d104      	bne.n	25e8 <_ZN9NoteStack7NoteOffEh+0x20>
    25de:	e035      	b.n	264c <_ZN9NoteStack7NoteOffEh+0x84>
    25e0:	7865      	ldrb	r5, [r4, #1]
    25e2:	428d      	cmp	r5, r1
    25e4:	d00c      	beq.n	2600 <_ZN9NoteStack7NoteOffEh+0x38>
    25e6:	461e      	mov	r6, r3
      break;
    }
    previous = current;
    current = pool_[current].next_ptr;
    25e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    25ec:	4403      	add	r3, r0
    25ee:	78da      	ldrb	r2, [r3, #3]
    if (pool_[current].note == note) {
    25f0:	eb02 0442 	add.w	r4, r2, r2, lsl #1
    25f4:	4613      	mov	r3, r2
    25f6:	4404      	add	r4, r0
  while (current) {
    25f8:	2a00      	cmp	r2, #0
    25fa:	d1f1      	bne.n	25e0 <_ZN9NoteStack7NoteOffEh+0x18>
    pool_[current].next_ptr = 0;
    pool_[current].note = kFreeSlot;
    pool_[current].velocity = 0;
    --size_;
  }
}
    25fc:	bcf0      	pop	{r4, r5, r6, r7}
    25fe:	4770      	bx	lr
      pool_[previous].next_ptr = pool_[current].next_ptr;
    2600:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    2604:	4406      	add	r6, r0
    2606:	78e1      	ldrb	r1, [r4, #3]
    2608:	70f1      	strb	r1, [r6, #3]
    for (uint8_t i = 0; i < size_; ++i) {
    260a:	7807      	ldrb	r7, [r0, #0]
    260c:	b39f      	cbz	r7, 2676 <_ZN9NoteStack7NoteOffEh+0xae>
      if (sorted_ptr_[i] == current) {
    260e:	f890 1023 	ldrb.w	r1, [r0, #35]	; 0x23
    2612:	4291      	cmp	r1, r2
    2614:	bf18      	it	ne
    2616:	2101      	movne	r1, #1
    2618:	d104      	bne.n	2624 <_ZN9NoteStack7NoteOffEh+0x5c>
    261a:	e01c      	b.n	2656 <_ZN9NoteStack7NoteOffEh+0x8e>
    261c:	f896 6022 	ldrb.w	r6, [r6, #34]	; 0x22
    2620:	4296      	cmp	r6, r2
    2622:	d01a      	beq.n	265a <_ZN9NoteStack7NoteOffEh+0x92>
    for (uint8_t i = 0; i < size_; ++i) {
    2624:	b2cc      	uxtb	r4, r1
      if (sorted_ptr_[i] == current) {
    2626:	460d      	mov	r5, r1
    for (uint8_t i = 0; i < size_; ++i) {
    2628:	42bc      	cmp	r4, r7
    262a:	f101 0101 	add.w	r1, r1, #1
    262e:	eb00 0601 	add.w	r6, r0, r1
    2632:	d3f3      	bcc.n	261c <_ZN9NoteStack7NoteOffEh+0x54>
    2634:	3f01      	subs	r7, #1
    2636:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    263a:	4403      	add	r3, r0
    pool_[current].next_ptr = 0;
    263c:	2200      	movs	r2, #0
    pool_[current].note = kFreeSlot;
    263e:	21ff      	movs	r1, #255	; 0xff
    2640:	7059      	strb	r1, [r3, #1]
    pool_[current].next_ptr = 0;
    2642:	70da      	strb	r2, [r3, #3]
    pool_[current].velocity = 0;
    2644:	709a      	strb	r2, [r3, #2]
    --size_;
    2646:	7007      	strb	r7, [r0, #0]
}
    2648:	bcf0      	pop	{r4, r5, r6, r7}
    264a:	4770      	bx	lr
      root_ptr_ = pool_[current].next_ptr;
    264c:	78d2      	ldrb	r2, [r2, #3]
    264e:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    2652:	4632      	mov	r2, r6
    2654:	e7d9      	b.n	260a <_ZN9NoteStack7NoteOffEh+0x42>
      if (sorted_ptr_[i] == current) {
    2656:	2500      	movs	r5, #0
    for (uint8_t i = 0; i < size_; ++i) {
    2658:	462c      	mov	r4, r5
        for (uint8_t j = i; j < size_ - 1; ++j) {
    265a:	3f01      	subs	r7, #1
    265c:	42af      	cmp	r7, r5
    265e:	ddea      	ble.n	2636 <_ZN9NoteStack7NoteOffEh+0x6e>
          sorted_ptr_[j] = sorted_ptr_[j + 1];
    2660:	4405      	add	r5, r0
        for (uint8_t j = i; j < size_ - 1; ++j) {
    2662:	3401      	adds	r4, #1
    2664:	b2e4      	uxtb	r4, r4
          sorted_ptr_[j] = sorted_ptr_[j + 1];
    2666:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
    266a:	f885 2023 	strb.w	r2, [r5, #35]	; 0x23
        for (uint8_t j = i; j < size_ - 1; ++j) {
    266e:	42bc      	cmp	r4, r7
    2670:	4625      	mov	r5, r4
    2672:	dbf5      	blt.n	2660 <_ZN9NoteStack7NoteOffEh+0x98>
    2674:	e7df      	b.n	2636 <_ZN9NoteStack7NoteOffEh+0x6e>
    2676:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    267a:	e7dc      	b.n	2636 <_ZN9NoteStack7NoteOffEh+0x6e>

0000267c <_ZN9NoteStack6NoteOnEhh>:
void NoteStack::NoteOn(uint8_t note, uint8_t velocity) {
    267c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2680:	4604      	mov	r4, r0
    2682:	4691      	mov	r9, r2
    2684:	4688      	mov	r8, r1
  NoteOff(note);
    2686:	f7ff ff9f 	bl	25c8 <_ZN9NoteStack7NoteOffEh>
  if (size_ == kNoteStackSize) {
    268a:	7827      	ldrb	r7, [r4, #0]
    268c:	2f0a      	cmp	r7, #10
    268e:	d050      	beq.n	2732 <_ZN9NoteStack6NoteOnEhh+0xb6>
    2690:	4620      	mov	r0, r4
  for (uint8_t i = 1; i <= kNoteStackSize; ++i) {
    2692:	2301      	movs	r3, #1
  uint8_t free_slot = 0;
    2694:	2500      	movs	r5, #0
    if (pool_[i].note == kFreeSlot) {
    2696:	7902      	ldrb	r2, [r0, #4]
  for (uint8_t i = 1; i <= kNoteStackSize; ++i) {
    2698:	1c5e      	adds	r6, r3, #1
    269a:	2aff      	cmp	r2, #255	; 0xff
    269c:	bf08      	it	eq
    269e:	461d      	moveq	r5, r3
    26a0:	b2f3      	uxtb	r3, r6
    26a2:	2b0b      	cmp	r3, #11
    26a4:	f100 0003 	add.w	r0, r0, #3
    26a8:	d1f5      	bne.n	2696 <_ZN9NoteStack6NoteOnEhh+0x1a>
    26aa:	b22b      	sxth	r3, r5
    26ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    26b0:	4423      	add	r3, r4
  pool_[free_slot].next_ptr = root_ptr_;
    26b2:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    26b6:	70da      	strb	r2, [r3, #3]
  pool_[free_slot].note = note;
    26b8:	f883 8001 	strb.w	r8, [r3, #1]
  pool_[free_slot].velocity = velocity;
    26bc:	f883 9002 	strb.w	r9, [r3, #2]
  root_ptr_ = free_slot;
    26c0:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
  for (uint8_t i = 0; i < size_; ++i) {
    26c4:	b1d7      	cbz	r7, 26fc <_ZN9NoteStack6NoteOnEhh+0x80>
    if (pool_[sorted_ptr_[i]].note > note) {
    26c6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    26ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    26ce:	4423      	add	r3, r4
    26d0:	785b      	ldrb	r3, [r3, #1]
    26d2:	4543      	cmp	r3, r8
    26d4:	bf98      	it	ls
    26d6:	2301      	movls	r3, #1
    26d8:	d908      	bls.n	26ec <_ZN9NoteStack6NoteOnEhh+0x70>
    26da:	e017      	b.n	270c <_ZN9NoteStack6NoteOnEhh+0x90>
    26dc:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
    26e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    26e4:	4422      	add	r2, r4
    26e6:	7852      	ldrb	r2, [r2, #1]
    26e8:	4590      	cmp	r8, r2
    26ea:	d311      	bcc.n	2710 <_ZN9NoteStack6NoteOnEhh+0x94>
  for (uint8_t i = 0; i < size_; ++i) {
    26ec:	b2d8      	uxtb	r0, r3
    26ee:	42b8      	cmp	r0, r7
    26f0:	eb04 0203 	add.w	r2, r4, r3
    if (pool_[sorted_ptr_[i]].note > note) {
    26f4:	4619      	mov	r1, r3
    26f6:	f103 0301 	add.w	r3, r3, #1
  for (uint8_t i = 0; i < size_; ++i) {
    26fa:	d3ef      	bcc.n	26dc <_ZN9NoteStack6NoteOnEhh+0x60>
  if (free_slot) {
    26fc:	b115      	cbz	r5, 2704 <_ZN9NoteStack6NoteOnEhh+0x88>
    sorted_ptr_[size_] = free_slot;
    26fe:	19e3      	adds	r3, r4, r7
    2700:	f883 5023 	strb.w	r5, [r3, #35]	; 0x23
  ++size_;
    2704:	3701      	adds	r7, #1
    2706:	7027      	strb	r7, [r4, #0]
    2708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pool_[sorted_ptr_[i]].note > note) {
    270c:	2100      	movs	r1, #0
  for (uint8_t i = 0; i < size_; ++i) {
    270e:	4608      	mov	r0, r1
    2710:	463b      	mov	r3, r7
        sorted_ptr_[j] = sorted_ptr_[j - 1];
    2712:	18e2      	adds	r2, r4, r3
      for (uint8_t j = size_; j > i; --j) {
    2714:	3b01      	subs	r3, #1
    2716:	b2db      	uxtb	r3, r3
        sorted_ptr_[j] = sorted_ptr_[j - 1];
    2718:	f892 6022 	ldrb.w	r6, [r2, #34]	; 0x22
    271c:	f882 6023 	strb.w	r6, [r2, #35]	; 0x23
      for (uint8_t j = size_; j > i; --j) {
    2720:	4283      	cmp	r3, r0
    2722:	d8f6      	bhi.n	2712 <_ZN9NoteStack6NoteOnEhh+0x96>
      sorted_ptr_[i] = free_slot;
    2724:	4421      	add	r1, r4
  ++size_;
    2726:	3701      	adds	r7, #1
      sorted_ptr_[i] = free_slot;
    2728:	f881 5023 	strb.w	r5, [r1, #35]	; 0x23
  ++size_;
    272c:	7027      	strb	r7, [r4, #0]
    272e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (size_ == kNoteStackSize) {
    2732:	2200      	movs	r2, #0
    2734:	4611      	mov	r1, r2
    2736:	4623      	mov	r3, r4
      if (pool_[i].next_ptr == 0) {
    2738:	7998      	ldrb	r0, [r3, #6]
    273a:	3203      	adds	r2, #3
    273c:	b900      	cbnz	r0, 2740 <_ZN9NoteStack6NoteOnEhh+0xc4>
        least_recent_note = pool_[i].note;
    273e:	7919      	ldrb	r1, [r3, #4]
    for (uint8_t i = 1; i <= kNoteStackSize; ++i) {
    2740:	2a1e      	cmp	r2, #30
    2742:	f103 0303 	add.w	r3, r3, #3
    2746:	d1f7      	bne.n	2738 <_ZN9NoteStack6NoteOnEhh+0xbc>
    NoteOff(least_recent_note);
    2748:	4620      	mov	r0, r4
    274a:	f7ff ff3d 	bl	25c8 <_ZN9NoteStack7NoteOffEh>
    274e:	7827      	ldrb	r7, [r4, #0]
    2750:	e79e      	b.n	2690 <_ZN9NoteStack6NoteOnEhh+0x14>
    2752:	bf00      	nop

00002754 <_ZN9NoteStack5ClearEv>:

void NoteStack::Clear() {
    2754:	b538      	push	{r3, r4, r5, lr}
  size_ = 0;
    2756:	2500      	movs	r5, #0
void NoteStack::Clear() {
    2758:	4604      	mov	r4, r0
  memset(pool_ + 1, 0, sizeof(NoteEntry) * kNoteStackSize);
    275a:	4629      	mov	r1, r5
    275c:	221e      	movs	r2, #30
  size_ = 0;
    275e:	f800 5b04 	strb.w	r5, [r0], #4
  memset(pool_ + 1, 0, sizeof(NoteEntry) * kNoteStackSize);
    2762:	f00b fd83 	bl	e26c <memset>
  memset(sorted_ptr_ + 1, 0, kNoteStackSize);
    2766:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    276a:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
    276e:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    2772:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
    2776:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    277a:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
    277e:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
    2782:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
    2786:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    278a:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
  root_ptr_ = 0;
    278e:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    2792:	4629      	mov	r1, r5
  for (uint8_t i = 0; i <= kNoteStackSize; ++i) {
    pool_[i].note = kFreeSlot;
    2794:	22ff      	movs	r2, #255	; 0xff
    2796:	1863      	adds	r3, r4, r1
    2798:	3103      	adds	r1, #3
  for (uint8_t i = 0; i <= kNoteStackSize; ++i) {
    279a:	2921      	cmp	r1, #33	; 0x21
    pool_[i].note = kFreeSlot;
    279c:	705a      	strb	r2, [r3, #1]
  for (uint8_t i = 0; i <= kNoteStackSize; ++i) {
    279e:	d1fa      	bne.n	2796 <_ZN9NoteStack5ClearEv+0x42>
  }
}
    27a0:	bd38      	pop	{r3, r4, r5, pc}
    27a2:	bf00      	nop

000027a4 <_Z17midi_handle_clockv>:
  usbMIDI.setHandleNoteOn(midi_note_on);
  usbMIDI.setHandleNoteOff(midi_note_off);
}

void midi_handle_clock() {
  midi_clock++;
    27a4:	4b02      	ldr	r3, [pc, #8]	; (27b0 <_Z17midi_handle_clockv+0xc>)
    27a6:	681a      	ldr	r2, [r3, #0]
    27a8:	3201      	adds	r2, #1
    27aa:	601a      	str	r2, [r3, #0]
    27ac:	4770      	bx	lr
    27ae:	bf00      	nop
    27b0:	20001a74 	.word	0x20001a74

000027b4 <_Z21sequencer_reset_clockv>:
  sequencer_is_running = true;
  sequencer_clock = 0;
}

void sequencer_reset_clock() {
  sequencer_clock -= (sequencer_clock%12);
    27b4:	4b05      	ldr	r3, [pc, #20]	; (27cc <_Z21sequencer_reset_clockv+0x18>)
    27b6:	4a06      	ldr	r2, [pc, #24]	; (27d0 <_Z21sequencer_reset_clockv+0x1c>)
    27b8:	7819      	ldrb	r1, [r3, #0]
    27ba:	fba2 0201 	umull	r0, r2, r2, r1
    27be:	08d2      	lsrs	r2, r2, #3
    27c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    27c4:	0092      	lsls	r2, r2, #2
    27c6:	701a      	strb	r2, [r3, #0]
    27c8:	4770      	bx	lr
    27ca:	bf00      	nop
    27cc:	200023d0 	.word	0x200023d0
    27d0:	aaaaaaab 	.word	0xaaaaaaab

000027d4 <_ZN14CLEDController4sizeEv>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    27d4:	6940      	ldr	r0, [r0, #20]
    27d6:	4770      	bx	lr

000027d8 <_ZN14CLEDController9clearLedsEi>:
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    27d8:	b510      	push	{r4, lr}
    27da:	b082      	sub	sp, #8
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    27dc:	2300      	movs	r3, #0
        showColor(data, nLeds, getAdjustment(brightness));
    27de:	6804      	ldr	r4, [r0, #0]
    27e0:	f88d 3000 	strb.w	r3, [sp]
    27e4:	f88d 3001 	strb.w	r3, [sp, #1]
    27e8:	f88d 3002 	strb.w	r3, [sp, #2]
    27ec:	6824      	ldr	r4, [r4, #0]
        : r(ir), g(ig), b(ib)
    27ee:	f88d 3004 	strb.w	r3, [sp, #4]
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    27f2:	460a      	mov	r2, r1
    27f4:	f88d 3005 	strb.w	r3, [sp, #5]
    27f8:	f88d 3006 	strb.w	r3, [sp, #6]
        showColor(data, nLeds, getAdjustment(brightness));
    27fc:	4669      	mov	r1, sp
    27fe:	ab01      	add	r3, sp, #4
    2800:	47a0      	blx	r4
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    2802:	b002      	add	sp, #8
    2804:	bd10      	pop	{r4, pc}
    2806:	bf00      	nop

00002808 <_ZNK19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE17getMaxRefreshRateEv>:
		FastPin<DATA_PIN>::setOutput();
		mPinMask = FastPin<DATA_PIN>::mask();
		mPort = FastPin<DATA_PIN>::port();
	}

	virtual uint16_t getMaxRefreshRate() const { return 400; }
    2808:	f44f 70c8 	mov.w	r0, #400	; 0x190
    280c:	4770      	bx	lr
    280e:	bf00      	nop

00002810 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEED1Ev>:
 This is not really useful for the Arduino, as it is never called...
 */
template<class SerialPort, class Settings>
inline MidiInterface<SerialPort, Settings>::~MidiInterface()
{
}
    2810:	4770      	bx	lr
    2812:	bf00      	nop

00002814 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE4initEv>:
	virtual void init() {
    2814:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
    2816:	2101      	movs	r1, #1
    2818:	4604      	mov	r4, r0
    281a:	2020      	movs	r0, #32
    281c:	f004 fbc2 	bl	6fa4 <pinMode>
		mPinMask = FastPin<DATA_PIN>::mask();
    2820:	f44f 2280 	mov.w	r2, #262144	; 0x40000
		mPort = FastPin<DATA_PIN>::port();
    2824:	4b01      	ldr	r3, [pc, #4]	; (282c <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE4initEv+0x18>)
		mPinMask = FastPin<DATA_PIN>::mask();
    2826:	61a2      	str	r2, [r4, #24]
		mPort = FastPin<DATA_PIN>::port();
    2828:	61e3      	str	r3, [r4, #28]
    282a:	bd10      	pop	{r4, pc}
    282c:	400ff040 	.word	0x400ff040

00002830 <_Z12midi_note_onhhh>:
  }
  return MIDI_NOTE_FREQUENCY[x];
}

void midi_note_on(uint8_t channel, uint8_t note, uint8_t velocity) {
  if(channel == MIDI_CHANNEL) {
    2830:	2801      	cmp	r0, #1
    2832:	d000      	beq.n	2836 <_Z12midi_note_onhhh+0x6>
    2834:	4770      	bx	lr
    note_stack.NoteOn(note, velocity);
    2836:	4801      	ldr	r0, [pc, #4]	; (283c <_Z12midi_note_onhhh+0xc>)
    2838:	f7ff bf20 	b.w	267c <_ZN9NoteStack6NoteOnEhh>
    283c:	20001d6c 	.word	0x20001d6c

00002840 <_Z13midi_note_offhhh>:
  }
}

void midi_note_off(uint8_t channel, uint8_t note, uint8_t velocity) {
  if(channel == MIDI_CHANNEL) {
    2840:	2801      	cmp	r0, #1
    2842:	d000      	beq.n	2846 <_Z13midi_note_offhhh+0x6>
    2844:	4770      	bx	lr
    note_stack.NoteOff(note);
    2846:	4801      	ldr	r0, [pc, #4]	; (284c <_Z13midi_note_offhhh+0xc>)
    2848:	f7ff bebe 	b.w	25c8 <_ZN9NoteStack7NoteOffEh>
    284c:	20001d6c 	.word	0x20001d6c

00002850 <_ZN25AudioEffectCustomEnvelope6updateEv>:
	void decay(int milliseconds);
	void sustain(float level);
	void release(int milliseconds);

	using AudioStream::release;
        virtual void update(void) {
    2850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          audio_block_t *block;
          uint32_t *p, *end;
          uint32_t sample12, sample34, sample56, sample78, tmp1, tmp2;


          block = receiveWritable();
    2854:	2100      	movs	r1, #0
        virtual void update(void) {
    2856:	b083      	sub	sp, #12
    2858:	4605      	mov	r5, r0
          block = receiveWritable();
    285a:	f007 f85b 	bl	9914 <_ZN11AudioStream15receiveWritableEj>
          if (!block) return;
    285e:	4682      	mov	sl, r0
    2860:	2800      	cmp	r0, #0
    2862:	f000 80b7 	beq.w	29d4 <_ZN25AudioEffectCustomEnvelope6updateEv+0x184>
          p = (uint32_t *)(block->data);
    2866:	1d04      	adds	r4, r0, #4
          end = p + AUDIO_BLOCK_SAMPLES/2;
    2868:	f500 7b82 	add.w	fp, r0, #260	; 0x104


          while (p < end) {
    286c:	455c      	cmp	r4, fp
    286e:	d25e      	bcs.n	292e <_ZN25AudioEffectCustomEnvelope6updateEv+0xde>
    2870:	f100 0614 	add.w	r6, r0, #20
          curInc = conf.decayRate;
          curVal += curInc*pieceSize;
          if(curVal <= conf.sustainLevel){
            curVal = conf.sustainLevel;
            curInc = Config::calcRate(curVal-oldVal, pieceSize);
            state = Sustain;
    2874:	f04f 0903 	mov.w	r9, #3
            state = Decay;
    2878:	f04f 0802 	mov.w	r8, #2
      switch(state){
    287c:	7f2b      	ldrb	r3, [r5, #28]
            // process 8 samples
            int v = env.curVal;
    287e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
    2880:	2b04      	cmp	r3, #4
    2882:	f200 8086 	bhi.w	2992 <_ZN25AudioEffectCustomEnvelope6updateEv+0x142>
    2886:	e8df f003 	tbb	[pc, r3]
    288a:	5d84      	.short	0x5d84
    288c:	8403      	.short	0x8403
    288e:	7c          	.byte	0x7c
    288f:	00          	.byte	0x00
          curInc = conf.decayRate;
    2890:	6b28      	ldr	r0, [r5, #48]	; 0x30
          curVal += curInc*pieceSize;
    2892:	6a6a      	ldr	r2, [r5, #36]	; 0x24
          if(curVal <= conf.sustainLevel){
    2894:	6ba9      	ldr	r1, [r5, #56]	; 0x38
          curVal += curInc*pieceSize;
    2896:	fb02 7300 	mla	r3, r2, r0, r7
          if(curVal <= conf.sustainLevel){
    289a:	428b      	cmp	r3, r1
          curVal += curInc*pieceSize;
    289c:	62ab      	str	r3, [r5, #40]	; 0x28
          if(curVal <= conf.sustainLevel){
    289e:	dc16      	bgt.n	28ce <_ZN25AudioEffectCustomEnvelope6updateEv+0x7e>
      int decayRate = 0;
      int releaseRate = 0;
      int sustainLevel = 0;

      static inline int calcRate(int val, int time) {
        if(time > 0){
    28a0:	2a00      	cmp	r2, #0
            curVal = conf.sustainLevel;
    28a2:	62a9      	str	r1, [r5, #40]	; 0x28
        if(time > 0){
    28a4:	f340 8092 	ble.w	29cc <_ZN25AudioEffectCustomEnvelope6updateEv+0x17c>
          return static_cast<int>(static_cast<float>(val)/time);
    28a8:	1bc8      	subs	r0, r1, r7
    28aa:	9201      	str	r2, [sp, #4]
    28ac:	f00a fbe2 	bl	d074 <__aeabi_i2f>
    28b0:	9a01      	ldr	r2, [sp, #4]
    28b2:	4603      	mov	r3, r0
    28b4:	4610      	mov	r0, r2
    28b6:	9301      	str	r3, [sp, #4]
    28b8:	f00a fbdc 	bl	d074 <__aeabi_i2f>
    28bc:	9b01      	ldr	r3, [sp, #4]
    28be:	4601      	mov	r1, r0
    28c0:	4618      	mov	r0, r3
    28c2:	f00a fcdf 	bl	d284 <__aeabi_fdiv>
    28c6:	f00a fdef 	bl	d4a8 <__aeabi_f2iz>
            state = Sustain;
    28ca:	f885 901c 	strb.w	r9, [r5, #28]
            int inc = env.step();
            sample12 = *p++;
            sample34 = *p++;
            sample56 = *p++;
            sample78 = *p++;
    28ce:	1d21      	adds	r1, r4, #4
            sample12 = *p++;
    28d0:	f856 ec10 	ldr.w	lr, [r6, #-16]
            sample78 = *p++;
    28d4:	c90e      	ldmia	r1, {r1, r2, r3}
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    28d6:	fb37 fc0e 	smulwb	ip, r7, lr
            p -= 4;
            tmp1 = signed_multiply_32x16b(v, sample12);
            v+=inc;
    28da:	4407      	add	r7, r0
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    28dc:	fb37 fe1e 	smulwt	lr, r7, lr
            tmp2 = signed_multiply_32x16t(v, sample12);
            v+=inc;
    28e0:	4407      	add	r7, r0
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    28e2:	eacc 4e0e 	pkhbt	lr, ip, lr, lsl #16
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    28e6:	fb37 fc01 	smulwb	ip, r7, r1
            sample12 = pack_16b_16b(tmp2, tmp1);

            tmp1 = signed_multiply_32x16b(v, sample34);
            v+=inc;
    28ea:	4407      	add	r7, r0
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    28ec:	fb37 f111 	smulwt	r1, r7, r1
            tmp2 = signed_multiply_32x16t(v, sample34);
            v+=inc;
    28f0:	4407      	add	r7, r0
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    28f2:	eacc 4101 	pkhbt	r1, ip, r1, lsl #16
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    28f6:	fb37 fc02 	smulwb	ip, r7, r2
            sample34 = pack_16b_16b(tmp2, tmp1);
            tmp1 = signed_multiply_32x16b(v, sample56);
            v+=inc;
    28fa:	4407      	add	r7, r0
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    28fc:	fb37 f212 	smulwt	r2, r7, r2
            tmp2 = signed_multiply_32x16t(v, sample56);
            v+=inc;
    2900:	4407      	add	r7, r0
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    2902:	eacc 4202 	pkhbt	r2, ip, r2, lsl #16
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    2906:	fb37 fc03 	smulwb	ip, r7, r3
            sample56 = pack_16b_16b(tmp2, tmp1);
            tmp1 = signed_multiply_32x16b(v, sample78);
            v+=inc;
    290a:	4407      	add	r7, r0
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    290c:	fb37 f313 	smulwt	r3, r7, r3
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    2910:	eacc 4303 	pkhbt	r3, ip, r3, lsl #16
            tmp2 = signed_multiply_32x16t(v, sample78);
            v+=inc;
            sample78 = pack_16b_16b(tmp2, tmp1);
            *p++ = sample12;
    2914:	f846 ec10 	str.w	lr, [r6, #-16]
    2918:	3410      	adds	r4, #16
            *p++ = sample34;
    291a:	f844 1c0c 	str.w	r1, [r4, #-12]
            *p++ = sample56;
    291e:	f844 2c08 	str.w	r2, [r4, #-8]
            *p++ = sample78;
    2922:	f844 3c04 	str.w	r3, [r4, #-4]
          while (p < end) {
    2926:	45a3      	cmp	fp, r4
    2928:	f106 0610 	add.w	r6, r6, #16
    292c:	d8a6      	bhi.n	287c <_ZN25AudioEffectCustomEnvelope6updateEv+0x2c>

          }
          transmit(block);
    292e:	4628      	mov	r0, r5
    2930:	4651      	mov	r1, sl
    2932:	2200      	movs	r2, #0
    2934:	f006 ffc8 	bl	98c8 <_ZN11AudioStream8transmitEP18audio_block_structh>
          release(block);
    2938:	4650      	mov	r0, sl
        }
    293a:	b003      	add	sp, #12
    293c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          release(block);
    2940:	f006 bf9e 	b.w	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
          curInc = conf.attackRate;
    2944:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
          curVal += curInc*pieceSize;
    2946:	6a6a      	ldr	r2, [r5, #36]	; 0x24
          if(curVal >= maxValue){
    2948:	6a29      	ldr	r1, [r5, #32]
          curVal += curInc*pieceSize;
    294a:	fb02 7300 	mla	r3, r2, r0, r7
          if(curVal >= maxValue){
    294e:	428b      	cmp	r3, r1
          curVal += curInc*pieceSize;
    2950:	62ab      	str	r3, [r5, #40]	; 0x28
          if(curVal >= maxValue){
    2952:	dbbc      	blt.n	28ce <_ZN25AudioEffectCustomEnvelope6updateEv+0x7e>
        if(time > 0){
    2954:	2a00      	cmp	r2, #0
            curVal = maxValue;
    2956:	62a9      	str	r1, [r5, #40]	; 0x28
        if(time > 0){
    2958:	dd36      	ble.n	29c8 <_ZN25AudioEffectCustomEnvelope6updateEv+0x178>
          return static_cast<int>(static_cast<float>(val)/time);
    295a:	1bc8      	subs	r0, r1, r7
    295c:	9201      	str	r2, [sp, #4]
    295e:	f00a fb89 	bl	d074 <__aeabi_i2f>
    2962:	9a01      	ldr	r2, [sp, #4]
    2964:	4603      	mov	r3, r0
    2966:	4610      	mov	r0, r2
    2968:	9301      	str	r3, [sp, #4]
    296a:	f00a fb83 	bl	d074 <__aeabi_i2f>
    296e:	9b01      	ldr	r3, [sp, #4]
    2970:	4601      	mov	r1, r0
    2972:	4618      	mov	r0, r3
    2974:	f00a fc86 	bl	d284 <__aeabi_fdiv>
    2978:	f00a fd96 	bl	d4a8 <__aeabi_f2iz>
            state = Decay;
    297c:	f885 801c 	strb.w	r8, [r5, #28]
    2980:	e7a5      	b.n	28ce <_ZN25AudioEffectCustomEnvelope6updateEv+0x7e>
          curInc = conf.releaseRate;
    2982:	6b68      	ldr	r0, [r5, #52]	; 0x34
          curVal += curInc*pieceSize;
    2984:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2986:	fb02 7300 	mla	r3, r2, r0, r7
          if(curVal <= 0){
    298a:	2b00      	cmp	r3, #0
    298c:	dd03      	ble.n	2996 <_ZN25AudioEffectCustomEnvelope6updateEv+0x146>
          curVal += curInc*pieceSize;
    298e:	62ab      	str	r3, [r5, #40]	; 0x28
    2990:	e79d      	b.n	28ce <_ZN25AudioEffectCustomEnvelope6updateEv+0x7e>
      switch(state){
    2992:	2000      	movs	r0, #0
    2994:	e79b      	b.n	28ce <_ZN25AudioEffectCustomEnvelope6updateEv+0x7e>
            curVal = 0;
    2996:	2300      	movs	r3, #0
        if(time > 0){
    2998:	429a      	cmp	r2, r3
            curVal = 0;
    299a:	62ab      	str	r3, [r5, #40]	; 0x28
        if(time > 0){
    299c:	dd18      	ble.n	29d0 <_ZN25AudioEffectCustomEnvelope6updateEv+0x180>
          return static_cast<int>(static_cast<float>(val)/time);
    299e:	4638      	mov	r0, r7
    29a0:	9201      	str	r2, [sp, #4]
    29a2:	f00a fb67 	bl	d074 <__aeabi_i2f>
    29a6:	9a01      	ldr	r2, [sp, #4]
    29a8:	4603      	mov	r3, r0
    29aa:	4610      	mov	r0, r2
    29ac:	9301      	str	r3, [sp, #4]
    29ae:	f00a fb61 	bl	d074 <__aeabi_i2f>
    29b2:	9b01      	ldr	r3, [sp, #4]
    29b4:	4601      	mov	r1, r0
    29b6:	4618      	mov	r0, r3
    29b8:	f00a fc64 	bl	d284 <__aeabi_fdiv>
    29bc:	f00a fd74 	bl	d4a8 <__aeabi_f2iz>
            state = Idle;
    29c0:	f04f 0200 	mov.w	r2, #0
    29c4:	772a      	strb	r2, [r5, #28]
    29c6:	e782      	b.n	28ce <_ZN25AudioEffectCustomEnvelope6updateEv+0x7e>
        }else{
          return 0;
    29c8:	2000      	movs	r0, #0
    29ca:	e7d7      	b.n	297c <_ZN25AudioEffectCustomEnvelope6updateEv+0x12c>
    29cc:	2000      	movs	r0, #0
    29ce:	e77c      	b.n	28ca <_ZN25AudioEffectCustomEnvelope6updateEv+0x7a>
    29d0:	2000      	movs	r0, #0
    29d2:	e7f5      	b.n	29c0 <_ZN25AudioEffectCustomEnvelope6updateEv+0x170>
        }
    29d4:	b003      	add	sp, #12
    29d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29da:	bf00      	nop

000029dc <_Z10amp_enablev.part.35>:
  AudioInterrupts();
  amp_enable();
  power_flag = 1;
}

void amp_enable() {
    29dc:	b508      	push	{r3, lr}
  if(amp_enabled == 0) {
    pinMode(AMP_ENABLE, OUTPUT);
    29de:	2006      	movs	r0, #6
    29e0:	2101      	movs	r1, #1
    29e2:	f004 fadf 	bl	6fa4 <pinMode>
    digitalWrite(AMP_ENABLE, LOW);
    29e6:	2006      	movs	r0, #6
    29e8:	2100      	movs	r1, #0
    29ea:	f004 fac7 	bl	6f7c <digitalWrite>
    amp_enabled = 1;
    29ee:	4b02      	ldr	r3, [pc, #8]	; (29f8 <_Z10amp_enablev.part.35+0x1c>)
    29f0:	2201      	movs	r2, #1
    29f2:	701a      	strb	r2, [r3, #0]
    29f4:	bd08      	pop	{r3, pc}
    29f6:	bf00      	nop
    29f8:	20001884 	.word	0x20001884

000029fc <_Z11amp_disablev.part.36>:
  }
}

void amp_disable() {
    29fc:	b508      	push	{r3, lr}
  if(amp_enabled == 1) {
    pinMode(AMP_ENABLE, INPUT);
    29fe:	2006      	movs	r0, #6
    2a00:	2100      	movs	r1, #0
    2a02:	f004 facf 	bl	6fa4 <pinMode>
    amp_enabled = 0;
    2a06:	4b02      	ldr	r3, [pc, #8]	; (2a10 <_Z11amp_disablev.part.36+0x14>)
    2a08:	2200      	movs	r2, #0
    2a0a:	701a      	strb	r2, [r3, #0]
    2a0c:	bd08      	pop	{r3, pc}
    2a0e:	bf00      	nop
    2a10:	20001884 	.word	0x20001884

00002a14 <_Z17sequencer_restartv>:
void sequencer_restart() {
    2a14:	b508      	push	{r3, lr}
        case Start:
        case Stop:
        case Continue:
        case ActiveSensing:
        case SystemReset:
            mSerial.write((byte)inType);
    2a16:	4b0d      	ldr	r3, [pc, #52]	; (2a4c <_Z17sequencer_restartv+0x38>)
    2a18:	6c98      	ldr	r0, [r3, #72]	; 0x48
    2a1a:	6803      	ldr	r3, [r0, #0]
    2a1c:	21fa      	movs	r1, #250	; 0xfa
    2a1e:	681b      	ldr	r3, [r3, #0]
    2a20:	4798      	blx	r3
  tempo_handler.midi_clock_reset();
    2a22:	4b0b      	ldr	r3, [pc, #44]	; (2a50 <_Z17sequencer_restartv+0x3c>)
  current_step = SEQUENCER_NUM_STEPS - 1;
    2a24:	490b      	ldr	r1, [pc, #44]	; (2a54 <_Z17sequencer_restartv+0x40>)
          update_sync();
          break;
      }
    }
    void midi_clock_reset() {
      if(_source == TEMPO_SOURCE_MIDI) {
    2a26:	7b1a      	ldrb	r2, [r3, #12]
    2a28:	2007      	movs	r0, #7
    2a2a:	2a01      	cmp	r2, #1
    2a2c:	7008      	strb	r0, [r1, #0]
    2a2e:	d105      	bne.n	2a3c <_Z17sequencer_restartv+0x28>
        _midi_clock_block = 0;
        midi_clock = 11; // One less than our overflow, so the next MIDI clock tick triggers a callback
    2a30:	4909      	ldr	r1, [pc, #36]	; (2a58 <_Z17sequencer_restartv+0x44>)
    2a32:	200b      	movs	r0, #11
        _midi_clock_block = 0;
    2a34:	2200      	movs	r2, #0
        midi_clock = 11; // One less than our overflow, so the next MIDI clock tick triggers a callback
    2a36:	6008      	str	r0, [r1, #0]
        _midi_clock_block = 0;
    2a38:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  sequencer_clock = 0;
    2a3c:	4b07      	ldr	r3, [pc, #28]	; (2a5c <_Z17sequencer_restartv+0x48>)
  sequencer_is_running = true;
    2a3e:	4908      	ldr	r1, [pc, #32]	; (2a60 <_Z17sequencer_restartv+0x4c>)
  sequencer_clock = 0;
    2a40:	2200      	movs	r2, #0
  sequencer_is_running = true;
    2a42:	2001      	movs	r0, #1
  sequencer_clock = 0;
    2a44:	701a      	strb	r2, [r3, #0]
  sequencer_is_running = true;
    2a46:	7008      	strb	r0, [r1, #0]
  sequencer_clock = 0;
    2a48:	bd08      	pop	{r3, pc}
    2a4a:	bf00      	nop
    2a4c:	2000209c 	.word	0x2000209c
    2a50:	20001cc0 	.word	0x20001cc0
    2a54:	20001d44 	.word	0x20001d44
    2a58:	20001a74 	.word	0x20001a74
    2a5c:	200023d0 	.word	0x200023d0
    2a60:	20002369 	.word	0x20002369

00002a64 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE4showEPK4CRGBiS2_>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    2a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    2a66:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2a68:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    2a6a:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
    2a6c:	789b      	ldrb	r3, [r3, #2]
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    2a6e:	b089      	sub	sp, #36	; 0x24
            switch(dither) {
    2a70:	2d01      	cmp	r5, #1
        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
    2a72:	9101      	str	r1, [sp, #4]
    2a74:	9202      	str	r2, [sp, #8]
    2a76:	9203      	str	r2, [sp, #12]
        r = rhs.r;
    2a78:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
    2a7c:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
    2a80:	f88d 3018 	strb.w	r3, [sp, #24]
            switch(dither) {
    2a84:	d017      	beq.n	2ab6 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x52>
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    2a86:	2300      	movs	r3, #0
    2a88:	f88d 3015 	strb.w	r3, [sp, #21]
    2a8c:	f88d 3014 	strb.w	r3, [sp, #20]
    2a90:	f88d 3013 	strb.w	r3, [sp, #19]
    2a94:	f88d 3012 	strb.w	r3, [sp, #18]
    2a98:	f88d 3011 	strb.w	r3, [sp, #17]
    2a9c:	f88d 3010 	strb.w	r3, [sp, #16]
    2aa0:	a901      	add	r1, sp, #4
    showPixels(pixels);
    2aa2:	6803      	ldr	r3, [r0, #0]
            mOffsets[i] = nOffset;
    2aa4:	2200      	movs	r2, #0
            mAdvance = 3;
    2aa6:	2403      	movs	r4, #3
    showPixels(pixels);
    2aa8:	699b      	ldr	r3, [r3, #24]
            mAdvance = 3;
    2aaa:	f88d 4019 	strb.w	r4, [sp, #25]
            mOffsets[i] = nOffset;
    2aae:	9207      	str	r2, [sp, #28]
    showPixels(pixels);
    2ab0:	4798      	blx	r3
  }
    2ab2:	b009      	add	sp, #36	; 0x24
    2ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            R++;
    2ab6:	4a1f      	ldr	r2, [pc, #124]	; (2b34 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE4showEPK4CRGBiS2_+0xd0>)
    2ab8:	7813      	ldrb	r3, [r2, #0]
    2aba:	3301      	adds	r3, #1
            R &= (0x01 << ditherBits) - 1;
    2abc:	f003 0307 	and.w	r3, r3, #7
            byte Q = 0;
    2ac0:	f013 0f01 	tst.w	r3, #1
    2ac4:	bf14      	ite	ne
    2ac6:	2780      	movne	r7, #128	; 0x80
    2ac8:	2700      	moveq	r7, #0
            R &= (0x01 << ditherBits) - 1;
    2aca:	7013      	strb	r3, [r2, #0]
                if(R & 0x02) { Q |= 0x40; }
    2acc:	079a      	lsls	r2, r3, #30
    2ace:	bf44      	itt	mi
    2ad0:	f047 0740 	orrmi.w	r7, r7, #64	; 0x40
    2ad4:	b2ff      	uxtbmi	r7, r7
                if(R & 0x04) { Q |= 0x20; }
    2ad6:	075b      	lsls	r3, r3, #29
    2ad8:	bf48      	it	mi
    2ada:	f047 0720 	orrmi.w	r7, r7, #32
                Q += 0x01 << (7 - ditherBits);
    2ade:	3710      	adds	r7, #16
    2ae0:	a901      	add	r1, sp, #4
    2ae2:	b2ff      	uxtb	r7, r7
    2ae4:	460b      	mov	r3, r1
            for(int i = 0; i < 3; i++) {
    2ae6:	2500      	movs	r5, #0
                    e[i] = s ? (256/s) + 1 : 0;
    2ae8:	f44f 7e80 	mov.w	lr, #256	; 0x100
    2aec:	b1bc      	cbz	r4, 2b1e <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE4showEPK4CRGBiS2_+0xba>
    2aee:	fb9e f4f4 	sdiv	r4, lr, r4
    2af2:	3401      	adds	r4, #1
    2af4:	b2e4      	uxtb	r4, r4
    2af6:	1c62      	adds	r2, r4, #1
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    2af8:	fb07 f202 	mul.w	r2, r7, r2
    2afc:	f3c2 2207 	ubfx	r2, r2, #8, #8
                    if(d[i]) (d[i]--);
    2b00:	1e56      	subs	r6, r2, #1
                    e[i] = s ? (256/s) + 1 : 0;
    2b02:	73dc      	strb	r4, [r3, #15]
                    if(d[i]) (d[i]--);
    2b04:	b9a2      	cbnz	r2, 2b30 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE4showEPK4CRGBiS2_+0xcc>
                    d[i] = scale8(Q, e[i]);
    2b06:	731a      	strb	r2, [r3, #12]
            for(int i = 0; i < 3; i++) {
    2b08:	3501      	adds	r5, #1
                    if(e[i]) e[i]--;
    2b0a:	1e62      	subs	r2, r4, #1
    2b0c:	b104      	cbz	r4, 2b10 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE4showEPK4CRGBiS2_+0xac>
    2b0e:	73da      	strb	r2, [r3, #15]
            for(int i = 0; i < 3; i++) {
    2b10:	2d03      	cmp	r5, #3
    2b12:	f103 0301 	add.w	r3, r3, #1
    2b16:	d0c4      	beq.n	2aa2 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x3e>
    2b18:	7c9c      	ldrb	r4, [r3, #18]
                    e[i] = s ? (256/s) + 1 : 0;
    2b1a:	2c00      	cmp	r4, #0
    2b1c:	d1e7      	bne.n	2aee <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x8a>
    2b1e:	2201      	movs	r2, #1
    2b20:	fb07 f202 	mul.w	r2, r7, r2
    2b24:	f3c2 2207 	ubfx	r2, r2, #8, #8
                    if(d[i]) (d[i]--);
    2b28:	1e56      	subs	r6, r2, #1
                    e[i] = s ? (256/s) + 1 : 0;
    2b2a:	73dc      	strb	r4, [r3, #15]
                    if(d[i]) (d[i]--);
    2b2c:	2a00      	cmp	r2, #0
    2b2e:	d0ea      	beq.n	2b06 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE4showEPK4CRGBiS2_+0xa2>
    2b30:	731e      	strb	r6, [r3, #12]
    2b32:	e7e9      	b.n	2b08 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE4showEPK4CRGBiS2_+0xa4>
    2b34:	20001680 	.word	0x20001680

00002b38 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE9showColorERK4CRGBiS2_>:
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    2b38:	b5f0      	push	{r4, r5, r6, r7, lr}
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    2b3a:	7c85      	ldrb	r5, [r0, #18]
        r = rhs.r;
    2b3c:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    2b3e:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
    2b40:	789b      	ldrb	r3, [r3, #2]
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    2b42:	b089      	sub	sp, #36	; 0x24
            switch(dither) {
    2b44:	2d01      	cmp	r5, #1
        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    2b46:	9101      	str	r1, [sp, #4]
    2b48:	9202      	str	r2, [sp, #8]
    2b4a:	9203      	str	r2, [sp, #12]
        r = rhs.r;
    2b4c:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
    2b50:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
    2b54:	f88d 3018 	strb.w	r3, [sp, #24]
            switch(dither) {
    2b58:	d016      	beq.n	2b88 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x50>
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    2b5a:	2300      	movs	r3, #0
    2b5c:	f88d 3015 	strb.w	r3, [sp, #21]
    2b60:	f88d 3014 	strb.w	r3, [sp, #20]
    2b64:	f88d 3013 	strb.w	r3, [sp, #19]
    2b68:	f88d 3012 	strb.w	r3, [sp, #18]
    2b6c:	f88d 3011 	strb.w	r3, [sp, #17]
    2b70:	f88d 3010 	strb.w	r3, [sp, #16]
    2b74:	a901      	add	r1, sp, #4
    showPixels(pixels);
    2b76:	6802      	ldr	r2, [r0, #0]
            mAdvance = 0;
    2b78:	2300      	movs	r3, #0
    showPixels(pixels);
    2b7a:	6992      	ldr	r2, [r2, #24]
            mAdvance = 0;
    2b7c:	f88d 3019 	strb.w	r3, [sp, #25]
            mOffsets[i] = nOffset;
    2b80:	9307      	str	r3, [sp, #28]
    showPixels(pixels);
    2b82:	4790      	blx	r2
  }
    2b84:	b009      	add	sp, #36	; 0x24
    2b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
            R++;
    2b88:	4a1f      	ldr	r2, [pc, #124]	; (2c08 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0xd0>)
    2b8a:	7813      	ldrb	r3, [r2, #0]
    2b8c:	3301      	adds	r3, #1
            R &= (0x01 << ditherBits) - 1;
    2b8e:	f003 0307 	and.w	r3, r3, #7
            byte Q = 0;
    2b92:	f013 0f01 	tst.w	r3, #1
    2b96:	bf14      	ite	ne
    2b98:	2780      	movne	r7, #128	; 0x80
    2b9a:	2700      	moveq	r7, #0
            R &= (0x01 << ditherBits) - 1;
    2b9c:	7013      	strb	r3, [r2, #0]
                if(R & 0x02) { Q |= 0x40; }
    2b9e:	079a      	lsls	r2, r3, #30
    2ba0:	bf44      	itt	mi
    2ba2:	f047 0740 	orrmi.w	r7, r7, #64	; 0x40
    2ba6:	b2ff      	uxtbmi	r7, r7
                if(R & 0x04) { Q |= 0x20; }
    2ba8:	075b      	lsls	r3, r3, #29
    2baa:	bf48      	it	mi
    2bac:	f047 0720 	orrmi.w	r7, r7, #32
                Q += 0x01 << (7 - ditherBits);
    2bb0:	3710      	adds	r7, #16
    2bb2:	a901      	add	r1, sp, #4
    2bb4:	b2ff      	uxtb	r7, r7
    2bb6:	460b      	mov	r3, r1
            for(int i = 0; i < 3; i++) {
    2bb8:	2500      	movs	r5, #0
                    e[i] = s ? (256/s) + 1 : 0;
    2bba:	f44f 7e80 	mov.w	lr, #256	; 0x100
    2bbe:	b1bc      	cbz	r4, 2bf0 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0xb8>
    2bc0:	fb9e f4f4 	sdiv	r4, lr, r4
    2bc4:	3401      	adds	r4, #1
    2bc6:	b2e4      	uxtb	r4, r4
    2bc8:	1c62      	adds	r2, r4, #1
    2bca:	fb02 f207 	mul.w	r2, r2, r7
    2bce:	f3c2 2207 	ubfx	r2, r2, #8, #8
                    if(d[i]) (d[i]--);
    2bd2:	1e56      	subs	r6, r2, #1
                    e[i] = s ? (256/s) + 1 : 0;
    2bd4:	73dc      	strb	r4, [r3, #15]
                    if(d[i]) (d[i]--);
    2bd6:	b9a2      	cbnz	r2, 2c02 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0xca>
                    d[i] = scale8(Q, e[i]);
    2bd8:	731a      	strb	r2, [r3, #12]
            for(int i = 0; i < 3; i++) {
    2bda:	3501      	adds	r5, #1
                    if(e[i]) e[i]--;
    2bdc:	1e62      	subs	r2, r4, #1
    2bde:	b104      	cbz	r4, 2be2 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0xaa>
    2be0:	73da      	strb	r2, [r3, #15]
            for(int i = 0; i < 3; i++) {
    2be2:	2d03      	cmp	r5, #3
    2be4:	f103 0301 	add.w	r3, r3, #1
    2be8:	d0c5      	beq.n	2b76 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x3e>
    2bea:	7c9c      	ldrb	r4, [r3, #18]
                    e[i] = s ? (256/s) + 1 : 0;
    2bec:	2c00      	cmp	r4, #0
    2bee:	d1e7      	bne.n	2bc0 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x88>
    2bf0:	2201      	movs	r2, #1
    2bf2:	fb02 f207 	mul.w	r2, r2, r7
    2bf6:	f3c2 2207 	ubfx	r2, r2, #8, #8
                    if(d[i]) (d[i]--);
    2bfa:	1e56      	subs	r6, r2, #1
                    e[i] = s ? (256/s) + 1 : 0;
    2bfc:	73dc      	strb	r4, [r3, #15]
                    if(d[i]) (d[i]--);
    2bfe:	2a00      	cmp	r2, #0
    2c00:	d0ea      	beq.n	2bd8 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0xa0>
    2c02:	731e      	strb	r6, [r3, #12]
    2c04:	e7e9      	b.n	2bda <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0xa2>
    2c06:	bf00      	nop
    2c08:	20001680 	.word	0x20001680

00002c0c <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE>:

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    2c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c10:	b08b      	sub	sp, #44	; 0x2c
    2c12:	4604      	mov	r4, r0
    2c14:	9009      	str	r0, [sp, #36]	; 0x24
    2c16:	9101      	str	r1, [sp, #4]
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
    2c18:	f004 f9ca 	bl	6fb0 <micros>
    2c1c:	8c23      	ldrh	r3, [r4, #32]
    2c1e:	1ac0      	subs	r0, r0, r3
		do {
    2c20:	b283      	uxth	r3, r0
    2c22:	2b31      	cmp	r3, #49	; 0x31
    2c24:	d9f8      	bls.n	2c18 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0xc>
            d[0] = other.d[0];
    2c26:	9901      	ldr	r1, [sp, #4]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    2c28:	4bac      	ldr	r3, [pc, #688]	; (2edc <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x2d0>)
            e[1] = other.e[1];
    2c2a:	7c0d      	ldrb	r5, [r1, #16]
    2c2c:	681c      	ldr	r4, [r3, #0]
            e[0] = other.e[0];
    2c2e:	7bca      	ldrb	r2, [r1, #15]
            e[1] = other.e[1];
    2c30:	9502      	str	r5, [sp, #8]
            mLenRemaining = mLen = other.mLen;
    2c32:	9d01      	ldr	r5, [sp, #4]
            e[2] = other.e[2];
    2c34:	f891 9011 	ldrb.w	r9, [r1, #17]
            d[1] = other.d[1];
    2c38:	7b4e      	ldrb	r6, [r1, #13]
            mData = other.mData;
    2c3a:	680f      	ldr	r7, [r1, #0]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    2c3c:	f891 a014 	ldrb.w	sl, [r1, #20]
            d[0] = other.d[0];
    2c40:	f891 800c 	ldrb.w	r8, [r1, #12]
            d[2] = other.d[2];
    2c44:	f891 e00e 	ldrb.w	lr, [r1, #14]
            e[0] = other.e[0];
    2c48:	9203      	str	r2, [sp, #12]
        r = rhs.r;
    2c4a:	f891 b012 	ldrb.w	fp, [r1, #18]
        g = rhs.g;
    2c4e:	7cca      	ldrb	r2, [r1, #19]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    2c50:	48a3      	ldr	r0, [pc, #652]	; (2ee0 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x2d4>)
            mAdvance = other.mAdvance;
    2c52:	7d49      	ldrb	r1, [r1, #21]
            e[2] = other.e[2];
    2c54:	f8cd 9010 	str.w	r9, [sp, #16]
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    2c58:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
            mAdvance = other.mAdvance;
    2c5c:	9105      	str	r1, [sp, #20]
        b = rhs.b;
    2c5e:	f8cd a01c 	str.w	sl, [sp, #28]
            mLenRemaining = mLen = other.mLen;
    2c62:	6869      	ldr	r1, [r5, #4]
    2c64:	601c      	str	r4, [r3, #0]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    2c66:	6805      	ldr	r5, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    2c68:	4c9e      	ldr	r4, [pc, #632]	; (2ee4 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x2d8>)

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    2c6a:	4b9f      	ldr	r3, [pc, #636]	; (2ee8 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x2dc>)
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    2c6c:	f8dd 9008 	ldr.w	r9, [sp, #8]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    2c70:	f045 0501 	orr.w	r5, r5, #1
    2c74:	6005      	str	r5, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    2c76:	2000      	movs	r0, #0
    2c78:	6020      	str	r0, [r4, #0]
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    2c7a:	6818      	ldr	r0, [r3, #0]
		register data_t lo = *port & ~FastPin<DATA_PIN>::mask();;
    2c7c:	6818      	ldr	r0, [r3, #0]
    2c7e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
		*port = lo;
    2c82:	6018      	str	r0, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    2c84:	787b      	ldrb	r3, [r7, #1]
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    2c86:	ebc6 0609 	rsb	r6, r6, r9
    2c8a:	fa5f fc86 	uxtb.w	ip, r6
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    2c8e:	2b00      	cmp	r3, #0
    2c90:	f040 812c 	bne.w	2eec <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x2e0>
    2c94:	3201      	adds	r2, #1
    2c96:	9206      	str	r2, [sp, #24]
    2c98:	469a      	mov	sl, r3

		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
    2c9a:	b672      	cpsid	i
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2c9c:	4b91      	ldr	r3, [pc, #580]	; (2ee4 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x2d8>)
    2c9e:	681a      	ldr	r2, [r3, #0]

		while(pixels.has(1)) {
    2ca0:	2900      	cmp	r1, #0
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2ca2:	f102 0258 	add.w	r2, r2, #88	; 0x58
		while(pixels.has(1)) {
    2ca6:	f340 810e 	ble.w	2ec6 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x2ba>
    2caa:	f10b 0b01 	add.w	fp, fp, #1
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    2cae:	488e      	ldr	r0, [pc, #568]	; (2ee8 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x2dc>)
    2cb0:	f8cd b020 	str.w	fp, [sp, #32]
		while(pixels.has(1)) {
    2cb4:	4689      	mov	r9, r1
			while(ARM_DWT_CYCCNT < next_mark);
    2cb6:	461e      	mov	r6, r3
                d[0] = e[0] - d[0];
    2cb8:	f8dd b00c 	ldr.w	fp, [sp, #12]
                d[1] = e[1] - d[1];
    2cbc:	9902      	ldr	r1, [sp, #8]
                d[2] = e[2] - d[2];
    2cbe:	9c04      	ldr	r4, [sp, #16]
                d[0] = e[0] - d[0];
    2cc0:	ebc8 080b 	rsb	r8, r8, fp
                d[1] = e[1] - d[1];
    2cc4:	ebcc 0c01 	rsb	ip, ip, r1
                d[2] = e[2] - d[2];
    2cc8:	ebce 0e04 	rsb	lr, lr, r4
                d[0] = e[0] - d[0];
    2ccc:	fa5f f888 	uxtb.w	r8, r8
                d[1] = e[1] - d[1];
    2cd0:	fa5f fc8c 	uxtb.w	ip, ip
                d[2] = e[2] - d[2];
    2cd4:	fa5f fe8e 	uxtb.w	lr, lr
			cli();
    2cd8:	b672      	cpsid	i
			if(ARM_DWT_CYCCNT > next_mark) {
    2cda:	6819      	ldr	r1, [r3, #0]
    2cdc:	4291      	cmp	r1, r2
    2cde:	d906      	bls.n	2cee <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0xe2>
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    2ce0:	6819      	ldr	r1, [r3, #0]
    2ce2:	f640 55c8 	movw	r5, #3528	; 0xdc8
    2ce6:	1a89      	subs	r1, r1, r2
    2ce8:	42a9      	cmp	r1, r5
    2cea:	f200 8109 	bhi.w	2f00 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x2f4>
			hi = *port | FastPin<DATA_PIN>::mask();
    2cee:	6804      	ldr	r4, [r0, #0]
			lo = *port & ~FastPin<DATA_PIN>::mask();
    2cf0:	6805      	ldr	r5, [r0, #0]
			hi = *port | FastPin<DATA_PIN>::mask();
    2cf2:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
			lo = *port & ~FastPin<DATA_PIN>::mask();
    2cf6:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    2cfa:	f04f 0b07 	mov.w	fp, #7
			while(ARM_DWT_CYCCNT < next_mark);
    2cfe:	6819      	ldr	r1, [r3, #0]
    2d00:	4291      	cmp	r1, r2
    2d02:	d3fc      	bcc.n	2cfe <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0xf2>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2d04:	6832      	ldr	r2, [r6, #0]

	inline static void toggle() __attribute__ ((always_inline)) { _PTOR::r() = _MASK; }

	inline static void hi(register port_ptr_t port) __attribute__ ((always_inline)) { hi(); }
	inline static void lo(register port_ptr_t port) __attribute__ ((always_inline)) { lo(); }
	inline static void fastset(register port_ptr_t port, register port_t val) __attribute__ ((always_inline)) { *port = val; }
    2d06:	6004      	str	r4, [r0, #0]
			if(b&0x80) {
    2d08:	f01a 0f80 	tst.w	sl, #128	; 0x80
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2d0c:	f102 0258 	add.w	r2, r2, #88	; 0x58
			if(b&0x80) {
    2d10:	f040 8099 	bne.w	2e46 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x23a>
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2d14:	6819      	ldr	r1, [r3, #0]
    2d16:	1a51      	subs	r1, r2, r1
    2d18:	2948      	cmp	r1, #72	; 0x48
    2d1a:	d8fb      	bhi.n	2d14 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x108>
			b <<= 1;
    2d1c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2d20:	f1bb 0b01 	subs.w	fp, fp, #1
    2d24:	6005      	str	r5, [r0, #0]
			b <<= 1;
    2d26:	fa5f fa8a 	uxtb.w	sl, sl
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2d2a:	d1e8      	bne.n	2cfe <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0xf2>
		while(ARM_DWT_CYCCNT < next_mark);
    2d2c:	6819      	ldr	r1, [r3, #0]
    2d2e:	4291      	cmp	r1, r2
    2d30:	d3fc      	bcc.n	2d2c <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x120>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2d32:	6832      	ldr	r2, [r6, #0]
    2d34:	6004      	str	r4, [r0, #0]
		if(b&0x80) {
    2d36:	f01a 0f80 	tst.w	sl, #128	; 0x80
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2d3a:	f102 0258 	add.w	r2, r2, #88	; 0x58
		if(b&0x80) {
    2d3e:	f040 808c 	bne.w	2e5a <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x24e>
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2d42:	6819      	ldr	r1, [r3, #0]
    2d44:	1a51      	subs	r1, r2, r1
    2d46:	2948      	cmp	r1, #72	; 0x48
    2d48:	d8fb      	bhi.n	2d42 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x136>
    2d4a:	6005      	str	r5, [r0, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    2d4c:	7839      	ldrb	r1, [r7, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    2d4e:	2900      	cmp	r1, #0
    2d50:	f000 80b3 	beq.w	2eba <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x2ae>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    2d54:	fa81 f158 	uqadd8	r1, r1, r8
    2d58:	f8dd b020 	ldr.w	fp, [sp, #32]
    2d5c:	b2c9      	uxtb	r1, r1
    2d5e:	fb01 fa0b 	mul.w	sl, r1, fp
    2d62:	f3ca 2a07 	ubfx	sl, sl, #8, #8
    2d66:	f04f 0b07 	mov.w	fp, #7
			while(ARM_DWT_CYCCNT < next_mark);
    2d6a:	6819      	ldr	r1, [r3, #0]
    2d6c:	4291      	cmp	r1, r2
    2d6e:	d3fc      	bcc.n	2d6a <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x15e>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2d70:	6832      	ldr	r2, [r6, #0]
    2d72:	6004      	str	r4, [r0, #0]
			if(b&0x80) {
    2d74:	f01a 0f80 	tst.w	sl, #128	; 0x80
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2d78:	f102 0258 	add.w	r2, r2, #88	; 0x58
			if(b&0x80) {
    2d7c:	d177      	bne.n	2e6e <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x262>
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2d7e:	6819      	ldr	r1, [r3, #0]
    2d80:	1a51      	subs	r1, r2, r1
    2d82:	2948      	cmp	r1, #72	; 0x48
    2d84:	d8fb      	bhi.n	2d7e <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x172>
			b <<= 1;
    2d86:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2d8a:	f1bb 0b01 	subs.w	fp, fp, #1
    2d8e:	6005      	str	r5, [r0, #0]
			b <<= 1;
    2d90:	fa5f fa8a 	uxtb.w	sl, sl
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2d94:	d1e9      	bne.n	2d6a <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x15e>
		while(ARM_DWT_CYCCNT < next_mark);
    2d96:	6819      	ldr	r1, [r3, #0]
    2d98:	4291      	cmp	r1, r2
    2d9a:	d3fc      	bcc.n	2d96 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x18a>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2d9c:	6832      	ldr	r2, [r6, #0]
    2d9e:	6004      	str	r4, [r0, #0]
		if(b&0x80) {
    2da0:	f01a 0f80 	tst.w	sl, #128	; 0x80
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2da4:	f102 0258 	add.w	r2, r2, #88	; 0x58
		if(b&0x80) {
    2da8:	d16a      	bne.n	2e80 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x274>
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2daa:	6819      	ldr	r1, [r3, #0]
    2dac:	1a51      	subs	r1, r2, r1
    2dae:	2948      	cmp	r1, #72	; 0x48
    2db0:	d8fb      	bhi.n	2daa <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x19e>
    2db2:	6005      	str	r5, [r0, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    2db4:	78b9      	ldrb	r1, [r7, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    2db6:	2900      	cmp	r1, #0
    2db8:	d07d      	beq.n	2eb6 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x2aa>
    2dba:	fa81 f15e 	uqadd8	r1, r1, lr
    2dbe:	f8dd a01c 	ldr.w	sl, [sp, #28]
    2dc2:	b2c9      	uxtb	r1, r1
    2dc4:	fb0a 1101 	mla	r1, sl, r1, r1
    2dc8:	f3c1 2a07 	ubfx	sl, r1, #8, #8
    2dcc:	f04f 0b07 	mov.w	fp, #7
			while(ARM_DWT_CYCCNT < next_mark);
    2dd0:	6819      	ldr	r1, [r3, #0]
    2dd2:	4291      	cmp	r1, r2
    2dd4:	d3fc      	bcc.n	2dd0 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x1c4>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2dd6:	6832      	ldr	r2, [r6, #0]
    2dd8:	6004      	str	r4, [r0, #0]
			if(b&0x80) {
    2dda:	f01a 0f80 	tst.w	sl, #128	; 0x80
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2dde:	f102 0258 	add.w	r2, r2, #88	; 0x58
			if(b&0x80) {
    2de2:	d156      	bne.n	2e92 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x286>
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2de4:	6819      	ldr	r1, [r3, #0]
    2de6:	1a51      	subs	r1, r2, r1
    2de8:	2948      	cmp	r1, #72	; 0x48
    2dea:	d8fb      	bhi.n	2de4 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x1d8>
			b <<= 1;
    2dec:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2df0:	f1bb 0b01 	subs.w	fp, fp, #1
    2df4:	6005      	str	r5, [r0, #0]
			b <<= 1;
    2df6:	fa5f fa8a 	uxtb.w	sl, sl
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2dfa:	d1e9      	bne.n	2dd0 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x1c4>
		while(ARM_DWT_CYCCNT < next_mark);
    2dfc:	6819      	ldr	r1, [r3, #0]
    2dfe:	4291      	cmp	r1, r2
    2e00:	d3fc      	bcc.n	2dfc <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x1f0>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2e02:	6832      	ldr	r2, [r6, #0]
    2e04:	6004      	str	r4, [r0, #0]
		if(b&0x80) {
    2e06:	f01a 0f80 	tst.w	sl, #128	; 0x80
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2e0a:	f102 0258 	add.w	r2, r2, #88	; 0x58
		if(b&0x80) {
    2e0e:	d149      	bne.n	2ea4 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x298>
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2e10:	6819      	ldr	r1, [r3, #0]
    2e12:	1a51      	subs	r1, r2, r1
    2e14:	2948      	cmp	r1, #72	; 0x48
    2e16:	d8fb      	bhi.n	2e10 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x204>
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    2e18:	f8dd b014 	ldr.w	fp, [sp, #20]
    2e1c:	6005      	str	r5, [r0, #0]
    2e1e:	fa47 f78b 	sxtab	r7, r7, fp
    2e22:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    2e26:	7879      	ldrb	r1, [r7, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    2e28:	2900      	cmp	r1, #0
    2e2a:	d048      	beq.n	2ebe <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x2b2>
    2e2c:	fa81 f15c 	uqadd8	r1, r1, ip
    2e30:	9d06      	ldr	r5, [sp, #24]
    2e32:	b2c9      	uxtb	r1, r1
    2e34:	fb05 fa01 	mul.w	sl, r5, r1
    2e38:	f3ca 2a07 	ubfx	sl, sl, #8, #8

			// Write third byte, read 1st byte of next pixel
			writeBits<8+XTRA0>(next_mark, port, hi, lo, b);
			b = pixels.advanceAndLoadAndScale0();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
    2e3c:	b662      	cpsie	i
		while(pixels.has(1)) {
    2e3e:	2c00      	cmp	r4, #0
    2e40:	d041      	beq.n	2ec6 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x2ba>
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    2e42:	46a1      	mov	r9, r4
    2e44:	e738      	b.n	2cb8 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0xac>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2e46:	6819      	ldr	r1, [r3, #0]
    2e48:	1a51      	subs	r1, r2, r1
    2e4a:	2932      	cmp	r1, #50	; 0x32
    2e4c:	f67f af66 	bls.w	2d1c <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x110>
    2e50:	6819      	ldr	r1, [r3, #0]
    2e52:	1a51      	subs	r1, r2, r1
    2e54:	2932      	cmp	r1, #50	; 0x32
    2e56:	d8f6      	bhi.n	2e46 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x23a>
    2e58:	e760      	b.n	2d1c <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x110>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2e5a:	6819      	ldr	r1, [r3, #0]
    2e5c:	1a51      	subs	r1, r2, r1
    2e5e:	2932      	cmp	r1, #50	; 0x32
    2e60:	f67f af73 	bls.w	2d4a <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x13e>
    2e64:	6819      	ldr	r1, [r3, #0]
    2e66:	1a51      	subs	r1, r2, r1
    2e68:	2932      	cmp	r1, #50	; 0x32
    2e6a:	d8f6      	bhi.n	2e5a <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x24e>
    2e6c:	e76d      	b.n	2d4a <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x13e>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2e6e:	6819      	ldr	r1, [r3, #0]
    2e70:	1a51      	subs	r1, r2, r1
    2e72:	2932      	cmp	r1, #50	; 0x32
    2e74:	d987      	bls.n	2d86 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x17a>
    2e76:	6819      	ldr	r1, [r3, #0]
    2e78:	1a51      	subs	r1, r2, r1
    2e7a:	2932      	cmp	r1, #50	; 0x32
    2e7c:	d8f7      	bhi.n	2e6e <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x262>
    2e7e:	e782      	b.n	2d86 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x17a>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2e80:	6819      	ldr	r1, [r3, #0]
    2e82:	1a51      	subs	r1, r2, r1
    2e84:	2932      	cmp	r1, #50	; 0x32
    2e86:	d994      	bls.n	2db2 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x1a6>
    2e88:	6819      	ldr	r1, [r3, #0]
    2e8a:	1a51      	subs	r1, r2, r1
    2e8c:	2932      	cmp	r1, #50	; 0x32
    2e8e:	d8f7      	bhi.n	2e80 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x274>
    2e90:	e78f      	b.n	2db2 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x1a6>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2e92:	6819      	ldr	r1, [r3, #0]
    2e94:	1a51      	subs	r1, r2, r1
    2e96:	2932      	cmp	r1, #50	; 0x32
    2e98:	d9a8      	bls.n	2dec <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x1e0>
    2e9a:	6819      	ldr	r1, [r3, #0]
    2e9c:	1a51      	subs	r1, r2, r1
    2e9e:	2932      	cmp	r1, #50	; 0x32
    2ea0:	d8f7      	bhi.n	2e92 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x286>
    2ea2:	e7a3      	b.n	2dec <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x1e0>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2ea4:	6819      	ldr	r1, [r3, #0]
    2ea6:	1a51      	subs	r1, r2, r1
    2ea8:	2932      	cmp	r1, #50	; 0x32
    2eaa:	d9b5      	bls.n	2e18 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x20c>
    2eac:	6819      	ldr	r1, [r3, #0]
    2eae:	1a51      	subs	r1, r2, r1
    2eb0:	2932      	cmp	r1, #50	; 0x32
    2eb2:	d8f7      	bhi.n	2ea4 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x298>
    2eb4:	e7b0      	b.n	2e18 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x20c>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    2eb6:	468a      	mov	sl, r1
    2eb8:	e788      	b.n	2dcc <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x1c0>
    2eba:	468a      	mov	sl, r1
    2ebc:	e753      	b.n	2d66 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x15a>
    2ebe:	468a      	mov	sl, r1
			sei();
    2ec0:	b662      	cpsie	i
		while(pixels.has(1)) {
    2ec2:	2c00      	cmp	r4, #0
    2ec4:	d1bd      	bne.n	2e42 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x236>
			#endif
		};

		sei();
    2ec6:	b662      	cpsie	i
		return ARM_DWT_CYCCNT;
    2ec8:	4b06      	ldr	r3, [pc, #24]	; (2ee4 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x2d8>)
    2eca:	681b      	ldr	r3, [r3, #0]
		if(!showRGBInternal(pixels)) {
    2ecc:	b1cb      	cbz	r3, 2f02 <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x2f6>
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
    2ece:	f004 f86f 	bl	6fb0 <micros>
    2ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2ed4:	8410      	strh	r0, [r2, #32]
  }
    2ed6:	b00b      	add	sp, #44	; 0x2c
    2ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2edc:	e000edfc 	.word	0xe000edfc
    2ee0:	e0001000 	.word	0xe0001000
    2ee4:	e0001004 	.word	0xe0001004
    2ee8:	400ff040 	.word	0x400ff040
    2eec:	fa83 f35c 	uqadd8	r3, r3, ip
    2ef0:	3201      	adds	r2, #1
    2ef2:	b2db      	uxtb	r3, r3
    2ef4:	fb02 f303 	mul.w	r3, r2, r3
    2ef8:	9206      	str	r2, [sp, #24]
    2efa:	f3c3 2a07 	ubfx	sl, r3, #8, #8
    2efe:	e6cc      	b.n	2c9a <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x8e>
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    2f00:	b662      	cpsie	i
      sei(); delayMicroseconds(WAIT_TIME); cli();
    2f02:	b662      	cpsie	i
#else
		"subs   %0, #1"				"\n\t"
#endif
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
	);
    2f04:	f44f 6396 	mov.w	r3, #1200	; 0x4b0

00002f08 <L_3144_delayMicroseconds>:
    2f08:	3b01      	subs	r3, #1
    2f0a:	f47f affd 	bne.w	2f08 <L_3144_delayMicroseconds>
    2f0e:	b672      	cpsid	i
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    2f10:	4bb2      	ldr	r3, [pc, #712]	; (31dc <L_3144_delayMicroseconds+0x2d4>)
            d[0] = other.d[0];
    2f12:	9e01      	ldr	r6, [sp, #4]
    2f14:	681d      	ldr	r5, [r3, #0]
            e[0] = other.e[0];
    2f16:	f896 900f 	ldrb.w	r9, [r6, #15]
            e[1] = other.e[1];
    2f1a:	f896 a010 	ldrb.w	sl, [r6, #16]
            e[0] = other.e[0];
    2f1e:	f8cd 900c 	str.w	r9, [sp, #12]
            mLenRemaining = mLen = other.mLen;
    2f22:	f8dd 9004 	ldr.w	r9, [sp, #4]
            e[2] = other.e[2];
    2f26:	f896 b011 	ldrb.w	fp, [r6, #17]
    2f2a:	7d31      	ldrb	r1, [r6, #20]
            d[1] = other.d[1];
    2f2c:	7b74      	ldrb	r4, [r6, #13]
            e[1] = other.e[1];
    2f2e:	f8cd a008 	str.w	sl, [sp, #8]
            mData = other.mData;
    2f32:	6837      	ldr	r7, [r6, #0]
            d[0] = other.d[0];
    2f34:	f896 800c 	ldrb.w	r8, [r6, #12]
            d[2] = other.d[2];
    2f38:	f896 e00e 	ldrb.w	lr, [r6, #14]
        r = rhs.r;
    2f3c:	f896 a012 	ldrb.w	sl, [r6, #18]
        g = rhs.g;
    2f40:	7cf2      	ldrb	r2, [r6, #19]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    2f42:	48a7      	ldr	r0, [pc, #668]	; (31e0 <L_3144_delayMicroseconds+0x2d8>)
            mAdvance = other.mAdvance;
    2f44:	7d76      	ldrb	r6, [r6, #21]
            e[2] = other.e[2];
    2f46:	f8cd b010 	str.w	fp, [sp, #16]
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    2f4a:	f045 7580 	orr.w	r5, r5, #16777216	; 0x1000000
        b = rhs.b;
    2f4e:	9106      	str	r1, [sp, #24]
            mAdvance = other.mAdvance;
    2f50:	9605      	str	r6, [sp, #20]
            mLenRemaining = mLen = other.mLen;
    2f52:	f8d9 1004 	ldr.w	r1, [r9, #4]
    2f56:	601d      	str	r5, [r3, #0]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    2f58:	6806      	ldr	r6, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    2f5a:	4da2      	ldr	r5, [pc, #648]	; (31e4 <L_3144_delayMicroseconds+0x2dc>)
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    2f5c:	4ba2      	ldr	r3, [pc, #648]	; (31e8 <L_3144_delayMicroseconds+0x2e0>)
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    2f5e:	f8dd b008 	ldr.w	fp, [sp, #8]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    2f62:	f046 0601 	orr.w	r6, r6, #1
    2f66:	6006      	str	r6, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    2f68:	2000      	movs	r0, #0
    2f6a:	6028      	str	r0, [r5, #0]
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    2f6c:	6818      	ldr	r0, [r3, #0]
		register data_t lo = *port & ~FastPin<DATA_PIN>::mask();;
    2f6e:	6818      	ldr	r0, [r3, #0]
    2f70:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
		*port = lo;
    2f74:	6018      	str	r0, [r3, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    2f76:	787b      	ldrb	r3, [r7, #1]
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    2f78:	ebc4 040b 	rsb	r4, r4, fp
    2f7c:	fa5f fc84 	uxtb.w	ip, r4
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    2f80:	2b00      	cmp	r3, #0
    2f82:	f040 8112 	bne.w	31aa <L_3144_delayMicroseconds+0x2a2>
    2f86:	3201      	adds	r2, #1
    2f88:	9201      	str	r2, [sp, #4]
    2f8a:	4699      	mov	r9, r3
		cli();
    2f8c:	b672      	cpsid	i
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2f8e:	4b95      	ldr	r3, [pc, #596]	; (31e4 <L_3144_delayMicroseconds+0x2dc>)
    2f90:	681a      	ldr	r2, [r3, #0]
		while(pixels.has(1)) {
    2f92:	2900      	cmp	r1, #0
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2f94:	f102 0258 	add.w	r2, r2, #88	; 0x58
		while(pixels.has(1)) {
    2f98:	f340 8119 	ble.w	31ce <L_3144_delayMicroseconds+0x2c6>
    2f9c:	f10a 0a01 	add.w	sl, sl, #1
			hi = *port | FastPin<DATA_PIN>::mask();
    2fa0:	4891      	ldr	r0, [pc, #580]	; (31e8 <L_3144_delayMicroseconds+0x2e0>)
    2fa2:	f8cd a01c 	str.w	sl, [sp, #28]
		while(pixels.has(1)) {
    2fa6:	468b      	mov	fp, r1
			while(ARM_DWT_CYCCNT < next_mark);
    2fa8:	461d      	mov	r5, r3
                d[0] = e[0] - d[0];
    2faa:	9903      	ldr	r1, [sp, #12]
                d[1] = e[1] - d[1];
    2fac:	9c02      	ldr	r4, [sp, #8]
                d[2] = e[2] - d[2];
    2fae:	9e04      	ldr	r6, [sp, #16]
                d[0] = e[0] - d[0];
    2fb0:	ebc8 0801 	rsb	r8, r8, r1
                d[1] = e[1] - d[1];
    2fb4:	ebcc 0c04 	rsb	ip, ip, r4
                d[2] = e[2] - d[2];
    2fb8:	ebce 0e06 	rsb	lr, lr, r6
                d[0] = e[0] - d[0];
    2fbc:	fa5f f888 	uxtb.w	r8, r8
                d[1] = e[1] - d[1];
    2fc0:	fa5f fc8c 	uxtb.w	ip, ip
                d[2] = e[2] - d[2];
    2fc4:	fa5f fe8e 	uxtb.w	lr, lr
			cli();
    2fc8:	b672      	cpsid	i
			if(ARM_DWT_CYCCNT > next_mark) {
    2fca:	6819      	ldr	r1, [r3, #0]
    2fcc:	4291      	cmp	r1, r2
    2fce:	d906      	bls.n	2fde <L_3144_delayMicroseconds+0xd6>
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    2fd0:	6819      	ldr	r1, [r3, #0]
    2fd2:	f640 5ac8 	movw	sl, #3528	; 0xdc8
    2fd6:	1a89      	subs	r1, r1, r2
    2fd8:	4551      	cmp	r1, sl
    2fda:	f200 80fc 	bhi.w	31d6 <L_3144_delayMicroseconds+0x2ce>
			hi = *port | FastPin<DATA_PIN>::mask();
    2fde:	6804      	ldr	r4, [r0, #0]
			lo = *port & ~FastPin<DATA_PIN>::mask();
    2fe0:	6806      	ldr	r6, [r0, #0]
			hi = *port | FastPin<DATA_PIN>::mask();
    2fe2:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
			lo = *port & ~FastPin<DATA_PIN>::mask();
    2fe6:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
    2fea:	f04f 0a07 	mov.w	sl, #7
			while(ARM_DWT_CYCCNT < next_mark);
    2fee:	6819      	ldr	r1, [r3, #0]
    2ff0:	4291      	cmp	r1, r2
    2ff2:	d3fc      	bcc.n	2fee <L_3144_delayMicroseconds+0xe6>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2ff4:	682a      	ldr	r2, [r5, #0]
    2ff6:	6004      	str	r4, [r0, #0]
			if(b&0x80) {
    2ff8:	f019 0f80 	tst.w	r9, #128	; 0x80
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2ffc:	f102 0258 	add.w	r2, r2, #88	; 0x58
			if(b&0x80) {
    3000:	f040 809b 	bne.w	313a <L_3144_delayMicroseconds+0x232>
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    3004:	6819      	ldr	r1, [r3, #0]
    3006:	1a51      	subs	r1, r2, r1
    3008:	2948      	cmp	r1, #72	; 0x48
    300a:	d8fb      	bhi.n	3004 <L_3144_delayMicroseconds+0xfc>
			b <<= 1;
    300c:	ea4f 0949 	mov.w	r9, r9, lsl #1
		for(register uint32_t i = BITS-1; i > 0; i--) {
    3010:	f1ba 0a01 	subs.w	sl, sl, #1
    3014:	6006      	str	r6, [r0, #0]
			b <<= 1;
    3016:	fa5f f989 	uxtb.w	r9, r9
		for(register uint32_t i = BITS-1; i > 0; i--) {
    301a:	d1e8      	bne.n	2fee <L_3144_delayMicroseconds+0xe6>
		while(ARM_DWT_CYCCNT < next_mark);
    301c:	6819      	ldr	r1, [r3, #0]
    301e:	4291      	cmp	r1, r2
    3020:	d3fc      	bcc.n	301c <L_3144_delayMicroseconds+0x114>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3022:	682a      	ldr	r2, [r5, #0]
    3024:	6004      	str	r4, [r0, #0]
		if(b&0x80) {
    3026:	f019 0f80 	tst.w	r9, #128	; 0x80
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    302a:	f102 0258 	add.w	r2, r2, #88	; 0x58
		if(b&0x80) {
    302e:	f040 808e 	bne.w	314e <L_3144_delayMicroseconds+0x246>
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    3032:	6819      	ldr	r1, [r3, #0]
    3034:	1a51      	subs	r1, r2, r1
    3036:	2948      	cmp	r1, #72	; 0x48
    3038:	d8fb      	bhi.n	3032 <L_3144_delayMicroseconds+0x12a>
    303a:	6006      	str	r6, [r0, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    303c:	7839      	ldrb	r1, [r7, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    303e:	2900      	cmp	r1, #0
    3040:	f000 80bf 	beq.w	31c2 <L_3144_delayMicroseconds+0x2ba>
    3044:	fa81 f158 	uqadd8	r1, r1, r8
    3048:	f8dd a01c 	ldr.w	sl, [sp, #28]
    304c:	b2c9      	uxtb	r1, r1
    304e:	fb0a f901 	mul.w	r9, sl, r1
    3052:	f3c9 2907 	ubfx	r9, r9, #8, #8
    3056:	f04f 0a07 	mov.w	sl, #7
			while(ARM_DWT_CYCCNT < next_mark);
    305a:	6819      	ldr	r1, [r3, #0]
    305c:	4291      	cmp	r1, r2
    305e:	d3fc      	bcc.n	305a <L_3144_delayMicroseconds+0x152>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3060:	682a      	ldr	r2, [r5, #0]
    3062:	6004      	str	r4, [r0, #0]
			if(b&0x80) {
    3064:	f019 0f80 	tst.w	r9, #128	; 0x80
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3068:	f102 0258 	add.w	r2, r2, #88	; 0x58
			if(b&0x80) {
    306c:	d179      	bne.n	3162 <L_3144_delayMicroseconds+0x25a>
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    306e:	6819      	ldr	r1, [r3, #0]
    3070:	1a51      	subs	r1, r2, r1
    3072:	2948      	cmp	r1, #72	; 0x48
    3074:	d8fb      	bhi.n	306e <L_3144_delayMicroseconds+0x166>
			b <<= 1;
    3076:	ea4f 0949 	mov.w	r9, r9, lsl #1
		for(register uint32_t i = BITS-1; i > 0; i--) {
    307a:	f1ba 0a01 	subs.w	sl, sl, #1
    307e:	6006      	str	r6, [r0, #0]
			b <<= 1;
    3080:	fa5f f989 	uxtb.w	r9, r9
		for(register uint32_t i = BITS-1; i > 0; i--) {
    3084:	d1e9      	bne.n	305a <L_3144_delayMicroseconds+0x152>
		while(ARM_DWT_CYCCNT < next_mark);
    3086:	6819      	ldr	r1, [r3, #0]
    3088:	4291      	cmp	r1, r2
    308a:	d3fc      	bcc.n	3086 <L_3144_delayMicroseconds+0x17e>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    308c:	682a      	ldr	r2, [r5, #0]
    308e:	6004      	str	r4, [r0, #0]
		if(b&0x80) {
    3090:	f019 0f80 	tst.w	r9, #128	; 0x80
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3094:	f102 0258 	add.w	r2, r2, #88	; 0x58
		if(b&0x80) {
    3098:	d16c      	bne.n	3174 <L_3144_delayMicroseconds+0x26c>
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    309a:	6819      	ldr	r1, [r3, #0]
    309c:	1a51      	subs	r1, r2, r1
    309e:	2948      	cmp	r1, #72	; 0x48
    30a0:	d8fb      	bhi.n	309a <L_3144_delayMicroseconds+0x192>
    30a2:	6006      	str	r6, [r0, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    30a4:	78b9      	ldrb	r1, [r7, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    30a6:	2900      	cmp	r1, #0
    30a8:	f000 8089 	beq.w	31be <L_3144_delayMicroseconds+0x2b6>
    30ac:	fa81 f15e 	uqadd8	r1, r1, lr
    30b0:	f8dd 9018 	ldr.w	r9, [sp, #24]
    30b4:	b2c9      	uxtb	r1, r1
    30b6:	fb09 1101 	mla	r1, r9, r1, r1
    30ba:	f3c1 2907 	ubfx	r9, r1, #8, #8
    30be:	f04f 0a07 	mov.w	sl, #7
			while(ARM_DWT_CYCCNT < next_mark);
    30c2:	6819      	ldr	r1, [r3, #0]
    30c4:	4291      	cmp	r1, r2
    30c6:	d3fc      	bcc.n	30c2 <L_3144_delayMicroseconds+0x1ba>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    30c8:	682a      	ldr	r2, [r5, #0]
    30ca:	6004      	str	r4, [r0, #0]
			if(b&0x80) {
    30cc:	f019 0f80 	tst.w	r9, #128	; 0x80
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    30d0:	f102 0258 	add.w	r2, r2, #88	; 0x58
			if(b&0x80) {
    30d4:	d157      	bne.n	3186 <L_3144_delayMicroseconds+0x27e>
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    30d6:	6819      	ldr	r1, [r3, #0]
    30d8:	1a51      	subs	r1, r2, r1
    30da:	2948      	cmp	r1, #72	; 0x48
    30dc:	d8fb      	bhi.n	30d6 <L_3144_delayMicroseconds+0x1ce>
			b <<= 1;
    30de:	ea4f 0949 	mov.w	r9, r9, lsl #1
		for(register uint32_t i = BITS-1; i > 0; i--) {
    30e2:	f1ba 0a01 	subs.w	sl, sl, #1
    30e6:	6006      	str	r6, [r0, #0]
			b <<= 1;
    30e8:	fa5f f989 	uxtb.w	r9, r9
		for(register uint32_t i = BITS-1; i > 0; i--) {
    30ec:	d1e9      	bne.n	30c2 <L_3144_delayMicroseconds+0x1ba>
		while(ARM_DWT_CYCCNT < next_mark);
    30ee:	6819      	ldr	r1, [r3, #0]
    30f0:	4291      	cmp	r1, r2
    30f2:	d3fc      	bcc.n	30ee <L_3144_delayMicroseconds+0x1e6>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    30f4:	682a      	ldr	r2, [r5, #0]
    30f6:	6004      	str	r4, [r0, #0]
		if(b&0x80) {
    30f8:	f019 0f80 	tst.w	r9, #128	; 0x80
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    30fc:	f102 0258 	add.w	r2, r2, #88	; 0x58
		if(b&0x80) {
    3100:	d14a      	bne.n	3198 <L_3144_delayMicroseconds+0x290>
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    3102:	6819      	ldr	r1, [r3, #0]
    3104:	1a51      	subs	r1, r2, r1
    3106:	2948      	cmp	r1, #72	; 0x48
    3108:	d8fb      	bhi.n	3102 <L_3144_delayMicroseconds+0x1fa>
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    310a:	f8dd a014 	ldr.w	sl, [sp, #20]
    310e:	6006      	str	r6, [r0, #0]
    3110:	fa47 f78a 	sxtab	r7, r7, sl
    3114:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    3118:	787c      	ldrb	r4, [r7, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    311a:	2c00      	cmp	r4, #0
    311c:	d053      	beq.n	31c6 <L_3144_delayMicroseconds+0x2be>
    311e:	fa84 f45c 	uqadd8	r4, r4, ip
    3122:	f8dd b004 	ldr.w	fp, [sp, #4]
    3126:	b2e4      	uxtb	r4, r4
    3128:	fb0b f904 	mul.w	r9, fp, r4
    312c:	f3c9 2907 	ubfx	r9, r9, #8, #8
			sei();
    3130:	b662      	cpsie	i
		while(pixels.has(1)) {
    3132:	2900      	cmp	r1, #0
    3134:	d04b      	beq.n	31ce <L_3144_delayMicroseconds+0x2c6>
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    3136:	468b      	mov	fp, r1
    3138:	e737      	b.n	2faa <L_3144_delayMicroseconds+0xa2>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    313a:	6819      	ldr	r1, [r3, #0]
    313c:	1a51      	subs	r1, r2, r1
    313e:	2932      	cmp	r1, #50	; 0x32
    3140:	f67f af64 	bls.w	300c <L_3144_delayMicroseconds+0x104>
    3144:	6819      	ldr	r1, [r3, #0]
    3146:	1a51      	subs	r1, r2, r1
    3148:	2932      	cmp	r1, #50	; 0x32
    314a:	d8f6      	bhi.n	313a <L_3144_delayMicroseconds+0x232>
    314c:	e75e      	b.n	300c <L_3144_delayMicroseconds+0x104>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    314e:	6819      	ldr	r1, [r3, #0]
    3150:	1a51      	subs	r1, r2, r1
    3152:	2932      	cmp	r1, #50	; 0x32
    3154:	f67f af71 	bls.w	303a <L_3144_delayMicroseconds+0x132>
    3158:	6819      	ldr	r1, [r3, #0]
    315a:	1a51      	subs	r1, r2, r1
    315c:	2932      	cmp	r1, #50	; 0x32
    315e:	d8f6      	bhi.n	314e <L_3144_delayMicroseconds+0x246>
    3160:	e76b      	b.n	303a <L_3144_delayMicroseconds+0x132>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    3162:	6819      	ldr	r1, [r3, #0]
    3164:	1a51      	subs	r1, r2, r1
    3166:	2932      	cmp	r1, #50	; 0x32
    3168:	d985      	bls.n	3076 <L_3144_delayMicroseconds+0x16e>
    316a:	6819      	ldr	r1, [r3, #0]
    316c:	1a51      	subs	r1, r2, r1
    316e:	2932      	cmp	r1, #50	; 0x32
    3170:	d8f7      	bhi.n	3162 <L_3144_delayMicroseconds+0x25a>
    3172:	e780      	b.n	3076 <L_3144_delayMicroseconds+0x16e>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    3174:	6819      	ldr	r1, [r3, #0]
    3176:	1a51      	subs	r1, r2, r1
    3178:	2932      	cmp	r1, #50	; 0x32
    317a:	d992      	bls.n	30a2 <L_3144_delayMicroseconds+0x19a>
    317c:	6819      	ldr	r1, [r3, #0]
    317e:	1a51      	subs	r1, r2, r1
    3180:	2932      	cmp	r1, #50	; 0x32
    3182:	d8f7      	bhi.n	3174 <L_3144_delayMicroseconds+0x26c>
    3184:	e78d      	b.n	30a2 <L_3144_delayMicroseconds+0x19a>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    3186:	6819      	ldr	r1, [r3, #0]
    3188:	1a51      	subs	r1, r2, r1
    318a:	2932      	cmp	r1, #50	; 0x32
    318c:	d9a7      	bls.n	30de <L_3144_delayMicroseconds+0x1d6>
    318e:	6819      	ldr	r1, [r3, #0]
    3190:	1a51      	subs	r1, r2, r1
    3192:	2932      	cmp	r1, #50	; 0x32
    3194:	d8f7      	bhi.n	3186 <L_3144_delayMicroseconds+0x27e>
    3196:	e7a2      	b.n	30de <L_3144_delayMicroseconds+0x1d6>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    3198:	6819      	ldr	r1, [r3, #0]
    319a:	1a51      	subs	r1, r2, r1
    319c:	2932      	cmp	r1, #50	; 0x32
    319e:	d9b4      	bls.n	310a <L_3144_delayMicroseconds+0x202>
    31a0:	6819      	ldr	r1, [r3, #0]
    31a2:	1a51      	subs	r1, r2, r1
    31a4:	2932      	cmp	r1, #50	; 0x32
    31a6:	d8f7      	bhi.n	3198 <L_3144_delayMicroseconds+0x290>
    31a8:	e7af      	b.n	310a <L_3144_delayMicroseconds+0x202>
    31aa:	fa83 f35c 	uqadd8	r3, r3, ip
    31ae:	3201      	adds	r2, #1
    31b0:	b2db      	uxtb	r3, r3
    31b2:	fb02 f303 	mul.w	r3, r2, r3
    31b6:	9201      	str	r2, [sp, #4]
    31b8:	f3c3 2907 	ubfx	r9, r3, #8, #8
    31bc:	e6e6      	b.n	2f8c <L_3144_delayMicroseconds+0x84>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    31be:	4689      	mov	r9, r1
    31c0:	e77d      	b.n	30be <L_3144_delayMicroseconds+0x1b6>
    31c2:	4689      	mov	r9, r1
    31c4:	e747      	b.n	3056 <L_3144_delayMicroseconds+0x14e>
    31c6:	46a1      	mov	r9, r4
			sei();
    31c8:	b662      	cpsie	i
		while(pixels.has(1)) {
    31ca:	2900      	cmp	r1, #0
    31cc:	d1b3      	bne.n	3136 <L_3144_delayMicroseconds+0x22e>
		sei();
    31ce:	b662      	cpsie	i
		return ARM_DWT_CYCCNT;
    31d0:	4b04      	ldr	r3, [pc, #16]	; (31e4 <L_3144_delayMicroseconds+0x2dc>)
    31d2:	681b      	ldr	r3, [r3, #0]
    31d4:	e67b      	b.n	2ece <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x2c2>
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    31d6:	b662      	cpsie	i
    31d8:	e679      	b.n	2ece <_ZN19ClocklessControllerILi32ELi22ELi22ELi44EL6EOrder66ELi0ELb0ELi50EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x2c2>
    31da:	bf00      	nop
    31dc:	e000edfc 	.word	0xe000edfc
    31e0:	e0001000 	.word	0xe0001000
    31e4:	e0001004 	.word	0xe0001004
    31e8:	400ff040 	.word	0x400ff040

000031ec <_ZN11TouchSensor14updateBaselineEv>:

    TouchSensor(int pin) : pin(pin)  {
      _threshold = 50;
      _cnt = 0;
    }
    void updateBaseline() {
    31ec:	b570      	push	{r4, r5, r6, lr}
        if(_baselineIndex >= NUM_SAMPLES) { _baselineIndex = 0; }
    31ee:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
        if(_cnt < NUM_SAMPLES) { _cnt++; }
    31f0:	6843      	ldr	r3, [r0, #4]
        if(_baselineIndex >= NUM_SAMPLES) { _baselineIndex = 0; }
    31f2:	2c0f      	cmp	r4, #15
    31f4:	bfc4      	itt	gt
    31f6:	2400      	movgt	r4, #0
    31f8:	64c4      	strgt	r4, [r0, #76]	; 0x4c
        if(_cnt < NUM_SAMPLES) { _cnt++; }
    31fa:	2b0f      	cmp	r3, #15
    void updateBaseline() {
    31fc:	4605      	mov	r5, r0
        if(_cnt < NUM_SAMPLES) { _cnt++; }
    31fe:	bfdc      	itt	le
    3200:	3301      	addle	r3, #1
    3202:	6043      	strle	r3, [r0, #4]
        return _threshold;
    }

    int TSIRead(int8_t pin)
    {
      return touchRead(pin);
    3204:	7800      	ldrb	r0, [r0, #0]
    3206:	f005 f9a1 	bl	854c <touchRead>
        _baselineIndex++;
    320a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
        for(int i = 0; i < _cnt; i++) {
    320c:	686e      	ldr	r6, [r5, #4]
        _baselineValues[_baselineIndex] = TSIRead(pin);
    320e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
        _baselineIndex++;
    3212:	3301      	adds	r3, #1
        for(int i = 0; i < _cnt; i++) {
    3214:	2e00      	cmp	r6, #0
        _baselineValues[_baselineIndex] = TSIRead(pin);
    3216:	60e0      	str	r0, [r4, #12]
        _baselineIndex++;
    3218:	64eb      	str	r3, [r5, #76]	; 0x4c
        for(int i = 0; i < _cnt; i++) {
    321a:	dd0c      	ble.n	3236 <_ZN11TouchSensor14updateBaselineEv+0x4a>
    321c:	462b      	mov	r3, r5
    321e:	eb05 0486 	add.w	r4, r5, r6, lsl #2
        int sum = 0;
    3222:	2200      	movs	r2, #0
          sum += _baselineValues[i];
    3224:	68d9      	ldr	r1, [r3, #12]
    3226:	3304      	adds	r3, #4
        for(int i = 0; i < _cnt; i++) {
    3228:	42a3      	cmp	r3, r4
          sum += _baselineValues[i];
    322a:	440a      	add	r2, r1
        for(int i = 0; i < _cnt; i++) {
    322c:	d1fa      	bne.n	3224 <_ZN11TouchSensor14updateBaselineEv+0x38>
        _baseline = sum / _cnt;
    322e:	fb92 f2f6 	sdiv	r2, r2, r6
    3232:	60aa      	str	r2, [r5, #8]
    3234:	bd70      	pop	{r4, r5, r6, pc}
        int sum = 0;
    3236:	2200      	movs	r2, #0
    3238:	e7f9      	b.n	322e <_ZN11TouchSensor14updateBaselineEv+0x42>
    323a:	bf00      	nop

0000323c <_Z13muxAnalogReadh>:
int muxAnalogRead(uint8_t channel) { 
  // Any call to pinMode sets the port mux to GPIO mode.
  // We want to force it back to analog mode
  // Might be equivalent to pinMode(MUX_IO, INPUT_DISABLE);
  volatile uint32_t *config;
  config = portConfigRegister(MUX_IO);
    323c:	4b0f      	ldr	r3, [pc, #60]	; (327c <L_4771_delayMicroseconds+0xc>)
    323e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
		if (val) {
    3242:	07c1      	lsls	r1, r0, #31
  *config = PORT_PCR_MUX(0);
    3244:	f04f 0200 	mov.w	r2, #0
    3248:	601a      	str	r2, [r3, #0]
				CORE_PIN33_PORTSET = CORE_PIN33_BITMASK;
    324a:	bf4c      	ite	mi
    324c:	4b0c      	ldrmi	r3, [pc, #48]	; (3280 <L_4771_delayMicroseconds+0x10>)
				CORE_PIN33_PORTCLEAR = CORE_PIN33_BITMASK;
    324e:	4b0d      	ldrpl	r3, [pc, #52]	; (3284 <L_4771_delayMicroseconds+0x14>)
    3250:	2210      	movs	r2, #16
    3252:	601a      	str	r2, [r3, #0]
		if (val) {
    3254:	0782      	lsls	r2, r0, #30
				CORE_PIN24_PORTSET = CORE_PIN24_BITMASK;
    3256:	bf4c      	ite	mi
    3258:	4b09      	ldrmi	r3, [pc, #36]	; (3280 <L_4771_delayMicroseconds+0x10>)
				CORE_PIN24_PORTCLEAR = CORE_PIN24_BITMASK;
    325a:	4b0a      	ldrpl	r3, [pc, #40]	; (3284 <L_4771_delayMicroseconds+0x14>)
    325c:	2220      	movs	r2, #32
    325e:	601a      	str	r2, [r3, #0]
		if (val) {
    3260:	0743      	lsls	r3, r0, #29
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    3262:	bf4c      	ite	mi
    3264:	4b06      	ldrmi	r3, [pc, #24]	; (3280 <L_4771_delayMicroseconds+0x10>)
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    3266:	4b07      	ldrpl	r3, [pc, #28]	; (3284 <L_4771_delayMicroseconds+0x14>)
    3268:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    326c:	601a      	str	r2, [r3, #0]
	);
    326e:	2378      	movs	r3, #120	; 0x78

00003270 <L_4771_delayMicroseconds>:
    3270:	3b01      	subs	r3, #1
    3272:	f47f affd 	bne.w	3270 <L_4771_delayMicroseconds>
  digitalWriteFast(SYN_ADDR0, bitRead(channel,0));
  digitalWriteFast(SYN_ADDR1, bitRead(channel,1));
  digitalWriteFast(SYN_ADDR2, bitRead(channel,2));
  //do we need to wait a few nanoseconds?
  delayMicroseconds(5);
  return analogRead(MUX_IO);
    3276:	201d      	movs	r0, #29
    3278:	f003 bbde 	b.w	6a38 <analogRead>
    327c:	00011b14 	.word	0x00011b14
    3280:	400ff004 	.word	0x400ff004
    3284:	400ff008 	.word	0x400ff008

00003288 <_Z14muxDigitalReadh>:
}

uint8_t muxDigitalRead(uint8_t channel) { 
    3288:	b510      	push	{r4, lr}
  pinMode(MUX_IO, INPUT_PULLUP);
    328a:	2102      	movs	r1, #2
uint8_t muxDigitalRead(uint8_t channel) { 
    328c:	4604      	mov	r4, r0
  pinMode(MUX_IO, INPUT_PULLUP);
    328e:	201d      	movs	r0, #29
    3290:	f003 fe88 	bl	6fa4 <pinMode>
		if (val) {
    3294:	07e1      	lsls	r1, r4, #31
				CORE_PIN33_PORTSET = CORE_PIN33_BITMASK;
    3296:	bf4c      	ite	mi
    3298:	4b0c      	ldrmi	r3, [pc, #48]	; (32cc <L_4859_delayMicroseconds+0x10>)
				CORE_PIN33_PORTCLEAR = CORE_PIN33_BITMASK;
    329a:	4b0d      	ldrpl	r3, [pc, #52]	; (32d0 <L_4859_delayMicroseconds+0x14>)
    329c:	2210      	movs	r2, #16
    329e:	601a      	str	r2, [r3, #0]
		if (val) {
    32a0:	07a2      	lsls	r2, r4, #30
				CORE_PIN24_PORTSET = CORE_PIN24_BITMASK;
    32a2:	bf4c      	ite	mi
    32a4:	4b09      	ldrmi	r3, [pc, #36]	; (32cc <L_4859_delayMicroseconds+0x10>)
				CORE_PIN24_PORTCLEAR = CORE_PIN24_BITMASK;
    32a6:	4b0a      	ldrpl	r3, [pc, #40]	; (32d0 <L_4859_delayMicroseconds+0x14>)
    32a8:	2220      	movs	r2, #32
    32aa:	601a      	str	r2, [r3, #0]
		if (val) {
    32ac:	0763      	lsls	r3, r4, #29
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    32ae:	bf4c      	ite	mi
    32b0:	4b06      	ldrmi	r3, [pc, #24]	; (32cc <L_4859_delayMicroseconds+0x10>)
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    32b2:	4b07      	ldrpl	r3, [pc, #28]	; (32d0 <L_4859_delayMicroseconds+0x14>)
    32b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    32b8:	601a      	str	r2, [r3, #0]
	);
    32ba:	23f0      	movs	r3, #240	; 0xf0

000032bc <L_4859_delayMicroseconds>:
    32bc:	3b01      	subs	r3, #1
    32be:	f47f affd 	bne.w	32bc <L_4859_delayMicroseconds>
  digitalWriteFast(SYN_ADDR0, bitRead(channel,0));
  digitalWriteFast(SYN_ADDR1, bitRead(channel,1));
  digitalWriteFast(SYN_ADDR2, bitRead(channel,2));
  delayMicroseconds(10);
  //Wait a few microseconds for the selection to propagate. 
  uint8_t p = digitalRead(MUX_IO);
    32c2:	201d      	movs	r0, #29
  return p;
}
    32c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  uint8_t p = digitalRead(MUX_IO);
    32c8:	f003 be5e 	b.w	6f88 <digitalRead>
    32cc:	400ff004 	.word	0x400ff004
    32d0:	400ff008 	.word	0x400ff008

000032d4 <_Z9pins_initv>:

void pins_init() {
    32d4:	b508      	push	{r3, lr}
  // PROG pin is unused but connected to reset via a resistor. Make output to be sure.
  pinMode(PROG, INPUT);
    32d6:	201f      	movs	r0, #31
    32d8:	2100      	movs	r1, #0
    32da:	f003 fe63 	bl	6fa4 <pinMode>

  pinMode(BITC_PIN, INPUT_PULLUP);
    32de:	201e      	movs	r0, #30
    32e0:	2102      	movs	r1, #2
    32e2:	f003 fe5f 	bl	6fa4 <pinMode>
  pinMode(ACCENT_PIN, INPUT_PULLUP);
    32e6:	2008      	movs	r0, #8
    32e8:	2102      	movs	r1, #2
    32ea:	f003 fe5b 	bl	6fa4 <pinMode>

  pinMode(SYNC_OUT_PIN, OUTPUT);
    32ee:	2007      	movs	r0, #7
    32f0:	2101      	movs	r1, #1
    32f2:	f003 fe57 	bl	6fa4 <pinMode>
  // pinMode(AMP_ENABLE, OUTPUT);
  pinMode(HP_ENABLE, OUTPUT);
    32f6:	2004      	movs	r0, #4
    32f8:	2101      	movs	r1, #1
    32fa:	f003 fe53 	bl	6fa4 <pinMode>
  pinMode(SYNC_IN, INPUT);
    32fe:	200e      	movs	r0, #14
    3300:	2100      	movs	r1, #0
    3302:	f003 fe4f 	bl	6fa4 <pinMode>

  pinMode(JACK_DETECT, INPUT);
    3306:	201a      	movs	r0, #26
    3308:	2100      	movs	r1, #0
    330a:	f003 fe4b 	bl	6fa4 <pinMode>
  pinMode(SYNC_DETECT, INPUT);
    330e:	2002      	movs	r0, #2
    3310:	2100      	movs	r1, #0
    3312:	f003 fe47 	bl	6fa4 <pinMode>

  pinMode(SYN_ADDR0, OUTPUT);
    3316:	2021      	movs	r0, #33	; 0x21
    3318:	2101      	movs	r1, #1
    331a:	f003 fe43 	bl	6fa4 <pinMode>
  pinMode(SYN_ADDR1, OUTPUT);
    331e:	2018      	movs	r0, #24
    3320:	2101      	movs	r1, #1
    3322:	f003 fe3f 	bl	6fa4 <pinMode>
  pinMode(SYN_ADDR2, OUTPUT);
    3326:	2003      	movs	r0, #3
    3328:	2101      	movs	r1, #1
    332a:	f003 fe3b 	bl	6fa4 <pinMode>

  randomSeed(analogRead(UNCONNECTED_ANALOG));
    332e:	200d      	movs	r0, #13
    3330:	f003 fb82 	bl	6a38 <analogRead>
    3334:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  randomSeed(analogRead(UNCONNECTED_ANALOG));
    3338:	f006 be9e 	b.w	a078 <_Z10randomSeedm>

0000333c <_Z9midi_initv>:
void midi_init() {
    333c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mSerial.begin(Settings::BaudRate);
    333e:	4c18      	ldr	r4, [pc, #96]	; (33a0 <_Z9midi_initv+0x64>)
        };
        inline void setHandleNoteOff(void (*fptr)(uint8_t channel, uint8_t note, uint8_t velocity)) {
                usb_midi_handleNoteOff = fptr;
        };
        inline void setHandleNoteOn(void (*fptr)(uint8_t channel, uint8_t note, uint8_t velocity)) {
                usb_midi_handleNoteOn = fptr;
    3340:	4e18      	ldr	r6, [pc, #96]	; (33a4 <_Z9midi_initv+0x68>)
    3342:	6ca0      	ldr	r0, [r4, #72]	; 0x48
                usb_midi_handleNoteOff = fptr;
    3344:	4d18      	ldr	r5, [pc, #96]	; (33a8 <_Z9midi_initv+0x6c>)
    3346:	6803      	ldr	r3, [r0, #0]
template<class SerialPort, class Settings> void MidiInterface<SerialPort, Settings>::setHandleSystemExclusive(void (*fptr)(byte* array, unsigned size))              { mSystemExclusiveCallback      = fptr; }
template<class SerialPort, class Settings> void MidiInterface<SerialPort, Settings>::setHandleTimeCodeQuarterFrame(void (*fptr)(byte data))                          { mTimeCodeQuarterFrameCallback = fptr; }
template<class SerialPort, class Settings> void MidiInterface<SerialPort, Settings>::setHandleSongPosition(void (*fptr)(unsigned beats))                             { mSongPositionCallback         = fptr; }
template<class SerialPort, class Settings> void MidiInterface<SerialPort, Settings>::setHandleSongSelect(void (*fptr)(byte songnumber))                              { mSongSelectCallback           = fptr; }
template<class SerialPort, class Settings> void MidiInterface<SerialPort, Settings>::setHandleTuneRequest(void (*fptr)(void))                                        { mTuneRequestCallback          = fptr; }
template<class SerialPort, class Settings> void MidiInterface<SerialPort, Settings>::setHandleClock(void (*fptr)(void))                                              { mClockCallback                = fptr; }
    3348:	4f18      	ldr	r7, [pc, #96]	; (33ac <_Z9midi_initv+0x70>)
    mSerial.begin(Settings::BaudRate);
    334a:	699b      	ldr	r3, [r3, #24]
    334c:	f647 2112 	movw	r1, #31250	; 0x7a12
    3350:	4798      	blx	r3
    mInputChannel = inChannel;
    3352:	2301      	movs	r3, #1
    mThruActivated  = true;
    3354:	fa03 fc03 	lsl.w	ip, r3, r3
    3358:	ea4c 0c03 	orr.w	ip, ip, r3
    mInputChannel = inChannel;
    335c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    mRunningStatus_TX = InvalidType;
    3360:	2300      	movs	r3, #0
template<class SerialPort, class Settings> void MidiInterface<SerialPort, Settings>::setHandleNoteOn(void (*fptr)(byte channel, byte note, byte velocity))           { mNoteOnCallback               = fptr; }
    3362:	4913      	ldr	r1, [pc, #76]	; (33b0 <_Z9midi_initv+0x74>)
template<class SerialPort, class Settings> void MidiInterface<SerialPort, Settings>::setHandleNoteOff(void (*fptr)(byte channel, byte note, byte velocity))          { mNoteOffCallback              = fptr; }
    3364:	4a13      	ldr	r2, [pc, #76]	; (33b4 <_Z9midi_initv+0x78>)
    mThruActivated  = true;
    3366:	f884 c064 	strb.w	ip, [r4, #100]	; 0x64
    mCurrentRpnNumber  = 0xffff;
    336a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    mRunningStatus_TX = InvalidType;
    336e:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
    mRunningStatus_RX = InvalidType;
    3372:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    mMessage.channel = 0;
    3376:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    mMessage.data1   = 0;
    337a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
    mMessage.data2   = 0;
    337e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
template<class SerialPort, class Settings> void MidiInterface<SerialPort, Settings>::setHandleClock(void (*fptr)(void))                                              { mClockCallback                = fptr; }
    3382:	6327      	str	r7, [r4, #48]	; 0x30
    mPendingMessageIndex = 0;
    3384:	65a3      	str	r3, [r4, #88]	; 0x58
    mPendingMessageExpectedLenght = 0;
    3386:	6563      	str	r3, [r4, #84]	; 0x54
    mMessage.valid   = false;
    3388:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
    mMessage.type    = InvalidType;
    338c:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    mCurrentRpnNumber  = 0xffff;
    3390:	65e0      	str	r0, [r4, #92]	; 0x5c
    mCurrentNrpnNumber = 0xffff;
    3392:	6620      	str	r0, [r4, #96]	; 0x60
template<class SerialPort, class Settings> void MidiInterface<SerialPort, Settings>::setHandleNoteOn(void (*fptr)(byte channel, byte note, byte velocity))           { mNoteOnCallback               = fptr; }
    3394:	6061      	str	r1, [r4, #4]
template<class SerialPort, class Settings> void MidiInterface<SerialPort, Settings>::setHandleNoteOff(void (*fptr)(byte channel, byte note, byte velocity))          { mNoteOffCallback              = fptr; }
    3396:	6022      	str	r2, [r4, #0]
                usb_midi_handleNoteOn = fptr;
    3398:	6031      	str	r1, [r6, #0]
                usb_midi_handleNoteOff = fptr;
    339a:	602a      	str	r2, [r5, #0]
    339c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    339e:	bf00      	nop
    33a0:	2000209c 	.word	0x2000209c
    33a4:	200026c8 	.word	0x200026c8
    33a8:	20002698 	.word	0x20002698
    33ac:	000027a5 	.word	0x000027a5
    33b0:	00002831 	.word	0x00002831
    33b4:	00002841 	.word	0x00002841

000033b8 <_Z18button_matrix_initv>:
Keypad button_matrix = Keypad( makeKeymap(buttons), row_pins, col_pins, ROWS, COLS );

void button_matrix_init();
bool keys_scan_powerbutton();

void button_matrix_init() {
    33b8:	b510      	push	{r4, lr}
    button_matrix.setDebounceTime(15);
    33ba:	4c06      	ldr	r4, [pc, #24]	; (33d4 <_Z18button_matrix_initv+0x1c>)
    33bc:	210f      	movs	r1, #15
    33be:	4620      	mov	r0, r4
    33c0:	f008 f8c2 	bl	b548 <_ZN6Keypad15setDebounceTimeEj>
    button_matrix.setHoldTime(2000);
    33c4:	4620      	mov	r0, r4
    33c6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
}
    33ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    button_matrix.setHoldTime(2000);
    33ce:	f008 b8c3 	b.w	b558 <_ZN6Keypad11setHoldTimeEj>
    33d2:	bf00      	nop
    33d4:	20002188 	.word	0x20002188

000033d8 <_Z21keys_scan_powerbuttonv>:

bool keys_scan_powerbutton() {
    33d8:	b538      	push	{r3, r4, r5, lr}
  bool r = false;

  pinMode(row_pins[powerbutton_row],INPUT_PULLUP);
    33da:	4d0b      	ldr	r5, [pc, #44]	; (3408 <_Z21keys_scan_powerbuttonv+0x30>)
  pinMode(col_pins[powerbutton_col],OUTPUT);
    33dc:	4c0b      	ldr	r4, [pc, #44]	; (340c <_Z21keys_scan_powerbuttonv+0x34>)
  pinMode(row_pins[powerbutton_row],INPUT_PULLUP);
    33de:	7868      	ldrb	r0, [r5, #1]
    33e0:	2102      	movs	r1, #2
    33e2:	f003 fddf 	bl	6fa4 <pinMode>
  pinMode(col_pins[powerbutton_col],OUTPUT);
    33e6:	7860      	ldrb	r0, [r4, #1]
    33e8:	2101      	movs	r1, #1
    33ea:	f003 fddb 	bl	6fa4 <pinMode>
  digitalWrite(col_pins[powerbutton_col],LOW);
    33ee:	7860      	ldrb	r0, [r4, #1]
    33f0:	2100      	movs	r1, #0
    33f2:	f003 fdc3 	bl	6f7c <digitalWrite>
  r = (digitalRead(row_pins[powerbutton_row]) == LOW);
    33f6:	7868      	ldrb	r0, [r5, #1]
    33f8:	f003 fdc6 	bl	6f88 <digitalRead>

  return r;
    33fc:	f1d0 0001 	rsbs	r0, r0, #1
    3400:	bf38      	it	cc
    3402:	2000      	movcc	r0, #0
    3404:	bd38      	pop	{r3, r4, r5, pc}
    3406:	bf00      	nop
    3408:	20000cac 	.word	0x20000cac
    340c:	20000ca0 	.word	0x20000ca0

00003410 <_ZN11AudioStreamC1EhPP18audio_block_struct>:
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
    3410:	2300      	movs	r3, #0
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
    3412:	b410      	push	{r4}
		num_inputs(ninput), inputQueue(iqueue) {
    3414:	4c10      	ldr	r4, [pc, #64]	; (3458 <_ZN11AudioStreamC1EhPP18audio_block_struct+0x48>)
    3416:	7241      	strb	r1, [r0, #9]
    3418:	6102      	str	r2, [r0, #16]
    341a:	6004      	str	r4, [r0, #0]
			active = false;
    341c:	7203      	strb	r3, [r0, #8]
			destination_list = NULL;
    341e:	60c3      	str	r3, [r0, #12]
			for (int i=0; i < num_inputs; i++) {
    3420:	b141      	cbz	r1, 3434 <_ZN11AudioStreamC1EhPP18audio_block_struct+0x24>
				inputQueue[i] = NULL;
    3422:	4619      	mov	r1, r3
    3424:	e000      	b.n	3428 <_ZN11AudioStreamC1EhPP18audio_block_struct+0x18>
    3426:	6902      	ldr	r2, [r0, #16]
    3428:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i=0; i < num_inputs; i++) {
    342c:	7a42      	ldrb	r2, [r0, #9]
    342e:	3301      	adds	r3, #1
    3430:	429a      	cmp	r2, r3
    3432:	dcf8      	bgt.n	3426 <_ZN11AudioStreamC1EhPP18audio_block_struct+0x16>
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    3434:	4b09      	ldr	r3, [pc, #36]	; (345c <_ZN11AudioStreamC1EhPP18audio_block_struct+0x4c>)
    3436:	681a      	ldr	r2, [r3, #0]
    3438:	b90a      	cbnz	r2, 343e <_ZN11AudioStreamC1EhPP18audio_block_struct+0x2e>
    343a:	e00b      	b.n	3454 <_ZN11AudioStreamC1EhPP18audio_block_struct+0x44>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    343c:	461a      	mov	r2, r3
    343e:	6953      	ldr	r3, [r2, #20]
    3440:	2b00      	cmp	r3, #0
    3442:	d1fb      	bne.n	343c <_ZN11AudioStreamC1EhPP18audio_block_struct+0x2c>
				p->next_update = this;
    3444:	6150      	str	r0, [r2, #20]
			}
			next_update = NULL;
    3446:	2300      	movs	r3, #0
    3448:	6143      	str	r3, [r0, #20]
			cpu_cycles = 0;
    344a:	8083      	strh	r3, [r0, #4]
			cpu_cycles_max = 0;
    344c:	80c3      	strh	r3, [r0, #6]
		}
    344e:	f85d 4b04 	ldr.w	r4, [sp], #4
    3452:	4770      	bx	lr
				first_update = this;
    3454:	6018      	str	r0, [r3, #0]
    3456:	e7f6      	b.n	3446 <_ZN11AudioStreamC1EhPP18audio_block_struct+0x36>
    3458:	00011810 	.word	0x00011810
    345c:	200026e0 	.word	0x200026e0

00003460 <_ZN25AudioEffectCustomEnvelopeC1Ev>:
			active = false;
    3460:	2100      	movs	r1, #0
		num_inputs(ninput), inputQueue(iqueue) {
    3462:	4b19      	ldr	r3, [pc, #100]	; (34c8 <_ZN25AudioEffectCustomEnvelopeC1Ev+0x68>)
    3464:	6003      	str	r3, [r0, #0]
	AudioEffectCustomEnvelope() : AudioStream(1, inputQueueArray), env(ENVELOPE_MAX, 8) { }
    3466:	b410      	push	{r4}
    3468:	f100 0218 	add.w	r2, r0, #24
    346c:	2401      	movs	r4, #1
			for (int i=0; i < num_inputs; i++) {
    346e:	460b      	mov	r3, r1
		num_inputs(ninput), inputQueue(iqueue) {
    3470:	7244      	strb	r4, [r0, #9]
    3472:	6102      	str	r2, [r0, #16]
			active = false;
    3474:	7201      	strb	r1, [r0, #8]
			destination_list = NULL;
    3476:	60c1      	str	r1, [r0, #12]
    3478:	e000      	b.n	347c <_ZN25AudioEffectCustomEnvelopeC1Ev+0x1c>
    347a:	6902      	ldr	r2, [r0, #16]
				inputQueue[i] = NULL;
    347c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i=0; i < num_inputs; i++) {
    3480:	7a42      	ldrb	r2, [r0, #9]
    3482:	3301      	adds	r3, #1
    3484:	4293      	cmp	r3, r2
    3486:	dbf8      	blt.n	347a <_ZN25AudioEffectCustomEnvelopeC1Ev+0x1a>
			if (first_update == NULL) {
    3488:	4b10      	ldr	r3, [pc, #64]	; (34cc <_ZN25AudioEffectCustomEnvelopeC1Ev+0x6c>)
    348a:	681a      	ldr	r2, [r3, #0]
    348c:	b90a      	cbnz	r2, 3492 <_ZN25AudioEffectCustomEnvelopeC1Ev+0x32>
    348e:	e018      	b.n	34c2 <_ZN25AudioEffectCustomEnvelopeC1Ev+0x62>
				for (p=first_update; p->next_update; p = p->next_update) ;
    3490:	461a      	mov	r2, r3
    3492:	6953      	ldr	r3, [r2, #20]
    3494:	2b00      	cmp	r3, #0
    3496:	d1fb      	bne.n	3490 <_ZN25AudioEffectCustomEnvelopeC1Ev+0x30>
				p->next_update = this;
    3498:	6150      	str	r0, [r2, #20]
			next_update = NULL;
    349a:	2300      	movs	r3, #0
    349c:	4c0c      	ldr	r4, [pc, #48]	; (34d0 <_ZN25AudioEffectCustomEnvelopeC1Ev+0x70>)
    349e:	6004      	str	r4, [r0, #0]
  Envelope(int maxValue, int pieceSize) : maxValue(maxValue), pieceSize(pieceSize), conf(maxValue, 0,0,0,0){ }
    34a0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    34a4:	2208      	movs	r2, #8
    34a6:	6143      	str	r3, [r0, #20]
			cpu_cycles = 0;
    34a8:	8083      	strh	r3, [r0, #4]
			cpu_cycles_max = 0;
    34aa:	80c3      	strh	r3, [r0, #6]
    34ac:	7703      	strb	r3, [r0, #28]
    34ae:	6283      	str	r3, [r0, #40]	; 0x28
         ,sustainLevel(sustain>maxVal?maxVal:sustain)
    34b0:	62c3      	str	r3, [r0, #44]	; 0x2c
    34b2:	6303      	str	r3, [r0, #48]	; 0x30
    34b4:	6343      	str	r3, [r0, #52]	; 0x34
    34b6:	6383      	str	r3, [r0, #56]	; 0x38
  Envelope(int maxValue, int pieceSize) : maxValue(maxValue), pieceSize(pieceSize), conf(maxValue, 0,0,0,0){ }
    34b8:	6201      	str	r1, [r0, #32]
    34ba:	6242      	str	r2, [r0, #36]	; 0x24
    34bc:	f85d 4b04 	ldr.w	r4, [sp], #4
    34c0:	4770      	bx	lr
				first_update = this;
    34c2:	6018      	str	r0, [r3, #0]
    34c4:	e7e9      	b.n	349a <_ZN25AudioEffectCustomEnvelopeC1Ev+0x3a>
    34c6:	bf00      	nop
    34c8:	00011810 	.word	0x00011810
    34cc:	200026e0 	.word	0x200026e0
    34d0:	00011820 	.word	0x00011820

000034d4 <_ZN24AudioFilterStateVariableC1Ev>:
			active = false;
    34d4:	2100      	movs	r1, #0
		num_inputs(ninput), inputQueue(iqueue) {
    34d6:	4b19      	ldr	r3, [pc, #100]	; (353c <_ZN24AudioFilterStateVariableC1Ev+0x68>)
    34d8:	6003      	str	r3, [r0, #0]
#include "AudioStream.h"

class AudioFilterStateVariable: public AudioStream
{
public:
	AudioFilterStateVariable() : AudioStream(2, inputQueueArray) {
    34da:	b470      	push	{r4, r5, r6}
    34dc:	f100 0234 	add.w	r2, r0, #52	; 0x34
    34e0:	2402      	movs	r4, #2
			for (int i=0; i < num_inputs; i++) {
    34e2:	460b      	mov	r3, r1
		num_inputs(ninput), inputQueue(iqueue) {
    34e4:	7244      	strb	r4, [r0, #9]
    34e6:	6102      	str	r2, [r0, #16]
			active = false;
    34e8:	7201      	strb	r1, [r0, #8]
			destination_list = NULL;
    34ea:	60c1      	str	r1, [r0, #12]
    34ec:	e000      	b.n	34f0 <_ZN24AudioFilterStateVariableC1Ev+0x1c>
    34ee:	6902      	ldr	r2, [r0, #16]
				inputQueue[i] = NULL;
    34f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i=0; i < num_inputs; i++) {
    34f4:	7a42      	ldrb	r2, [r0, #9]
    34f6:	3301      	adds	r3, #1
    34f8:	4293      	cmp	r3, r2
    34fa:	dbf8      	blt.n	34ee <_ZN24AudioFilterStateVariableC1Ev+0x1a>
			if (first_update == NULL) {
    34fc:	4b10      	ldr	r3, [pc, #64]	; (3540 <_ZN24AudioFilterStateVariableC1Ev+0x6c>)
    34fe:	681a      	ldr	r2, [r3, #0]
    3500:	b90a      	cbnz	r2, 3506 <_ZN24AudioFilterStateVariableC1Ev+0x32>
    3502:	e018      	b.n	3536 <_ZN24AudioFilterStateVariableC1Ev+0x62>
				for (p=first_update; p->next_update; p = p->next_update) ;
    3504:	461a      	mov	r2, r3
    3506:	6953      	ldr	r3, [r2, #20]
    3508:	2b00      	cmp	r3, #0
    350a:	d1fb      	bne.n	3504 <_ZN24AudioFilterStateVariableC1Ev+0x30>
				p->next_update = this;
    350c:	6150      	str	r0, [r2, #20]
			next_update = NULL;
    350e:	2300      	movs	r3, #0
    3510:	4e0c      	ldr	r6, [pc, #48]	; (3544 <_ZN24AudioFilterStateVariableC1Ev+0x70>)
	}
	void frequency(float freq) {
		if (freq < 20.0) freq = 20.0;
		else if (freq > AUDIO_SAMPLE_RATE_EXACT/2.5) freq = AUDIO_SAMPLE_RATE_EXACT/2.5;
		setting_fcenter = (freq * (3.141592654/(AUDIO_SAMPLE_RATE_EXACT*2.0)))
			* 2147483647.0;
    3512:	4d0d      	ldr	r5, [pc, #52]	; (3548 <_ZN24AudioFilterStateVariableC1Ev+0x74>)
		// TODO: should we use an approximation when freq is not a const,
		// so the sinf() function isn't linked?
		setting_fmult = sinf(freq * (3.141592654/(AUDIO_SAMPLE_RATE_EXACT*2.0)))
			* 2147483647.0;
    3514:	4c0d      	ldr	r4, [pc, #52]	; (354c <_ZN24AudioFilterStateVariableC1Ev+0x78>)
	}
	void resonance(float q) {
		if (q < 0.7) q = 0.7;
		else if (q > 5.0) q = 5.0;
		// TODO: allow lower Q when frequency is lower
		setting_damp = (1.0 / q) * 1073741824.0;
    3516:	4a0e      	ldr	r2, [pc, #56]	; (3550 <_ZN24AudioFilterStateVariableC1Ev+0x7c>)
	AudioFilterStateVariable() : AudioStream(2, inputQueueArray) {
    3518:	6006      	str	r6, [r0, #0]
		// filter's corner frequency is Fcenter * 2^(control * N)
		// where "control" ranges from -1.0 to +1.0
		// and "N" allows the frequency to change from 0 to 7 octaves
		if (n < 0.0) n = 0.0;
		else if (n > 6.9999) n = 6.9999;
		setting_octavemult = n * 4096.0;
    351a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
			* 2147483647.0;
    351e:	6185      	str	r5, [r0, #24]
			* 2147483647.0;
    3520:	61c4      	str	r4, [r0, #28]
    3522:	6143      	str	r3, [r0, #20]
			cpu_cycles = 0;
    3524:	8083      	strh	r3, [r0, #4]
			cpu_cycles_max = 0;
    3526:	80c3      	strh	r3, [r0, #6]
		state_inputprev = 0;
    3528:	6283      	str	r3, [r0, #40]	; 0x28
		state_lowpass = 0;
    352a:	62c3      	str	r3, [r0, #44]	; 0x2c
		state_bandpass = 0;
    352c:	6303      	str	r3, [r0, #48]	; 0x30
		setting_octavemult = n * 4096.0;
    352e:	6201      	str	r1, [r0, #32]
		setting_damp = (1.0 / q) * 1073741824.0;
    3530:	6242      	str	r2, [r0, #36]	; 0x24
	}
    3532:	bc70      	pop	{r4, r5, r6}
    3534:	4770      	bx	lr
				first_update = this;
    3536:	6018      	str	r0, [r3, #0]
    3538:	e7e9      	b.n	350e <_ZN24AudioFilterStateVariableC1Ev+0x3a>
    353a:	bf00      	nop
    353c:	00011810 	.word	0x00011810
    3540:	200026e0 	.word	0x200026e0
    3544:	00012050 	.word	0x00012050
    3548:	048eb202 	.word	0x048eb202
    354c:	048e72e7 	.word	0x048e72e7
    3550:	5a85f956 	.word	0x5a85f956

00003554 <_ZN11AudioMixer4C1Ev>:
			active = false;
    3554:	2100      	movs	r1, #0
		num_inputs(ninput), inputQueue(iqueue) {
    3556:	4b16      	ldr	r3, [pc, #88]	; (35b0 <_ZN11AudioMixer4C1Ev+0x5c>)
    3558:	6003      	str	r3, [r0, #0]

class AudioMixer4 : public AudioStream
{
#if defined(KINETISK)
public:
        AudioMixer4(void) : AudioStream(4, inputQueueArray) {
    355a:	b410      	push	{r4}
    355c:	f100 0228 	add.w	r2, r0, #40	; 0x28
    3560:	2404      	movs	r4, #4
			for (int i=0; i < num_inputs; i++) {
    3562:	460b      	mov	r3, r1
		num_inputs(ninput), inputQueue(iqueue) {
    3564:	7244      	strb	r4, [r0, #9]
    3566:	6102      	str	r2, [r0, #16]
			active = false;
    3568:	7201      	strb	r1, [r0, #8]
			destination_list = NULL;
    356a:	60c1      	str	r1, [r0, #12]
    356c:	e000      	b.n	3570 <_ZN11AudioMixer4C1Ev+0x1c>
    356e:	6902      	ldr	r2, [r0, #16]
				inputQueue[i] = NULL;
    3570:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i=0; i < num_inputs; i++) {
    3574:	7a42      	ldrb	r2, [r0, #9]
    3576:	3301      	adds	r3, #1
    3578:	4293      	cmp	r3, r2
    357a:	dbf8      	blt.n	356e <_ZN11AudioMixer4C1Ev+0x1a>
			if (first_update == NULL) {
    357c:	4b0d      	ldr	r3, [pc, #52]	; (35b4 <_ZN11AudioMixer4C1Ev+0x60>)
    357e:	681a      	ldr	r2, [r3, #0]
    3580:	b90a      	cbnz	r2, 3586 <_ZN11AudioMixer4C1Ev+0x32>
    3582:	e013      	b.n	35ac <_ZN11AudioMixer4C1Ev+0x58>
				for (p=first_update; p->next_update; p = p->next_update) ;
    3584:	461a      	mov	r2, r3
    3586:	6953      	ldr	r3, [r2, #20]
    3588:	2b00      	cmp	r3, #0
    358a:	d1fb      	bne.n	3584 <_ZN11AudioMixer4C1Ev+0x30>
				p->next_update = this;
    358c:	6150      	str	r0, [r2, #20]
		for (int i=0; i<4; i++) multiplier[i] = 65536;
    358e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
			next_update = NULL;
    3592:	2200      	movs	r2, #0
        AudioMixer4(void) : AudioStream(4, inputQueueArray) {
    3594:	4908      	ldr	r1, [pc, #32]	; (35b8 <_ZN11AudioMixer4C1Ev+0x64>)
    3596:	6142      	str	r2, [r0, #20]
			cpu_cycles = 0;
    3598:	8082      	strh	r2, [r0, #4]
			cpu_cycles_max = 0;
    359a:	80c2      	strh	r2, [r0, #6]
    359c:	6001      	str	r1, [r0, #0]
		for (int i=0; i<4; i++) multiplier[i] = 65536;
    359e:	6183      	str	r3, [r0, #24]
    35a0:	61c3      	str	r3, [r0, #28]
    35a2:	6203      	str	r3, [r0, #32]
    35a4:	6243      	str	r3, [r0, #36]	; 0x24
	}
    35a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    35aa:	4770      	bx	lr
				first_update = this;
    35ac:	6018      	str	r0, [r3, #0]
    35ae:	e7ee      	b.n	358e <_ZN11AudioMixer4C1Ev+0x3a>
    35b0:	00011810 	.word	0x00011810
    35b4:	200026e0 	.word	0x200026e0
    35b8:	00012060 	.word	0x00012060

000035bc <_ZN18AudioSynthWaveformC1Ev>:
			if (first_update == NULL) {
    35bc:	4911      	ldr	r1, [pc, #68]	; (3604 <_ZN18AudioSynthWaveformC1Ev+0x48>)
    35be:	680a      	ldr	r2, [r1, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    35c0:	2300      	movs	r3, #0

class AudioSynthWaveform : 
public AudioStream
{
public:
  AudioSynthWaveform(void) : 
    35c2:	b410      	push	{r4}
    35c4:	4c10      	ldr	r4, [pc, #64]	; (3608 <_ZN18AudioSynthWaveformC1Ev+0x4c>)
    35c6:	6004      	str	r4, [r0, #0]
    35c8:	7243      	strb	r3, [r0, #9]
    35ca:	6103      	str	r3, [r0, #16]
			active = false;
    35cc:	7203      	strb	r3, [r0, #8]
			destination_list = NULL;
    35ce:	60c3      	str	r3, [r0, #12]
			if (first_update == NULL) {
    35d0:	b90a      	cbnz	r2, 35d6 <_ZN18AudioSynthWaveformC1Ev+0x1a>
    35d2:	e015      	b.n	3600 <_ZN18AudioSynthWaveformC1Ev+0x44>
				for (p=first_update; p->next_update; p = p->next_update) ;
    35d4:	461a      	mov	r2, r3
    35d6:	6953      	ldr	r3, [r2, #20]
    35d8:	2b00      	cmp	r3, #0
    35da:	d1fb      	bne.n	35d4 <_ZN18AudioSynthWaveformC1Ev+0x18>
				p->next_update = this;
    35dc:	6150      	str	r0, [r2, #20]
			next_update = NULL;
    35de:	2300      	movs	r3, #0
  AudioStream(0,NULL), tone_amp(0), tone_freq(0),
  tone_phase(0), tone_width(0.25), tone_incr(0), tone_type(0),
  tone_offset(0), arbdata(NULL)
    35e0:	4a0a      	ldr	r2, [pc, #40]	; (360c <_ZN18AudioSynthWaveformC1Ev+0x50>)
    35e2:	6143      	str	r3, [r0, #20]
			cpu_cycles = 0;
    35e4:	8083      	strh	r3, [r0, #4]
			cpu_cycles_max = 0;
    35e6:	80c3      	strh	r3, [r0, #6]
    35e8:	8303      	strh	r3, [r0, #24]
    35ea:	8343      	strh	r3, [r0, #26]
    35ec:	61c3      	str	r3, [r0, #28]
    35ee:	6203      	str	r3, [r0, #32]
    35f0:	6283      	str	r3, [r0, #40]	; 0x28
    35f2:	8583      	strh	r3, [r0, #44]	; 0x2c
    35f4:	85c3      	strh	r3, [r0, #46]	; 0x2e
    35f6:	6303      	str	r3, [r0, #48]	; 0x30
    35f8:	6002      	str	r2, [r0, #0]
  { 
  }
    35fa:	f85d 4b04 	ldr.w	r4, [sp], #4
    35fe:	4770      	bx	lr
				first_update = this;
    3600:	6008      	str	r0, [r1, #0]
    3602:	e7ec      	b.n	35de <_ZN18AudioSynthWaveformC1Ev+0x22>
    3604:	200026e0 	.word	0x200026e0
    3608:	00011810 	.word	0x00011810
    360c:	000120a0 	.word	0x000120a0

00003610 <_ZN20AudioSynthSimpleDrumC1Ev>:

class AudioSynthSimpleDrum : public AudioStream
{
public:

  AudioSynthSimpleDrum() : AudioStream(1, inputQueueArray) 
    3610:	b538      	push	{r3, r4, r5, lr}
    3612:	4604      	mov	r4, r0
		num_inputs(ninput), inputQueue(iqueue) {
    3614:	4b19      	ldr	r3, [pc, #100]	; (367c <_ZN20AudioSynthSimpleDrumC1Ev+0x6c>)
    3616:	6003      	str	r3, [r0, #0]
			active = false;
    3618:	2100      	movs	r1, #0
		num_inputs(ninput), inputQueue(iqueue) {
    361a:	2001      	movs	r0, #1
    361c:	f104 0218 	add.w	r2, r4, #24
			for (int i=0; i < num_inputs; i++) {
    3620:	460b      	mov	r3, r1
		num_inputs(ninput), inputQueue(iqueue) {
    3622:	7260      	strb	r0, [r4, #9]
    3624:	6122      	str	r2, [r4, #16]
			active = false;
    3626:	7221      	strb	r1, [r4, #8]
			destination_list = NULL;
    3628:	60e1      	str	r1, [r4, #12]
    362a:	e000      	b.n	362e <_ZN20AudioSynthSimpleDrumC1Ev+0x1e>
    362c:	6922      	ldr	r2, [r4, #16]
				inputQueue[i] = NULL;
    362e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i=0; i < num_inputs; i++) {
    3632:	7a62      	ldrb	r2, [r4, #9]
    3634:	3301      	adds	r3, #1
    3636:	4293      	cmp	r3, r2
    3638:	dbf8      	blt.n	362c <_ZN20AudioSynthSimpleDrumC1Ev+0x1c>
			if (first_update == NULL) {
    363a:	4b11      	ldr	r3, [pc, #68]	; (3680 <_ZN20AudioSynthSimpleDrumC1Ev+0x70>)
    363c:	681a      	ldr	r2, [r3, #0]
    363e:	b90a      	cbnz	r2, 3644 <_ZN20AudioSynthSimpleDrumC1Ev+0x34>
    3640:	e019      	b.n	3676 <_ZN20AudioSynthSimpleDrumC1Ev+0x66>
				for (p=first_update; p->next_update; p = p->next_update) ;
    3642:	461a      	mov	r2, r3
    3644:	6953      	ldr	r3, [r2, #20]
    3646:	2b00      	cmp	r3, #0
    3648:	d1fb      	bne.n	3642 <_ZN20AudioSynthSimpleDrumC1Ev+0x32>
				p->next_update = this;
    364a:	6154      	str	r4, [r2, #20]
			next_update = NULL;
    364c:	2500      	movs	r5, #0
    if(milliseconds > 5000)
      milliseconds = 5000;

    int32_t len_samples = milliseconds*(AUDIO_SAMPLE_RATE_EXACT/1000.0);

    env_decrement = (0x7fff0000/len_samples);
    364e:	4a0d      	ldr	r2, [pc, #52]	; (3684 <_ZN20AudioSynthSimpleDrumC1Ev+0x74>)
    wav_increment = (freq * (0x7fffffffLL/AUDIO_SAMPLE_RATE_EXACT)) + 0.5;
    3650:	4b0d      	ldr	r3, [pc, #52]	; (3688 <_ZN20AudioSynthSimpleDrumC1Ev+0x78>)
  AudioSynthSimpleDrum() : AudioStream(1, inputQueueArray) 
    3652:	490e      	ldr	r1, [pc, #56]	; (368c <_ZN20AudioSynthSimpleDrumC1Ev+0x7c>)
    3654:	6021      	str	r1, [r4, #0]
    wav_increment = (freq * (0x7fffffffLL/AUDIO_SAMPLE_RATE_EXACT)) + 0.5;
    3656:	6323      	str	r3, [r4, #48]	; 0x30
    pitchMod(0x200);
    3658:	4620      	mov	r0, r4
    365a:	6165      	str	r5, [r4, #20]
			cpu_cycles = 0;
    365c:	80a5      	strh	r5, [r4, #4]
			cpu_cycles_max = 0;
    365e:	80e5      	strh	r5, [r4, #6]
    env_decrement = (0x7fff0000/len_samples);
    3660:	6222      	str	r2, [r4, #32]
    pitchMod(0x200);
    3662:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
    3666:	f007 fbad 	bl	adc4 <_ZN20AudioSynthSimpleDrum8pitchModEf>
    wav_amplitude1 = 0x7fff;
    366a:	f647 73ff 	movw	r3, #32767	; 0x7fff
    wav_amplitude2 = 0;
    366e:	85e5      	strh	r5, [r4, #46]	; 0x2e
    wav_amplitude1 = 0x7fff;
    3670:	85a3      	strh	r3, [r4, #44]	; 0x2c
  }
    3672:	4620      	mov	r0, r4
    3674:	bd38      	pop	{r3, r4, r5, pc}
				first_update = this;
    3676:	601c      	str	r4, [r3, #0]
    3678:	e7e8      	b.n	364c <_ZN20AudioSynthSimpleDrumC1Ev+0x3c>
    367a:	bf00      	nop
    367c:	00011810 	.word	0x00011810
    3680:	200026e0 	.word	0x200026e0
    3684:	00013ce6 	.word	0x00013ce6
    3688:	002c9082 	.word	0x002c9082
    368c:	00012090 	.word	0x00012090

00003690 <_Z10audio_initv>:
#define HAT_GAIN 0.9

void audio_init();
void audio_volume(uint8_t volume);

void audio_init() {
    3690:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  AudioMemory(128); // 260 bytes per block, 2.9ms per block
    3694:	485a      	ldr	r0, [pc, #360]	; (3800 <_Z10audio_initv+0x170>)
      // reset the phase when the amplitude was zero
      // and has now been increased.
      tone_phase = 0;
    }
    // set new magnitude
    tone_amp = n * 32767.0;
    3696:	4d5b      	ldr	r5, [pc, #364]	; (3804 <_Z10audio_initv+0x174>)
        virtual void update(void);
	void gain(unsigned int channel, float gain) {
		if (channel >= 4) return;
		if (gain > 32767.0f) gain = 32767.0f;
		else if (gain < -32767.0f) gain = -32767.0f;
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    3698:	4f5b      	ldr	r7, [pc, #364]	; (3808 <_Z10audio_initv+0x178>)
    tone_incr = (t_freq * (0x80000000LL/AUDIO_SAMPLE_RATE_EXACT)) + 0.5;
    369a:	4c5c      	ldr	r4, [pc, #368]	; (380c <_Z10audio_initv+0x17c>)
		setting_damp = (1.0 / q) * 1073741824.0;
    369c:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 3840 <_Z10audio_initv+0x1b0>
			* 2147483647.0;
    36a0:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 3844 <_Z10audio_initv+0x1b4>
			* 2147483647.0;
    36a4:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 3848 <_Z10audio_initv+0x1b8>
    36a8:	2180      	movs	r1, #128	; 0x80
    36aa:	f006 f871 	bl	9790 <_ZN11AudioStream17initialize_memoryEP18audio_block_structj>
    tone_offset = n * 32767.0;
  }
  void pulseWidth(float n) {          // 0.0 to 1.0
    if (n < 0) n = 0;
    else if (n > 1.0) n = 1.0;
    tone_width = n * 0x7fffffffLL; 
    36ae:	4b58      	ldr	r3, [pc, #352]	; (3810 <_Z10audio_initv+0x180>)
		setting_damp = (1.0 / q) * 1073741824.0;
    36b0:	4a58      	ldr	r2, [pc, #352]	; (3814 <_Z10audio_initv+0x184>)
    tone_incr = (t_freq * (0x80000000LL/AUDIO_SAMPLE_RATE_EXACT)) + 0.5;
    36b2:	4959      	ldr	r1, [pc, #356]	; (3818 <_Z10audio_initv+0x188>)
    36b4:	f8c2 a024 	str.w	sl, [r2, #36]	; 0x24
    tone_width = n * 0x7fffffffLL; 
    36b8:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
    36bc:	f8c3 c020 	str.w	ip, [r3, #32]
    tone_amp = n * 32767.0;
    36c0:	f243 3e32 	movw	lr, #13106	; 0x3332
		setting_octavemult = n * 4096.0;
    36c4:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
    36c8:	f8a3 e018 	strh.w	lr, [r3, #24]
			* 2147483647.0;
    36cc:	f8c2 9018 	str.w	r9, [r2, #24]
			* 2147483647.0;
    36d0:	f8c2 801c 	str.w	r8, [r2, #28]
		setting_octavemult = n * 4096.0;
    36d4:	f8c2 c020 	str.w	ip, [r2, #32]
    tone_incr = (t_freq * (0x80000000LL/AUDIO_SAMPLE_RATE_EXACT)) + 0.5;
    36d8:	62ac      	str	r4, [r5, #40]	; 0x28
    tone_amp = n * 32767.0;
    36da:	f8a5 e018 	strh.w	lr, [r5, #24]
    tone_incr = (t_freq * (0x80000000LL/AUDIO_SAMPLE_RATE_EXACT)) + 0.5;
    36de:	6299      	str	r1, [r3, #40]	; 0x28
    36e0:	f247 3e33 	movw	lr, #29491	; 0x7333
    // pulse width is stored as the equivalent phase
  }
  void begin(short t_type) {
	tone_phase = 0;
    36e4:	2400      	movs	r4, #0
  filter1.resonance(0.7); // range 0.7-5.0
  filter1.frequency(400);
  filter1.octaveControl(4);

  // Amp envelope
  envelope1.attack(2);
    36e6:	484d      	ldr	r0, [pc, #308]	; (381c <_Z10audio_initv+0x18c>)
    36e8:	61dc      	str	r4, [r3, #28]
	tone_type = t_type;
    36ea:	f04f 0b05 	mov.w	fp, #5
    36ee:	2601      	movs	r6, #1
    36f0:	2102      	movs	r1, #2
    36f2:	f8a3 b02c 	strh.w	fp, [r3, #44]	; 0x2c
    36f6:	f8c7 e018 	str.w	lr, [r7, #24]
    36fa:	f8c7 e01c 	str.w	lr, [r7, #28]
	tone_phase = 0;
    36fe:	61ec      	str	r4, [r5, #28]
	tone_type = t_type;
    3700:	85ae      	strh	r6, [r5, #44]	; 0x2c
    3702:	f7fe ff39 	bl	2578 <_ZN25AudioEffectCustomEnvelope6attackEi>
  envelope1.decay(0);
    3706:	4621      	mov	r1, r4
    3708:	4844      	ldr	r0, [pc, #272]	; (381c <_Z10audio_initv+0x18c>)
    370a:	f7fe ff39 	bl	2580 <_ZN25AudioEffectCustomEnvelope5decayEi>
  envelope1.sustain(1.0);
    370e:	4843      	ldr	r0, [pc, #268]	; (381c <_Z10audio_initv+0x18c>)
    3710:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3714:	f7fe ff38 	bl	2588 <_ZN25AudioEffectCustomEnvelope7sustainEf>
  envelope1.release(400);
    3718:	4840      	ldr	r0, [pc, #256]	; (381c <_Z10audio_initv+0x18c>)
    371a:	f44f 71c8 	mov.w	r1, #400	; 0x190
    371e:	f7fe ff43 	bl	25a8 <_ZN25AudioEffectCustomEnvelope7releaseEi>
	// immediately jump to the new DC level
	void amplitude(float n) {
		if (n > 1.0) n = 1.0;
		else if (n < -1.0) n = -1.0;
		int32_t m = (int32_t)(n * 2147418112.0);
		__disable_irq();
    3722:	b672      	cpsid	i
		magnitude = m;
    3724:	4b3e      	ldr	r3, [pc, #248]	; (3820 <_Z10audio_initv+0x190>)
    3726:	4a3f      	ldr	r2, [pc, #252]	; (3824 <_Z10audio_initv+0x194>)
		state = 0;
    3728:	761c      	strb	r4, [r3, #24]
		magnitude = m;
    372a:	61da      	str	r2, [r3, #28]
		__enable_irq();
    372c:	b662      	cpsie	i

  // Filter envelope
  dc1.amplitude(1.0); // Filter env needs an input signal
  envelope2.attack(15);
    372e:	483e      	ldr	r0, [pc, #248]	; (3828 <_Z10audio_initv+0x198>)
    3730:	210f      	movs	r1, #15
    3732:	f7fe ff21 	bl	2578 <_ZN25AudioEffectCustomEnvelope6attackEi>
  envelope2.decay(0);
    3736:	4621      	mov	r1, r4
    3738:	483b      	ldr	r0, [pc, #236]	; (3828 <_Z10audio_initv+0x198>)
    373a:	f7fe ff21 	bl	2580 <_ZN25AudioEffectCustomEnvelope5decayEi>
  envelope2.sustain(1.0);
    373e:	483a      	ldr	r0, [pc, #232]	; (3828 <_Z10audio_initv+0x198>)
    3740:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3744:	f7fe ff20 	bl	2588 <_ZN25AudioEffectCustomEnvelope7sustainEf>
  envelope2.release(300);
    3748:	4837      	ldr	r0, [pc, #220]	; (3828 <_Z10audio_initv+0x198>)
    374a:	f44f 7196 	mov.w	r1, #300	; 0x12c
    374e:	f7fe ff2b 	bl	25a8 <_ZN25AudioEffectCustomEnvelope7releaseEi>
		if (milliseconds < 0.0) milliseconds = 0.0;
		uint32_t n = (milliseconds*(AUDIO_SAMPLE_RATE_EXACT/1000.0))+0.5;
		uint32_t nmax = AUDIO_BLOCK_SAMPLES * (DELAY_QUEUE_SIZE-1);
		if (n > nmax) n = nmax;
		uint32_t blks = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
		if (!(activemask & (1<<channel))) {
    3752:	4b36      	ldr	r3, [pc, #216]	; (382c <_Z10audio_initv+0x19c>)
	AudioEffectBitcrusher(void)
	  : AudioStream(1, inputQueueArray) {}
	void bits(uint8_t b) {
		if (b > 16) b = 16;
		else if (b == 0) b = 1;
		crushBits = b;
    3754:	4936      	ldr	r1, [pc, #216]	; (3830 <_Z10audio_initv+0x1a0>)
    3756:	7e1a      	ldrb	r2, [r3, #24]
	}
        void sampleRate(float hz) {
		int n = (AUDIO_SAMPLE_RATE_EXACT / hz) + 0.5;
		if (n < 1) n = 1;
		else if (n > 64) n = 64;
		sampleStep = n;
    3758:	764e      	strb	r6, [r1, #25]
		crushBits = b;
    375a:	2010      	movs	r0, #16
    375c:	7608      	strb	r0, [r1, #24]
    375e:	07d1      	lsls	r1, r2, #31
    3760:	d427      	bmi.n	37b2 <_Z10audio_initv+0x122>
			// enabling a previously disabled channel
			position[channel] = n;
			if (blks > maxblocks) maxblocks = blks;
    3762:	7ed9      	ldrb	r1, [r3, #27]
    3764:	2974      	cmp	r1, #116	; 0x74
			position[channel] = n;
    3766:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
			if (blks > maxblocks) maxblocks = blks;
    376a:	bf98      	it	ls
    376c:	2175      	movls	r1, #117	; 0x75
			activemask |= (1<<channel);
    376e:	f042 0201 	orr.w	r2, r2, #1
			position[channel] = n;
    3772:	8398      	strh	r0, [r3, #28]
			if (blks > maxblocks) maxblocks = blks;
    3774:	bf98      	it	ls
    3776:	76d9      	strbls	r1, [r3, #27]
			activemask |= (1<<channel);
    3778:	761a      	strb	r2, [r3, #24]
    377a:	4b2e      	ldr	r3, [pc, #184]	; (3834 <_Z10audio_initv+0x1a4>)
    377c:	4a2e      	ldr	r2, [pc, #184]	; (3838 <_Z10audio_initv+0x1a8>)
    EXTERNAL = 3.3V supply voltage
    */
  #ifdef SUPER_LOUD_MODE
    dac1.analogReference(EXTERNAL);
  #else
    dac1.analogReference(INTERNAL);
    377e:	482f      	ldr	r0, [pc, #188]	; (383c <_Z10audio_initv+0x1ac>)
    3780:	f04f 0800 	mov.w	r8, #0
    3784:	f64c 47cc 	movw	r7, #52428	; 0xcccc
    3788:	f649 1699 	movw	r6, #39321	; 0x9999
    378c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    3790:	f24e 6466 	movw	r4, #58982	; 0xe666
    3794:	f246 6c66 	movw	ip, #26214	; 0x6666
    3798:	f8c2 8018 	str.w	r8, [r2, #24]
    379c:	619f      	str	r7, [r3, #24]
    379e:	61de      	str	r6, [r3, #28]
    37a0:	621d      	str	r5, [r3, #32]
    37a2:	625c      	str	r4, [r3, #36]	; 0x24
    37a4:	2102      	movs	r1, #2
  #endif
}
    37a6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37aa:	f8c2 c01c 	str.w	ip, [r2, #28]
    dac1.analogReference(INTERNAL);
    37ae:	f007 b981 	b.w	aab4 <_ZN17AudioOutputAnalog15analogReferenceEi>
		} else {
			if (n > position[channel]) {
    37b2:	8b99      	ldrh	r1, [r3, #28]
    37b4:	f5b1 5f68 	cmp.w	r1, #14848	; 0x3a00
    37b8:	d208      	bcs.n	37cc <_Z10audio_initv+0x13c>
				// new delay is greater than previous setting
				if (blks > maxblocks) maxblocks = blks;
    37ba:	7eda      	ldrb	r2, [r3, #27]
    37bc:	2a74      	cmp	r2, #116	; 0x74
    37be:	bf9c      	itt	ls
    37c0:	2275      	movls	r2, #117	; 0x75
    37c2:	76da      	strbls	r2, [r3, #27]
				position[channel] = n;
    37c4:	f44f 5268 	mov.w	r2, #14848	; 0x3a00
    37c8:	839a      	strh	r2, [r3, #28]
    37ca:	e7d6      	b.n	377a <_Z10audio_initv+0xea>
			} else {
				// new delay is less than previous setting
				position[channel] = n;
    37cc:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
    37d0:	8399      	strh	r1, [r3, #28]
		recompute_maxblocks();
	}
	virtual void update(void);
private:
	void recompute_maxblocks(void) {
		uint32_t max=0;
    37d2:	4625      	mov	r5, r4
    37d4:	4619      	mov	r1, r3
		uint32_t channel = 0;
		do {
			if (activemask & (1<<channel)) {
    37d6:	fa42 f004 	asr.w	r0, r2, r4
    37da:	f010 0f01 	tst.w	r0, #1
    37de:	f104 0401 	add.w	r4, r4, #1
    37e2:	d006      	beq.n	37f2 <_Z10audio_initv+0x162>
				uint32_t n = position[channel];
    37e4:	8b88      	ldrh	r0, [r1, #28]
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    37e6:	307f      	adds	r0, #127	; 0x7f
    37e8:	09c0      	lsrs	r0, r0, #7
    37ea:	3001      	adds	r0, #1
    37ec:	4285      	cmp	r5, r0
    37ee:	bf38      	it	cc
    37f0:	4605      	movcc	r5, r0
		do {
    37f2:	2c08      	cmp	r4, #8
    37f4:	f101 0102 	add.w	r1, r1, #2
    37f8:	d1ed      	bne.n	37d6 <_Z10audio_initv+0x146>
				if (n > max) max = n;
			}
		} while(++channel < 8);
		maxblocks = max;
    37fa:	76dd      	strb	r5, [r3, #27]
    37fc:	e7bd      	b.n	377a <_Z10audio_initv+0xea>
    37fe:	bf00      	nop
    3800:	1fff8200 	.word	0x1fff8200
    3804:	20001fd8 	.word	0x20001fd8
    3808:	20002060 	.word	0x20002060
    380c:	0051b399 	.word	0x0051b399
    3810:	20001850 	.word	0x20001850
    3814:	200016ac 	.word	0x200016ac
    3818:	00a36731 	.word	0x00a36731
    381c:	20001c18 	.word	0x20001c18
    3820:	2000236c 	.word	0x2000236c
    3824:	7fff0000 	.word	0x7fff0000
    3828:	20001c64 	.word	0x20001c64
    382c:	20001db0 	.word	0x20001db0
    3830:	20001b90 	.word	0x20001b90
    3834:	200016e8 	.word	0x200016e8
    3838:	20002020 	.word	0x20002020
    383c:	20001d28 	.word	0x20001d28
    3840:	5b6db6f5 	.word	0x5b6db6f5
    3844:	01d2ad9a 	.word	0x01d2ad9a
    3848:	01d2a98f 	.word	0x01d2a98f
    384c:	ffffffff 	.word	0xffffffff

00003850 <_Z12audio_volumei>:

void audio_volume(int volume) {
    3850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  mixer_output.gain(0, (volume/1023.)*MAIN_GAIN);
    3854:	f008 ffbc 	bl	c7d0 <__aeabi_i2d>
    3858:	a351      	add	r3, pc, #324	; (adr r3, 39a0 <_Z12audio_volumei+0x150>)
    385a:	e9d3 2300 	ldrd	r2, r3, [r3]
    385e:	4604      	mov	r4, r0
    3860:	460d      	mov	r5, r1
    3862:	f009 f945 	bl	caf0 <__aeabi_ddiv>
    3866:	a350      	add	r3, pc, #320	; (adr r3, 39a8 <_Z12audio_volumei+0x158>)
    3868:	e9d3 2300 	ldrd	r2, r3, [r3]
    386c:	4606      	mov	r6, r0
    386e:	460f      	mov	r7, r1
    3870:	f009 f814 	bl	c89c <__aeabi_dmul>
    3874:	f009 faf4 	bl	ce60 <__aeabi_d2f>
		if (gain > 32767.0f) gain = 32767.0f;
    3878:	4951      	ldr	r1, [pc, #324]	; (39c0 <_Z12audio_volumei+0x170>)
    387a:	4680      	mov	r8, r0
    387c:	f009 fe0a 	bl	d494 <__aeabi_fcmpgt>
    3880:	b940      	cbnz	r0, 3894 <_Z12audio_volumei+0x44>
		else if (gain < -32767.0f) gain = -32767.0f;
    3882:	4640      	mov	r0, r8
    3884:	494f      	ldr	r1, [pc, #316]	; (39c4 <_Z12audio_volumei+0x174>)
    3886:	f009 fde7 	bl	d458 <__aeabi_fcmplt>
    388a:	2800      	cmp	r0, #0
    388c:	d07d      	beq.n	398a <_Z12audio_volumei+0x13a>
    388e:	f8df e138 	ldr.w	lr, [pc, #312]	; 39c8 <_Z12audio_volumei+0x178>
    3892:	e001      	b.n	3898 <_Z12audio_volumei+0x48>
		if (gain > 32767.0f) gain = 32767.0f;
    3894:	f8df e134 	ldr.w	lr, [pc, #308]	; 39cc <_Z12audio_volumei+0x17c>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    3898:	f8df 8138 	ldr.w	r8, [pc, #312]	; 39d4 <_Z12audio_volumei+0x184>
  mixer_output.gain(1, (volume/1023.)*DELAY_GAIN);
    389c:	4630      	mov	r0, r6
    389e:	a344      	add	r3, pc, #272	; (adr r3, 39b0 <_Z12audio_volumei+0x160>)
    38a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    38a4:	f8c8 e018 	str.w	lr, [r8, #24]
    38a8:	4639      	mov	r1, r7
    38aa:	f008 fff7 	bl	c89c <__aeabi_dmul>
    38ae:	f009 fad7 	bl	ce60 <__aeabi_d2f>
		if (gain > 32767.0f) gain = 32767.0f;
    38b2:	4943      	ldr	r1, [pc, #268]	; (39c0 <_Z12audio_volumei+0x170>)
    38b4:	4606      	mov	r6, r0
    38b6:	f009 fded 	bl	d494 <__aeabi_fcmpgt>
    38ba:	b938      	cbnz	r0, 38cc <_Z12audio_volumei+0x7c>
		else if (gain < -32767.0f) gain = -32767.0f;
    38bc:	4630      	mov	r0, r6
    38be:	4941      	ldr	r1, [pc, #260]	; (39c4 <_Z12audio_volumei+0x174>)
    38c0:	f009 fdca 	bl	d458 <__aeabi_fcmplt>
    38c4:	2800      	cmp	r0, #0
    38c6:	d057      	beq.n	3978 <_Z12audio_volumei+0x128>
    38c8:	4e3f      	ldr	r6, [pc, #252]	; (39c8 <_Z12audio_volumei+0x178>)
    38ca:	e000      	b.n	38ce <_Z12audio_volumei+0x7e>
		if (gain > 32767.0f) gain = 32767.0f;
    38cc:	4e3f      	ldr	r6, [pc, #252]	; (39cc <_Z12audio_volumei+0x17c>)

  mixer_output.gain(2, (volume/2048.)*KICK_GAIN+0.5);
    38ce:	4620      	mov	r0, r4
    38d0:	4629      	mov	r1, r5
    38d2:	2200      	movs	r2, #0
    38d4:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    38d8:	f8c8 601c 	str.w	r6, [r8, #28]
    38dc:	f008 ffde 	bl	c89c <__aeabi_dmul>
    38e0:	2200      	movs	r2, #0
    38e2:	4b3b      	ldr	r3, [pc, #236]	; (39d0 <_Z12audio_volumei+0x180>)
    38e4:	4604      	mov	r4, r0
    38e6:	460d      	mov	r5, r1
    38e8:	f008 fe26 	bl	c538 <__adddf3>
    38ec:	f009 fab8 	bl	ce60 <__aeabi_d2f>
		if (gain > 32767.0f) gain = 32767.0f;
    38f0:	4933      	ldr	r1, [pc, #204]	; (39c0 <_Z12audio_volumei+0x170>)
    38f2:	4606      	mov	r6, r0
    38f4:	f009 fdce 	bl	d494 <__aeabi_fcmpgt>
    38f8:	b930      	cbnz	r0, 3908 <_Z12audio_volumei+0xb8>
		else if (gain < -32767.0f) gain = -32767.0f;
    38fa:	4630      	mov	r0, r6
    38fc:	4931      	ldr	r1, [pc, #196]	; (39c4 <_Z12audio_volumei+0x174>)
    38fe:	f009 fdab 	bl	d458 <__aeabi_fcmplt>
    3902:	b380      	cbz	r0, 3966 <_Z12audio_volumei+0x116>
    3904:	4e30      	ldr	r6, [pc, #192]	; (39c8 <_Z12audio_volumei+0x178>)
    3906:	e000      	b.n	390a <_Z12audio_volumei+0xba>
		if (gain > 32767.0f) gain = 32767.0f;
    3908:	4e30      	ldr	r6, [pc, #192]	; (39cc <_Z12audio_volumei+0x17c>)
  mixer_output.gain(3, (volume/2048.)*HAT_GAIN+0.5);
    390a:	a32b      	add	r3, pc, #172	; (adr r3, 39b8 <_Z12audio_volumei+0x168>)
    390c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3910:	4620      	mov	r0, r4
    3912:	4629      	mov	r1, r5
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    3914:	f8c8 6020 	str.w	r6, [r8, #32]
    3918:	f008 ffc0 	bl	c89c <__aeabi_dmul>
    391c:	2200      	movs	r2, #0
    391e:	4b2c      	ldr	r3, [pc, #176]	; (39d0 <_Z12audio_volumei+0x180>)
    3920:	f008 fe0a 	bl	c538 <__adddf3>
    3924:	f009 fa9c 	bl	ce60 <__aeabi_d2f>
		if (gain > 32767.0f) gain = 32767.0f;
    3928:	4925      	ldr	r1, [pc, #148]	; (39c0 <_Z12audio_volumei+0x170>)
    392a:	4604      	mov	r4, r0
    392c:	f009 fdb2 	bl	d494 <__aeabi_fcmpgt>
    3930:	b948      	cbnz	r0, 3946 <_Z12audio_volumei+0xf6>
		else if (gain < -32767.0f) gain = -32767.0f;
    3932:	4620      	mov	r0, r4
    3934:	4923      	ldr	r1, [pc, #140]	; (39c4 <_Z12audio_volumei+0x174>)
    3936:	f009 fd8f 	bl	d458 <__aeabi_fcmplt>
    393a:	b148      	cbz	r0, 3950 <_Z12audio_volumei+0x100>
    393c:	4822      	ldr	r0, [pc, #136]	; (39c8 <_Z12audio_volumei+0x178>)
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    393e:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    3942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (gain > 32767.0f) gain = 32767.0f;
    3946:	4821      	ldr	r0, [pc, #132]	; (39cc <_Z12audio_volumei+0x17c>)
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    3948:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    394c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3950:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
    3954:	4620      	mov	r0, r4
    3956:	f009 fbe1 	bl	d11c <__aeabi_fmul>
    395a:	f009 fda5 	bl	d4a8 <__aeabi_f2iz>
    395e:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    3962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3966:	4630      	mov	r0, r6
    3968:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
    396c:	f009 fbd6 	bl	d11c <__aeabi_fmul>
    3970:	f009 fd9a 	bl	d4a8 <__aeabi_f2iz>
    3974:	4606      	mov	r6, r0
    3976:	e7c8      	b.n	390a <_Z12audio_volumei+0xba>
    3978:	4630      	mov	r0, r6
    397a:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
    397e:	f009 fbcd 	bl	d11c <__aeabi_fmul>
    3982:	f009 fd91 	bl	d4a8 <__aeabi_f2iz>
    3986:	4606      	mov	r6, r0
    3988:	e7a1      	b.n	38ce <_Z12audio_volumei+0x7e>
    398a:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
    398e:	4640      	mov	r0, r8
    3990:	f009 fbc4 	bl	d11c <__aeabi_fmul>
    3994:	f009 fd88 	bl	d4a8 <__aeabi_f2iz>
    3998:	4686      	mov	lr, r0
    399a:	e77d      	b.n	3898 <_Z12audio_volumei+0x48>
    399c:	f3af 8000 	nop.w
    39a0:	00000000 	.word	0x00000000
    39a4:	408ff800 	.word	0x408ff800
    39a8:	9999999a 	.word	0x9999999a
    39ac:	3fe99999 	.word	0x3fe99999
    39b0:	33333333 	.word	0x33333333
    39b4:	3fe33333 	.word	0x3fe33333
    39b8:	cccccccd 	.word	0xcccccccd
    39bc:	3feccccc 	.word	0x3feccccc
    39c0:	46fffe00 	.word	0x46fffe00
    39c4:	c6fffe00 	.word	0xc6fffe00
    39c8:	80010000 	.word	0x80010000
    39cc:	7fff0000 	.word	0x7fff0000
    39d0:	3fe00000 	.word	0x3fe00000
    39d4:	200016e8 	.word	0x200016e8

000039d8 <_Z15sequencer_startv>:
}

void sequencer_start() {
    39d8:	b508      	push	{r3, lr}
            mSerial.write((byte)inType);
    39da:	4b0a      	ldr	r3, [pc, #40]	; (3a04 <_Z15sequencer_startv+0x2c>)
    39dc:	6c98      	ldr	r0, [r3, #72]	; 0x48
    39de:	6803      	ldr	r3, [r0, #0]
    39e0:	21fb      	movs	r1, #251	; 0xfb
    39e2:	681b      	ldr	r3, [r3, #0]
    39e4:	4798      	blx	r3
  MIDI.sendRealTime(midi::Continue);
  tempo_handler.midi_clock_reset();
    39e6:	4b08      	ldr	r3, [pc, #32]	; (3a08 <_Z15sequencer_startv+0x30>)
      if(_source == TEMPO_SOURCE_MIDI) {
    39e8:	7b1a      	ldrb	r2, [r3, #12]
    39ea:	2a01      	cmp	r2, #1
    39ec:	d105      	bne.n	39fa <_Z15sequencer_startv+0x22>
        midi_clock = 11; // One less than our overflow, so the next MIDI clock tick triggers a callback
    39ee:	4907      	ldr	r1, [pc, #28]	; (3a0c <_Z15sequencer_startv+0x34>)
    39f0:	200b      	movs	r0, #11
        _midi_clock_block = 0;
    39f2:	2200      	movs	r2, #0
        midi_clock = 11; // One less than our overflow, so the next MIDI clock tick triggers a callback
    39f4:	6008      	str	r0, [r1, #0]
        _midi_clock_block = 0;
    39f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  sequencer_is_running = true;
    39fa:	4b05      	ldr	r3, [pc, #20]	; (3a10 <_Z15sequencer_startv+0x38>)
    39fc:	2201      	movs	r2, #1
    39fe:	701a      	strb	r2, [r3, #0]
    3a00:	bd08      	pop	{r3, pc}
    3a02:	bf00      	nop
    3a04:	2000209c 	.word	0x2000209c
    3a08:	20001cc0 	.word	0x20001cc0
    3a0c:	20001a74 	.word	0x20001a74
    3a10:	20002369 	.word	0x20002369

00003a14 <_Z8led_initv>:
};

void led_init();
void led_update();

void led_init() {
    3a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	/// @tparam DATA_PIN - the optional data pin for the leds (required)
	/// @tparam RGB_ORDER - the rgb ordering for the leds (e.g. what order red, green, and blue data is written out in)
	/// @returns a reference to the added controller
	template<template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, EOrder RGB_ORDER>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN, RGB_ORDER> c;
    3a18:	483b      	ldr	r0, [pc, #236]	; (3b08 <_Z8led_initv+0xf4>)
    3a1a:	6803      	ldr	r3, [r0, #0]
    3a1c:	f013 0401 	ands.w	r4, r3, #1
    3a20:	b083      	sub	sp, #12
    3a22:	d04d      	beq.n	3ac0 <_Z8led_initv+0xac>
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
    3a24:	4c39      	ldr	r4, [pc, #228]	; (3b0c <_Z8led_initv+0xf8>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    3a26:	4f3a      	ldr	r7, [pc, #232]	; (3b10 <_Z8led_initv+0xfc>)
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
    3a28:	483a      	ldr	r0, [pc, #232]	; (3b14 <_Z8led_initv+0x100>)
    3a2a:	4d3b      	ldr	r5, [pc, #236]	; (3b18 <_Z8led_initv+0x104>)
    3a2c:	4e3b      	ldr	r6, [pc, #236]	; (3b1c <_Z8led_initv+0x108>)
  #ifdef DEV_MODE
     physical_leds[0] = CRGB::Blue;
  #endif

  for(int i = 0; i < 10; i++) {
    physical_leds[i+9] = COLORS[SCALE[i]%24];
    3a2e:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 3b2c <_Z8led_initv+0x118>
    3a32:	4621      	mov	r1, r4
    3a34:	2213      	movs	r2, #19
    3a36:	2300      	movs	r3, #0
    3a38:	f007 fb64 	bl	b104 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    3a3c:	f04f 0e20 	mov.w	lr, #32
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    3a40:	23e0      	movs	r3, #224	; 0xe0
    3a42:	22f1      	movs	r2, #241	; 0xf1
    3a44:	f04f 08ff 	mov.w	r8, #255	; 0xff
    3a48:	f887 e000 	strb.w	lr, [r7]
  FastLED.setCorrection(CORRECTION_SK6812);
    3a4c:	4638      	mov	r0, r7
    3a4e:	a901      	add	r1, sp, #4
    3a50:	f88d 3006 	strb.w	r3, [sp, #6]
    3a54:	f88d 2005 	strb.w	r2, [sp, #5]
    3a58:	f88d 8004 	strb.w	r8, [sp, #4]
    3a5c:	f007 fb8a 	bl	b174 <_ZN8CFastLED13setCorrectionERK4CRGB>
  FastLED.clear();
    3a60:	4638      	mov	r0, r7
    3a62:	2100      	movs	r1, #0
    3a64:	f007 fc8a 	bl	b37c <_ZN8CFastLED5clearEb>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    3a68:	4638      	mov	r0, r7
    3a6a:	7839      	ldrb	r1, [r7, #0]
    3a6c:	f007 fbba 	bl	b1e4 <_ZN8CFastLED4showEh>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    3a70:	2300      	movs	r3, #0
        g = (colorcode >>  8) & 0xFF;
        b = (colorcode >>  0) & 0xFF;
    3a72:	f884 8002 	strb.w	r8, [r4, #2]
        r = (colorcode >> 16) & 0xFF;
    3a76:	7023      	strb	r3, [r4, #0]
        g = (colorcode >>  8) & 0xFF;
    3a78:	7063      	strb	r3, [r4, #1]
    3a7a:	f105 080a 	add.w	r8, r5, #10
    physical_leds[i+9] = COLORS[SCALE[i]%24];
    3a7e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    3a82:	fba9 1203 	umull	r1, r2, r9, r3
    3a86:	0912      	lsrs	r2, r2, #4
    3a88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3a8c:	eba3 02c2 	sub.w	r2, r3, r2, lsl #3
    3a90:	b2d2      	uxtb	r2, r2
    3a92:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3a96:	18b3      	adds	r3, r6, r2
        r = rhs.r;
    3a98:	5cb1      	ldrb	r1, [r6, r2]
        g = rhs.g;
    3a9a:	785a      	ldrb	r2, [r3, #1]
        b = rhs.b;
    3a9c:	789b      	ldrb	r3, [r3, #2]
        r = rhs.r;
    3a9e:	76e1      	strb	r1, [r4, #27]
        g = rhs.g;
    3aa0:	7722      	strb	r2, [r4, #28]
        b = rhs.b;
    3aa2:	7763      	strb	r3, [r4, #29]
    delay(40);
    3aa4:	2028      	movs	r0, #40	; 0x28
    3aa6:	f003 faa5 	bl	6ff4 <delay>
    3aaa:	4819      	ldr	r0, [pc, #100]	; (3b10 <_Z8led_initv+0xfc>)
    3aac:	7839      	ldrb	r1, [r7, #0]
    3aae:	f007 fb99 	bl	b1e4 <_ZN8CFastLED4showEh>
  for(int i = 0; i < 10; i++) {
    3ab2:	4545      	cmp	r5, r8
    3ab4:	f104 0403 	add.w	r4, r4, #3
    3ab8:	d1e1      	bne.n	3a7e <_Z8led_initv+0x6a>
    FastLED.show();
  }
}
    3aba:	b003      	add	sp, #12
    3abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		static CHIPSET<DATA_PIN, RGB_ORDER> c;
    3ac0:	f003 f8a2 	bl	6c08 <__cxa_guard_acquire>
    3ac4:	2800      	cmp	r0, #0
    3ac6:	d0ad      	beq.n	3a24 <_Z8led_initv+0x10>
        if(m_pHead==NULL) { m_pHead = this; }
    3ac8:	4915      	ldr	r1, [pc, #84]	; (3b20 <_Z8led_initv+0x10c>)
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    3aca:	4a12      	ldr	r2, [pc, #72]	; (3b14 <_Z8led_initv+0x100>)
        if(m_pHead==NULL) { m_pHead = this; }
    3acc:	6808      	ldr	r0, [r1, #0]
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    3ace:	6054      	str	r4, [r2, #4]
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    3ad0:	23ff      	movs	r3, #255	; 0xff
    3ad2:	2501      	movs	r5, #1
    3ad4:	6154      	str	r4, [r2, #20]
        m_pNext = NULL;
    3ad6:	6094      	str	r4, [r2, #8]
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    3ad8:	7495      	strb	r5, [r2, #18]
    3ada:	7313      	strb	r3, [r2, #12]
    3adc:	7353      	strb	r3, [r2, #13]
    3ade:	7393      	strb	r3, [r2, #14]
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    3ae0:	73d3      	strb	r3, [r2, #15]
    3ae2:	7413      	strb	r3, [r2, #16]
    3ae4:	7453      	strb	r3, [r2, #17]
        if(m_pHead==NULL) { m_pHead = this; }
    3ae6:	b160      	cbz	r0, 3b02 <_Z8led_initv+0xee>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    3ae8:	4b0e      	ldr	r3, [pc, #56]	; (3b24 <_Z8led_initv+0x110>)
    3aea:	6819      	ldr	r1, [r3, #0]
    3aec:	b101      	cbz	r1, 3af0 <_Z8led_initv+0xdc>
    3aee:	608a      	str	r2, [r1, #8]
	CMinWait() { mLastMicros = 0; }
    3af0:	2400      	movs	r4, #0
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class SK6812 : public SK6812Controller<DATA_PIN, RGB_ORDER> {};
    3af2:	490d      	ldr	r1, [pc, #52]	; (3b28 <_Z8led_initv+0x114>)
		static CHIPSET<DATA_PIN, RGB_ORDER> c;
    3af4:	4804      	ldr	r0, [pc, #16]	; (3b08 <_Z8led_initv+0xf4>)
    3af6:	8414      	strh	r4, [r2, #32]
        m_pTail = this;
    3af8:	601a      	str	r2, [r3, #0]
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class SK6812 : public SK6812Controller<DATA_PIN, RGB_ORDER> {};
    3afa:	6011      	str	r1, [r2, #0]
		static CHIPSET<DATA_PIN, RGB_ORDER> c;
    3afc:	f003 f88a 	bl	6c14 <__cxa_guard_release>
    3b00:	e790      	b.n	3a24 <_Z8led_initv+0x10>
        if(m_pHead==NULL) { m_pHead = this; }
    3b02:	600a      	str	r2, [r1, #0]
    3b04:	e7f0      	b.n	3ae8 <_Z8led_initv+0xd4>
    3b06:	bf00      	nop
    3b08:	200016a8 	.word	0x200016a8
    3b0c:	200018e0 	.word	0x200018e0
    3b10:	200027bc 	.word	0x200027bc
    3b14:	20001684 	.word	0x20001684
    3b18:	00011867 	.word	0x00011867
    3b1c:	2000196c 	.word	0x2000196c
    3b20:	200027cc 	.word	0x200027cc
    3b24:	200027dc 	.word	0x200027dc
    3b28:	00011830 	.word	0x00011830
    3b2c:	aaaaaaab 	.word	0xaaaaaaab

00003b30 <_Z10led_updatev>:

// Updates the LED colour and brightness to match the stored sequence
void led_update() {
    3b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if(!step_enable[current_step]) {
        leds(current_step) = CRGB::Black;
      }

      if(!sequencer_is_running) {
        if(((sequencer_clock % 24) < 12)) {
    3b34:	4b96      	ldr	r3, [pc, #600]	; (3d90 <_Z10led_updatev+0x260>)
    3b36:	f8df a284 	ldr.w	sl, [pc, #644]	; 3dbc <_Z10led_updatev+0x28c>
    3b3a:	f893 b000 	ldrb.w	fp, [r3]
      leds(current_step) = LED_WHITE;
    3b3e:	4b95      	ldr	r3, [pc, #596]	; (3d94 <_Z10led_updatev+0x264>)
    if(note_is_playing) {
    3b40:	4a95      	ldr	r2, [pc, #596]	; (3d98 <_Z10led_updatev+0x268>)
      leds(current_step) = LED_WHITE;
    3b42:	781d      	ldrb	r5, [r3, #0]
      if(!sequencer_is_running) {
    3b44:	4b95      	ldr	r3, [pc, #596]	; (3d9c <_Z10led_updatev+0x26c>)
    if(note_is_playing) {
    3b46:	7810      	ldrb	r0, [r2, #0]
      if(!sequencer_is_running) {
    3b48:	f893 9000 	ldrb.w	r9, [r3]
    3b4c:	4c94      	ldr	r4, [pc, #592]	; (3da0 <_Z10led_updatev+0x270>)
    3b4e:	4a95      	ldr	r2, [pc, #596]	; (3da4 <_Z10led_updatev+0x274>)
    3b50:	4995      	ldr	r1, [pc, #596]	; (3da8 <_Z10led_updatev+0x278>)
      leds(l) = COLORS[step_note[l]%24];
    3b52:	f8df 826c 	ldr.w	r8, [pc, #620]	; 3dc0 <_Z10led_updatev+0x290>
        if(((sequencer_clock % 24) < 12)) {
    3b56:	fbaa 3c0b 	umull	r3, ip, sl, fp
            leds(next_step) = COLORS[step_note[next_step]%24];
          } else {
            leds(next_step) = CRGB::Black;
          }
          led_play = LED_WHITE;
          led_play.fadeLightBy((sequencer_clock % 12)*16);
    3b5a:	ea4f 03dc 	mov.w	r3, ip, lsr #3
    3b5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3b62:	ebab 0683 	sub.w	r6, fp, r3, lsl #2
    }

    /// fadeLightBy is a synonym for nscale8_video( ..., 255-fadefactor)
    inline CRGB& fadeLightBy (uint8_t fadefactor )
    {
        nscale8x3_video( r, g, b, 255 - fadefactor);
    3b66:	ea6f 1606 	mvn.w	r6, r6, lsl #4
    3b6a:	b2f6      	uxtb	r6, r6
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    3b6c:	b237      	sxth	r7, r6
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    3b6e:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    3b72:	23e6      	movs	r3, #230	; 0xe6
    3b74:	fb16 f603 	smulbb	r6, r6, r3
        if(((sequencer_clock % 24) < 12)) {
    3b78:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    3b7c:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    3b80:	ebc7 2707 	rsb	r7, r7, r7, lsl #8
    3b84:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    3b88:	ea4f 1eee 	mov.w	lr, lr, asr #7
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    3b8c:	123f      	asrs	r7, r7, #8
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    3b8e:	1236      	asrs	r6, r6, #8
void led_update() {
    3b90:	b085      	sub	sp, #20
        if(((sequencer_clock % 24) < 12)) {
    3b92:	ebab 0ccc 	sub.w	ip, fp, ip, lsl #3
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    3b96:	f10e 0e01 	add.w	lr, lr, #1
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    3b9a:	3701      	adds	r7, #1
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    3b9c:	3601      	adds	r6, #1
          if(step_enable[next_step]) {
    3b9e:	f105 0b01 	add.w	fp, r5, #1
        if(((sequencer_clock % 24) < 12)) {
    3ba2:	fa5f fc8c 	uxtb.w	ip, ip
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    3ba6:	fa5f fe8e 	uxtb.w	lr, lr
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    3baa:	b2ff      	uxtb	r7, r7
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    3bac:	b2f6      	uxtb	r6, r6
    3bae:	f8cd c000 	str.w	ip, [sp]
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    3bb2:	f8cd e00c 	str.w	lr, [sp, #12]
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    3bb6:	9702      	str	r7, [sp, #8]
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    3bb8:	9601      	str	r6, [sp, #4]
          if(step_enable[next_step]) {
    3bba:	f00b 0b07 	and.w	fp, fp, #7
  for (int l = 0; l < SEQUENCER_NUM_STEPS; l++) {
    3bbe:	2300      	movs	r3, #0
        g = rhs.g;
    3bc0:	f04f 0aff 	mov.w	sl, #255	; 0xff
    if (step_enable[l]) {
    3bc4:	5ce6      	ldrb	r6, [r4, r3]
    3bc6:	2e00      	cmp	r6, #0
    3bc8:	f000 80a6 	beq.w	3d18 <_Z10led_updatev+0x1e8>
      leds(l) = COLORS[step_note[l]%24];
    3bcc:	4e77      	ldr	r6, [pc, #476]	; (3dac <_Z10led_updatev+0x27c>)
    3bce:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 3dbc <_Z10led_updatev+0x28c>
    3bd2:	5d9f      	ldrb	r7, [r3, r6]
    3bd4:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
    3bd8:	fbae ec07 	umull	lr, ip, lr, r7
    3bdc:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
    3be0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    3be4:	eba7 0ccc 	sub.w	ip, r7, ip, lsl #3
    3be8:	fa5f fc8c 	uxtb.w	ip, ip
    3bec:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    3bf0:	eb08 070c 	add.w	r7, r8, ip
    3bf4:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
    3bf8:	eb02 060e 	add.w	r6, r2, lr
        r = rhs.r;
    3bfc:	f818 c00c 	ldrb.w	ip, [r8, ip]
    3c00:	f802 c00e 	strb.w	ip, [r2, lr]
        g = rhs.g;
    3c04:	f897 e001 	ldrb.w	lr, [r7, #1]
        b = rhs.b;
    3c08:	78bf      	ldrb	r7, [r7, #2]
        g = rhs.g;
    3c0a:	f886 e001 	strb.w	lr, [r6, #1]
        b = rhs.b;
    3c0e:	70b7      	strb	r7, [r6, #2]
    if(note_is_playing) {
    3c10:	2800      	cmp	r0, #0
    3c12:	d042      	beq.n	3c9a <_Z10led_updatev+0x16a>
      leds(current_step) = LED_WHITE;
    3c14:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
    3c18:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    3c1c:	eb02 0e07 	add.w	lr, r2, r7
        r = rhs.r;
    3c20:	f06f 0619 	mvn.w	r6, #25
        b = rhs.b;
    3c24:	f06f 0c69 	mvn.w	ip, #105	; 0x69
        r = rhs.r;
    3c28:	55d6      	strb	r6, [r2, r7]
        g = rhs.g;
    3c2a:	f88e a001 	strb.w	sl, [lr, #1]
        b = rhs.b;
    3c2e:	f88e c002 	strb.w	ip, [lr, #2]
  for (int l = 0; l < SEQUENCER_NUM_STEPS; l++) {
    3c32:	3301      	adds	r3, #1
    3c34:	2b08      	cmp	r3, #8
    3c36:	d1c5      	bne.n	3bc4 <_Z10led_updatev+0x94>
	void show() { show(m_Scale); }
    3c38:	485d      	ldr	r0, [pc, #372]	; (3db0 <_Z10led_updatev+0x280>)
    3c3a:	7801      	ldrb	r1, [r0, #0]
    3c3c:	f007 fad2 	bl	b1e4 <_ZN8CFastLED4showEh>
		if (flag) new_output = false;
		__enable_irq();
		return flag;
	}
	float read(void) {
		__disable_irq();
    3c40:	b672      	cpsid	i
		int min = min_sample;
    3c42:	4b5c      	ldr	r3, [pc, #368]	; (3db4 <_Z10led_updatev+0x284>)
		int max = max_sample;
		min_sample = 32767;
    3c44:	f647 74ff 	movw	r4, #32767	; 0x7fff
		max_sample = -32768;
    3c48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
		int min = min_sample;
    3c4c:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
		int max = max_sample;
    3c50:	f9b3 0020 	ldrsh.w	r0, [r3, #32]
		min_sample = 32767;
    3c54:	83dc      	strh	r4, [r3, #30]
		max_sample = -32768;
    3c56:	8419      	strh	r1, [r3, #32]
		__enable_irq();
    3c58:	b662      	cpsie	i
		min = abs(min);
    3c5a:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
    3c5e:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
		max = abs(max);
    3c62:	2800      	cmp	r0, #0
    3c64:	bfb8      	it	lt
    3c66:	4240      	neglt	r0, r0
		if (min > max) max = min;
		return (float)max / 32767.0f;
    3c68:	4298      	cmp	r0, r3
    3c6a:	bfb8      	it	lt
    3c6c:	4618      	movlt	r0, r3
    3c6e:	f009 fa01 	bl	d074 <__aeabi_i2f>
    3c72:	4951      	ldr	r1, [pc, #324]	; (3db8 <_Z10led_updatev+0x288>)
    3c74:	f009 fb06 	bl	d284 <__aeabi_fdiv>
        led_play = LED_WHITE;
      }
    }
  }
  FastLED.show();
  analogWrite(ENV_LED, 255-((int)(peak1.read()*255.)));
    3c78:	f008 fdbc 	bl	c7f4 <__aeabi_f2d>
    3c7c:	a342      	add	r3, pc, #264	; (adr r3, 3d88 <_Z10led_updatev+0x258>)
    3c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c82:	f008 fe0b 	bl	c89c <__aeabi_dmul>
    3c86:	f009 f8a3 	bl	cdd0 <__aeabi_d2iz>
    3c8a:	f1c0 01ff 	rsb	r1, r0, #255	; 0xff
    3c8e:	2005      	movs	r0, #5
  //TODO: filter and pulse led should be set here as well
}
    3c90:	b005      	add	sp, #20
    3c92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  analogWrite(ENV_LED, 255-((int)(peak1.read()*255.)));
    3c96:	f003 b875 	b.w	6d84 <analogWrite>
      if(!step_enable[current_step]) {
    3c9a:	5d66      	ldrb	r6, [r4, r5]
    3c9c:	b93e      	cbnz	r6, 3cae <_Z10led_updatev+0x17e>
        leds(current_step) = CRGB::Black;
    3c9e:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
    3ca2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    3ca6:	19d6      	adds	r6, r2, r7
        r = (colorcode >> 16) & 0xFF;
    3ca8:	55d0      	strb	r0, [r2, r7]
        g = (colorcode >>  8) & 0xFF;
    3caa:	7070      	strb	r0, [r6, #1]
        b = (colorcode >>  0) & 0xFF;
    3cac:	70b0      	strb	r0, [r6, #2]
      if(!sequencer_is_running) {
    3cae:	f1b9 0f00 	cmp.w	r9, #0
    3cb2:	d13c      	bne.n	3d2e <_Z10led_updatev+0x1fe>
        if(((sequencer_clock % 24) < 12)) {
    3cb4:	9e00      	ldr	r6, [sp, #0]
    3cb6:	2e0b      	cmp	r6, #11
    3cb8:	d84e      	bhi.n	3d58 <_Z10led_updatev+0x228>
          if(step_enable[next_step]) {
    3cba:	f814 600b 	ldrb.w	r6, [r4, fp]
    3cbe:	2e00      	cmp	r6, #0
    3cc0:	d03e      	beq.n	3d40 <_Z10led_updatev+0x210>
            leds(next_step) = COLORS[step_note[next_step]%24];
    3cc2:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 3dac <_Z10led_updatev+0x27c>
    3cc6:	f851 602b 	ldr.w	r6, [r1, fp, lsl #2]
    3cca:	f81c 700b 	ldrb.w	r7, [ip, fp]
    3cce:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 3dbc <_Z10led_updatev+0x28c>
    3cd2:	fbac ce07 	umull	ip, lr, ip, r7
    3cd6:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    3cda:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    3cde:	eba7 0ece 	sub.w	lr, r7, lr, lsl #3
    3ce2:	fa5f fc8e 	uxtb.w	ip, lr
    3ce6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    3cea:	eb08 070c 	add.w	r7, r8, ip
    3cee:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
    3cf2:	eb02 060e 	add.w	r6, r2, lr
        r = rhs.r;
    3cf6:	f818 c00c 	ldrb.w	ip, [r8, ip]
    3cfa:	f802 c00e 	strb.w	ip, [r2, lr]
        g = rhs.g;
    3cfe:	f897 e001 	ldrb.w	lr, [r7, #1]
        b = rhs.b;
    3d02:	78bf      	ldrb	r7, [r7, #2]
        g = rhs.g;
    3d04:	f886 e001 	strb.w	lr, [r6, #1]
        b = rhs.b;
    3d08:	70b7      	strb	r7, [r6, #2]
    3d0a:	9e01      	ldr	r6, [sp, #4]
    3d0c:	7016      	strb	r6, [r2, #0]
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    3d0e:	9e02      	ldr	r6, [sp, #8]
    3d10:	7056      	strb	r6, [r2, #1]
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    3d12:	9e03      	ldr	r6, [sp, #12]
    3d14:	7096      	strb	r6, [r2, #2]
    3d16:	e78c      	b.n	3c32 <_Z10led_updatev+0x102>
      leds(l) = CRGB::Black;
    3d18:	f851 7023 	ldr.w	r7, [r1, r3, lsl #2]
    3d1c:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
    3d20:	eb02 070e 	add.w	r7, r2, lr
        r = (colorcode >> 16) & 0xFF;
    3d24:	f802 600e 	strb.w	r6, [r2, lr]
        g = (colorcode >>  8) & 0xFF;
    3d28:	707e      	strb	r6, [r7, #1]
        b = (colorcode >>  0) & 0xFF;
    3d2a:	70be      	strb	r6, [r7, #2]
    3d2c:	e770      	b.n	3c10 <_Z10led_updatev+0xe0>
        r = rhs.r;
    3d2e:	f06f 0619 	mvn.w	r6, #25
    3d32:	7016      	strb	r6, [r2, #0]
        b = rhs.b;
    3d34:	f06f 0669 	mvn.w	r6, #105	; 0x69
        g = rhs.g;
    3d38:	f882 a001 	strb.w	sl, [r2, #1]
        b = rhs.b;
    3d3c:	7096      	strb	r6, [r2, #2]
    3d3e:	e778      	b.n	3c32 <_Z10led_updatev+0x102>
            leds(next_step) = CRGB::Black;
    3d40:	f851 702b 	ldr.w	r7, [r1, fp, lsl #2]
    3d44:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    3d48:	19d6      	adds	r6, r2, r7
        r = (colorcode >> 16) & 0xFF;
    3d4a:	f802 9007 	strb.w	r9, [r2, r7]
        g = (colorcode >>  8) & 0xFF;
    3d4e:	f886 9001 	strb.w	r9, [r6, #1]
        b = (colorcode >>  0) & 0xFF;
    3d52:	f886 9002 	strb.w	r9, [r6, #2]
    3d56:	e7d8      	b.n	3d0a <_Z10led_updatev+0x1da>
          leds(next_step) = LED_WHITE;
    3d58:	f851 702b 	ldr.w	r7, [r1, fp, lsl #2]
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    3d5c:	9e01      	ldr	r6, [sp, #4]
    3d5e:	f882 9002 	strb.w	r9, [r2, #2]
    3d62:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    3d66:	eb02 0e07 	add.w	lr, r2, r7
        g = (colorcode >>  8) & 0xFF;
    3d6a:	f882 9001 	strb.w	r9, [r2, #1]
        r = (colorcode >> 16) & 0xFF;
    3d6e:	f882 9000 	strb.w	r9, [r2]
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    3d72:	f8dd c008 	ldr.w	ip, [sp, #8]
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    3d76:	55d6      	strb	r6, [r2, r7]
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    3d78:	9e03      	ldr	r6, [sp, #12]
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    3d7a:	f88e c001 	strb.w	ip, [lr, #1]
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    3d7e:	f88e 6002 	strb.w	r6, [lr, #2]
    3d82:	e756      	b.n	3c32 <_Z10led_updatev+0x102>
    3d84:	f3af 8000 	nop.w
    3d88:	00000000 	.word	0x00000000
    3d8c:	406fe000 	.word	0x406fe000
    3d90:	200023d0 	.word	0x200023d0
    3d94:	20001d44 	.word	0x20001d44
    3d98:	200018cc 	.word	0x200018cc
    3d9c:	20002369 	.word	0x20002369
    3da0:	20000cb4 	.word	0x20000cb4
    3da4:	200018e0 	.word	0x200018e0
    3da8:	000118a0 	.word	0x000118a0
    3dac:	20000c98 	.word	0x20000c98
    3db0:	200027bc 	.word	0x200027bc
    3db4:	20001a28 	.word	0x20001a28
    3db8:	46fffe00 	.word	0x46fffe00
    3dbc:	aaaaaaab 	.word	0xaaaaaaab
    3dc0:	2000196c 	.word	0x2000196c
    3dc4:	f3af 8000 	nop.w

00003dc8 <_Z9drum_initv>:
  slider2.b.setThreshold(30);
  slider2.setHandleTouchEvent(hatEvent);
}


void drum_init() {
    3dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // HI-HAT ->
  hat_envelope1.attack(2.0);
    3dca:	4825      	ldr	r0, [pc, #148]	; (3e60 <_Z9drum_initv+0x98>)
    env_decrement = (0x7fff0000/len_samples);
    3dcc:	4c25      	ldr	r4, [pc, #148]	; (3e64 <_Z9drum_initv+0x9c>)
			* 2147483647.0;
    3dce:	4f26      	ldr	r7, [pc, #152]	; (3e68 <_Z9drum_initv+0xa0>)
			* 2147483647.0;
    3dd0:	4e26      	ldr	r6, [pc, #152]	; (3e6c <_Z9drum_initv+0xa4>)
			* 2147483647.0;
    3dd2:	4d27      	ldr	r5, [pc, #156]	; (3e70 <_Z9drum_initv+0xa8>)
    3dd4:	2102      	movs	r1, #2
    3dd6:	f7fe fbcf 	bl	2578 <_ZN25AudioEffectCustomEnvelope6attackEi>
  hat_envelope1.release(0.0);
    3dda:	4821      	ldr	r0, [pc, #132]	; (3e60 <_Z9drum_initv+0x98>)
    3ddc:	2100      	movs	r1, #0
    3dde:	f7fe fbe3 	bl	25a8 <_ZN25AudioEffectCustomEnvelope7releaseEi>
  hat_envelope1.sustain(0.0);
    3de2:	481f      	ldr	r0, [pc, #124]	; (3e60 <_Z9drum_initv+0x98>)
    3de4:	2100      	movs	r1, #0
    3de6:	f7fe fbcf 	bl	2588 <_ZN25AudioEffectCustomEnvelope7sustainEf>
			* 2147483647.0;
    3dea:	4a22      	ldr	r2, [pc, #136]	; (3e74 <_Z9drum_initv+0xac>)
    3dec:	4b22      	ldr	r3, [pc, #136]	; (3e78 <_Z9drum_initv+0xb0>)
    3dee:	4823      	ldr	r0, [pc, #140]	; (3e7c <_Z9drum_initv+0xb4>)
    3df0:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 3e94 <_Z9drum_initv+0xcc>
    3df4:	6220      	str	r0, [r4, #32]
    3df6:	f8c2 e018 	str.w	lr, [r2, #24]
			* 2147483647.0;
    3dfa:	61d7      	str	r7, [r2, #28]
			* 2147483647.0;
    3dfc:	619e      	str	r6, [r3, #24]
			* 2147483647.0;
    3dfe:	61dd      	str	r5, [r3, #28]
  hat_filter_bp.frequency(4000);
  hat_filter_hp.frequency(6000);
  hat_snappy.length(30);
  hat_snappy.pitchMod(4.0);
    3e00:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
    3e04:	4620      	mov	r0, r4
    3e06:	f006 ffdd 	bl	adc4 <_ZN20AudioSynthSimpleDrum8pitchModEf>
  hat_snappy.frequency(126);

  // KICK DRUM ->
  kick_drum1.length(kick_duration);
    3e0a:	4b1d      	ldr	r3, [pc, #116]	; (3e80 <_Z9drum_initv+0xb8>)
    wav_increment = (freq * (0x7fffffffLL/AUDIO_SAMPLE_RATE_EXACT)) + 0.5;
    3e0c:	4a1d      	ldr	r2, [pc, #116]	; (3e84 <_Z9drum_initv+0xbc>)
    3e0e:	681b      	ldr	r3, [r3, #0]
    3e10:	6322      	str	r2, [r4, #48]	; 0x30
    if(milliseconds < 0)
    3e12:	2b00      	cmp	r3, #0
    3e14:	db1b      	blt.n	3e4e <_Z9drum_initv+0x86>
    3e16:	f241 3088 	movw	r0, #5000	; 0x1388
    int32_t len_samples = milliseconds*(AUDIO_SAMPLE_RATE_EXACT/1000.0);
    3e1a:	4283      	cmp	r3, r0
    3e1c:	bfb8      	it	lt
    3e1e:	4618      	movlt	r0, r3
    3e20:	f008 fcd6 	bl	c7d0 <__aeabi_i2d>
    3e24:	a30c      	add	r3, pc, #48	; (adr r3, 3e58 <_Z9drum_initv+0x90>)
    3e26:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e2a:	f008 fd37 	bl	c89c <__aeabi_dmul>
    3e2e:	f008 ffcf 	bl	cdd0 <__aeabi_d2iz>
    env_decrement = (0x7fff0000/len_samples);
    3e32:	4a15      	ldr	r2, [pc, #84]	; (3e88 <_Z9drum_initv+0xc0>)
    3e34:	4b15      	ldr	r3, [pc, #84]	; (3e8c <_Z9drum_initv+0xc4>)
    3e36:	fb92 f0f0 	sdiv	r0, r2, r0
    3e3a:	6218      	str	r0, [r3, #32]
    wav_increment = (freq * (0x7fffffffLL/AUDIO_SAMPLE_RATE_EXACT)) + 0.5;
    3e3c:	4a14      	ldr	r2, [pc, #80]	; (3e90 <_Z9drum_initv+0xc8>)
    3e3e:	631a      	str	r2, [r3, #48]	; 0x30
  kick_drum1.frequency(60);
  kick_drum1.pitchMod(4.0);
    3e40:	4812      	ldr	r0, [pc, #72]	; (3e8c <_Z9drum_initv+0xc4>)
    3e42:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
}
    3e46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  kick_drum1.pitchMod(4.0);
    3e4a:	f006 bfbb 	b.w	adc4 <_ZN20AudioSynthSimpleDrum8pitchModEf>
    3e4e:	4b0f      	ldr	r3, [pc, #60]	; (3e8c <_Z9drum_initv+0xc4>)
    3e50:	e7f4      	b.n	3e3c <_Z9drum_initv+0x74>
    3e52:	bf00      	nop
    3e54:	f3af 8000 	nop.w
    3e58:	0f1195d5 	.word	0x0f1195d5
    3e5c:	40460f0f 	.word	0x40460f0f
    3e60:	20001bcc 	.word	0x20001bcc
    3e64:	20001b58 	.word	0x20001b58
    3e68:	122b055f 	.word	0x122b055f
    3e6c:	1b582c11 	.word	0x1b582c11
    3e70:	1b230c9f 	.word	0x1b230c9f
    3e74:	200023d4 	.word	0x200023d4
    3e78:	20001cec 	.word	0x20001cec
    3e7c:	0018c466 	.word	0x0018c466
    3e80:	20000cbc 	.word	0x20000cbc
    3e84:	005d95dd 	.word	0x005d95dd
    3e88:	7fff0000 	.word	0x7fff0000
    3e8c:	20002398 	.word	0x20002398
    3e90:	002c9082 	.word	0x002c9082
    3e94:	123ac80b 	.word	0x123ac80b

00003e98 <_Z9drum_readv>:

void drum_read() {
    3e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e9c:	4db8      	ldr	r5, [pc, #736]	; (4180 <_Z9drum_readv+0x2e8>)
  inline void setHandleTouchEvent(void (*fptr)(uint8_t event, int value)) {
    tTouchCallback  = fptr;
  }
  bool touchDetected;
  void update(unsigned long sysTick){
    a.update();
    3e9e:	4cb9      	ldr	r4, [pc, #740]	; (4184 <_Z9drum_readv+0x2ec>)
    3ea0:	682b      	ldr	r3, [r5, #0]
      return touchRead(pin);
    3ea2:	7820      	ldrb	r0, [r4, #0]
    3ea4:	b084      	sub	sp, #16
    3ea6:	9300      	str	r3, [sp, #0]
	return ret;
    3ea8:	9e00      	ldr	r6, [sp, #0]
    3eaa:	f004 fb4f 	bl	854c <touchRead>
      _signal = TSIRead(pin);
    3eae:	f8a4 0054 	strh.w	r0, [r4, #84]	; 0x54
      return touchRead(pin);
    3eb2:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    3eb6:	f004 fb49 	bl	854c <touchRead>
    b.update();
    
    if(sysTick > lastUpdate + 100) {
    3eba:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    3ebe:	3364      	adds	r3, #100	; 0x64
      _signal = TSIRead(pin);
    3ec0:	b280      	uxth	r0, r0
    if(sysTick > lastUpdate + 100) {
    3ec2:	429e      	cmp	r6, r3
      _signal = TSIRead(pin);
    3ec4:	f8a4 00ac 	strh.w	r0, [r4, #172]	; 0xac
    if(sysTick > lastUpdate + 100) {
    3ec8:	f200 80f5 	bhi.w	40b6 <_Z9drum_readv+0x21e>
    3ecc:	6e22      	ldr	r2, [r4, #96]	; 0x60
        return _signal;
    3ece:	b200      	sxth	r0, r0
    }
  
    int32_t da = a.getDelta();
    int32_t db = b.getDelta();

    numTouches <<= 1;
    3ed0:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
        return _signal;
    3ed4:	f9b4 e054 	ldrsh.w	lr, [r4, #84]	; 0x54
      int32_t delta = getSignal() - getBaseline();
    3ed8:	68a7      	ldr	r7, [r4, #8]
    int32_t getDelta() {
    3eda:	49aa      	ldr	r1, [pc, #680]	; (4184 <_Z9drum_readv+0x2ec>)
      int32_t delta = getSignal() - getBaseline();
    3edc:	1a82      	subs	r2, r0, r2
      if(_cnt < NUM_SAMPLES) {
    3ede:	6860      	ldr	r0, [r4, #4]
    numTouches <<= 1;
    3ee0:	005b      	lsls	r3, r3, #1
      if(_cnt < NUM_SAMPLES) {
    3ee2:	280f      	cmp	r0, #15
    numTouches <<= 1;
    3ee4:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
      int32_t delta = getSignal() - getBaseline();
    3ee8:	ebc7 0e0e 	rsb	lr, r7, lr
      if(_cnt < NUM_SAMPLES) {
    3eec:	f340 8083 	ble.w	3ff6 <_Z9drum_readv+0x15e>
    
    if(a.touchDetected() || b.touchDetected()) {
    3ef0:	6d09      	ldr	r1, [r1, #80]	; 0x50
    3ef2:	458e      	cmp	lr, r1
    3ef4:	dd7f      	ble.n	3ff6 <_Z9drum_readv+0x15e>
      numTouches |= 1UL;
    3ef6:	f043 0301 	orr.w	r3, r3, #1
    3efa:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
      numTouches &= ~1UL;
    }

    uint16_t bottomBits = numTouches & B1111;

    if(!touchDetected && bottomBits == B1111) {
    3efe:	f894 10b0 	ldrb.w	r1, [r4, #176]	; 0xb0
    3f02:	4fa0      	ldr	r7, [pc, #640]	; (4184 <_Z9drum_readv+0x2ec>)
    uint16_t bottomBits = numTouches & B1111;
    3f04:	f003 030f 	and.w	r3, r3, #15
    if(!touchDetected && bottomBits == B1111) {
    3f08:	2900      	cmp	r1, #0
    3f0a:	d16f      	bne.n	3fec <_Z9drum_readv+0x154>
    3f0c:	2b0f      	cmp	r3, #15
    3f0e:	f000 8159 	beq.w	41c4 <_Z9drum_readv+0x32c>
    a.update();
    3f12:	4c9d      	ldr	r4, [pc, #628]	; (4188 <_Z9drum_readv+0x2f0>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f14:	682b      	ldr	r3, [r5, #0]
    3f16:	9301      	str	r3, [sp, #4]
      return touchRead(pin);
    3f18:	7820      	ldrb	r0, [r4, #0]
	return ret;
    3f1a:	9e01      	ldr	r6, [sp, #4]
    3f1c:	f004 fb16 	bl	854c <touchRead>
      _signal = TSIRead(pin);
    3f20:	f8a4 0054 	strh.w	r0, [r4, #84]	; 0x54
      return touchRead(pin);
    3f24:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    3f28:	f004 fb10 	bl	854c <touchRead>
    if(sysTick > lastUpdate + 100) {
    3f2c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    3f30:	3364      	adds	r3, #100	; 0x64
      _signal = TSIRead(pin);
    3f32:	b280      	uxth	r0, r0
    if(sysTick > lastUpdate + 100) {
    3f34:	429e      	cmp	r6, r3
      _signal = TSIRead(pin);
    3f36:	f8a4 00ac 	strh.w	r0, [r4, #172]	; 0xac
    if(sysTick > lastUpdate + 100) {
    3f3a:	d867      	bhi.n	400c <_Z9drum_readv+0x174>
    3f3c:	6e22      	ldr	r2, [r4, #96]	; 0x60
        return _signal;
    3f3e:	b200      	sxth	r0, r0
    numTouches <<= 1;
    3f40:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
        return _signal;
    3f44:	f9b4 c054 	ldrsh.w	ip, [r4, #84]	; 0x54
      int32_t delta = getSignal() - getBaseline();
    3f48:	68a7      	ldr	r7, [r4, #8]
    int32_t getDelta() {
    3f4a:	498f      	ldr	r1, [pc, #572]	; (4188 <_Z9drum_readv+0x2f0>)
      int32_t delta = getSignal() - getBaseline();
    3f4c:	1a82      	subs	r2, r0, r2
      if(_cnt < NUM_SAMPLES) {
    3f4e:	6860      	ldr	r0, [r4, #4]
    numTouches <<= 1;
    3f50:	005b      	lsls	r3, r3, #1
      if(_cnt < NUM_SAMPLES) {
    3f52:	280f      	cmp	r0, #15
    numTouches <<= 1;
    3f54:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
      int32_t delta = getSignal() - getBaseline();
    3f58:	ebc7 0c0c 	rsb	ip, r7, ip
      if(_cnt < NUM_SAMPLES) {
    3f5c:	dd3d      	ble.n	3fda <_Z9drum_readv+0x142>
    if(a.touchDetected() || b.touchDetected()) {
    3f5e:	6d09      	ldr	r1, [r1, #80]	; 0x50
    3f60:	458c      	cmp	ip, r1
    3f62:	dd3a      	ble.n	3fda <_Z9drum_readv+0x142>
      numTouches |= 1UL;
    3f64:	f043 0301 	orr.w	r3, r3, #1
    3f68:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    if(!touchDetected && bottomBits == B1111) {
    3f6c:	f894 10b0 	ldrb.w	r1, [r4, #176]	; 0xb0
    3f70:	4f85      	ldr	r7, [pc, #532]	; (4188 <_Z9drum_readv+0x2f0>)
    uint16_t bottomBits = numTouches & B1111;
    3f72:	f003 030f 	and.w	r3, r3, #15
    if(!touchDetected && bottomBits == B1111) {
    3f76:	2900      	cmp	r1, #0
    3f78:	d12a      	bne.n	3fd0 <_Z9drum_readv+0x138>
    3f7a:	2b0f      	cmp	r3, #15
    3f7c:	f000 8130 	beq.w	41e0 <_Z9drum_readv+0x348>
  kickSlider.update(millis());
  slider2.update(millis());
  
  if(millis() > kick_on_time + kick_duration) {
    3f80:	4982      	ldr	r1, [pc, #520]	; (418c <_Z9drum_readv+0x2f4>)
    3f82:	4a83      	ldr	r2, [pc, #524]	; (4190 <_Z9drum_readv+0x2f8>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f84:	682b      	ldr	r3, [r5, #0]
    3f86:	6809      	ldr	r1, [r1, #0]
    3f88:	6812      	ldr	r2, [r2, #0]
    3f8a:	9302      	str	r3, [sp, #8]
	return ret;
    3f8c:	9b02      	ldr	r3, [sp, #8]
    3f8e:	440a      	add	r2, r1
    3f90:	429a      	cmp	r2, r3
    3f92:	d202      	bcs.n	3f9a <_Z9drum_readv+0x102>
  kick_playing = 1;
  kick_on_time = millis();
}

void kick_noteoff() {
  kick_playing = 0;
    3f94:	4b7f      	ldr	r3, [pc, #508]	; (4194 <_Z9drum_readv+0x2fc>)
    3f96:	2200      	movs	r2, #0
    3f98:	701a      	strb	r2, [r3, #0]
  if(millis() > hat_on_time + hat_duration) {
    3f9a:	4a7f      	ldr	r2, [pc, #508]	; (4198 <_Z9drum_readv+0x300>)
    3f9c:	4b7f      	ldr	r3, [pc, #508]	; (419c <_Z9drum_readv+0x304>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f9e:	6829      	ldr	r1, [r5, #0]
    3fa0:	9103      	str	r1, [sp, #12]
    3fa2:	6811      	ldr	r1, [r2, #0]
    3fa4:	681a      	ldr	r2, [r3, #0]
	return ret;
    3fa6:	9b03      	ldr	r3, [sp, #12]
    3fa8:	440a      	add	r2, r1
    3faa:	429a      	cmp	r2, r3
    3fac:	d20d      	bcs.n	3fca <_Z9drum_readv+0x132>
 hat_playing = 1;
 hat_on_time = millis();
}

void hat_noteoff() {
  hat_envelope1.noteOff();
    3fae:	487c      	ldr	r0, [pc, #496]	; (41a0 <_Z9drum_readv+0x308>)
  AudioNoInterrupts();
    3fb0:	4d7c      	ldr	r5, [pc, #496]	; (41a4 <_Z9drum_readv+0x30c>)
		seed = 1 + instance_count++;
	}
	void amplitude(float n) {
		if (n < 0.0) n = 0.0;
		else if (n > 1.0) n = 1.0;
		level = (int32_t)(n * 65536.0);
    3fb2:	4c7d      	ldr	r4, [pc, #500]	; (41a8 <_Z9drum_readv+0x310>)
  hat_envelope1.noteOff();
    3fb4:	f7fe fb02 	bl	25bc <_ZN25AudioEffectCustomEnvelope7noteOffEv>
  hat_noise1.amplitude(0.0);
  AudioInterrupts();
    3fb8:	487c      	ldr	r0, [pc, #496]	; (41ac <_Z9drum_readv+0x314>)
  hat_playing = 0;
    3fba:	497d      	ldr	r1, [pc, #500]	; (41b0 <_Z9drum_readv+0x318>)
  AudioNoInterrupts();
    3fbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3fc0:	2300      	movs	r3, #0
    3fc2:	602a      	str	r2, [r5, #0]
    3fc4:	61a3      	str	r3, [r4, #24]
  AudioInterrupts();
    3fc6:	6002      	str	r2, [r0, #0]
  hat_playing = 0;
    3fc8:	700b      	strb	r3, [r1, #0]
}
    3fca:	b004      	add	sp, #16
    3fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tTouchCallback(1, _sliderValue);
      }
      _lastTouch = sysTick;
    }
    
    if(touchDetected && bottomBits == 0) {
    3fd0:	2b00      	cmp	r3, #0
    3fd2:	d1d5      	bne.n	3f80 <_Z9drum_readv+0xe8>
      touchDetected = 0;
    3fd4:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
    3fd8:	e7d2      	b.n	3f80 <_Z9drum_readv+0xe8>
      if(_cnt < NUM_SAMPLES) {
    3fda:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    3fdc:	486a      	ldr	r0, [pc, #424]	; (4188 <_Z9drum_readv+0x2f0>)
    3fde:	290f      	cmp	r1, #15
    3fe0:	ddc4      	ble.n	3f6c <_Z9drum_readv+0xd4>
    if(a.touchDetected() || b.touchDetected()) {
    3fe2:	f8d0 10a8 	ldr.w	r1, [r0, #168]	; 0xa8
    3fe6:	428a      	cmp	r2, r1
    3fe8:	dcbc      	bgt.n	3f64 <_Z9drum_readv+0xcc>
    3fea:	e7bf      	b.n	3f6c <_Z9drum_readv+0xd4>
    if(touchDetected && bottomBits == 0) {
    3fec:	2b00      	cmp	r3, #0
    3fee:	d190      	bne.n	3f12 <_Z9drum_readv+0x7a>
      touchDetected = 0;
    3ff0:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
    3ff4:	e78d      	b.n	3f12 <_Z9drum_readv+0x7a>
      if(_cnt < NUM_SAMPLES) {
    3ff6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    3ff8:	4862      	ldr	r0, [pc, #392]	; (4184 <_Z9drum_readv+0x2ec>)
    3ffa:	290f      	cmp	r1, #15
    3ffc:	f77f af7f 	ble.w	3efe <_Z9drum_readv+0x66>
    if(a.touchDetected() || b.touchDetected()) {
    4000:	f8d0 10a8 	ldr.w	r1, [r0, #168]	; 0xa8
    4004:	428a      	cmp	r2, r1
    4006:	f73f af76 	bgt.w	3ef6 <_Z9drum_readv+0x5e>
    400a:	e778      	b.n	3efe <_Z9drum_readv+0x66>
        if(_baselineIndex >= NUM_SAMPLES) { _baselineIndex = 0; }
    400c:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
      lastUpdate = sysTick;
    4010:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
        if(_baselineIndex >= NUM_SAMPLES) { _baselineIndex = 0; }
    4014:	f1b8 0f0f 	cmp.w	r8, #15
    4018:	f300 80ad 	bgt.w	4176 <_Z9drum_readv+0x2de>
        if(_cnt < NUM_SAMPLES) { _cnt++; }
    401c:	6863      	ldr	r3, [r4, #4]
    401e:	4a5a      	ldr	r2, [pc, #360]	; (4188 <_Z9drum_readv+0x2f0>)
      return touchRead(pin);
    4020:	7820      	ldrb	r0, [r4, #0]
        if(_cnt < NUM_SAMPLES) { _cnt++; }
    4022:	2b0f      	cmp	r3, #15
    4024:	bfdc      	itt	le
    4026:	3301      	addle	r3, #1
    4028:	6053      	strle	r3, [r2, #4]
      return touchRead(pin);
    402a:	f004 fa8f 	bl	854c <touchRead>
        _baselineIndex++;
    402e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        for(int i = 0; i < _cnt; i++) {
    4030:	6867      	ldr	r7, [r4, #4]
        _baselineValues[_baselineIndex] = TSIRead(pin);
    4032:	eb04 0888 	add.w	r8, r4, r8, lsl #2
        _baselineIndex++;
    4036:	3301      	adds	r3, #1
        for(int i = 0; i < _cnt; i++) {
    4038:	2f00      	cmp	r7, #0
        _baselineValues[_baselineIndex] = TSIRead(pin);
    403a:	f8c8 000c 	str.w	r0, [r8, #12]
        _baselineIndex++;
    403e:	64e3      	str	r3, [r4, #76]	; 0x4c
        for(int i = 0; i < _cnt; i++) {
    4040:	f340 80dc 	ble.w	41fc <_Z9drum_readv+0x364>
    4044:	4b5b      	ldr	r3, [pc, #364]	; (41b4 <_Z9drum_readv+0x31c>)
        int sum = 0;
    4046:	2200      	movs	r2, #0
    4048:	eb03 0087 	add.w	r0, r3, r7, lsl #2
          sum += _baselineValues[i];
    404c:	f853 1f04 	ldr.w	r1, [r3, #4]!
        for(int i = 0; i < _cnt; i++) {
    4050:	4283      	cmp	r3, r0
          sum += _baselineValues[i];
    4052:	440a      	add	r2, r1
        for(int i = 0; i < _cnt; i++) {
    4054:	d1fa      	bne.n	404c <_Z9drum_readv+0x1b4>
        if(_baselineIndex >= NUM_SAMPLES) { _baselineIndex = 0; }
    4056:	f8d4 80a4 	ldr.w	r8, [r4, #164]	; 0xa4
        _baseline = sum / _cnt;
    405a:	494b      	ldr	r1, [pc, #300]	; (4188 <_Z9drum_readv+0x2f0>)
    405c:	fb92 f2f7 	sdiv	r2, r2, r7
        if(_baselineIndex >= NUM_SAMPLES) { _baselineIndex = 0; }
    4060:	f1b8 0f0f 	cmp.w	r8, #15
        _baseline = sum / _cnt;
    4064:	60a2      	str	r2, [r4, #8]
        if(_baselineIndex >= NUM_SAMPLES) { _baselineIndex = 0; }
    4066:	f300 8081 	bgt.w	416c <_Z9drum_readv+0x2d4>
        if(_cnt < NUM_SAMPLES) { _cnt++; }
    406a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    406c:	4a46      	ldr	r2, [pc, #280]	; (4188 <_Z9drum_readv+0x2f0>)
      return touchRead(pin);
    406e:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
        if(_cnt < NUM_SAMPLES) { _cnt++; }
    4072:	2b0f      	cmp	r3, #15
    4074:	bfdc      	itt	le
    4076:	3301      	addle	r3, #1
    4078:	65d3      	strle	r3, [r2, #92]	; 0x5c
      return touchRead(pin);
    407a:	f004 fa67 	bl	854c <touchRead>
        _baselineIndex++;
    407e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
        for(int i = 0; i < _cnt; i++) {
    4082:	6de7      	ldr	r7, [r4, #92]	; 0x5c
        _baselineValues[_baselineIndex] = TSIRead(pin);
    4084:	eb04 0888 	add.w	r8, r4, r8, lsl #2
        _baselineIndex++;
    4088:	3301      	adds	r3, #1
        for(int i = 0; i < _cnt; i++) {
    408a:	2f00      	cmp	r7, #0
        _baselineValues[_baselineIndex] = TSIRead(pin);
    408c:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
        _baselineIndex++;
    4090:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        for(int i = 0; i < _cnt; i++) {
    4094:	f340 80b4 	ble.w	4200 <_Z9drum_readv+0x368>
    4098:	4b47      	ldr	r3, [pc, #284]	; (41b8 <_Z9drum_readv+0x320>)
        int sum = 0;
    409a:	2200      	movs	r2, #0
    409c:	eb03 0087 	add.w	r0, r3, r7, lsl #2
          sum += _baselineValues[i];
    40a0:	f853 1f04 	ldr.w	r1, [r3, #4]!
        for(int i = 0; i < _cnt; i++) {
    40a4:	4283      	cmp	r3, r0
          sum += _baselineValues[i];
    40a6:	440a      	add	r2, r1
        for(int i = 0; i < _cnt; i++) {
    40a8:	d1fa      	bne.n	40a0 <_Z9drum_readv+0x208>
        _baseline = sum / _cnt;
    40aa:	fb92 f2f7 	sdiv	r2, r2, r7
    40ae:	f8b4 00ac 	ldrh.w	r0, [r4, #172]	; 0xac
    40b2:	6622      	str	r2, [r4, #96]	; 0x60
    40b4:	e743      	b.n	3f3e <_Z9drum_readv+0xa6>
        if(_baselineIndex >= NUM_SAMPLES) { _baselineIndex = 0; }
    40b6:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
      lastUpdate = sysTick;
    40ba:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
        if(_baselineIndex >= NUM_SAMPLES) { _baselineIndex = 0; }
    40be:	f1b8 0f0f 	cmp.w	r8, #15
    40c2:	dc4f      	bgt.n	4164 <_Z9drum_readv+0x2cc>
        if(_cnt < NUM_SAMPLES) { _cnt++; }
    40c4:	6863      	ldr	r3, [r4, #4]
    40c6:	4a2f      	ldr	r2, [pc, #188]	; (4184 <_Z9drum_readv+0x2ec>)
      return touchRead(pin);
    40c8:	7820      	ldrb	r0, [r4, #0]
        if(_cnt < NUM_SAMPLES) { _cnt++; }
    40ca:	2b0f      	cmp	r3, #15
    40cc:	bfdc      	itt	le
    40ce:	3301      	addle	r3, #1
    40d0:	6053      	strle	r3, [r2, #4]
      return touchRead(pin);
    40d2:	f004 fa3b 	bl	854c <touchRead>
        _baselineIndex++;
    40d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        for(int i = 0; i < _cnt; i++) {
    40d8:	6867      	ldr	r7, [r4, #4]
        _baselineValues[_baselineIndex] = TSIRead(pin);
    40da:	eb04 0888 	add.w	r8, r4, r8, lsl #2
        _baselineIndex++;
    40de:	3301      	adds	r3, #1
        for(int i = 0; i < _cnt; i++) {
    40e0:	2f00      	cmp	r7, #0
        _baselineValues[_baselineIndex] = TSIRead(pin);
    40e2:	f8c8 000c 	str.w	r0, [r8, #12]
        _baselineIndex++;
    40e6:	64e3      	str	r3, [r4, #76]	; 0x4c
        for(int i = 0; i < _cnt; i++) {
    40e8:	f340 808c 	ble.w	4204 <_Z9drum_readv+0x36c>
    40ec:	4b33      	ldr	r3, [pc, #204]	; (41bc <_Z9drum_readv+0x324>)
        int sum = 0;
    40ee:	2200      	movs	r2, #0
    40f0:	eb03 0087 	add.w	r0, r3, r7, lsl #2
          sum += _baselineValues[i];
    40f4:	f853 1f04 	ldr.w	r1, [r3, #4]!
        for(int i = 0; i < _cnt; i++) {
    40f8:	4283      	cmp	r3, r0
          sum += _baselineValues[i];
    40fa:	440a      	add	r2, r1
        for(int i = 0; i < _cnt; i++) {
    40fc:	d1fa      	bne.n	40f4 <_Z9drum_readv+0x25c>
        if(_baselineIndex >= NUM_SAMPLES) { _baselineIndex = 0; }
    40fe:	f8d4 80a4 	ldr.w	r8, [r4, #164]	; 0xa4
        _baseline = sum / _cnt;
    4102:	4920      	ldr	r1, [pc, #128]	; (4184 <_Z9drum_readv+0x2ec>)
    4104:	fb92 f2f7 	sdiv	r2, r2, r7
        if(_baselineIndex >= NUM_SAMPLES) { _baselineIndex = 0; }
    4108:	f1b8 0f0f 	cmp.w	r8, #15
        _baseline = sum / _cnt;
    410c:	60a2      	str	r2, [r4, #8]
        if(_baselineIndex >= NUM_SAMPLES) { _baselineIndex = 0; }
    410e:	dc24      	bgt.n	415a <_Z9drum_readv+0x2c2>
        if(_cnt < NUM_SAMPLES) { _cnt++; }
    4110:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    4112:	4a1c      	ldr	r2, [pc, #112]	; (4184 <_Z9drum_readv+0x2ec>)
      return touchRead(pin);
    4114:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
        if(_cnt < NUM_SAMPLES) { _cnt++; }
    4118:	2b0f      	cmp	r3, #15
    411a:	bfdc      	itt	le
    411c:	3301      	addle	r3, #1
    411e:	65d3      	strle	r3, [r2, #92]	; 0x5c
      return touchRead(pin);
    4120:	f004 fa14 	bl	854c <touchRead>
        _baselineIndex++;
    4124:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
        for(int i = 0; i < _cnt; i++) {
    4128:	6de7      	ldr	r7, [r4, #92]	; 0x5c
        _baselineValues[_baselineIndex] = TSIRead(pin);
    412a:	eb04 0888 	add.w	r8, r4, r8, lsl #2
        _baselineIndex++;
    412e:	3301      	adds	r3, #1
        for(int i = 0; i < _cnt; i++) {
    4130:	2f00      	cmp	r7, #0
        _baselineValues[_baselineIndex] = TSIRead(pin);
    4132:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
        _baselineIndex++;
    4136:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        for(int i = 0; i < _cnt; i++) {
    413a:	dd65      	ble.n	4208 <_Z9drum_readv+0x370>
    413c:	4b20      	ldr	r3, [pc, #128]	; (41c0 <_Z9drum_readv+0x328>)
        int sum = 0;
    413e:	2200      	movs	r2, #0
    4140:	eb03 0087 	add.w	r0, r3, r7, lsl #2
          sum += _baselineValues[i];
    4144:	f853 1f04 	ldr.w	r1, [r3, #4]!
        for(int i = 0; i < _cnt; i++) {
    4148:	4283      	cmp	r3, r0
          sum += _baselineValues[i];
    414a:	440a      	add	r2, r1
        for(int i = 0; i < _cnt; i++) {
    414c:	d1fa      	bne.n	4144 <_Z9drum_readv+0x2ac>
        _baseline = sum / _cnt;
    414e:	fb92 f2f7 	sdiv	r2, r2, r7
    4152:	f8b4 00ac 	ldrh.w	r0, [r4, #172]	; 0xac
    4156:	6622      	str	r2, [r4, #96]	; 0x60
    4158:	e6b9      	b.n	3ece <_Z9drum_readv+0x36>
        if(_baselineIndex >= NUM_SAMPLES) { _baselineIndex = 0; }
    415a:	2300      	movs	r3, #0
    415c:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
    4160:	4698      	mov	r8, r3
    4162:	e7d5      	b.n	4110 <_Z9drum_readv+0x278>
    4164:	2300      	movs	r3, #0
    4166:	64e3      	str	r3, [r4, #76]	; 0x4c
    4168:	4698      	mov	r8, r3
    416a:	e7ab      	b.n	40c4 <_Z9drum_readv+0x22c>
    416c:	2300      	movs	r3, #0
    416e:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
    4172:	4698      	mov	r8, r3
    4174:	e779      	b.n	406a <_Z9drum_readv+0x1d2>
    4176:	2300      	movs	r3, #0
    4178:	64e3      	str	r3, [r4, #76]	; 0x4c
    417a:	4698      	mov	r8, r3
    417c:	e74e      	b.n	401c <_Z9drum_readv+0x184>
    417e:	bf00      	nop
    4180:	20002418 	.word	0x20002418
    4184:	20001768 	.word	0x20001768
    4188:	20001a7c 	.word	0x20001a7c
    418c:	20000cbc 	.word	0x20000cbc
    4190:	20001a24 	.word	0x20001a24
    4194:	20002098 	.word	0x20002098
    4198:	20000c94 	.word	0x20000c94
    419c:	200018c0 	.word	0x200018c0
    41a0:	20001bcc 	.word	0x20001bcc
    41a4:	e000e188 	.word	0xe000e188
    41a8:	20001a04 	.word	0x20001a04
    41ac:	e000e108 	.word	0xe000e108
    41b0:	20002410 	.word	0x20002410
    41b4:	20001a84 	.word	0x20001a84
    41b8:	20001adc 	.word	0x20001adc
    41bc:	20001770 	.word	0x20001770
    41c0:	200017c8 	.word	0x200017c8
      if (tTouchCallback != 0) {
    41c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
      _sliderValue = (db - da);
    41c8:	ebce 0102 	rsb	r1, lr, r2
      touchDetected = 1;
    41cc:	2001      	movs	r0, #1
      _sliderValue = (db - da);
    41ce:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
      touchDetected = 1;
    41d2:	f887 00b0 	strb.w	r0, [r7, #176]	; 0xb0
      if (tTouchCallback != 0) {
    41d6:	b103      	cbz	r3, 41da <_Z9drum_readv+0x342>
        tTouchCallback(1, _sliderValue);
    41d8:	4798      	blx	r3
      _lastTouch = sysTick;
    41da:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
    41de:	e698      	b.n	3f12 <_Z9drum_readv+0x7a>
      if (tTouchCallback != 0) {
    41e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
      _sliderValue = (db - da);
    41e4:	ebcc 0102 	rsb	r1, ip, r2
      touchDetected = 1;
    41e8:	2001      	movs	r0, #1
      _sliderValue = (db - da);
    41ea:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
      touchDetected = 1;
    41ee:	f887 00b0 	strb.w	r0, [r7, #176]	; 0xb0
      if (tTouchCallback != 0) {
    41f2:	b103      	cbz	r3, 41f6 <_Z9drum_readv+0x35e>
        tTouchCallback(1, _sliderValue);
    41f4:	4798      	blx	r3
      _lastTouch = sysTick;
    41f6:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
    41fa:	e6c1      	b.n	3f80 <_Z9drum_readv+0xe8>
        int sum = 0;
    41fc:	2200      	movs	r2, #0
    41fe:	e72a      	b.n	4056 <_Z9drum_readv+0x1be>
    4200:	2200      	movs	r2, #0
    4202:	e752      	b.n	40aa <_Z9drum_readv+0x212>
    4204:	2200      	movs	r2, #0
    4206:	e77a      	b.n	40fe <_Z9drum_readv+0x266>
    4208:	2200      	movs	r2, #0
    420a:	e7a0      	b.n	414e <_Z9drum_readv+0x2b6>
    420c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00004210 <_Z11kick_noteonh>:
void kick_noteon(uint8_t velocity) {
    4210:	b570      	push	{r4, r5, r6, lr}
    4212:	4604      	mov	r4, r0
  kick_duration = 200 - velocity;
    4214:	f1c4 03c8 	rsb	r3, r4, #200	; 0xc8
    4218:	482f      	ldr	r0, [pc, #188]	; (42d8 <_Z11kick_noteonh+0xc8>)
  AudioNoInterrupts();
    421a:	4a30      	ldr	r2, [pc, #192]	; (42dc <_Z11kick_noteonh+0xcc>)
  kick_duration = 200 - velocity;
    421c:	6003      	str	r3, [r0, #0]
  AudioNoInterrupts();
    421e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    if(milliseconds < 0)
    4222:	2b00      	cmp	r3, #0
void kick_noteon(uint8_t velocity) {
    4224:	b082      	sub	sp, #8
  AudioNoInterrupts();
    4226:	6011      	str	r1, [r2, #0]
    4228:	db45      	blt.n	42b6 <_Z11kick_noteonh+0xa6>
    int32_t len_samples = milliseconds*(AUDIO_SAMPLE_RATE_EXACT/1000.0);
    422a:	4618      	mov	r0, r3
    422c:	f008 fad0 	bl	c7d0 <__aeabi_i2d>
    4230:	a323      	add	r3, pc, #140	; (adr r3, 42c0 <_Z11kick_noteonh+0xb0>)
    4232:	e9d3 2300 	ldrd	r2, r3, [r3]
    4236:	f008 fb31 	bl	c89c <__aeabi_dmul>
    423a:	f008 fdc9 	bl	cdd0 <__aeabi_d2iz>
    env_decrement = (0x7fff0000/len_samples);
    423e:	4b28      	ldr	r3, [pc, #160]	; (42e0 <_Z11kick_noteonh+0xd0>)
    4240:	4e28      	ldr	r6, [pc, #160]	; (42e4 <_Z11kick_noteonh+0xd4>)
    4242:	fb93 f0f0 	sdiv	r0, r3, r0
    4246:	6230      	str	r0, [r6, #32]
  kick_drum1.frequency(velocity/4+50);
    4248:	08a0      	lsrs	r0, r4, #2
    424a:	3032      	adds	r0, #50	; 0x32
    424c:	f008 ff12 	bl	d074 <__aeabi_i2f>
    if(freq < 0.0)
    4250:	2100      	movs	r1, #0
    4252:	4604      	mov	r4, r0
    4254:	f009 f900 	bl	d458 <__aeabi_fcmplt>
    4258:	2800      	cmp	r0, #0
    425a:	d12e      	bne.n	42ba <_Z11kick_noteonh+0xaa>
    else if(freq > (AUDIO_SAMPLE_RATE_EXACT/2))
    425c:	4620      	mov	r0, r4
    425e:	f008 fac9 	bl	c7f4 <__aeabi_f2d>
    4262:	a319      	add	r3, pc, #100	; (adr r3, 42c8 <_Z11kick_noteonh+0xb8>)
    4264:	e9d3 2300 	ldrd	r2, r3, [r3]
    4268:	4604      	mov	r4, r0
    426a:	460d      	mov	r5, r1
    426c:	f008 fda6 	bl	cdbc <__aeabi_dcmpgt>
    4270:	b198      	cbz	r0, 429a <_Z11kick_noteonh+0x8a>
    4272:	481d      	ldr	r0, [pc, #116]	; (42e8 <_Z11kick_noteonh+0xd8>)
  AudioInterrupts();
    4274:	4b1d      	ldr	r3, [pc, #116]	; (42ec <_Z11kick_noteonh+0xdc>)
    wav_increment = (freq * (0x7fffffffLL/AUDIO_SAMPLE_RATE_EXACT)) + 0.5;
    4276:	6330      	str	r0, [r6, #48]	; 0x30
    4278:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    427c:	601a      	str	r2, [r3, #0]
  kick_drum1.noteOn();
    427e:	4819      	ldr	r0, [pc, #100]	; (42e4 <_Z11kick_noteonh+0xd4>)
    4280:	f006 fd96 	bl	adb0 <_ZN20AudioSynthSimpleDrum6noteOnEv>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4284:	4b1a      	ldr	r3, [pc, #104]	; (42f0 <_Z11kick_noteonh+0xe0>)
  kick_on_time = millis();
    4286:	4a1b      	ldr	r2, [pc, #108]	; (42f4 <_Z11kick_noteonh+0xe4>)
    4288:	681b      	ldr	r3, [r3, #0]
    428a:	9301      	str	r3, [sp, #4]
	return ret;
    428c:	9901      	ldr	r1, [sp, #4]
  kick_playing = 1;
    428e:	4b1a      	ldr	r3, [pc, #104]	; (42f8 <_Z11kick_noteonh+0xe8>)
  kick_on_time = millis();
    4290:	6011      	str	r1, [r2, #0]
  kick_playing = 1;
    4292:	2201      	movs	r2, #1
    4294:	701a      	strb	r2, [r3, #0]
}
    4296:	b002      	add	sp, #8
    4298:	bd70      	pop	{r4, r5, r6, pc}
    429a:	a30d      	add	r3, pc, #52	; (adr r3, 42d0 <_Z11kick_noteonh+0xc0>)
    429c:	e9d3 2300 	ldrd	r2, r3, [r3]
    42a0:	4620      	mov	r0, r4
    42a2:	4629      	mov	r1, r5
    42a4:	f008 fafa 	bl	c89c <__aeabi_dmul>
    42a8:	2200      	movs	r2, #0
    42aa:	4b14      	ldr	r3, [pc, #80]	; (42fc <_Z11kick_noteonh+0xec>)
    42ac:	f008 f944 	bl	c538 <__adddf3>
    42b0:	f008 fdb6 	bl	ce20 <__aeabi_d2uiz>
    42b4:	e7de      	b.n	4274 <_Z11kick_noteonh+0x64>
    42b6:	4e0b      	ldr	r6, [pc, #44]	; (42e4 <_Z11kick_noteonh+0xd4>)
    42b8:	e7c6      	b.n	4248 <_Z11kick_noteonh+0x38>
    if(freq < 0.0)
    42ba:	2000      	movs	r0, #0
    42bc:	e7da      	b.n	4274 <_Z11kick_noteonh+0x64>
    42be:	bf00      	nop
    42c0:	0f1195d5 	.word	0x0f1195d5
    42c4:	40460f0f 	.word	0x40460f0f
    42c8:	b4b72c52 	.word	0xb4b72c52
    42cc:	40d58ab4 	.word	0x40d58ab4
    42d0:	78cf793f 	.word	0x78cf793f
    42d4:	40e7c489 	.word	0x40e7c489
    42d8:	20000cbc 	.word	0x20000cbc
    42dc:	e000e188 	.word	0xe000e188
    42e0:	7fff0000 	.word	0x7fff0000
    42e4:	20002398 	.word	0x20002398
    42e8:	40000021 	.word	0x40000021
    42ec:	e000e108 	.word	0xe000e108
    42f0:	20002418 	.word	0x20002418
    42f4:	20001a24 	.word	0x20001a24
    42f8:	20002098 	.word	0x20002098
    42fc:	3fe00000 	.word	0x3fe00000

00004300 <_Z9kickEventhi>:
  switch(event) {
    4300:	2801      	cmp	r0, #1
    4302:	d006      	beq.n	4312 <_Z9kickEventhi+0x12>
    4304:	2802      	cmp	r0, #2
    4306:	d103      	bne.n	4310 <_Z9kickEventhi+0x10>
  kick_playing = 0;
    4308:	4b05      	ldr	r3, [pc, #20]	; (4320 <_Z9kickEventhi+0x20>)
    430a:	2200      	movs	r2, #0
    430c:	701a      	strb	r2, [r3, #0]
    430e:	4770      	bx	lr
    4310:	4770      	bx	lr
  int val = constrain(value+63,0,127);
    4312:	313f      	adds	r1, #63	; 0x3f
    4314:	f381 0007 	usat	r0, #7, r1
      kick_noteon(val);
    4318:	b2c0      	uxtb	r0, r0
    431a:	f7ff bf79 	b.w	4210 <_Z11kick_noteonh>
    431e:	bf00      	nop
    4320:	20002098 	.word	0x20002098
    4324:	ffffffff 	.word	0xffffffff

00004328 <_Z10hat_noteonh>:
void hat_noteon(uint8_t velocity) {
    4328:	b5f0      	push	{r4, r5, r6, r7, lr}
 if(velocity > 63) {
    432a:	283f      	cmp	r0, #63	; 0x3f
void hat_noteon(uint8_t velocity) {
    432c:	b085      	sub	sp, #20
    432e:	4606      	mov	r6, r0
 if(velocity > 63) {
    4330:	f200 80a3 	bhi.w	447a <_Z10hat_noteonh+0x152>
 AudioNoInterrupts();
    4334:	4a58      	ldr	r2, [pc, #352]	; (4498 <_Z10hat_noteonh+0x170>)
    4336:	4b59      	ldr	r3, [pc, #356]	; (449c <_Z10hat_noteonh+0x174>)
 hat_envelope1.decay((velocity/4)+20);
    4338:	4859      	ldr	r0, [pc, #356]	; (44a0 <_Z10hat_noteonh+0x178>)
 AudioNoInterrupts();
    433a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    433e:	6014      	str	r4, [r2, #0]
 hat_envelope1.decay((velocity/4)+20);
    4340:	08b1      	lsrs	r1, r6, #2
    4342:	f64c 42cc 	movw	r2, #52428	; 0xcccc
    4346:	619a      	str	r2, [r3, #24]
    4348:	3114      	adds	r1, #20
    434a:	f7fe f919 	bl	2580 <_ZN25AudioEffectCustomEnvelope5decayEi>
 hat_filter_bp.resonance(map(velocity,0,127,100,70)/100.);
    434e:	2346      	movs	r3, #70	; 0x46
    4350:	227f      	movs	r2, #127	; 0x7f
    4352:	9300      	str	r3, [sp, #0]
    4354:	2100      	movs	r1, #0
    4356:	2364      	movs	r3, #100	; 0x64
    4358:	4630      	mov	r0, r6
    435a:	f005 fecb 	bl	a0f4 <_Z3maplllll>
    435e:	f008 fa37 	bl	c7d0 <__aeabi_i2d>
    4362:	2200      	movs	r2, #0
    4364:	4b4f      	ldr	r3, [pc, #316]	; (44a4 <_Z10hat_noteonh+0x17c>)
    4366:	f008 fbc3 	bl	caf0 <__aeabi_ddiv>
    436a:	f008 fd79 	bl	ce60 <__aeabi_d2f>
    436e:	4607      	mov	r7, r0
		if (q < 0.7) q = 0.7;
    4370:	f008 fa40 	bl	c7f4 <__aeabi_f2d>
    4374:	a346      	add	r3, pc, #280	; (adr r3, 4490 <_Z10hat_noteonh+0x168>)
    4376:	e9d3 2300 	ldrd	r2, r3, [r3]
    437a:	4604      	mov	r4, r0
    437c:	460d      	mov	r5, r1
    437e:	f008 fcff 	bl	cd80 <__aeabi_dcmplt>
    4382:	2800      	cmp	r0, #0
    4384:	d177      	bne.n	4476 <_Z10hat_noteonh+0x14e>
		else if (q > 5.0) q = 5.0;
    4386:	4638      	mov	r0, r7
    4388:	4947      	ldr	r1, [pc, #284]	; (44a8 <_Z10hat_noteonh+0x180>)
    438a:	f009 f883 	bl	d494 <__aeabi_fcmpgt>
    438e:	2800      	cmp	r0, #0
    4390:	d05f      	beq.n	4452 <_Z10hat_noteonh+0x12a>
    4392:	4d46      	ldr	r5, [pc, #280]	; (44ac <_Z10hat_noteonh+0x184>)
		setting_damp = (1.0 / q) * 1073741824.0;
    4394:	4c46      	ldr	r4, [pc, #280]	; (44b0 <_Z10hat_noteonh+0x188>)
 hat_mixer.gain(1, map(velocity,0,127,0,100)/100.); // snappy gain
    4396:	2100      	movs	r1, #0
    4398:	2364      	movs	r3, #100	; 0x64
    439a:	9300      	str	r3, [sp, #0]
    439c:	227f      	movs	r2, #127	; 0x7f
    439e:	460b      	mov	r3, r1
    43a0:	6265      	str	r5, [r4, #36]	; 0x24
    43a2:	4630      	mov	r0, r6
    43a4:	f005 fea6 	bl	a0f4 <_Z3maplllll>
    43a8:	f008 fa12 	bl	c7d0 <__aeabi_i2d>
    43ac:	2200      	movs	r2, #0
    43ae:	4b3d      	ldr	r3, [pc, #244]	; (44a4 <_Z10hat_noteonh+0x17c>)
    43b0:	f008 fb9e 	bl	caf0 <__aeabi_ddiv>
    43b4:	f008 fd54 	bl	ce60 <__aeabi_d2f>
		if (gain > 32767.0f) gain = 32767.0f;
    43b8:	493e      	ldr	r1, [pc, #248]	; (44b4 <_Z10hat_noteonh+0x18c>)
    43ba:	4604      	mov	r4, r0
    43bc:	f009 f86a 	bl	d494 <__aeabi_fcmpgt>
    43c0:	2800      	cmp	r0, #0
    43c2:	d156      	bne.n	4472 <_Z10hat_noteonh+0x14a>
		else if (gain < -32767.0f) gain = -32767.0f;
    43c4:	4620      	mov	r0, r4
    43c6:	493c      	ldr	r1, [pc, #240]	; (44b8 <_Z10hat_noteonh+0x190>)
    43c8:	f009 f846 	bl	d458 <__aeabi_fcmplt>
    43cc:	2800      	cmp	r0, #0
    43ce:	d15a      	bne.n	4486 <_Z10hat_noteonh+0x15e>
    43d0:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
    43d4:	4620      	mov	r0, r4
    43d6:	f008 fea1 	bl	d11c <__aeabi_fmul>
    43da:	f009 f865 	bl	d4a8 <__aeabi_f2iz>
    43de:	4605      	mov	r5, r0
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    43e0:	4c36      	ldr	r4, [pc, #216]	; (44bc <_Z10hat_noteonh+0x194>)
 hat_mixer.gain(0, map(velocity,0,127,50,20)/100.); // noise gain
    43e2:	2314      	movs	r3, #20
    43e4:	9300      	str	r3, [sp, #0]
    43e6:	227f      	movs	r2, #127	; 0x7f
    43e8:	2332      	movs	r3, #50	; 0x32
    43ea:	2100      	movs	r1, #0
    43ec:	61e5      	str	r5, [r4, #28]
    43ee:	4630      	mov	r0, r6
    43f0:	f005 fe80 	bl	a0f4 <_Z3maplllll>
    43f4:	f008 f9ec 	bl	c7d0 <__aeabi_i2d>
    43f8:	2200      	movs	r2, #0
    43fa:	4b2a      	ldr	r3, [pc, #168]	; (44a4 <_Z10hat_noteonh+0x17c>)
    43fc:	f008 fb78 	bl	caf0 <__aeabi_ddiv>
    4400:	f008 fd2e 	bl	ce60 <__aeabi_d2f>
		if (gain > 32767.0f) gain = 32767.0f;
    4404:	492b      	ldr	r1, [pc, #172]	; (44b4 <_Z10hat_noteonh+0x18c>)
    4406:	4605      	mov	r5, r0
    4408:	f009 f844 	bl	d494 <__aeabi_fcmpgt>
    440c:	2800      	cmp	r0, #0
    440e:	d12e      	bne.n	446e <_Z10hat_noteonh+0x146>
		else if (gain < -32767.0f) gain = -32767.0f;
    4410:	4628      	mov	r0, r5
    4412:	4929      	ldr	r1, [pc, #164]	; (44b8 <_Z10hat_noteonh+0x190>)
    4414:	f009 f820 	bl	d458 <__aeabi_fcmplt>
    4418:	2800      	cmp	r0, #0
    441a:	d132      	bne.n	4482 <_Z10hat_noteonh+0x15a>
    441c:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
    4420:	4628      	mov	r0, r5
    4422:	f008 fe7b 	bl	d11c <__aeabi_fmul>
    4426:	f009 f83f 	bl	d4a8 <__aeabi_f2iz>
    442a:	4602      	mov	r2, r0
 AudioInterrupts();
    442c:	4b24      	ldr	r3, [pc, #144]	; (44c0 <_Z10hat_noteonh+0x198>)
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    442e:	61a2      	str	r2, [r4, #24]
    4430:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4434:	601a      	str	r2, [r3, #0]
 hat_envelope1.noteOn();
    4436:	481a      	ldr	r0, [pc, #104]	; (44a0 <_Z10hat_noteonh+0x178>)
    4438:	f7fe f8ba 	bl	25b0 <_ZN25AudioEffectCustomEnvelope6noteOnEv>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    443c:	4b21      	ldr	r3, [pc, #132]	; (44c4 <_Z10hat_noteonh+0x19c>)
 hat_on_time = millis();
    443e:	4a22      	ldr	r2, [pc, #136]	; (44c8 <_Z10hat_noteonh+0x1a0>)
    4440:	681b      	ldr	r3, [r3, #0]
    4442:	9303      	str	r3, [sp, #12]
	return ret;
    4444:	9903      	ldr	r1, [sp, #12]
 hat_playing = 1;
    4446:	4b21      	ldr	r3, [pc, #132]	; (44cc <_Z10hat_noteonh+0x1a4>)
 hat_on_time = millis();
    4448:	6011      	str	r1, [r2, #0]
 hat_playing = 1;
    444a:	2201      	movs	r2, #1
    444c:	701a      	strb	r2, [r3, #0]
}
    444e:	b005      	add	sp, #20
    4450:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4452:	462b      	mov	r3, r5
    4454:	4622      	mov	r2, r4
    4456:	2000      	movs	r0, #0
    4458:	491d      	ldr	r1, [pc, #116]	; (44d0 <_Z10hat_noteonh+0x1a8>)
    445a:	f008 fb49 	bl	caf0 <__aeabi_ddiv>
    445e:	2200      	movs	r2, #0
    4460:	4b1c      	ldr	r3, [pc, #112]	; (44d4 <_Z10hat_noteonh+0x1ac>)
    4462:	f008 fa1b 	bl	c89c <__aeabi_dmul>
    4466:	f008 fcb3 	bl	cdd0 <__aeabi_d2iz>
    446a:	4605      	mov	r5, r0
    446c:	e792      	b.n	4394 <_Z10hat_noteonh+0x6c>
		if (gain > 32767.0f) gain = 32767.0f;
    446e:	4a1a      	ldr	r2, [pc, #104]	; (44d8 <_Z10hat_noteonh+0x1b0>)
    4470:	e7dc      	b.n	442c <_Z10hat_noteonh+0x104>
    4472:	4d19      	ldr	r5, [pc, #100]	; (44d8 <_Z10hat_noteonh+0x1b0>)
    4474:	e7b4      	b.n	43e0 <_Z10hat_noteonh+0xb8>
		if (q < 0.7) q = 0.7;
    4476:	4d19      	ldr	r5, [pc, #100]	; (44dc <_Z10hat_noteonh+0x1b4>)
    4478:	e78c      	b.n	4394 <_Z10hat_noteonh+0x6c>
  hat_snappy.noteOn();
    447a:	4819      	ldr	r0, [pc, #100]	; (44e0 <_Z10hat_noteonh+0x1b8>)
    447c:	f006 fc98 	bl	adb0 <_ZN20AudioSynthSimpleDrum6noteOnEv>
    4480:	e758      	b.n	4334 <_Z10hat_noteonh+0xc>
		else if (gain < -32767.0f) gain = -32767.0f;
    4482:	4a18      	ldr	r2, [pc, #96]	; (44e4 <_Z10hat_noteonh+0x1bc>)
    4484:	e7d2      	b.n	442c <_Z10hat_noteonh+0x104>
    4486:	4d17      	ldr	r5, [pc, #92]	; (44e4 <_Z10hat_noteonh+0x1bc>)
    4488:	e7aa      	b.n	43e0 <_Z10hat_noteonh+0xb8>
    448a:	bf00      	nop
    448c:	f3af 8000 	nop.w
    4490:	66666666 	.word	0x66666666
    4494:	3fe66666 	.word	0x3fe66666
    4498:	e000e188 	.word	0xe000e188
    449c:	20001a04 	.word	0x20001a04
    44a0:	20001bcc 	.word	0x20001bcc
    44a4:	40590000 	.word	0x40590000
    44a8:	40a00000 	.word	0x40a00000
    44ac:	0ccccccc 	.word	0x0ccccccc
    44b0:	200023d4 	.word	0x200023d4
    44b4:	46fffe00 	.word	0x46fffe00
    44b8:	c6fffe00 	.word	0xc6fffe00
    44bc:	20001888 	.word	0x20001888
    44c0:	e000e108 	.word	0xe000e108
    44c4:	20002418 	.word	0x20002418
    44c8:	200018c0 	.word	0x200018c0
    44cc:	20002410 	.word	0x20002410
    44d0:	3ff00000 	.word	0x3ff00000
    44d4:	41d00000 	.word	0x41d00000
    44d8:	7fff0000 	.word	0x7fff0000
    44dc:	5b6db6f5 	.word	0x5b6db6f5
    44e0:	20001b58 	.word	0x20001b58
    44e4:	80010000 	.word	0x80010000

000044e8 <_Z8hatEventhi>:
  switch(event) {
    44e8:	2801      	cmp	r0, #1
void hatEvent(uint8_t event, int value) {
    44ea:	b538      	push	{r3, r4, r5, lr}
  switch(event) {
    44ec:	d011      	beq.n	4512 <_Z8hatEventhi+0x2a>
    44ee:	2802      	cmp	r0, #2
    44f0:	d10e      	bne.n	4510 <_Z8hatEventhi+0x28>
  hat_envelope1.noteOff();
    44f2:	480c      	ldr	r0, [pc, #48]	; (4524 <_Z8hatEventhi+0x3c>)
  AudioNoInterrupts();
    44f4:	4d0c      	ldr	r5, [pc, #48]	; (4528 <_Z8hatEventhi+0x40>)
    44f6:	4c0d      	ldr	r4, [pc, #52]	; (452c <_Z8hatEventhi+0x44>)
  hat_envelope1.noteOff();
    44f8:	f7fe f860 	bl	25bc <_ZN25AudioEffectCustomEnvelope7noteOffEv>
  AudioInterrupts();
    44fc:	480c      	ldr	r0, [pc, #48]	; (4530 <_Z8hatEventhi+0x48>)
  hat_playing = 0;
    44fe:	490d      	ldr	r1, [pc, #52]	; (4534 <_Z8hatEventhi+0x4c>)
  AudioNoInterrupts();
    4500:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4504:	2300      	movs	r3, #0
    4506:	602a      	str	r2, [r5, #0]
    4508:	61a3      	str	r3, [r4, #24]
  AudioInterrupts();
    450a:	6002      	str	r2, [r0, #0]
  hat_playing = 0;
    450c:	700b      	strb	r3, [r1, #0]
    450e:	bd38      	pop	{r3, r4, r5, pc}
    4510:	bd38      	pop	{r3, r4, r5, pc}
  int val = constrain(value+63,0,127);
    4512:	313f      	adds	r1, #63	; 0x3f
    4514:	f381 0007 	usat	r0, #7, r1
      hat_noteon(val);
    4518:	b2c0      	uxtb	r0, r0
}
    451a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      hat_noteon(val);
    451e:	f7ff bf03 	b.w	4328 <_Z10hat_noteonh>
    4522:	bf00      	nop
    4524:	20001bcc 	.word	0x20001bcc
    4528:	e000e188 	.word	0xe000e188
    452c:	20001a04 	.word	0x20001a04
    4530:	e000e108 	.word	0xe000e108
    4534:	20002410 	.word	0x20002410

00004538 <_Z6detuneii>:
    osc_saw_frequency = osc_saw_target_frequency;
    osc_pulse_frequency = osc_pulse_target_frequency;
  }
}

float detune(int note, int amount) { // amount goes from 0-1023
    4538:	b538      	push	{r3, r4, r5, lr}
  if (amount > 850) {
    453a:	f240 3352 	movw	r3, #850	; 0x352
    453e:	4299      	cmp	r1, r3
float detune(int note, int amount) { // amount goes from 0-1023
    4540:	4604      	mov	r4, r0
  if (amount > 850) {
    4542:	dd12      	ble.n	456a <_Z6detuneii+0x32>
  if(x < 0) {
    4544:	2800      	cmp	r0, #0
    4546:	db29      	blt.n	459c <_Z6detuneii+0x64>
    x = MIDI_HIGHEST_NOTE;
    4548:	2c5e      	cmp	r4, #94	; 0x5e
    454a:	bfa8      	it	ge
    454c:	245e      	movge	r4, #94	; 0x5e
    return midi_note_to_frequency(note) * (amount+9000)/10240.;
    454e:	f501 500c 	add.w	r0, r1, #8960	; 0x2300
    4552:	3028      	adds	r0, #40	; 0x28
    4554:	f008 fd8e 	bl	d074 <__aeabi_i2f>
  return MIDI_NOTE_FREQUENCY[x];
    4558:	4b20      	ldr	r3, [pc, #128]	; (45dc <_Z6detuneii+0xa4>)
    455a:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
    455e:	f008 fddd 	bl	d11c <__aeabi_fmul>
    4562:	491f      	ldr	r1, [pc, #124]	; (45e0 <_Z6detuneii+0xa8>)
    4564:	f008 fe8e 	bl	d284 <__aeabi_fdiv>
    4568:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (amount > 680) {
    456a:	f5b1 7f2a 	cmp.w	r1, #680	; 0x2a8
    456e:	dd08      	ble.n	4582 <_Z6detuneii+0x4a>
  if(x < 0) {
    4570:	1f04      	subs	r4, r0, #4
    4572:	d40e      	bmi.n	4592 <_Z6detuneii+0x5a>
    x = MIDI_HIGHEST_NOTE;
    4574:	2c5e      	cmp	r4, #94	; 0x5e
    4576:	bfa8      	it	ge
    4578:	245e      	movge	r4, #94	; 0x5e
  return MIDI_NOTE_FREQUENCY[x];
    457a:	4b18      	ldr	r3, [pc, #96]	; (45dc <_Z6detuneii+0xa4>)
    457c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    4580:	bd38      	pop	{r3, r4, r5, pc}
    return midi_note_to_frequency(note - DETUNE_OFFSET_SEMITONES[0]);
  }
  if (amount > 560) {
    4582:	f5b1 7f0c 	cmp.w	r1, #560	; 0x230
    4586:	dc0b      	bgt.n	45a0 <_Z6detuneii+0x68>
    return midi_note_to_frequency(note - DETUNE_OFFSET_SEMITONES[1]);
  }
  if (amount > 350) {
    4588:	f5b1 7faf 	cmp.w	r1, #350	; 0x15e
    458c:	dd0b      	ble.n	45a6 <_Z6detuneii+0x6e>
  if(x < 0) {
    458e:	1fc4      	subs	r4, r0, #7
    4590:	d5f0      	bpl.n	4574 <_Z6detuneii+0x3c>
    x = 0;
    4592:	2400      	movs	r4, #0
  return MIDI_NOTE_FREQUENCY[x];
    4594:	4b11      	ldr	r3, [pc, #68]	; (45dc <_Z6detuneii+0xa4>)
    4596:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    459a:	bd38      	pop	{r3, r4, r5, pc}
    x = 0;
    459c:	2400      	movs	r4, #0
    459e:	e7d6      	b.n	454e <_Z6detuneii+0x16>
  if(x < 0) {
    45a0:	1f44      	subs	r4, r0, #5
    45a2:	d5e7      	bpl.n	4574 <_Z6detuneii+0x3c>
    45a4:	e7f5      	b.n	4592 <_Z6detuneii+0x5a>
    return midi_note_to_frequency(note - DETUNE_OFFSET_SEMITONES[2]);
  }
  if (amount > 200) {
    45a6:	29c8      	cmp	r1, #200	; 0xc8
    45a8:	dc12      	bgt.n	45d0 <_Z6detuneii+0x98>
    45aa:	3c0c      	subs	r4, #12
    45ac:	d413      	bmi.n	45d6 <_Z6detuneii+0x9e>
    x = MIDI_HIGHEST_NOTE;
    45ae:	2c5e      	cmp	r4, #94	; 0x5e
    45b0:	bfa8      	it	ge
    45b2:	245e      	movge	r4, #94	; 0x5e
    return midi_note_to_frequency(note - DETUNE_OFFSET_SEMITONES[3]);
  }
  return midi_note_to_frequency(note - 12) * ( 20000 - amount )/20000.;
    45b4:	f5c1 409c 	rsb	r0, r1, #19968	; 0x4e00
  return MIDI_NOTE_FREQUENCY[x];
    45b8:	4d08      	ldr	r5, [pc, #32]	; (45dc <_Z6detuneii+0xa4>)
    45ba:	3020      	adds	r0, #32
    45bc:	f008 fd5a 	bl	d074 <__aeabi_i2f>
    45c0:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
    45c4:	f008 fdaa 	bl	d11c <__aeabi_fmul>
    45c8:	4906      	ldr	r1, [pc, #24]	; (45e4 <_Z6detuneii+0xac>)
    45ca:	f008 fe5b 	bl	d284 <__aeabi_fdiv>
}
    45ce:	bd38      	pop	{r3, r4, r5, pc}
  if(x < 0) {
    45d0:	3c09      	subs	r4, #9
    45d2:	d5cf      	bpl.n	4574 <_Z6detuneii+0x3c>
    45d4:	e7dd      	b.n	4592 <_Z6detuneii+0x5a>
    x = 0;
    45d6:	2400      	movs	r4, #0
    45d8:	e7ec      	b.n	45b4 <_Z6detuneii+0x7c>
    45da:	bf00      	nop
    45dc:	000118ec 	.word	0x000118ec
    45e0:	46200000 	.word	0x46200000
    45e4:	469c4000 	.word	0x469c4000

000045e8 <_Z12pitch_updatev>:
void pitch_update() {
    45e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  detune_amount = muxAnalogRead(OSC_DETUNE_POT);
    45ec:	2003      	movs	r0, #3
void pitch_update() {
    45ee:	b083      	sub	sp, #12
  detune_amount = muxAnalogRead(OSC_DETUNE_POT);
    45f0:	f7fe fe24 	bl	323c <_Z13muxAnalogReadh>
  float osc_saw_target_frequency = detune(osc_pulse_midi_note,detune_amount);
    45f4:	4a22      	ldr	r2, [pc, #136]	; (4680 <_Z12pitch_updatev+0x98>)
  detune_amount = muxAnalogRead(OSC_DETUNE_POT);
    45f6:	4b23      	ldr	r3, [pc, #140]	; (4684 <_Z12pitch_updatev+0x9c>)
    45f8:	4601      	mov	r1, r0
  float osc_saw_target_frequency = detune(osc_pulse_midi_note,detune_amount);
    45fa:	7810      	ldrb	r0, [r2, #0]
  detune_amount = muxAnalogRead(OSC_DETUNE_POT);
    45fc:	6019      	str	r1, [r3, #0]
  float osc_saw_target_frequency = detune(osc_pulse_midi_note,detune_amount);
    45fe:	f7ff ff9b 	bl	4538 <_Z6detuneii>
    4602:	4604      	mov	r4, r0
  if(!muxDigitalRead(SLIDE_PIN)) {
    4604:	2001      	movs	r0, #1
    4606:	f7fe fe3f 	bl	3288 <_Z14muxDigitalReadh>
    460a:	2800      	cmp	r0, #0
    460c:	d12f      	bne.n	466e <_Z12pitch_updatev+0x86>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    460e:	4e1e      	ldr	r6, [pc, #120]	; (4688 <_Z12pitch_updatev+0xa0>)
    if((millis() - pitch_update_time) > 10) {
    4610:	4d1e      	ldr	r5, [pc, #120]	; (468c <_Z12pitch_updatev+0xa4>)
    4612:	6833      	ldr	r3, [r6, #0]
    4614:	9300      	str	r3, [sp, #0]
	return ret;
    4616:	9a00      	ldr	r2, [sp, #0]
    4618:	682b      	ldr	r3, [r5, #0]
    461a:	1ad3      	subs	r3, r2, r3
    461c:	2b0a      	cmp	r3, #10
    461e:	d923      	bls.n	4668 <_Z12pitch_updatev+0x80>
      osc_saw_frequency = osc_saw_frequency + (osc_saw_target_frequency - osc_saw_frequency)*GLIDE_COEFFICIENT;
    4620:	f8df 8078 	ldr.w	r8, [pc, #120]	; 469c <_Z12pitch_updatev+0xb4>
      osc_pulse_frequency = osc_pulse_frequency + (osc_pulse_target_frequency - osc_pulse_frequency)*GLIDE_COEFFICIENT;
    4624:	4f1a      	ldr	r7, [pc, #104]	; (4690 <_Z12pitch_updatev+0xa8>)
      osc_saw_frequency = osc_saw_frequency + (osc_saw_target_frequency - osc_saw_frequency)*GLIDE_COEFFICIENT;
    4626:	f8d8 9000 	ldr.w	r9, [r8]
    462a:	4620      	mov	r0, r4
    462c:	4649      	mov	r1, r9
    462e:	f008 fc6b 	bl	cf08 <__aeabi_fsub>
    4632:	4918      	ldr	r1, [pc, #96]	; (4694 <_Z12pitch_updatev+0xac>)
    4634:	f008 fd72 	bl	d11c <__aeabi_fmul>
    4638:	4601      	mov	r1, r0
    463a:	4648      	mov	r0, r9
    463c:	f008 fc66 	bl	cf0c <__addsf3>
      osc_pulse_frequency = osc_pulse_frequency + (osc_pulse_target_frequency - osc_pulse_frequency)*GLIDE_COEFFICIENT;
    4640:	4b15      	ldr	r3, [pc, #84]	; (4698 <_Z12pitch_updatev+0xb0>)
    4642:	683c      	ldr	r4, [r7, #0]
      osc_saw_frequency = osc_saw_frequency + (osc_saw_target_frequency - osc_saw_frequency)*GLIDE_COEFFICIENT;
    4644:	f8c8 0000 	str.w	r0, [r8]
      osc_pulse_frequency = osc_pulse_frequency + (osc_pulse_target_frequency - osc_pulse_frequency)*GLIDE_COEFFICIENT;
    4648:	4621      	mov	r1, r4
    464a:	6818      	ldr	r0, [r3, #0]
    464c:	f008 fc5c 	bl	cf08 <__aeabi_fsub>
    4650:	4910      	ldr	r1, [pc, #64]	; (4694 <_Z12pitch_updatev+0xac>)
    4652:	f008 fd63 	bl	d11c <__aeabi_fmul>
    4656:	4601      	mov	r1, r0
    4658:	4620      	mov	r0, r4
    465a:	f008 fc57 	bl	cf0c <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    465e:	6833      	ldr	r3, [r6, #0]
    4660:	9301      	str	r3, [sp, #4]
	return ret;
    4662:	9b01      	ldr	r3, [sp, #4]
    4664:	6038      	str	r0, [r7, #0]
      pitch_update_time = millis();
    4666:	602b      	str	r3, [r5, #0]
}
    4668:	b003      	add	sp, #12
    466a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    osc_pulse_frequency = osc_pulse_target_frequency;
    466e:	490a      	ldr	r1, [pc, #40]	; (4698 <_Z12pitch_updatev+0xb0>)
    4670:	4a07      	ldr	r2, [pc, #28]	; (4690 <_Z12pitch_updatev+0xa8>)
    osc_saw_frequency = osc_saw_target_frequency;
    4672:	4b0a      	ldr	r3, [pc, #40]	; (469c <_Z12pitch_updatev+0xb4>)
    osc_pulse_frequency = osc_pulse_target_frequency;
    4674:	6809      	ldr	r1, [r1, #0]
    4676:	6011      	str	r1, [r2, #0]
    osc_saw_frequency = osc_saw_target_frequency;
    4678:	601c      	str	r4, [r3, #0]
}
    467a:	b003      	add	sp, #12
    467c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4680:	20001fd0 	.word	0x20001fd0
    4684:	20001d58 	.word	0x20001d58
    4688:	20002418 	.word	0x20002418
    468c:	2000205c 	.word	0x2000205c
    4690:	20001734 	.word	0x20001734
    4694:	3e99999a 	.word	0x3e99999a
    4698:	20002058 	.word	0x20002058
    469c:	20001fd4 	.word	0x20001fd4

000046a0 <_Z10amp_updatev>:
void amp_update() {
    46a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(power_flag) {
    46a2:	4b32      	ldr	r3, [pc, #200]	; (476c <_Z10amp_updatev+0xcc>)
    46a4:	781b      	ldrb	r3, [r3, #0]
void amp_update() {
    46a6:	b085      	sub	sp, #20
  if(power_flag) {
    46a8:	2b00      	cmp	r3, #0
    46aa:	d045      	beq.n	4738 <_Z10amp_updatev+0x98>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    46ac:	4d30      	ldr	r5, [pc, #192]	; (4770 <_Z10amp_updatev+0xd0>)
    if(peak_update_time < millis()) {
    46ae:	4e31      	ldr	r6, [pc, #196]	; (4774 <_Z10amp_updatev+0xd4>)
    46b0:	682b      	ldr	r3, [r5, #0]
    46b2:	9301      	str	r3, [sp, #4]
	return ret;
    46b4:	9b01      	ldr	r3, [sp, #4]
    46b6:	8832      	ldrh	r2, [r6, #0]
    46b8:	429a      	cmp	r2, r3
    46ba:	d23d      	bcs.n	4738 <_Z10amp_updatev+0x98>
      audio_peak_values <<= 1;
    46bc:	4c2e      	ldr	r4, [pc, #184]	; (4778 <_Z10amp_updatev+0xd8>)
    46be:	8823      	ldrh	r3, [r4, #0]
    46c0:	005b      	lsls	r3, r3, #1
    46c2:	8023      	strh	r3, [r4, #0]
		__disable_irq();
    46c4:	b672      	cpsid	i
		bool flag = new_output;
    46c6:	4b2d      	ldr	r3, [pc, #180]	; (477c <_Z10amp_updatev+0xdc>)
    46c8:	7f1a      	ldrb	r2, [r3, #28]
		if (flag) new_output = false;
    46ca:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    46ce:	b10a      	cbz	r2, 46d4 <_Z10amp_updatev+0x34>
    46d0:	2200      	movs	r2, #0
    46d2:	771a      	strb	r2, [r3, #28]
		__enable_irq();
    46d4:	b662      	cpsie	i
      if(peak2.available()) {
    46d6:	2900      	cmp	r1, #0
    46d8:	d030      	beq.n	473c <_Z10amp_updatev+0x9c>
		__disable_irq();
    46da:	b672      	cpsid	i
		min_sample = 32767;
    46dc:	f647 77ff 	movw	r7, #32767	; 0x7fff
		max_sample = -32768;
    46e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
		int min = min_sample;
    46e4:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
		int max = max_sample;
    46e8:	f9b3 0020 	ldrsh.w	r0, [r3, #32]
		min_sample = 32767;
    46ec:	83df      	strh	r7, [r3, #30]
		max_sample = -32768;
    46ee:	8419      	strh	r1, [r3, #32]
		__enable_irq();
    46f0:	b662      	cpsie	i
		min = abs(min);
    46f2:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
    46f6:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
		max = abs(max);
    46fa:	2800      	cmp	r0, #0
    46fc:	bfb8      	it	lt
    46fe:	4240      	neglt	r0, r0
		return (float)max / 32767.0f;
    4700:	4298      	cmp	r0, r3
    4702:	bfb8      	it	lt
    4704:	4618      	movlt	r0, r3
    4706:	f008 fcb5 	bl	d074 <__aeabi_i2f>
    470a:	491d      	ldr	r1, [pc, #116]	; (4780 <_Z10amp_updatev+0xe0>)
    470c:	f008 fdba 	bl	d284 <__aeabi_fdiv>
        if(peak2.read() > 0.001f) {
    4710:	491c      	ldr	r1, [pc, #112]	; (4784 <_Z10amp_updatev+0xe4>)
    4712:	f008 febf 	bl	d494 <__aeabi_fcmpgt>
          audio_peak_values |= 1UL;
    4716:	8823      	ldrh	r3, [r4, #0]
        if(peak2.read() > 0.001f) {
    4718:	b188      	cbz	r0, 473e <_Z10amp_updatev+0x9e>
          audio_peak_values |= 1UL;
    471a:	f043 0301 	orr.w	r3, r3, #1
    471e:	8023      	strh	r3, [r4, #0]
      if((audio_peak_values == 0UL || digitalRead(JACK_DETECT))) {
    4720:	201a      	movs	r0, #26
    4722:	f002 fc31 	bl	6f88 <digitalRead>
    4726:	b980      	cbnz	r0, 474a <_Z10amp_updatev+0xaa>
  if(amp_enabled == 0) {
    4728:	4b17      	ldr	r3, [pc, #92]	; (4788 <_Z10amp_updatev+0xe8>)
    472a:	781b      	ldrb	r3, [r3, #0]
    472c:	b1bb      	cbz	r3, 475e <_Z10amp_updatev+0xbe>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    472e:	682b      	ldr	r3, [r5, #0]
    4730:	9303      	str	r3, [sp, #12]
	return ret;
    4732:	9b03      	ldr	r3, [sp, #12]
        peak_update_time = millis() + 200; // We don't want to go to sleep too fast
    4734:	33c8      	adds	r3, #200	; 0xc8
    4736:	8033      	strh	r3, [r6, #0]
}
    4738:	b005      	add	sp, #20
    473a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        audio_peak_values &= ~1UL;
    473c:	8823      	ldrh	r3, [r4, #0]
    473e:	f023 0301 	bic.w	r3, r3, #1
    4742:	b29b      	uxth	r3, r3
    4744:	8023      	strh	r3, [r4, #0]
      if((audio_peak_values == 0UL || digitalRead(JACK_DETECT))) {
    4746:	2b00      	cmp	r3, #0
    4748:	d1ea      	bne.n	4720 <_Z10amp_updatev+0x80>
  if(amp_enabled == 1) {
    474a:	4b0f      	ldr	r3, [pc, #60]	; (4788 <_Z10amp_updatev+0xe8>)
    474c:	781b      	ldrb	r3, [r3, #0]
    474e:	b94b      	cbnz	r3, 4764 <_Z10amp_updatev+0xc4>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4750:	682b      	ldr	r3, [r5, #0]
    4752:	9302      	str	r3, [sp, #8]
	return ret;
    4754:	9b02      	ldr	r3, [sp, #8]
        peak_update_time = millis() + 5; // We want to wake up quickly
    4756:	3305      	adds	r3, #5
    4758:	8033      	strh	r3, [r6, #0]
}
    475a:	b005      	add	sp, #20
    475c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    475e:	f7fe f93d 	bl	29dc <_Z10amp_enablev.part.35>
    4762:	e7e4      	b.n	472e <_Z10amp_updatev+0x8e>
    4764:	f7fe f94a 	bl	29fc <_Z11amp_disablev.part.36>
    4768:	e7f2      	b.n	4750 <_Z10amp_updatev+0xb0>
    476a:	bf00      	nop
    476c:	20000ca8 	.word	0x20000ca8
    4770:	20002418 	.word	0x20002418
    4774:	20001b54 	.word	0x20001b54
    4778:	20001d9c 	.word	0x20001d9c
    477c:	20001a4c 	.word	0x20001a4c
    4780:	46fffe00 	.word	0x46fffe00
    4784:	3a83126f 	.word	0x3a83126f
    4788:	20001884 	.word	0x20001884

0000478c <_Z8power_onv>:
void power_on() {
    478c:	b508      	push	{r3, lr}
  midi_clock = 0;
    478e:	4b09      	ldr	r3, [pc, #36]	; (47b4 <_Z8power_onv+0x28>)
    4790:	2200      	movs	r2, #0
    4792:	601a      	str	r2, [r3, #0]
  led_init();
    4794:	f7ff f93e 	bl	3a14 <_Z8led_initv>
  if(amp_enabled == 0) {
    4798:	4b07      	ldr	r3, [pc, #28]	; (47b8 <_Z8power_onv+0x2c>)
  AudioInterrupts();
    479a:	4a08      	ldr	r2, [pc, #32]	; (47bc <_Z8power_onv+0x30>)
  if(amp_enabled == 0) {
    479c:	781b      	ldrb	r3, [r3, #0]
  AudioInterrupts();
    479e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    47a2:	6011      	str	r1, [r2, #0]
  if(amp_enabled == 0) {
    47a4:	b90b      	cbnz	r3, 47aa <_Z8power_onv+0x1e>
    47a6:	f7fe f919 	bl	29dc <_Z10amp_enablev.part.35>
  power_flag = 1;
    47aa:	4b05      	ldr	r3, [pc, #20]	; (47c0 <_Z8power_onv+0x34>)
    47ac:	2201      	movs	r2, #1
    47ae:	701a      	strb	r2, [r3, #0]
    47b0:	bd08      	pop	{r3, pc}
    47b2:	bf00      	nop
    47b4:	20001a74 	.word	0x20001a74
    47b8:	20001884 	.word	0x20001884
    47bc:	e000e108 	.word	0xe000e108
    47c0:	20000ca8 	.word	0x20000ca8

000047c4 <_Z11power_checkv>:
bool power_check() {
    47c4:	b538      	push	{r3, r4, r5, lr}
  if(!power_flag) {
    47c6:	4d0f      	ldr	r5, [pc, #60]	; (4804 <_Z11power_checkv+0x40>)
    47c8:	782c      	ldrb	r4, [r5, #0]
    47ca:	b994      	cbnz	r4, 47f2 <_Z11power_checkv+0x2e>
    analogWrite(ENV_LED,0);
    47cc:	2005      	movs	r0, #5
    47ce:	4621      	mov	r1, r4
    47d0:	f002 fad8 	bl	6d84 <analogWrite>
    analogWrite(FILTER_LED,0);
    47d4:	2015      	movs	r0, #21
    47d6:	4621      	mov	r1, r4
    47d8:	f002 fad4 	bl	6d84 <analogWrite>
    analogWrite(OSC_LED,0);
    47dc:	4621      	mov	r1, r4
    47de:	2014      	movs	r0, #20
    47e0:	f002 fad0 	bl	6d84 <analogWrite>
    if(keys_scan_powerbutton()) {
    47e4:	f7fe fdf8 	bl	33d8 <_Z21keys_scan_powerbuttonv>
    47e8:	b138      	cbz	r0, 47fa <_Z11power_checkv+0x36>
      power_on();
    47ea:	f7ff ffcf 	bl	478c <_Z8power_onv>
}
    47ee:	7828      	ldrb	r0, [r5, #0]
    47f0:	bd38      	pop	{r3, r4, r5, pc}
    amp_update();
    47f2:	f7ff ff55 	bl	46a0 <_Z10amp_updatev>
}
    47f6:	7828      	ldrb	r0, [r5, #0]
    47f8:	bd38      	pop	{r3, r4, r5, pc}
      delay(100);
    47fa:	2064      	movs	r0, #100	; 0x64
    47fc:	f002 fbfa 	bl	6ff4 <delay>
}
    4800:	7828      	ldrb	r0, [r5, #0]
    4802:	bd38      	pop	{r3, r4, r5, pc}
    4804:	20000ca8 	.word	0x20000ca8

00004808 <_Z9pots_readv>:
      }
    }
  } 
}

void pots_read() {
    4808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  // Read out the pots/switches
  gate_length_msec = map(analogRead(GATE_POT),1023,0,10,200);
    480c:	2023      	movs	r0, #35	; 0x23
void pots_read() {
    480e:	b083      	sub	sp, #12
  gate_length_msec = map(analogRead(GATE_POT),1023,0,10,200);
    4810:	f002 f912 	bl	6a38 <analogRead>
    4814:	23c8      	movs	r3, #200	; 0xc8
    4816:	f240 31ff 	movw	r1, #1023	; 0x3ff
    481a:	2200      	movs	r2, #0
    481c:	9300      	str	r3, [sp, #0]
    481e:	230a      	movs	r3, #10
    4820:	f005 fc68 	bl	a0f4 <_Z3maplllll>
    4824:	4bba      	ldr	r3, [pc, #744]	; (4b10 <_Z9pots_readv+0x308>)
  
  detune_amount = muxAnalogRead(OSC_DETUNE_POT);
    4826:	4fbb      	ldr	r7, [pc, #748]	; (4b14 <_Z9pots_readv+0x30c>)
  gate_length_msec = map(analogRead(GATE_POT),1023,0,10,200);
    4828:	6018      	str	r0, [r3, #0]
  detune_amount = muxAnalogRead(OSC_DETUNE_POT);
    482a:	2003      	movs	r0, #3
    482c:	f7fe fd06 	bl	323c <_Z13muxAnalogReadh>
    4830:	6038      	str	r0, [r7, #0]

  // static int previous_amp_env_release = 0;
  int amp_env_release = muxAnalogRead(AMP_ENV_POT);
    4832:	2004      	movs	r0, #4
    4834:	f7fe fd02 	bl	323c <_Z13muxAnalogReadh>
  synth.release = ((amp_env_release*amp_env_release) >> 11)+30;
    4838:	fb00 f000 	mul.w	r0, r0, r0
    483c:	4eb6      	ldr	r6, [pc, #728]	; (4b18 <_Z9pots_readv+0x310>)
    483e:	12c3      	asrs	r3, r0, #11
    4840:	331e      	adds	r3, #30

  int filter_pot_value = muxAnalogRead(FILTER_FREQ_POT);
    4842:	2005      	movs	r0, #5
  synth.release = ((amp_env_release*amp_env_release) >> 11)+30;
    4844:	6133      	str	r3, [r6, #16]
  int filter_pot_value = muxAnalogRead(FILTER_FREQ_POT);
    4846:	f7fe fcf9 	bl	323c <_Z13muxAnalogReadh>
  // synth.filter = (log_map(filter_pot_value << 6)>>4)+16;
  synth.filter = ((filter_pot_value*filter_pot_value) >> 11)+40;
    484a:	fb00 f300 	mul.w	r3, r0, r0
    484e:	12db      	asrs	r3, r3, #11
    4850:	3328      	adds	r3, #40	; 0x28
  int filter_pot_value = muxAnalogRead(FILTER_FREQ_POT);
    4852:	4604      	mov	r4, r0

  int volume_pot_value = muxAnalogRead(FADE_POT);
    4854:	2006      	movs	r0, #6
  synth.filter = ((filter_pot_value*filter_pot_value) >> 11)+40;
    4856:	60b3      	str	r3, [r6, #8]
  int volume_pot_value = muxAnalogRead(FADE_POT);
    4858:	f7fe fcf0 	bl	323c <_Z13muxAnalogReadh>
  synth.amplitude = volume_pot_value;
    485c:	6170      	str	r0, [r6, #20]


  int pulse_pot_value = muxAnalogRead(OSC_PW_POT);
    485e:	2007      	movs	r0, #7
    4860:	f7fe fcec 	bl	323c <_Z13muxAnalogReadh>
  synth.pulseWidth = map(pulse_pot_value,0,1023,1000,100)/1000.0;
    4864:	2364      	movs	r3, #100	; 0x64
    4866:	f240 32ff 	movw	r2, #1023	; 0x3ff
    486a:	9300      	str	r3, [sp, #0]
    486c:	2100      	movs	r1, #0
    486e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  int pulse_pot_value = muxAnalogRead(OSC_PW_POT);
    4872:	4605      	mov	r5, r0
  synth.pulseWidth = map(pulse_pot_value,0,1023,1000,100)/1000.0;
    4874:	f005 fc3e 	bl	a0f4 <_Z3maplllll>
    4878:	f007 ffaa 	bl	c7d0 <__aeabi_i2d>
    487c:	2200      	movs	r2, #0
    487e:	4ba7      	ldr	r3, [pc, #668]	; (4b1c <_Z9pots_readv+0x314>)
    4880:	f008 f936 	bl	caf0 <__aeabi_ddiv>
    4884:	f008 faec 	bl	ce60 <__aeabi_d2f>
    4888:	6070      	str	r0, [r6, #4]

  int resonance_pot_value = muxAnalogRead(FILTER_RES_POT);
    488a:	2000      	movs	r0, #0
    488c:	f7fe fcd6 	bl	323c <_Z13muxAnalogReadh>
  // Linear map resonance from 0.7 to 4.0
  synth.resonance = map(resonance_pot_value,0,1023,70,400)/100.0;
    4890:	f44f 73c8 	mov.w	r3, #400	; 0x190
    4894:	f240 32ff 	movw	r2, #1023	; 0x3ff
    4898:	9300      	str	r3, [sp, #0]
    489a:	2100      	movs	r1, #0
    489c:	2346      	movs	r3, #70	; 0x46
    489e:	f005 fc29 	bl	a0f4 <_Z3maplllll>
    48a2:	f007 ff95 	bl	c7d0 <__aeabi_i2d>
    48a6:	2200      	movs	r2, #0
    48a8:	4b9d      	ldr	r3, [pc, #628]	; (4b20 <_Z9pots_readv+0x318>)
    48aa:	f008 f921 	bl	caf0 <__aeabi_ddiv>
    48ae:	f008 fad7 	bl	ce60 <__aeabi_d2f>

  analogWrite(FILTER_LED, filter_pot_value>>2);
    48b2:	10a1      	asrs	r1, r4, #2
  synth.resonance = map(resonance_pot_value,0,1023,70,400)/100.0;
    48b4:	60f0      	str	r0, [r6, #12]
  analogWrite(FILTER_LED, filter_pot_value>>2);
    48b6:	2015      	movs	r0, #21
    48b8:	f002 fa64 	bl	6d84 <analogWrite>
  analogWrite(OSC_LED, 255-(pulse_pot_value>>2));
    48bc:	10a9      	asrs	r1, r5, #2
    48be:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
    48c2:	2014      	movs	r0, #20
    48c4:	f002 fa5e 	bl	6d84 <analogWrite>

  // Audio interrupts have to be off to apply settings
  AudioNoInterrupts();

  osc_saw.frequency(osc_saw_frequency);
    48c8:	4b96      	ldr	r3, [pc, #600]	; (4b24 <_Z9pots_readv+0x31c>)
  AudioNoInterrupts();
    48ca:	4a97      	ldr	r2, [pc, #604]	; (4b28 <_Z9pots_readv+0x320>)
  osc_saw.frequency(osc_saw_frequency);
    48cc:	681c      	ldr	r4, [r3, #0]
  AudioNoInterrupts();
    48ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    48d2:	6010      	str	r0, [r2, #0]
    if (t_freq < 0.0) t_freq = 0.0;
    48d4:	2100      	movs	r1, #0
    48d6:	4620      	mov	r0, r4
    48d8:	f008 fdbe 	bl	d458 <__aeabi_fcmplt>
    48dc:	2800      	cmp	r0, #0
    48de:	f040 80fc 	bne.w	4ada <_Z9pots_readv+0x2d2>
    else if (t_freq > AUDIO_SAMPLE_RATE_EXACT / 2) t_freq = AUDIO_SAMPLE_RATE_EXACT / 2;
    48e2:	4620      	mov	r0, r4
    48e4:	f007 ff86 	bl	c7f4 <__aeabi_f2d>
    48e8:	a37f      	add	r3, pc, #508	; (adr r3, 4ae8 <_Z9pots_readv+0x2e0>)
    48ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    48ee:	4604      	mov	r4, r0
    48f0:	460d      	mov	r5, r1
    48f2:	f008 fa63 	bl	cdbc <__aeabi_dcmpgt>
    48f6:	2800      	cmp	r0, #0
    48f8:	f040 80a6 	bne.w	4a48 <_Z9pots_readv+0x240>
    48fc:	a37c      	add	r3, pc, #496	; (adr r3, 4af0 <_Z9pots_readv+0x2e8>)
    48fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    4902:	4620      	mov	r0, r4
    4904:	4629      	mov	r1, r5
    4906:	f007 ffc9 	bl	c89c <__aeabi_dmul>
    490a:	2200      	movs	r2, #0
    490c:	4b87      	ldr	r3, [pc, #540]	; (4b2c <_Z9pots_readv+0x324>)
    490e:	f007 fe13 	bl	c538 <__adddf3>
    4912:	f008 fa85 	bl	ce20 <__aeabi_d2uiz>

  if(detune_amount > 800) {
    4916:	683b      	ldr	r3, [r7, #0]
    tone_incr = (t_freq * (0x80000000LL/AUDIO_SAMPLE_RATE_EXACT)) + 0.5;
    4918:	4c85      	ldr	r4, [pc, #532]	; (4b30 <_Z9pots_readv+0x328>)
    491a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    491e:	62a0      	str	r0, [r4, #40]	; 0x28
    4920:	f300 809e 	bgt.w	4a60 <_Z9pots_readv+0x258>
    if ((tone_amp == 0) && n) {
    4924:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
    4928:	b903      	cbnz	r3, 492c <_Z9pots_readv+0x124>
      tone_phase = 0;
    492a:	61e3      	str	r3, [r4, #28]
    tone_amp = n * 32767.0;
    492c:	f243 3332 	movw	r3, #13106	; 0x3332
    4930:	8323      	strh	r3, [r4, #24]
    osc_saw.amplitude(map(detune_amount,800,1023,400,0)/1000.);
  } else {
    osc_saw.amplitude(0.4);
  }
  osc_pulse.frequency(osc_pulse_frequency);
    4932:	4b80      	ldr	r3, [pc, #512]	; (4b34 <_Z9pots_readv+0x32c>)
    4934:	681c      	ldr	r4, [r3, #0]
    if (t_freq < 0.0) t_freq = 0.0;
    4936:	2100      	movs	r1, #0
    4938:	4620      	mov	r0, r4
    493a:	f008 fd8d 	bl	d458 <__aeabi_fcmplt>
    493e:	2800      	cmp	r0, #0
    4940:	f040 8116 	bne.w	4b70 <_Z9pots_readv+0x368>
    else if (t_freq > AUDIO_SAMPLE_RATE_EXACT / 2) t_freq = AUDIO_SAMPLE_RATE_EXACT / 2;
    4944:	4620      	mov	r0, r4
    4946:	f007 ff55 	bl	c7f4 <__aeabi_f2d>
    494a:	a367      	add	r3, pc, #412	; (adr r3, 4ae8 <_Z9pots_readv+0x2e0>)
    494c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4950:	4604      	mov	r4, r0
    4952:	460d      	mov	r5, r1
    4954:	f008 fa32 	bl	cdbc <__aeabi_dcmpgt>
    4958:	2800      	cmp	r0, #0
    495a:	d17f      	bne.n	4a5c <_Z9pots_readv+0x254>
    495c:	a364      	add	r3, pc, #400	; (adr r3, 4af0 <_Z9pots_readv+0x2e8>)
    495e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4962:	4620      	mov	r0, r4
    4964:	4629      	mov	r1, r5
    4966:	f007 ff99 	bl	c89c <__aeabi_dmul>
    496a:	2200      	movs	r2, #0
    496c:	4b6f      	ldr	r3, [pc, #444]	; (4b2c <_Z9pots_readv+0x324>)
    496e:	f007 fde3 	bl	c538 <__adddf3>
    4972:	f008 fa55 	bl	ce20 <__aeabi_d2uiz>
  osc_pulse.pulseWidth(synth.pulseWidth);
    4976:	6875      	ldr	r5, [r6, #4]
    tone_incr = (t_freq * (0x80000000LL/AUDIO_SAMPLE_RATE_EXACT)) + 0.5;
    4978:	4c6f      	ldr	r4, [pc, #444]	; (4b38 <_Z9pots_readv+0x330>)
    if (n < 0) n = 0;
    497a:	2100      	movs	r1, #0
    tone_incr = (t_freq * (0x80000000LL/AUDIO_SAMPLE_RATE_EXACT)) + 0.5;
    497c:	62a0      	str	r0, [r4, #40]	; 0x28
    if (n < 0) n = 0;
    497e:	4628      	mov	r0, r5
    4980:	f008 fd6a 	bl	d458 <__aeabi_fcmplt>
    4984:	2800      	cmp	r0, #0
    4986:	f040 80aa 	bne.w	4ade <_Z9pots_readv+0x2d6>
    else if (n > 1.0) n = 1.0;
    498a:	4628      	mov	r0, r5
    498c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    4990:	f008 fd80 	bl	d494 <__aeabi_fcmpgt>
    4994:	2800      	cmp	r0, #0
    4996:	f000 8111 	beq.w	4bbc <_Z9pots_readv+0x3b4>
    499a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    tone_width = n * 0x7fffffffLL; 
    499e:	6223      	str	r3, [r4, #32]

  filter1.frequency(synth.filter);
    49a0:	68b0      	ldr	r0, [r6, #8]
    49a2:	f008 fb67 	bl	d074 <__aeabi_i2f>
		if (freq < 20.0) freq = 20.0;
    49a6:	4965      	ldr	r1, [pc, #404]	; (4b3c <_Z9pots_readv+0x334>)
    49a8:	4604      	mov	r4, r0
    49aa:	f008 fd55 	bl	d458 <__aeabi_fcmplt>
    49ae:	2800      	cmp	r0, #0
    49b0:	d151      	bne.n	4a56 <_Z9pots_readv+0x24e>
		else if (freq > AUDIO_SAMPLE_RATE_EXACT/2.5) freq = AUDIO_SAMPLE_RATE_EXACT/2.5;
    49b2:	4620      	mov	r0, r4
    49b4:	f007 ff1e 	bl	c7f4 <__aeabi_f2d>
    49b8:	a34f      	add	r3, pc, #316	; (adr r3, 4af8 <_Z9pots_readv+0x2f0>)
    49ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    49be:	4604      	mov	r4, r0
    49c0:	460d      	mov	r5, r1
    49c2:	f008 f9fb 	bl	cdbc <__aeabi_dcmpgt>
    49c6:	2800      	cmp	r0, #0
    49c8:	f000 80d6 	beq.w	4b78 <_Z9pots_readv+0x370>
    49cc:	4b5c      	ldr	r3, [pc, #368]	; (4b40 <_Z9pots_readv+0x338>)
    49ce:	f8df 919c 	ldr.w	r9, [pc, #412]	; 4b6c <_Z9pots_readv+0x364>
			* 2147483647.0;
    49d2:	4f5c      	ldr	r7, [pc, #368]	; (4b44 <_Z9pots_readv+0x33c>)
  filter1.resonance(synth.resonance); // 0.7-5.0 range
    49d4:	f8d6 800c 	ldr.w	r8, [r6, #12]
			* 2147483647.0;
    49d8:	61fb      	str	r3, [r7, #28]
		if (q < 0.7) q = 0.7;
    49da:	4640      	mov	r0, r8
			* 2147483647.0;
    49dc:	f8c7 9018 	str.w	r9, [r7, #24]
		if (q < 0.7) q = 0.7;
    49e0:	f007 ff08 	bl	c7f4 <__aeabi_f2d>
    49e4:	a346      	add	r3, pc, #280	; (adr r3, 4b00 <_Z9pots_readv+0x2f8>)
    49e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    49ea:	4604      	mov	r4, r0
    49ec:	460d      	mov	r5, r1
    49ee:	f008 f9c7 	bl	cd80 <__aeabi_dcmplt>
    49f2:	bb58      	cbnz	r0, 4a4c <_Z9pots_readv+0x244>
		else if (q > 5.0) q = 5.0;
    49f4:	4640      	mov	r0, r8
    49f6:	4954      	ldr	r1, [pc, #336]	; (4b48 <_Z9pots_readv+0x340>)
    49f8:	f008 fd4c 	bl	d494 <__aeabi_fcmpgt>
    49fc:	2800      	cmp	r0, #0
    49fe:	f040 80b9 	bne.w	4b74 <_Z9pots_readv+0x36c>
    4a02:	4622      	mov	r2, r4
    4a04:	462b      	mov	r3, r5
    4a06:	2000      	movs	r0, #0
    4a08:	4950      	ldr	r1, [pc, #320]	; (4b4c <_Z9pots_readv+0x344>)
    4a0a:	f008 f871 	bl	caf0 <__aeabi_ddiv>
    4a0e:	4b50      	ldr	r3, [pc, #320]	; (4b50 <_Z9pots_readv+0x348>)
    4a10:	2200      	movs	r2, #0
    4a12:	f007 ff43 	bl	c89c <__aeabi_dmul>
    4a16:	f008 f9db 	bl	cdd0 <__aeabi_d2iz>
    4a1a:	4603      	mov	r3, r0
		setting_damp = (1.0 / q) * 1073741824.0;
    4a1c:	627b      	str	r3, [r7, #36]	; 0x24

  envelope1.release(synth.release);
    4a1e:	484d      	ldr	r0, [pc, #308]	; (4b54 <_Z9pots_readv+0x34c>)
    4a20:	6931      	ldr	r1, [r6, #16]
    4a22:	f7fd fdc1 	bl	25a8 <_ZN25AudioEffectCustomEnvelope7releaseEi>

  if(digitalRead(BITC_PIN)) {
    4a26:	201e      	movs	r0, #30
    4a28:	f002 faae 	bl	6f88 <digitalRead>
		sampleStep = n;
    4a2c:	4b4a      	ldr	r3, [pc, #296]	; (4b58 <_Z9pots_readv+0x350>)
    4a2e:	b978      	cbnz	r0, 4a50 <_Z9pots_readv+0x248>
    4a30:	2212      	movs	r2, #18
    4a32:	765a      	strb	r2, [r3, #25]
    bitcrusher1.sampleRate(SAMPLERATE_STEPS[0]);
  } else {
    bitcrusher1.sampleRate(SAMPLERATE_STEPS[2]);
  }

  audio_volume(synth.amplitude);
    4a34:	6970      	ldr	r0, [r6, #20]
    4a36:	f7fe ff0b 	bl	3850 <_Z12audio_volumei>

  AudioInterrupts(); 
    4a3a:	4b48      	ldr	r3, [pc, #288]	; (4b5c <_Z9pots_readv+0x354>)
    4a3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4a40:	601a      	str	r2, [r3, #0]
}
    4a42:	b003      	add	sp, #12
    4a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (t_freq > AUDIO_SAMPLE_RATE_EXACT / 2) t_freq = AUDIO_SAMPLE_RATE_EXACT / 2;
    4a48:	4845      	ldr	r0, [pc, #276]	; (4b60 <_Z9pots_readv+0x358>)
    4a4a:	e764      	b.n	4916 <_Z9pots_readv+0x10e>
		if (q < 0.7) q = 0.7;
    4a4c:	4b45      	ldr	r3, [pc, #276]	; (4b64 <_Z9pots_readv+0x35c>)
    4a4e:	e7e5      	b.n	4a1c <_Z9pots_readv+0x214>
    4a50:	2201      	movs	r2, #1
    4a52:	765a      	strb	r2, [r3, #25]
    4a54:	e7ee      	b.n	4a34 <_Z9pots_readv+0x22c>
		if (freq < 20.0) freq = 20.0;
    4a56:	4b44      	ldr	r3, [pc, #272]	; (4b68 <_Z9pots_readv+0x360>)
    4a58:	4699      	mov	r9, r3
    4a5a:	e7ba      	b.n	49d2 <_Z9pots_readv+0x1ca>
    4a5c:	4840      	ldr	r0, [pc, #256]	; (4b60 <_Z9pots_readv+0x358>)
    4a5e:	e78a      	b.n	4976 <_Z9pots_readv+0x16e>
    osc_saw.amplitude(map(detune_amount,800,1023,400,0)/1000.);
    4a60:	2700      	movs	r7, #0
    4a62:	f240 32ff 	movw	r2, #1023	; 0x3ff
    4a66:	4618      	mov	r0, r3
    4a68:	f44f 7148 	mov.w	r1, #800	; 0x320
    4a6c:	f44f 73c8 	mov.w	r3, #400	; 0x190
    4a70:	9700      	str	r7, [sp, #0]
    4a72:	f005 fb3f 	bl	a0f4 <_Z3maplllll>
    4a76:	f007 feab 	bl	c7d0 <__aeabi_i2d>
    4a7a:	2200      	movs	r2, #0
    4a7c:	4b27      	ldr	r3, [pc, #156]	; (4b1c <_Z9pots_readv+0x314>)
    4a7e:	f008 f837 	bl	caf0 <__aeabi_ddiv>
    4a82:	f008 f9ed 	bl	ce60 <__aeabi_d2f>
    if (n < 0) n = 0;
    4a86:	2100      	movs	r1, #0
    4a88:	4605      	mov	r5, r0
    4a8a:	f008 fce5 	bl	d458 <__aeabi_fcmplt>
    4a8e:	2800      	cmp	r0, #0
    4a90:	f040 809d 	bne.w	4bce <_Z9pots_readv+0x3c6>
    else if (n > 1.0) n = 1.0;
    4a94:	4628      	mov	r0, r5
    4a96:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    4a9a:	f008 fcfb 	bl	d494 <__aeabi_fcmpgt>
    if ((tone_amp == 0) && n) {
    4a9e:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
    else if (n > 1.0) n = 1.0;
    4aa2:	b128      	cbz	r0, 4ab0 <_Z9pots_readv+0x2a8>
    if ((tone_amp == 0) && n) {
    4aa4:	2b00      	cmp	r3, #0
    4aa6:	f000 8094 	beq.w	4bd2 <_Z9pots_readv+0x3ca>
    4aaa:	f647 70ff 	movw	r0, #32767	; 0x7fff
    4aae:	e012      	b.n	4ad6 <_Z9pots_readv+0x2ce>
    4ab0:	4628      	mov	r0, r5
    4ab2:	b933      	cbnz	r3, 4ac2 <_Z9pots_readv+0x2ba>
    4ab4:	2100      	movs	r1, #0
    4ab6:	f008 fcc5 	bl	d444 <__aeabi_fcmpeq>
    4aba:	2800      	cmp	r0, #0
    4abc:	f000 808b 	beq.w	4bd6 <_Z9pots_readv+0x3ce>
    4ac0:	4628      	mov	r0, r5
    4ac2:	f007 fe97 	bl	c7f4 <__aeabi_f2d>
    4ac6:	a310      	add	r3, pc, #64	; (adr r3, 4b08 <_Z9pots_readv+0x300>)
    4ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
    4acc:	f007 fee6 	bl	c89c <__aeabi_dmul>
    4ad0:	f008 f97e 	bl	cdd0 <__aeabi_d2iz>
    4ad4:	b280      	uxth	r0, r0
    tone_amp = n * 32767.0;
    4ad6:	8320      	strh	r0, [r4, #24]
    4ad8:	e72b      	b.n	4932 <_Z9pots_readv+0x12a>
    if (t_freq < 0.0) t_freq = 0.0;
    4ada:	2000      	movs	r0, #0
    4adc:	e71b      	b.n	4916 <_Z9pots_readv+0x10e>
    if (n < 0) n = 0;
    4ade:	2300      	movs	r3, #0
    4ae0:	e75d      	b.n	499e <_Z9pots_readv+0x196>
    4ae2:	bf00      	nop
    4ae4:	f3af 8000 	nop.w
    4ae8:	b4b72c52 	.word	0xb4b72c52
    4aec:	40d58ab4 	.word	0x40d58ab4
    4af0:	78ff0252 	.word	0x78ff0252
    4af4:	40e7c489 	.word	0x40e7c489
    4af8:	c3c5bd0e 	.word	0xc3c5bd0e
    4afc:	40d13bc3 	.word	0x40d13bc3
    4b00:	66666666 	.word	0x66666666
    4b04:	3fe66666 	.word	0x3fe66666
    4b08:	00000000 	.word	0x00000000
    4b0c:	40dfffc0 	.word	0x40dfffc0
    4b10:	20000c88 	.word	0x20000c88
    4b14:	20001d58 	.word	0x20001d58
    4b18:	20001fb4 	.word	0x20001fb4
    4b1c:	408f4000 	.word	0x408f4000
    4b20:	40590000 	.word	0x40590000
    4b24:	20001fd4 	.word	0x20001fd4
    4b28:	e000e188 	.word	0xe000e188
    4b2c:	3fe00000 	.word	0x3fe00000
    4b30:	20001fd8 	.word	0x20001fd8
    4b34:	20001734 	.word	0x20001734
    4b38:	20001850 	.word	0x20001850
    4b3c:	41a00000 	.word	0x41a00000
    4b40:	4b3c8bff 	.word	0x4b3c8bff
    4b44:	200016ac 	.word	0x200016ac
    4b48:	40a00000 	.word	0x40a00000
    4b4c:	3ff00000 	.word	0x3ff00000
    4b50:	41d00000 	.word	0x41d00000
    4b54:	20001c18 	.word	0x20001c18
    4b58:	20001b90 	.word	0x20001b90
    4b5c:	e000e108 	.word	0xe000e108
    4b60:	40000022 	.word	0x40000022
    4b64:	5b6db6f5 	.word	0x5b6db6f5
    4b68:	0017557a 	.word	0x0017557a
    4b6c:	506cbdc8 	.word	0x506cbdc8
    if (t_freq < 0.0) t_freq = 0.0;
    4b70:	2000      	movs	r0, #0
    4b72:	e700      	b.n	4976 <_Z9pots_readv+0x16e>
		else if (q > 5.0) q = 5.0;
    4b74:	4b1e      	ldr	r3, [pc, #120]	; (4bf0 <_Z9pots_readv+0x3e8>)
    4b76:	e751      	b.n	4a1c <_Z9pots_readv+0x214>
    4b78:	4620      	mov	r0, r4
    4b7a:	4629      	mov	r1, r5
    4b7c:	a318      	add	r3, pc, #96	; (adr r3, 4be0 <_Z9pots_readv+0x3d8>)
    4b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b82:	f007 fe8b 	bl	c89c <__aeabi_dmul>
    4b86:	a318      	add	r3, pc, #96	; (adr r3, 4be8 <_Z9pots_readv+0x3e0>)
    4b88:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b8c:	4604      	mov	r4, r0
    4b8e:	460d      	mov	r5, r1
    4b90:	f007 fe84 	bl	c89c <__aeabi_dmul>
    4b94:	f008 f91c 	bl	cdd0 <__aeabi_d2iz>
    4b98:	4629      	mov	r1, r5
    4b9a:	4681      	mov	r9, r0
    4b9c:	4620      	mov	r0, r4
    4b9e:	f008 f95f 	bl	ce60 <__aeabi_d2f>
    4ba2:	f006 fdfd 	bl	b7a0 <sinf>
    4ba6:	f007 fe25 	bl	c7f4 <__aeabi_f2d>
    4baa:	a30f      	add	r3, pc, #60	; (adr r3, 4be8 <_Z9pots_readv+0x3e0>)
    4bac:	e9d3 2300 	ldrd	r2, r3, [r3]
    4bb0:	f007 fe74 	bl	c89c <__aeabi_dmul>
    4bb4:	f008 f90c 	bl	cdd0 <__aeabi_d2iz>
    4bb8:	4603      	mov	r3, r0
    4bba:	e70a      	b.n	49d2 <_Z9pots_readv+0x1ca>
    4bbc:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    4bc0:	4628      	mov	r0, r5
    4bc2:	f008 faab 	bl	d11c <__aeabi_fmul>
    4bc6:	f008 fc95 	bl	d4f4 <__aeabi_f2uiz>
    4bca:	4603      	mov	r3, r0
    4bcc:	e6e7      	b.n	499e <_Z9pots_readv+0x196>
    if (n < 0) n = 0;
    4bce:	4638      	mov	r0, r7
    4bd0:	e781      	b.n	4ad6 <_Z9pots_readv+0x2ce>
    else if (n > 1.0) n = 1.0;
    4bd2:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
      tone_phase = 0;
    4bd6:	2300      	movs	r3, #0
    4bd8:	4628      	mov	r0, r5
    4bda:	61e3      	str	r3, [r4, #28]
    4bdc:	e771      	b.n	4ac2 <_Z9pots_readv+0x2ba>
    4bde:	bf00      	nop
    4be0:	c08351d4 	.word	0xc08351d4
    4be4:	3f02aac8 	.word	0x3f02aac8
    4be8:	ffc00000 	.word	0xffc00000
    4bec:	41dfffff 	.word	0x41dfffff
    4bf0:	0ccccccc 	.word	0x0ccccccc
    4bf4:	f3af 8000 	nop.w

00004bf8 <_Z9enter_dfuv>:

/*
 * enter_dfu() writes a special string to the K20DX256's VBAT register and reboots the mcu
 * This signals the Kiibohd DFU bootloader that it should start in firmware update mode
 */
void enter_dfu() {
    4bf8:	b570      	push	{r4, r5, r6, lr}
  #define VBAT *(volatile uint8_t *)0x4003E000 // Register available in all power states
  const uint8_t sys_reset_to_loader_magic[22] = "\xff\x00\x7fRESET TO LOADER\x7f\x00\xff";
    4bfa:	4d15      	ldr	r5, [pc, #84]	; (4c50 <_Z9enter_dfuv+0x58>)

  // Blank all leds and turn the power button blue before rebooting
  FastLED.clear();
    4bfc:	4e15      	ldr	r6, [pc, #84]	; (4c54 <_Z9enter_dfuv+0x5c>)
  const uint8_t sys_reset_to_loader_magic[22] = "\xff\x00\x7fRESET TO LOADER\x7f\x00\xff";
    4bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void enter_dfu() {
    4c00:	b086      	sub	sp, #24
  const uint8_t sys_reset_to_loader_magic[22] = "\xff\x00\x7fRESET TO LOADER\x7f\x00\xff";
    4c02:	466c      	mov	r4, sp
    4c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4c06:	e895 0003 	ldmia.w	r5, {r0, r1}
    4c0a:	f844 0b04 	str.w	r0, [r4], #4
  FastLED.clear();
    4c0e:	4630      	mov	r0, r6
  const uint8_t sys_reset_to_loader_magic[22] = "\xff\x00\x7fRESET TO LOADER\x7f\x00\xff";
    4c10:	8021      	strh	r1, [r4, #0]
  FastLED.clear();
    4c12:	2100      	movs	r1, #0
    4c14:	f006 fbb2 	bl	b37c <_ZN8CFastLED5clearEb>
    4c18:	4b0f      	ldr	r3, [pc, #60]	; (4c58 <_Z9enter_dfuv+0x60>)
    4c1a:	7831      	ldrb	r1, [r6, #0]
    4c1c:	2200      	movs	r2, #0
        b = (colorcode >>  0) & 0xFF;
    4c1e:	24ff      	movs	r4, #255	; 0xff
    4c20:	709c      	strb	r4, [r3, #2]
        r = (colorcode >> 16) & 0xFF;
    4c22:	701a      	strb	r2, [r3, #0]
        g = (colorcode >>  8) & 0xFF;
    4c24:	705a      	strb	r2, [r3, #1]
    4c26:	4630      	mov	r0, r6
    4c28:	f006 fadc 	bl	b1e4 <_ZN8CFastLED4showEh>
    4c2c:	480b      	ldr	r0, [pc, #44]	; (4c5c <_Z9enter_dfuv+0x64>)
    4c2e:	aa06      	add	r2, sp, #24
    4c30:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
    4c34:	1a80      	subs	r0, r0, r2
    4c36:	f10d 0415 	add.w	r4, sp, #21
    4c3a:	18c2      	adds	r2, r0, r3
  physical_leds[0] = CRGB::Blue;
  FastLED.show();
  // Reset
  for (unsigned int pos = 0; pos < sizeof(sys_reset_to_loader_magic); pos++ ) {
    (&VBAT)[ pos ] = sys_reset_to_loader_magic[ pos ];
    4c3c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    4c40:	7011      	strb	r1, [r2, #0]
  for (unsigned int pos = 0; pos < sizeof(sys_reset_to_loader_magic); pos++ ) {
    4c42:	42a3      	cmp	r3, r4
    4c44:	d1f9      	bne.n	4c3a <_Z9enter_dfuv+0x42>
  }
  SCB_AIRCR = 0x05FA0004; // software reset
    4c46:	4b06      	ldr	r3, [pc, #24]	; (4c60 <_Z9enter_dfuv+0x68>)
    4c48:	4a06      	ldr	r2, [pc, #24]	; (4c64 <_Z9enter_dfuv+0x6c>)
    4c4a:	601a      	str	r2, [r3, #0]
}
    4c4c:	b006      	add	sp, #24
    4c4e:	bd70      	pop	{r4, r5, r6, pc}
    4c50:	00011850 	.word	0x00011850
    4c54:	200027bc 	.word	0x200027bc
    4c58:	200018e0 	.word	0x200018e0
    4c5c:	4003e019 	.word	0x4003e019
    4c60:	e000ed0c 	.word	0xe000ed0c
    4c64:	05fa0004 	.word	0x05fa0004

00004c68 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>:
void MidiInterface<SerialPort, Settings>::send(MidiType inType,
    4c68:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c6a:	b083      	sub	sp, #12
    4c6c:	4607      	mov	r7, r0
    4c6e:	f89d 5020 	ldrb.w	r5, [sp, #32]
    if (inChannel >= MIDI_CHANNEL_OFF  ||
    4c72:	3d01      	subs	r5, #1
    4c74:	b2ed      	uxtb	r5, r5
    4c76:	2d0f      	cmp	r5, #15
void MidiInterface<SerialPort, Settings>::send(MidiType inType,
    4c78:	460c      	mov	r4, r1
    if (inChannel >= MIDI_CHANNEL_OFF  ||
    4c7a:	d802      	bhi.n	4c82 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0x1a>
    4c7c:	b2ce      	uxtb	r6, r1
    4c7e:	0630      	lsls	r0, r6, #24
    4c80:	d401      	bmi.n	4c86 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0x1e>
}
    4c82:	b003      	add	sp, #12
    4c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (inType <= PitchBend)  // Channel messages
    4c86:	29e0      	cmp	r1, #224	; 0xe0
    4c88:	d90e      	bls.n	4ca8 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0x40>
    else if (inType >= Clock && inType <= SystemReset)
    4c8a:	29f7      	cmp	r1, #247	; 0xf7
    4c8c:	d9f9      	bls.n	4c82 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0x1a>
    4c8e:	f101 0408 	add.w	r4, r1, #8
    4c92:	b2e4      	uxtb	r4, r4
    4c94:	2301      	movs	r3, #1
    4c96:	40a3      	lsls	r3, r4
    4c98:	f013 0fdd 	tst.w	r3, #221	; 0xdd
    4c9c:	d0f1      	beq.n	4c82 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0x1a>
            mSerial.write((byte)inType);
    4c9e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    4ca0:	6803      	ldr	r3, [r0, #0]
    4ca2:	681b      	ldr	r3, [r3, #0]
    4ca4:	4798      	blx	r3
    4ca6:	e7ec      	b.n	4c82 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0x1a>
            mSerial.write(status);
    4ca8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    4caa:	ea45 0106 	orr.w	r1, r5, r6
    4cae:	6806      	ldr	r6, [r0, #0]
    4cb0:	6835      	ldr	r5, [r6, #0]
    4cb2:	9300      	str	r3, [sp, #0]
    4cb4:	9201      	str	r2, [sp, #4]
    4cb6:	47a8      	blx	r5
        mSerial.write(inData1);
    4cb8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    4cba:	9a01      	ldr	r2, [sp, #4]
    4cbc:	6805      	ldr	r5, [r0, #0]
    4cbe:	f002 017f 	and.w	r1, r2, #127	; 0x7f
        if (inType != ProgramChange && inType != AfterTouchChannel)
    4cc2:	f004 04ef 	and.w	r4, r4, #239	; 0xef
        mSerial.write(inData1);
    4cc6:	682a      	ldr	r2, [r5, #0]
    4cc8:	4790      	blx	r2
        if (inType != ProgramChange && inType != AfterTouchChannel)
    4cca:	2cc0      	cmp	r4, #192	; 0xc0
    4ccc:	9b00      	ldr	r3, [sp, #0]
    4cce:	d0d8      	beq.n	4c82 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0x1a>
            mSerial.write(inData2);
    4cd0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    4cd2:	6802      	ldr	r2, [r0, #0]
    4cd4:	f003 017f 	and.w	r1, r3, #127	; 0x7f
    4cd8:	6813      	ldr	r3, [r2, #0]
    4cda:	4798      	blx	r3
    4cdc:	e7d1      	b.n	4c82 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0x1a>
    4cde:	bf00      	nop

00004ce0 <_Z7note_onhhb>:
void note_on(uint8_t midi_note, uint8_t velocity, bool enabled) {
    4ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ce2:	4607      	mov	r7, r0
    4ce4:	b083      	sub	sp, #12
  if(!digitalRead(ACCENT_PIN)) {
    4ce6:	2008      	movs	r0, #8
void note_on(uint8_t midi_note, uint8_t velocity, bool enabled) {
    4ce8:	460e      	mov	r6, r1
    4cea:	4614      	mov	r4, r2
  if(!digitalRead(ACCENT_PIN)) {
    4cec:	f002 f94c 	bl	6f88 <digitalRead>
  note_is_playing = midi_note;
    4cf0:	4b6d      	ldr	r3, [pc, #436]	; (4ea8 <_Z7note_onhhb+0x1c8>)
  if(!digitalRead(ACCENT_PIN)) {
    4cf2:	2800      	cmp	r0, #0
    velocity = 127;
    4cf4:	bf08      	it	eq
    4cf6:	267f      	moveq	r6, #127	; 0x7f
  note_is_playing = midi_note;
    4cf8:	701f      	strb	r7, [r3, #0]
  if(enabled) {
    4cfa:	2c00      	cmp	r4, #0
    4cfc:	f000 808c 	beq.w	4e18 <_Z7note_onhhb+0x138>
    AudioNoInterrupts();
    4d00:	4b6a      	ldr	r3, [pc, #424]	; (4eac <_Z7note_onhhb+0x1cc>)
    4d02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4d06:	601a      	str	r2, [r3, #0]
    dc1.amplitude(velocity / 127.); // DC amplitude controls filter env amount.
    4d08:	4630      	mov	r0, r6
    4d0a:	f007 fd61 	bl	c7d0 <__aeabi_i2d>
    4d0e:	a35e      	add	r3, pc, #376	; (adr r3, 4e88 <_Z7note_onhhb+0x1a8>)
    4d10:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d14:	f007 feec 	bl	caf0 <__aeabi_ddiv>
    4d18:	f008 f8a2 	bl	ce60 <__aeabi_d2f>
		if (n > 1.0) n = 1.0;
    4d1c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    4d20:	4604      	mov	r4, r0
    4d22:	f008 fbb7 	bl	d494 <__aeabi_fcmpgt>
    4d26:	2800      	cmp	r0, #0
    4d28:	f000 8089 	beq.w	4e3e <_Z7note_onhhb+0x15e>
    4d2c:	4860      	ldr	r0, [pc, #384]	; (4eb0 <_Z7note_onhhb+0x1d0>)
		__disable_irq();
    4d2e:	b672      	cpsid	i
		magnitude = m;
    4d30:	4b60      	ldr	r3, [pc, #384]	; (4eb4 <_Z7note_onhhb+0x1d4>)
		state = 0;
    4d32:	2500      	movs	r5, #0
		magnitude = m;
    4d34:	61d8      	str	r0, [r3, #28]
		state = 0;
    4d36:	761d      	strb	r5, [r3, #24]
		__enable_irq();
    4d38:	b662      	cpsie	i
    osc_pulse_midi_note = midi_note;
    4d3a:	4a5f      	ldr	r2, [pc, #380]	; (4eb8 <_Z7note_onhhb+0x1d8>)
  return MIDI_NOTE_FREQUENCY[x];
    4d3c:	4b5f      	ldr	r3, [pc, #380]	; (4ebc <_Z7note_onhhb+0x1dc>)
    4d3e:	7017      	strb	r7, [r2, #0]
    4d40:	2f5e      	cmp	r7, #94	; 0x5e
    4d42:	bfb4      	ite	lt
    4d44:	463a      	movlt	r2, r7
    4d46:	225e      	movge	r2, #94	; 0x5e
    osc_pulse_target_frequency = (int)midi_note_to_frequency(midi_note);
    4d48:	4c5d      	ldr	r4, [pc, #372]	; (4ec0 <_Z7note_onhhb+0x1e0>)
    4d4a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    4d4e:	f008 fbab 	bl	d4a8 <__aeabi_f2iz>
    4d52:	f008 f98f 	bl	d074 <__aeabi_i2f>
    osc_pulse.frequency(osc_pulse_frequency);
    4d56:	4b5b      	ldr	r3, [pc, #364]	; (4ec4 <_Z7note_onhhb+0x1e4>)
    osc_pulse_target_frequency = (int)midi_note_to_frequency(midi_note);
    4d58:	6020      	str	r0, [r4, #0]
    osc_pulse.frequency(osc_pulse_frequency);
    4d5a:	681c      	ldr	r4, [r3, #0]
    if (t_freq < 0.0) t_freq = 0.0;
    4d5c:	2100      	movs	r1, #0
    4d5e:	4620      	mov	r0, r4
    4d60:	f008 fb7a 	bl	d458 <__aeabi_fcmplt>
    4d64:	2800      	cmp	r0, #0
    4d66:	f040 8088 	bne.w	4e7a <_Z7note_onhhb+0x19a>
    else if (t_freq > AUDIO_SAMPLE_RATE_EXACT / 2) t_freq = AUDIO_SAMPLE_RATE_EXACT / 2;
    4d6a:	4620      	mov	r0, r4
    4d6c:	f007 fd42 	bl	c7f4 <__aeabi_f2d>
    4d70:	a347      	add	r3, pc, #284	; (adr r3, 4e90 <_Z7note_onhhb+0x1b0>)
    4d72:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d76:	4604      	mov	r4, r0
    4d78:	460d      	mov	r5, r1
    4d7a:	f008 f81f 	bl	cdbc <__aeabi_dcmpgt>
    4d7e:	2800      	cmp	r0, #0
    4d80:	d15b      	bne.n	4e3a <_Z7note_onhhb+0x15a>
    4d82:	a345      	add	r3, pc, #276	; (adr r3, 4e98 <_Z7note_onhhb+0x1b8>)
    4d84:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d88:	4620      	mov	r0, r4
    4d8a:	4629      	mov	r1, r5
    4d8c:	f007 fd86 	bl	c89c <__aeabi_dmul>
    4d90:	2200      	movs	r2, #0
    4d92:	4b4d      	ldr	r3, [pc, #308]	; (4ec8 <_Z7note_onhhb+0x1e8>)
    4d94:	f007 fbd0 	bl	c538 <__adddf3>
    4d98:	f008 f842 	bl	ce20 <__aeabi_d2uiz>
    osc_saw.frequency(detune(osc_pulse_midi_note,detune_amount));
    4d9c:	4a4b      	ldr	r2, [pc, #300]	; (4ecc <_Z7note_onhhb+0x1ec>)
    tone_incr = (t_freq * (0x80000000LL/AUDIO_SAMPLE_RATE_EXACT)) + 0.5;
    4d9e:	4b4c      	ldr	r3, [pc, #304]	; (4ed0 <_Z7note_onhhb+0x1f0>)
    4da0:	6811      	ldr	r1, [r2, #0]
    4da2:	6298      	str	r0, [r3, #40]	; 0x28
    4da4:	4638      	mov	r0, r7
    4da6:	f7ff fbc7 	bl	4538 <_Z6detuneii>
    if (t_freq < 0.0) t_freq = 0.0;
    4daa:	2100      	movs	r1, #0
    4dac:	4604      	mov	r4, r0
    4dae:	f008 fb53 	bl	d458 <__aeabi_fcmplt>
    4db2:	2800      	cmp	r0, #0
    4db4:	d163      	bne.n	4e7e <_Z7note_onhhb+0x19e>
    else if (t_freq > AUDIO_SAMPLE_RATE_EXACT / 2) t_freq = AUDIO_SAMPLE_RATE_EXACT / 2;
    4db6:	4620      	mov	r0, r4
    4db8:	f007 fd1c 	bl	c7f4 <__aeabi_f2d>
    4dbc:	a334      	add	r3, pc, #208	; (adr r3, 4e90 <_Z7note_onhhb+0x1b0>)
    4dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
    4dc2:	4604      	mov	r4, r0
    4dc4:	460d      	mov	r5, r1
    4dc6:	f007 fff9 	bl	cdbc <__aeabi_dcmpgt>
    4dca:	2800      	cmp	r0, #0
    4dcc:	d047      	beq.n	4e5e <_Z7note_onhhb+0x17e>
    4dce:	4841      	ldr	r0, [pc, #260]	; (4ed4 <_Z7note_onhhb+0x1f4>)
    tone_incr = (t_freq * (0x80000000LL/AUDIO_SAMPLE_RATE_EXACT)) + 0.5;
    4dd0:	4b41      	ldr	r3, [pc, #260]	; (4ed8 <_Z7note_onhhb+0x1f8>)
    AudioInterrupts(); 
    4dd2:	4a42      	ldr	r2, [pc, #264]	; (4edc <_Z7note_onhhb+0x1fc>)
    4dd4:	6298      	str	r0, [r3, #40]	; 0x28
    4dd6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4dda:	6011      	str	r1, [r2, #0]
    send(NoteOn, inNoteNumber, inVelocity, inChannel);
    4ddc:	463a      	mov	r2, r7
		  | ((note & 0x7F) << 16) | ((velocity & 0x7F) << 24));
    4dde:	f007 077f 	and.w	r7, r7, #127	; 0x7f
    4de2:	2301      	movs	r3, #1
    4de4:	043f      	lsls	r7, r7, #16
    4de6:	2190      	movs	r1, #144	; 0x90
    4de8:	9300      	str	r3, [sp, #0]
    4dea:	483d      	ldr	r0, [pc, #244]	; (4ee0 <_Z7note_onhhb+0x200>)
    4dec:	4633      	mov	r3, r6
    4dee:	f447 4710 	orr.w	r7, r7, #36864	; 0x9000
    4df2:	f7ff ff39 	bl	4c68 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
    4df6:	f047 0709 	orr.w	r7, r7, #9
    4dfa:	f006 007f 	and.w	r0, r6, #127	; 0x7f
    4dfe:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
    4e02:	f004 f9b7 	bl	9174 <usb_midi_write_packed>
    envelope1.noteOn();
    4e06:	4837      	ldr	r0, [pc, #220]	; (4ee4 <_Z7note_onhhb+0x204>)
    4e08:	f7fd fbd2 	bl	25b0 <_ZN25AudioEffectCustomEnvelope6noteOnEv>
    envelope2.noteOn();
    4e0c:	4836      	ldr	r0, [pc, #216]	; (4ee8 <_Z7note_onhhb+0x208>)
}
    4e0e:	b003      	add	sp, #12
    4e10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    envelope2.noteOn();
    4e14:	f7fd bbcc 	b.w	25b0 <_ZN25AudioEffectCustomEnvelope6noteOnEv>
    leds(current_step) = LED_WHITE;
    4e18:	4a34      	ldr	r2, [pc, #208]	; (4eec <_Z7note_onhhb+0x20c>)
    4e1a:	4b35      	ldr	r3, [pc, #212]	; (4ef0 <_Z7note_onhhb+0x210>)
    4e1c:	7812      	ldrb	r2, [r2, #0]
    4e1e:	4935      	ldr	r1, [pc, #212]	; (4ef4 <_Z7note_onhhb+0x214>)
    4e20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4e24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4e28:	188b      	adds	r3, r1, r2
        r = rhs.r;
    4e2a:	25e6      	movs	r5, #230	; 0xe6
        g = rhs.g;
    4e2c:	24ff      	movs	r4, #255	; 0xff
        b = rhs.b;
    4e2e:	2096      	movs	r0, #150	; 0x96
        r = rhs.r;
    4e30:	548d      	strb	r5, [r1, r2]
        g = rhs.g;
    4e32:	705c      	strb	r4, [r3, #1]
        b = rhs.b;
    4e34:	7098      	strb	r0, [r3, #2]
}
    4e36:	b003      	add	sp, #12
    4e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (t_freq > AUDIO_SAMPLE_RATE_EXACT / 2) t_freq = AUDIO_SAMPLE_RATE_EXACT / 2;
    4e3a:	4826      	ldr	r0, [pc, #152]	; (4ed4 <_Z7note_onhhb+0x1f4>)
    4e3c:	e7ae      	b.n	4d9c <_Z7note_onhhb+0xbc>
		else if (n < -1.0) n = -1.0;
    4e3e:	4620      	mov	r0, r4
    4e40:	492d      	ldr	r1, [pc, #180]	; (4ef8 <_Z7note_onhhb+0x218>)
    4e42:	f008 fb09 	bl	d458 <__aeabi_fcmplt>
    4e46:	b9e0      	cbnz	r0, 4e82 <_Z7note_onhhb+0x1a2>
    4e48:	4620      	mov	r0, r4
    4e4a:	f007 fcd3 	bl	c7f4 <__aeabi_f2d>
    4e4e:	a314      	add	r3, pc, #80	; (adr r3, 4ea0 <_Z7note_onhhb+0x1c0>)
    4e50:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e54:	f007 fd22 	bl	c89c <__aeabi_dmul>
    4e58:	f007 ffba 	bl	cdd0 <__aeabi_d2iz>
    4e5c:	e767      	b.n	4d2e <_Z7note_onhhb+0x4e>
    4e5e:	a30e      	add	r3, pc, #56	; (adr r3, 4e98 <_Z7note_onhhb+0x1b8>)
    4e60:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e64:	4620      	mov	r0, r4
    4e66:	4629      	mov	r1, r5
    4e68:	f007 fd18 	bl	c89c <__aeabi_dmul>
    4e6c:	2200      	movs	r2, #0
    4e6e:	4b16      	ldr	r3, [pc, #88]	; (4ec8 <_Z7note_onhhb+0x1e8>)
    4e70:	f007 fb62 	bl	c538 <__adddf3>
    4e74:	f007 ffd4 	bl	ce20 <__aeabi_d2uiz>
    4e78:	e7aa      	b.n	4dd0 <_Z7note_onhhb+0xf0>
    if (t_freq < 0.0) t_freq = 0.0;
    4e7a:	4628      	mov	r0, r5
    4e7c:	e78e      	b.n	4d9c <_Z7note_onhhb+0xbc>
    4e7e:	2000      	movs	r0, #0
    4e80:	e7a6      	b.n	4dd0 <_Z7note_onhhb+0xf0>
    4e82:	481e      	ldr	r0, [pc, #120]	; (4efc <_Z7note_onhhb+0x21c>)
    4e84:	e753      	b.n	4d2e <_Z7note_onhhb+0x4e>
    4e86:	bf00      	nop
    4e88:	00000000 	.word	0x00000000
    4e8c:	405fc000 	.word	0x405fc000
    4e90:	b4b72c52 	.word	0xb4b72c52
    4e94:	40d58ab4 	.word	0x40d58ab4
    4e98:	78ff0252 	.word	0x78ff0252
    4e9c:	40e7c489 	.word	0x40e7c489
    4ea0:	00000000 	.word	0x00000000
    4ea4:	41dfffc0 	.word	0x41dfffc0
    4ea8:	200018cc 	.word	0x200018cc
    4eac:	e000e188 	.word	0xe000e188
    4eb0:	7fff0000 	.word	0x7fff0000
    4eb4:	2000236c 	.word	0x2000236c
    4eb8:	20001fd0 	.word	0x20001fd0
    4ebc:	000118ec 	.word	0x000118ec
    4ec0:	20002058 	.word	0x20002058
    4ec4:	20001734 	.word	0x20001734
    4ec8:	3fe00000 	.word	0x3fe00000
    4ecc:	20001d58 	.word	0x20001d58
    4ed0:	20001850 	.word	0x20001850
    4ed4:	40000022 	.word	0x40000022
    4ed8:	20001fd8 	.word	0x20001fd8
    4edc:	e000e108 	.word	0xe000e108
    4ee0:	2000209c 	.word	0x2000209c
    4ee4:	20001c18 	.word	0x20001c18
    4ee8:	20001c64 	.word	0x20001c64
    4eec:	20001d44 	.word	0x20001d44
    4ef0:	000118a0 	.word	0x000118a0
    4ef4:	200018e0 	.word	0x200018e0
    4ef8:	bf800000 	.word	0xbf800000
    4efc:	80010000 	.word	0x80010000

00004f00 <_ZL22sequencer_trigger_notev>:
  if(!note_is_done_playing && millis() >= note_off_time && note_is_triggered) { 
    sequencer_untrigger_note();
  }
}

static void sequencer_trigger_note() {
    4f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4f04:	4a18      	ldr	r2, [pc, #96]	; (4f68 <_ZL22sequencer_trigger_notev+0x68>)
  note_is_triggered = true;
  note_is_done_playing = false;
  previous_note_on_time = millis();
  note_off_time = previous_note_on_time + gate_length_msec;

  step_velocity[current_step] = INITIAL_VELOCITY;
    4f06:	4b19      	ldr	r3, [pc, #100]	; (4f6c <_ZL22sequencer_trigger_notev+0x6c>)
    4f08:	6815      	ldr	r5, [r2, #0]
    4f0a:	781b      	ldrb	r3, [r3, #0]

  note_on(step_note[current_step]+transpose, step_velocity[current_step], step_enable[current_step]);
    4f0c:	4818      	ldr	r0, [pc, #96]	; (4f70 <_ZL22sequencer_trigger_notev+0x70>)
    4f0e:	4919      	ldr	r1, [pc, #100]	; (4f74 <_ZL22sequencer_trigger_notev+0x74>)
  note_off_time = previous_note_on_time + gate_length_msec;
    4f10:	4c19      	ldr	r4, [pc, #100]	; (4f78 <_ZL22sequencer_trigger_notev+0x78>)
  note_on(step_note[current_step]+transpose, step_velocity[current_step], step_enable[current_step]);
    4f12:	4a1a      	ldr	r2, [pc, #104]	; (4f7c <_ZL22sequencer_trigger_notev+0x7c>)
    4f14:	f810 e003 	ldrb.w	lr, [r0, r3]
  note_off_time = previous_note_on_time + gate_length_msec;
    4f18:	6826      	ldr	r6, [r4, #0]
  note_on(step_note[current_step]+transpose, step_velocity[current_step], step_enable[current_step]);
    4f1a:	6808      	ldr	r0, [r1, #0]
    4f1c:	5cd2      	ldrb	r2, [r2, r3]
  previous_note_on_time = millis();
    4f1e:	4c18      	ldr	r4, [pc, #96]	; (4f80 <_ZL22sequencer_trigger_notev+0x80>)
  step_velocity[current_step] = INITIAL_VELOCITY;
    4f20:	f8df c068 	ldr.w	ip, [pc, #104]	; 4f8c <_ZL22sequencer_trigger_notev+0x8c>
  note_off_time = previous_note_on_time + gate_length_msec;
    4f24:	f8df 8068 	ldr.w	r8, [pc, #104]	; 4f90 <_ZL22sequencer_trigger_notev+0x90>
  note_is_triggered = true;
    4f28:	4f16      	ldr	r7, [pc, #88]	; (4f84 <_ZL22sequencer_trigger_notev+0x84>)
static void sequencer_trigger_note() {
    4f2a:	b083      	sub	sp, #12
  note_on(step_note[current_step]+transpose, step_velocity[current_step], step_enable[current_step]);
    4f2c:	3200      	adds	r2, #0
    4f2e:	9501      	str	r5, [sp, #4]
	return ret;
    4f30:	9901      	ldr	r1, [sp, #4]
  previous_note_on_time = millis();
    4f32:	6021      	str	r1, [r4, #0]
  note_is_done_playing = false;
    4f34:	4d14      	ldr	r5, [pc, #80]	; (4f88 <_ZL22sequencer_trigger_notev+0x88>)
  step_velocity[current_step] = INITIAL_VELOCITY;
    4f36:	f04f 0464 	mov.w	r4, #100	; 0x64
  note_on(step_note[current_step]+transpose, step_velocity[current_step], step_enable[current_step]);
    4f3a:	4470      	add	r0, lr
  note_off_time = previous_note_on_time + gate_length_msec;
    4f3c:	eb06 0901 	add.w	r9, r6, r1
  note_is_triggered = true;
    4f40:	f04f 0e01 	mov.w	lr, #1
  note_on(step_note[current_step]+transpose, step_velocity[current_step], step_enable[current_step]);
    4f44:	4621      	mov	r1, r4
    4f46:	b2c0      	uxtb	r0, r0
    4f48:	bf18      	it	ne
    4f4a:	2201      	movne	r2, #1
  note_is_done_playing = false;
    4f4c:	2600      	movs	r6, #0
  note_off_time = previous_note_on_time + gate_length_msec;
    4f4e:	f8c8 9000 	str.w	r9, [r8]
  step_velocity[current_step] = INITIAL_VELOCITY;
    4f52:	f80c 4003 	strb.w	r4, [ip, r3]
  note_is_triggered = true;
    4f56:	f887 e000 	strb.w	lr, [r7]
  note_is_done_playing = false;
    4f5a:	702e      	strb	r6, [r5, #0]
  note_on(step_note[current_step]+transpose, step_velocity[current_step], step_enable[current_step]);
    4f5c:	f7ff fec0 	bl	4ce0 <_Z7note_onhhb>
}
    4f60:	b003      	add	sp, #12
    4f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4f66:	bf00      	nop
    4f68:	20002418 	.word	0x20002418
    4f6c:	20001d44 	.word	0x20001d44
    4f70:	20000c98 	.word	0x20000c98
    4f74:	200018c4 	.word	0x200018c4
    4f78:	20000c88 	.word	0x20000c88
    4f7c:	20000cb4 	.word	0x20000cb4
    4f80:	20001a70 	.word	0x20001a70
    4f84:	20002394 	.word	0x20002394
    4f88:	20001ce8 	.word	0x20001ce8
    4f8c:	20000c8c 	.word	0x20000c8c
    4f90:	2000201c 	.word	0x2000201c

00004f94 <_Z8note_offv>:
void note_off() {
    4f94:	b510      	push	{r4, lr}
  if (note_is_playing) {
    4f96:	4c18      	ldr	r4, [pc, #96]	; (4ff8 <_Z8note_offv+0x64>)
    4f98:	7822      	ldrb	r2, [r4, #0]
void note_off() {
    4f9a:	b082      	sub	sp, #8
  if (note_is_playing) {
    4f9c:	b90a      	cbnz	r2, 4fa2 <_Z8note_offv+0xe>
}
    4f9e:	b002      	add	sp, #8
    4fa0:	bd10      	pop	{r4, pc}
    send(NoteOff, inNoteNumber, inVelocity, inChannel);
    4fa2:	2301      	movs	r3, #1
    4fa4:	9300      	str	r3, [sp, #0]
    4fa6:	4815      	ldr	r0, [pc, #84]	; (4ffc <_Z8note_offv+0x68>)
    4fa8:	2300      	movs	r3, #0
    4faa:	2180      	movs	r1, #128	; 0x80
    4fac:	f7ff fe5c 	bl	4c68 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
		  | ((note & 0x7F) << 16) | ((velocity & 0x7F) << 24));
    4fb0:	7820      	ldrb	r0, [r4, #0]
    4fb2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    4fb6:	0400      	lsls	r0, r0, #16
    4fb8:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    4fbc:	f040 0008 	orr.w	r0, r0, #8
    4fc0:	f004 f8d8 	bl	9174 <usb_midi_write_packed>
    if(!step_enable[current_step]) {
    4fc4:	4a0e      	ldr	r2, [pc, #56]	; (5000 <_Z8note_offv+0x6c>)
    4fc6:	4b0f      	ldr	r3, [pc, #60]	; (5004 <_Z8note_offv+0x70>)
    4fc8:	7812      	ldrb	r2, [r2, #0]
    4fca:	5c9b      	ldrb	r3, [r3, r2]
    4fcc:	b96b      	cbnz	r3, 4fea <_Z8note_offv+0x56>
      leds(current_step) = CRGB::Black;
    4fce:	490e      	ldr	r1, [pc, #56]	; (5008 <_Z8note_offv+0x74>)
    4fd0:	480e      	ldr	r0, [pc, #56]	; (500c <_Z8note_offv+0x78>)
    4fd2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4fd6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4fda:	1842      	adds	r2, r0, r1
        r = (colorcode >> 16) & 0xFF;
    4fdc:	5443      	strb	r3, [r0, r1]
        g = (colorcode >>  8) & 0xFF;
    4fde:	7053      	strb	r3, [r2, #1]
        b = (colorcode >>  0) & 0xFF;
    4fe0:	7093      	strb	r3, [r2, #2]
    note_is_playing = 0;
    4fe2:	2300      	movs	r3, #0
    4fe4:	7023      	strb	r3, [r4, #0]
}
    4fe6:	b002      	add	sp, #8
    4fe8:	bd10      	pop	{r4, pc}
      envelope1.noteOff();
    4fea:	4809      	ldr	r0, [pc, #36]	; (5010 <_Z8note_offv+0x7c>)
    4fec:	f7fd fae6 	bl	25bc <_ZN25AudioEffectCustomEnvelope7noteOffEv>
      envelope2.noteOff();
    4ff0:	4808      	ldr	r0, [pc, #32]	; (5014 <_Z8note_offv+0x80>)
    4ff2:	f7fd fae3 	bl	25bc <_ZN25AudioEffectCustomEnvelope7noteOffEv>
    4ff6:	e7f4      	b.n	4fe2 <_Z8note_offv+0x4e>
    4ff8:	200018cc 	.word	0x200018cc
    4ffc:	2000209c 	.word	0x2000209c
    5000:	20001d44 	.word	0x20001d44
    5004:	20000cb4 	.word	0x20000cb4
    5008:	000118a0 	.word	0x000118a0
    500c:	200018e0 	.word	0x200018e0
    5010:	20001c18 	.word	0x20001c18
    5014:	20001c64 	.word	0x20001c64

00005018 <_Z14midi_handle_cchhh>:
  if(channel == MIDI_CHANNEL) {
    5018:	2801      	cmp	r0, #1
void midi_handle_cc(uint8_t channel, uint8_t number, uint8_t value) {
    501a:	b508      	push	{r3, lr}
  if(channel == MIDI_CHANNEL) {
    501c:	d000      	beq.n	5020 <_Z14midi_handle_cchhh+0x8>
    501e:	bd08      	pop	{r3, pc}
    switch(number) {
    5020:	297b      	cmp	r1, #123	; 0x7b
    5022:	d1fc      	bne.n	501e <_Z14midi_handle_cchhh+0x6>
        note_off();
    5024:	f7ff ffb6 	bl	4f94 <_Z8note_offv>
        note_stack.Clear();
    5028:	4802      	ldr	r0, [pc, #8]	; (5034 <_Z14midi_handle_cchhh+0x1c>)
}
    502a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        note_stack.Clear();
    502e:	f7fd bb91 	b.w	2754 <_ZN9NoteStack5ClearEv>
    5032:	bf00      	nop
    5034:	20001d6c 	.word	0x20001d6c

00005038 <_ZL24sequencer_untrigger_notev>:

static void sequencer_untrigger_note() {
    5038:	b510      	push	{r4, lr}
  note_is_done_playing = true;
    503a:	4b0b      	ldr	r3, [pc, #44]	; (5068 <_ZL24sequencer_untrigger_notev+0x30>)
static void sequencer_untrigger_note() {
    503c:	b082      	sub	sp, #8
  note_is_done_playing = true;
    503e:	2201      	movs	r2, #1
    5040:	701a      	strb	r2, [r3, #0]
  note_off();
    5042:	f7ff ffa7 	bl	4f94 <_Z8note_offv>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5046:	4b09      	ldr	r3, [pc, #36]	; (506c <_ZL24sequencer_untrigger_notev+0x34>)
  note_is_triggered = false;
  note_off_time = millis() + tempo_interval - gate_length_msec; // Set note off time to sometime in the future
    5048:	4a09      	ldr	r2, [pc, #36]	; (5070 <_ZL24sequencer_untrigger_notev+0x38>)
    504a:	681b      	ldr	r3, [r3, #0]
    504c:	9301      	str	r3, [sp, #4]
    504e:	4b09      	ldr	r3, [pc, #36]	; (5074 <_ZL24sequencer_untrigger_notev+0x3c>)
    5050:	6810      	ldr	r0, [r2, #0]
	return ret;
    5052:	9c01      	ldr	r4, [sp, #4]
    5054:	681a      	ldr	r2, [r3, #0]
    5056:	4908      	ldr	r1, [pc, #32]	; (5078 <_ZL24sequencer_untrigger_notev+0x40>)
  note_is_triggered = false;
    5058:	4b08      	ldr	r3, [pc, #32]	; (507c <_ZL24sequencer_untrigger_notev+0x44>)
  note_off_time = millis() + tempo_interval - gate_length_msec; // Set note off time to sometime in the future
    505a:	4420      	add	r0, r4
    505c:	1a80      	subs	r0, r0, r2
  note_is_triggered = false;
    505e:	2200      	movs	r2, #0
  note_off_time = millis() + tempo_interval - gate_length_msec; // Set note off time to sometime in the future
    5060:	6008      	str	r0, [r1, #0]
  note_is_triggered = false;
    5062:	701a      	strb	r2, [r3, #0]
}
    5064:	b002      	add	sp, #8
    5066:	bd10      	pop	{r4, pc}
    5068:	20001ce8 	.word	0x20001ce8
    506c:	20002418 	.word	0x20002418
    5070:	200018c8 	.word	0x200018c8
    5074:	20000c88 	.word	0x20000c88
    5078:	2000201c 	.word	0x2000201c
    507c:	20002394 	.word	0x20002394

00005080 <_Z14sequencer_stopv>:
void sequencer_stop() {
    5080:	b510      	push	{r4, lr}
  if(sequencer_is_running) {
    5082:	4c09      	ldr	r4, [pc, #36]	; (50a8 <_Z14sequencer_stopv+0x28>)
    5084:	7823      	ldrb	r3, [r4, #0]
    5086:	b91b      	cbnz	r3, 5090 <_Z14sequencer_stopv+0x10>
  midi_clock = 0;
    5088:	4b08      	ldr	r3, [pc, #32]	; (50ac <_Z14sequencer_stopv+0x2c>)
    508a:	2200      	movs	r2, #0
    508c:	601a      	str	r2, [r3, #0]
    508e:	bd10      	pop	{r4, pc}
            mSerial.write((byte)inType);
    5090:	4b07      	ldr	r3, [pc, #28]	; (50b0 <_Z14sequencer_stopv+0x30>)
    5092:	6c98      	ldr	r0, [r3, #72]	; 0x48
    5094:	6803      	ldr	r3, [r0, #0]
    5096:	21fc      	movs	r1, #252	; 0xfc
    5098:	681b      	ldr	r3, [r3, #0]
    509a:	4798      	blx	r3
    sequencer_is_running = false;
    509c:	2300      	movs	r3, #0
    509e:	7023      	strb	r3, [r4, #0]
    sequencer_untrigger_note();
    50a0:	f7ff ffca 	bl	5038 <_ZL24sequencer_untrigger_notev>
    50a4:	e7f0      	b.n	5088 <_Z14sequencer_stopv+0x8>
    50a6:	bf00      	nop
    50a8:	20002369 	.word	0x20002369
    50ac:	20001a74 	.word	0x20001a74
    50b0:	2000209c 	.word	0x2000209c

000050b4 <_Z14sequencer_initv>:
void sequencer_init() {
    50b4:	b570      	push	{r4, r5, r6, lr}
};

class NoteStack {
 public: 
  NoteStack() { }
  void Init() { Clear(); }
    50b6:	480d      	ldr	r0, [pc, #52]	; (50ec <_Z14sequencer_initv+0x38>)
    50b8:	4c0d      	ldr	r4, [pc, #52]	; (50f0 <_Z14sequencer_initv+0x3c>)
    50ba:	4e0e      	ldr	r6, [pc, #56]	; (50f4 <_Z14sequencer_initv+0x40>)
    50bc:	f7fd fb4a 	bl	2754 <_ZN9NoteStack5ClearEv>
    50c0:	f104 0508 	add.w	r5, r4, #8
    step_note[i] = SCALE[random(9)];
    50c4:	2009      	movs	r0, #9
    50c6:	f004 ffdd 	bl	a084 <_Z6randomm>
    50ca:	5c33      	ldrb	r3, [r6, r0]
    50cc:	f804 3f01 	strb.w	r3, [r4, #1]!
  for(int i = 0; i < SEQUENCER_NUM_STEPS; i++) {
    50d0:	42ac      	cmp	r4, r5
    50d2:	d1f7      	bne.n	50c4 <_Z14sequencer_initv+0x10>
      tTempoCallback = fptr;
    50d4:	4b08      	ldr	r3, [pc, #32]	; (50f8 <_Z14sequencer_initv+0x44>)
      tResetCallback = fptr;
    50d6:	4a09      	ldr	r2, [pc, #36]	; (50fc <_Z14sequencer_initv+0x48>)
      tTempoCallback = fptr;
    50d8:	4909      	ldr	r1, [pc, #36]	; (5100 <_Z14sequencer_initv+0x4c>)
      tResetCallback = fptr;
    50da:	e883 0006 	stmia.w	r3, {r1, r2}
  sequencer_stop();
    50de:	f7ff ffcf 	bl	5080 <_Z14sequencer_stopv>
  current_step = SEQUENCER_NUM_STEPS - 1;
    50e2:	4b08      	ldr	r3, [pc, #32]	; (5104 <_Z14sequencer_initv+0x50>)
    50e4:	2207      	movs	r2, #7
    50e6:	701a      	strb	r2, [r3, #0]
    50e8:	bd70      	pop	{r4, r5, r6, pc}
    50ea:	bf00      	nop
    50ec:	20001d6c 	.word	0x20001d6c
    50f0:	20000c97 	.word	0x20000c97
    50f4:	00011868 	.word	0x00011868
    50f8:	20001cc0 	.word	0x20001cc0
    50fc:	000027b5 	.word	0x000027b5
    5100:	000052c1 	.word	0x000052c1
    5104:	20001d44 	.word	0x20001d44

00005108 <setup>:
void setup() {
    5108:	b5f0      	push	{r4, r5, r6, r7, lr}
    510a:	b083      	sub	sp, #12
  pins_init();
    510c:	f7fe f8e2 	bl	32d4 <_Z9pins_initv>
  if(amp_enabled == 1) {
    5110:	4b23      	ldr	r3, [pc, #140]	; (51a0 <setup+0x98>)
    5112:	781b      	ldrb	r3, [r3, #0]
    5114:	b10b      	cbz	r3, 511a <setup+0x12>
    5116:	f7fd fc71 	bl	29fc <_Z11amp_disablev.part.36>
  }
}

void headphone_disable() {
  digitalWrite(HP_ENABLE, LOW);
    511a:	2004      	movs	r0, #4
    511c:	2100      	movs	r1, #0
    511e:	f001 ff2d 	bl	6f7c <digitalWrite>
  sequencer_init();
    5122:	f7ff ffc7 	bl	50b4 <_Z14sequencer_initv>
  audio_init();
    5126:	f7fe fab3 	bl	3690 <_Z10audio_initv>
  led_init();
    512a:	f7fe fc73 	bl	3a14 <_Z8led_initv>
  midi_init();
    512e:	f7fe f905 	bl	333c <_Z9midi_initv>
template<class SerialPort, class Settings> void MidiInterface<SerialPort, Settings>::setHandleStart(void (*fptr)(void))                                              { mStartCallback                = fptr; }
    5132:	4b1c      	ldr	r3, [pc, #112]	; (51a4 <setup+0x9c>)
    5134:	4a1c      	ldr	r2, [pc, #112]	; (51a8 <setup+0xa0>)
template<class SerialPort, class Settings> void MidiInterface<SerialPort, Settings>::setHandleContinue(void (*fptr)(void))                                           { mContinueCallback             = fptr; }
template<class SerialPort, class Settings> void MidiInterface<SerialPort, Settings>::setHandleStop(void (*fptr)(void))                                               { mStopCallback                 = fptr; }
    5136:	481d      	ldr	r0, [pc, #116]	; (51ac <setup+0xa4>)
template<class SerialPort, class Settings> void MidiInterface<SerialPort, Settings>::setHandleControlChange(void (*fptr)(byte channel, byte number, byte value))     { mControlChangeCallback        = fptr; }
    5138:	491d      	ldr	r1, [pc, #116]	; (51b0 <setup+0xa8>)
template<class SerialPort, class Settings> void MidiInterface<SerialPort, Settings>::setHandleStop(void (*fptr)(void))                                               { mStopCallback                 = fptr; }
    513a:	63d8      	str	r0, [r3, #60]	; 0x3c
template<class SerialPort, class Settings> void MidiInterface<SerialPort, Settings>::setHandleControlChange(void (*fptr)(byte channel, byte number, byte value))     { mControlChangeCallback        = fptr; }
    513c:	60d9      	str	r1, [r3, #12]
template<class SerialPort, class Settings> void MidiInterface<SerialPort, Settings>::setHandleStart(void (*fptr)(void))                                              { mStartCallback                = fptr; }
    513e:	635a      	str	r2, [r3, #52]	; 0x34
template<class SerialPort, class Settings> void MidiInterface<SerialPort, Settings>::setHandleContinue(void (*fptr)(void))                                           { mContinueCallback             = fptr; }
    5140:	639a      	str	r2, [r3, #56]	; 0x38
  button_matrix_init();
    5142:	f7fe f939 	bl	33b8 <_Z18button_matrix_initv>
  drum_init();
    5146:	f7fe fe3f 	bl	3dc8 <_Z9drum_initv>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    514a:	4b1a      	ldr	r3, [pc, #104]	; (51b4 <setup+0xac>)
class Print
{
  public:
	Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    514c:	4c1a      	ldr	r4, [pc, #104]	; (51b8 <setup+0xb0>)
    514e:	681b      	ldr	r3, [r3, #0]
        _threshold = (int16_t)threshold;
    5150:	491a      	ldr	r1, [pc, #104]	; (51bc <setup+0xb4>)
    5152:	4a1b      	ldr	r2, [pc, #108]	; (51c0 <setup+0xb8>)
    5154:	9301      	str	r3, [sp, #4]
    5156:	6820      	ldr	r0, [r4, #0]
  previous_note_on_time = millis();
    5158:	4d1a      	ldr	r5, [pc, #104]	; (51c4 <setup+0xbc>)
    tTouchCallback  = fptr;
    515a:	4f1b      	ldr	r7, [pc, #108]	; (51c8 <setup+0xc0>)
    515c:	4b1b      	ldr	r3, [pc, #108]	; (51cc <setup+0xc4>)
    515e:	f8c1 70b4 	str.w	r7, [r1, #180]	; 0xb4
    5162:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
	return ret;
    5166:	9e01      	ldr	r6, [sp, #4]
    5168:	602e      	str	r6, [r5, #0]
        _threshold = (int16_t)threshold;
    516a:	231e      	movs	r3, #30
    516c:	6845      	ldr	r5, [r0, #4]
    516e:	650b      	str	r3, [r1, #80]	; 0x50
    5170:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
    5174:	6513      	str	r3, [r2, #80]	; 0x50
    5176:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    517a:	4620      	mov	r0, r4
    517c:	4914      	ldr	r1, [pc, #80]	; (51d0 <setup+0xc8>)
    517e:	2212      	movs	r2, #18
    5180:	47a8      	blx	r5
    5182:	6823      	ldr	r3, [r4, #0]
    5184:	4913      	ldr	r1, [pc, #76]	; (51d4 <setup+0xcc>)
    5186:	685b      	ldr	r3, [r3, #4]
    5188:	2205      	movs	r2, #5
    518a:	4620      	mov	r0, r4
    518c:	4798      	blx	r3
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    518e:	4620      	mov	r0, r4
    5190:	f004 fef8 	bl	9f84 <_ZN5Print7printlnEv>
}

void headphone_enable() {
  digitalWrite(HP_ENABLE, HIGH);
    5194:	2004      	movs	r0, #4
    5196:	2101      	movs	r1, #1
    5198:	f001 fef0 	bl	6f7c <digitalWrite>
}
    519c:	b003      	add	sp, #12
    519e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51a0:	20001884 	.word	0x20001884
    51a4:	2000209c 	.word	0x2000209c
    51a8:	00002a15 	.word	0x00002a15
    51ac:	00005081 	.word	0x00005081
    51b0:	00005019 	.word	0x00005019
    51b4:	20002418 	.word	0x20002418
    51b8:	20002750 	.word	0x20002750
    51bc:	20001768 	.word	0x20001768
    51c0:	20001a7c 	.word	0x20001a7c
    51c4:	20001a70 	.word	0x20001a70
    51c8:	00004301 	.word	0x00004301
    51cc:	000044e9 	.word	0x000044e9
    51d0:	00011884 	.word	0x00011884
    51d4:	00011898 	.word	0x00011898

000051d8 <_Z22sequencer_toggle_startv>:
  if(sequencer_is_running) {
    51d8:	4b03      	ldr	r3, [pc, #12]	; (51e8 <_Z22sequencer_toggle_startv+0x10>)
    51da:	781b      	ldrb	r3, [r3, #0]
    51dc:	b90b      	cbnz	r3, 51e2 <_Z22sequencer_toggle_startv+0xa>
    sequencer_start();
    51de:	f7fe bbfb 	b.w	39d8 <_Z15sequencer_startv>
    sequencer_stop();
    51e2:	f7ff bf4d 	b.w	5080 <_Z14sequencer_stopv>
    51e6:	bf00      	nop
    51e8:	20002369 	.word	0x20002369

000051ec <_ZL30sequencer_advance_without_playv>:
  if(!note_is_done_playing) {
    51ec:	4b29      	ldr	r3, [pc, #164]	; (5294 <_ZL30sequencer_advance_without_playv+0xa8>)
    51ee:	781b      	ldrb	r3, [r3, #0]
void sequencer_advance_without_play() {
    51f0:	b570      	push	{r4, r5, r6, lr}
  if(!note_is_done_playing) {
    51f2:	2b00      	cmp	r3, #0
    51f4:	d046      	beq.n	5284 <_ZL30sequencer_advance_without_playv+0x98>
  if (!next_step_is_random && !random_flag) {
    51f6:	4b28      	ldr	r3, [pc, #160]	; (5298 <_ZL30sequencer_advance_without_playv+0xac>)
    51f8:	781b      	ldrb	r3, [r3, #0]
    51fa:	b94b      	cbnz	r3, 5210 <_ZL30sequencer_advance_without_playv+0x24>
    51fc:	4b27      	ldr	r3, [pc, #156]	; (529c <_ZL30sequencer_advance_without_playv+0xb0>)
    51fe:	781a      	ldrb	r2, [r3, #0]
    5200:	b93a      	cbnz	r2, 5212 <_ZL30sequencer_advance_without_playv+0x26>
    current_step%=SEQUENCER_NUM_STEPS;
    5202:	4c27      	ldr	r4, [pc, #156]	; (52a0 <_ZL30sequencer_advance_without_playv+0xb4>)
    current_step++;
    5204:	7823      	ldrb	r3, [r4, #0]
    5206:	3301      	adds	r3, #1
    current_step%=SEQUENCER_NUM_STEPS;
    5208:	f003 0307 	and.w	r3, r3, #7
    520c:	7023      	strb	r3, [r4, #0]
    520e:	e00f      	b.n	5230 <_ZL30sequencer_advance_without_playv+0x44>
    5210:	4b22      	ldr	r3, [pc, #136]	; (529c <_ZL30sequencer_advance_without_playv+0xb0>)
    current_step = ((current_step + random(2, SEQUENCER_NUM_STEPS))%SEQUENCER_NUM_STEPS);
    5212:	4c23      	ldr	r4, [pc, #140]	; (52a0 <_ZL30sequencer_advance_without_playv+0xb4>)
    random_flag = false;
    5214:	2200      	movs	r2, #0
    current_step = ((current_step + random(2, SEQUENCER_NUM_STEPS))%SEQUENCER_NUM_STEPS);
    5216:	2002      	movs	r0, #2
    5218:	2108      	movs	r1, #8
    random_flag = false;
    521a:	701a      	strb	r2, [r3, #0]
    current_step = ((current_step + random(2, SEQUENCER_NUM_STEPS))%SEQUENCER_NUM_STEPS);
    521c:	7825      	ldrb	r5, [r4, #0]
    521e:	f004 ff5f 	bl	a0e0 <_Z6randomll>
    5222:	4b20      	ldr	r3, [pc, #128]	; (52a4 <_ZL30sequencer_advance_without_playv+0xb8>)
    5224:	4428      	add	r0, r5
    5226:	4003      	ands	r3, r0
    5228:	2b00      	cmp	r3, #0
    522a:	4622      	mov	r2, r4
    522c:	db2d      	blt.n	528a <_ZL30sequencer_advance_without_playv+0x9e>
    522e:	7013      	strb	r3, [r2, #0]
  if(arpeggio_index >= n) {
    5230:	4a1d      	ldr	r2, [pc, #116]	; (52a8 <_ZL30sequencer_advance_without_playv+0xbc>)
  uint8_t n = note_stack.size();
    5232:	4b1e      	ldr	r3, [pc, #120]	; (52ac <_ZL30sequencer_advance_without_playv+0xc0>)
  if(arpeggio_index >= n) {
    5234:	7810      	ldrb	r0, [r2, #0]
  uint8_t n = note_stack.size();
    5236:	7819      	ldrb	r1, [r3, #0]
  if(arpeggio_index >= n) {
    5238:	4288      	cmp	r0, r1
    arpeggio_index = 0;
    523a:	bf24      	itt	cs
    523c:	2000      	movcs	r0, #0
    523e:	7010      	strbcs	r0, [r2, #0]
  if(n > 0) {
    5240:	b1a9      	cbz	r1, 526e <_ZL30sequencer_advance_without_playv+0x82>
    if(!sequencer_is_running) {
    5242:	491b      	ldr	r1, [pc, #108]	; (52b0 <_ZL30sequencer_advance_without_playv+0xc4>)
    5244:	7809      	ldrb	r1, [r1, #0]
    5246:	b199      	cbz	r1, 5270 <_ZL30sequencer_advance_without_playv+0x84>
      step_note[current_step] = note_stack.sorted_note(arpeggio_index).note;
    5248:	7810      	ldrb	r0, [r2, #0]
    524a:	7821      	ldrb	r1, [r4, #0]
    524c:	4c19      	ldr	r4, [pc, #100]	; (52b4 <_ZL30sequencer_advance_without_playv+0xc8>)
      current = pool_[current].next_ptr;
    }
    return pool_[current];
  }
  const NoteEntry& sorted_note(uint8_t index) {
    return pool_[sorted_ptr_[index]];
    524e:	181e      	adds	r6, r3, r0
      arpeggio_index++;
    5250:	1c45      	adds	r5, r0, #1
    5252:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    5256:	7015      	strb	r5, [r2, #0]
      step_note[current_step] = note_stack.sorted_note(arpeggio_index).note;
    5258:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    525c:	4403      	add	r3, r0
    525e:	785b      	ldrb	r3, [r3, #1]
    5260:	5463      	strb	r3, [r4, r1]
    step_enable[current_step] = 1;
    5262:	4815      	ldr	r0, [pc, #84]	; (52b8 <_ZL30sequencer_advance_without_playv+0xcc>)
    step_velocity[current_step] = INITIAL_VELOCITY; 
    5264:	4b15      	ldr	r3, [pc, #84]	; (52bc <_ZL30sequencer_advance_without_playv+0xd0>)
    step_enable[current_step] = 1;
    5266:	2401      	movs	r4, #1
    step_velocity[current_step] = INITIAL_VELOCITY; 
    5268:	2264      	movs	r2, #100	; 0x64
    step_enable[current_step] = 1;
    526a:	5444      	strb	r4, [r0, r1]
    step_velocity[current_step] = INITIAL_VELOCITY; 
    526c:	545a      	strb	r2, [r3, r1]
    526e:	bd70      	pop	{r4, r5, r6, pc}
  const NoteEntry& most_recent_note() { return pool_[root_ptr_]; }
    5270:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
      step_note[current_step] = note_stack.most_recent_note().note;
    5274:	7821      	ldrb	r1, [r4, #0]
    5276:	480f      	ldr	r0, [pc, #60]	; (52b4 <_ZL30sequencer_advance_without_playv+0xc8>)
    5278:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    527c:	4413      	add	r3, r2
    527e:	785b      	ldrb	r3, [r3, #1]
    5280:	5443      	strb	r3, [r0, r1]
    5282:	e7ee      	b.n	5262 <_ZL30sequencer_advance_without_playv+0x76>
    sequencer_untrigger_note();
    5284:	f7ff fed8 	bl	5038 <_ZL24sequencer_untrigger_notev>
    5288:	e7b5      	b.n	51f6 <_ZL30sequencer_advance_without_playv+0xa>
    current_step = ((current_step + random(2, SEQUENCER_NUM_STEPS))%SEQUENCER_NUM_STEPS);
    528a:	3b01      	subs	r3, #1
    528c:	f063 0307 	orn	r3, r3, #7
    5290:	3301      	adds	r3, #1
    5292:	e7cc      	b.n	522e <_ZL30sequencer_advance_without_playv+0x42>
    5294:	20001ce8 	.word	0x20001ce8
    5298:	20001b56 	.word	0x20001b56
    529c:	20001720 	.word	0x20001720
    52a0:	20001d44 	.word	0x20001d44
    52a4:	80000007 	.word	0x80000007
    52a8:	20002368 	.word	0x20002368
    52ac:	20001d6c 	.word	0x20001d6c
    52b0:	20002369 	.word	0x20002369
    52b4:	20000c98 	.word	0x20000c98
    52b8:	20000cb4 	.word	0x20000cb4
    52bc:	20000c8c 	.word	0x20000c8c

000052c0 <_Z20sequencer_tick_clockv>:
void sequencer_tick_clock() {
    52c0:	b538      	push	{r3, r4, r5, lr}
  if(double_speed) {
    52c2:	4a14      	ldr	r2, [pc, #80]	; (5314 <_Z20sequencer_tick_clockv+0x54>)
  if(!tempo_handler.is_clock_source_internal()) {
    52c4:	4b14      	ldr	r3, [pc, #80]	; (5318 <_Z20sequencer_tick_clockv+0x58>)
  if(double_speed) {
    52c6:	7812      	ldrb	r2, [r2, #0]
  if(!tempo_handler.is_clock_source_internal()) {
    52c8:	7b1b      	ldrb	r3, [r3, #12]
  uint8_t sequencer_divider = 12;
    52ca:	2a00      	cmp	r2, #0
    52cc:	bf14      	ite	ne
    52ce:	2506      	movne	r5, #6
    52d0:	250c      	moveq	r5, #12
  if(!tempo_handler.is_clock_source_internal()) {
    52d2:	b9c3      	cbnz	r3, 5306 <_Z20sequencer_tick_clockv+0x46>
  if(sequencer_is_running && (sequencer_clock % sequencer_divider)==0) {
    52d4:	4b11      	ldr	r3, [pc, #68]	; (531c <_Z20sequencer_tick_clockv+0x5c>)
    52d6:	4c12      	ldr	r4, [pc, #72]	; (5320 <_Z20sequencer_tick_clockv+0x60>)
    52d8:	781b      	ldrb	r3, [r3, #0]
    52da:	b193      	cbz	r3, 5302 <_Z20sequencer_tick_clockv+0x42>
    52dc:	7823      	ldrb	r3, [r4, #0]
    52de:	fbb3 f2f5 	udiv	r2, r3, r5
    52e2:	fb05 3512 	mls	r5, r5, r2, r3
    52e6:	f015 0fff 	tst.w	r5, #255	; 0xff
    52ea:	d006      	beq.n	52fa <_Z20sequencer_tick_clockv+0x3a>
  sequencer_clock++;
    52ec:	3301      	adds	r3, #1
    52ee:	b2db      	uxtb	r3, r3
  if(sequencer_clock >= 192) {
    52f0:	2bbf      	cmp	r3, #191	; 0xbf
    sequencer_clock = 0;
    52f2:	bf88      	it	hi
    52f4:	2300      	movhi	r3, #0
    52f6:	7023      	strb	r3, [r4, #0]
    52f8:	bd38      	pop	{r3, r4, r5, pc}
  sequencer_advance_without_play();
    52fa:	f7ff ff77 	bl	51ec <_ZL30sequencer_advance_without_playv>
  sequencer_trigger_note();
    52fe:	f7ff fdff 	bl	4f00 <_ZL22sequencer_trigger_notev>
    5302:	7823      	ldrb	r3, [r4, #0]
    5304:	e7f2      	b.n	52ec <_Z20sequencer_tick_clockv+0x2c>
    int potvalue = analogRead(TEMPO_POT);
    5306:	2022      	movs	r0, #34	; 0x22
    5308:	f001 fb96 	bl	6a38 <analogRead>
    if(potvalue < 127) {
    530c:	287e      	cmp	r0, #126	; 0x7e
      sequencer_divider /= 2;
    530e:	bfd8      	it	le
    5310:	086d      	lsrle	r5, r5, #1
    5312:	e7df      	b.n	52d4 <_Z20sequencer_tick_clockv+0x14>
    5314:	20001a78 	.word	0x20001a78
    5318:	20001cc0 	.word	0x20001cc0
    531c:	20002369 	.word	0x20002369
    5320:	200023d0 	.word	0x200023d0

00005324 <_Z9keys_scanv>:
void keys_scan() {
    5324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(muxDigitalRead(DELAY_PIN)) {
    5328:	2002      	movs	r0, #2
    532a:	f7fd ffad 	bl	3288 <_Z14muxDigitalReadh>
    synth.delay = false;
    532e:	4e65      	ldr	r6, [pc, #404]	; (54c4 <_Z9keys_scanv+0x1a0>)
  if(muxDigitalRead(DELAY_PIN)) {
    5330:	2800      	cmp	r0, #0
    5332:	d076      	beq.n	5422 <_Z9keys_scanv+0xfe>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    5334:	4a64      	ldr	r2, [pc, #400]	; (54c8 <_Z9keys_scanv+0x1a4>)
    synth.delay = false;
    5336:	2300      	movs	r3, #0
    5338:	76b3      	strb	r3, [r6, #26]
    533a:	6193      	str	r3, [r2, #24]
    533c:	6253      	str	r3, [r2, #36]	; 0x24
  if (button_matrix.getKeys())  {
    533e:	4863      	ldr	r0, [pc, #396]	; (54cc <_Z9keys_scanv+0x1a8>)
    5340:	f006 f9e6 	bl	b710 <_ZN6Keypad7getKeysEv>
    5344:	b318      	cbz	r0, 538e <_Z9keys_scanv+0x6a>
    5346:	4c61      	ldr	r4, [pc, #388]	; (54cc <_Z9keys_scanv+0x1a8>)
                  next_step_is_random = false;
    5348:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 54fc <_Z9keys_scanv+0x1d8>
                  random_flag = false;
    534c:	4f60      	ldr	r7, [pc, #384]	; (54d0 <_Z9keys_scanv+0x1ac>)
    534e:	f504 75c0 	add.w	r5, r4, #384	; 0x180
      if ( button_matrix.key[i].stateChanged ) {
    5352:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    5356:	b303      	cbz	r3, 539a <_Z9keys_scanv+0x76>
        switch (button_matrix.key[i].kstate) {  // Report active key state : IDLE, PRESSED, HOLD, or RELEASED
    5358:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
        char k = button_matrix.key[i].kchar;
    535c:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
        switch (button_matrix.key[i].kstate) {  // Report active key state : IDLE, PRESSED, HOLD, or RELEASED
    5360:	2b03      	cmp	r3, #3
    5362:	d81a      	bhi.n	539a <_Z9keys_scanv+0x76>
    5364:	e8df f003 	tbb	[pc, r3]
    5368:	0215241e 	.word	0x0215241e
                if (k <= KEYB_9 && k >= KEYB_0) {
    536c:	2909      	cmp	r1, #9
    536e:	d952      	bls.n	5416 <_Z9keys_scanv+0xf2>
                } else if (k == BTN_SEQ2) {
    5370:	2915      	cmp	r1, #21
    5372:	d069      	beq.n	5448 <_Z9keys_scanv+0x124>
                } else if (k == BTN_DOWN) {
    5374:	2912      	cmp	r1, #18
    5376:	d05e      	beq.n	5436 <_Z9keys_scanv+0x112>
                } else if (k == BTN_UP) {
    5378:	2913      	cmp	r1, #19
    537a:	d05c      	beq.n	5436 <_Z9keys_scanv+0x112>
                } else if (k == BTN_SEQ1) {
    537c:	2914      	cmp	r1, #20
    537e:	d10c      	bne.n	539a <_Z9keys_scanv+0x76>
    5380:	340c      	adds	r4, #12
                  next_step_is_random = false;
    5382:	2300      	movs	r3, #0
    for (int i=0; i<LIST_MAX; i++) {
    5384:	42ac      	cmp	r4, r5
                  next_step_is_random = false;
    5386:	f888 3000 	strb.w	r3, [r8]
                  random_flag = false;
    538a:	703b      	strb	r3, [r7, #0]
    for (int i=0; i<LIST_MAX; i++) {
    538c:	d1e1      	bne.n	5352 <_Z9keys_scanv+0x2e>
    538e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (k == SEQ_START) {
    5392:	2916      	cmp	r1, #22
    5394:	d062      	beq.n	545c <_Z9keys_scanv+0x138>
                if (k == BTN_UP) {
    5396:	2913      	cmp	r1, #19
    5398:	d05a      	beq.n	5450 <_Z9keys_scanv+0x12c>
    539a:	340c      	adds	r4, #12
    for (int i=0; i<LIST_MAX; i++) {
    539c:	42ac      	cmp	r4, r5
    539e:	d1d8      	bne.n	5352 <_Z9keys_scanv+0x2e>
    53a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (k <= KEYB_9 && k >= KEYB_0) {
    53a4:	2909      	cmp	r1, #9
    53a6:	d8f8      	bhi.n	539a <_Z9keys_scanv+0x76>
  note_stack.NoteOn(note, INITIAL_VELOCITY);
}

void keyboard_unset_note(uint8_t note) {
  // TODO: is note 1-based? If so, this could go wrong
  note_stack.NoteOff(note);
    53a8:	484a      	ldr	r0, [pc, #296]	; (54d4 <_Z9keys_scanv+0x1b0>)
    53aa:	f7fd f90d 	bl	25c8 <_ZN9NoteStack7NoteOffEh>
    53ae:	e7f4      	b.n	539a <_Z9keys_scanv+0x76>
                if (k <= KEYB_9 && k >= KEYB_0) {
    53b0:	2909      	cmp	r1, #9
    53b2:	d929      	bls.n	5408 <_Z9keys_scanv+0xe4>
                } else if (k <= STEP_8 && k >= STEP_1) {
    53b4:	f1a1 030a 	sub.w	r3, r1, #10
    53b8:	b2da      	uxtb	r2, r3
    53ba:	2a07      	cmp	r2, #7
    53bc:	d817      	bhi.n	53ee <_Z9keys_scanv+0xca>
                  step_enable[k-STEP_1] = 1-step_enable[k-STEP_1];
    53be:	4946      	ldr	r1, [pc, #280]	; (54d8 <_Z9keys_scanv+0x1b4>)
    53c0:	5cca      	ldrb	r2, [r1, r3]
    53c2:	f1c2 0201 	rsb	r2, r2, #1
    53c6:	b2d2      	uxtb	r2, r2
    53c8:	54ca      	strb	r2, [r1, r3]
                  if(!step_enable[k-STEP_1]) { leds(k-STEP_1) = CRGB::Black; }
    53ca:	b962      	cbnz	r2, 53e6 <_Z9keys_scanv+0xc2>
    53cc:	4943      	ldr	r1, [pc, #268]	; (54dc <_Z9keys_scanv+0x1b8>)
    53ce:	f8df c130 	ldr.w	ip, [pc, #304]	; 5500 <_Z9keys_scanv+0x1dc>
    53d2:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    53d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    53da:	eb0c 0100 	add.w	r1, ip, r0
        r = (colorcode >> 16) & 0xFF;
    53de:	f80c 2000 	strb.w	r2, [ip, r0]
        g = (colorcode >>  8) & 0xFF;
    53e2:	704a      	strb	r2, [r1, #1]
        b = (colorcode >>  0) & 0xFF;
    53e4:	708a      	strb	r2, [r1, #2]
                  step_velocity[k-STEP_1] = INITIAL_VELOCITY;
    53e6:	4a3e      	ldr	r2, [pc, #248]	; (54e0 <_Z9keys_scanv+0x1bc>)
    53e8:	2164      	movs	r1, #100	; 0x64
    53ea:	54d1      	strb	r1, [r2, r3]
    53ec:	e7d5      	b.n	539a <_Z9keys_scanv+0x76>
                } else if (k == BTN_SEQ2) {
    53ee:	2915      	cmp	r1, #21
    53f0:	d04f      	beq.n	5492 <_Z9keys_scanv+0x16e>
                } else if (k == BTN_DOWN) {
    53f2:	2912      	cmp	r1, #18
    53f4:	d03a      	beq.n	546c <_Z9keys_scanv+0x148>
                } else if (k == BTN_UP) {
    53f6:	2913      	cmp	r1, #19
    53f8:	d052      	beq.n	54a0 <_Z9keys_scanv+0x17c>
                } else if (k == BTN_SEQ1) {
    53fa:	2914      	cmp	r1, #20
    53fc:	d040      	beq.n	5480 <_Z9keys_scanv+0x15c>
                } else if (k == SEQ_START) {
    53fe:	2916      	cmp	r1, #22
    5400:	d1cb      	bne.n	539a <_Z9keys_scanv+0x76>
                  sequencer_toggle_start();
    5402:	f7ff fee9 	bl	51d8 <_Z22sequencer_toggle_startv>
    5406:	e7c8      	b.n	539a <_Z9keys_scanv+0x76>
                  keyboard_set_note(SCALE[k - KEYB_0]);
    5408:	4b36      	ldr	r3, [pc, #216]	; (54e4 <_Z9keys_scanv+0x1c0>)
  note_stack.NoteOn(note, INITIAL_VELOCITY);
    540a:	4832      	ldr	r0, [pc, #200]	; (54d4 <_Z9keys_scanv+0x1b0>)
    540c:	5c59      	ldrb	r1, [r3, r1]
    540e:	2264      	movs	r2, #100	; 0x64
    5410:	f7fd f934 	bl	267c <_ZN9NoteStack6NoteOnEhh>
    5414:	e7c1      	b.n	539a <_Z9keys_scanv+0x76>
                  keyboard_unset_note(SCALE[k - KEYB_0]);
    5416:	4b33      	ldr	r3, [pc, #204]	; (54e4 <_Z9keys_scanv+0x1c0>)
  note_stack.NoteOff(note);
    5418:	482e      	ldr	r0, [pc, #184]	; (54d4 <_Z9keys_scanv+0x1b0>)
    541a:	5c59      	ldrb	r1, [r3, r1]
    541c:	f7fd f8d4 	bl	25c8 <_ZN9NoteStack7NoteOffEh>
    5420:	e7bb      	b.n	539a <_Z9keys_scanv+0x76>
    5422:	4b29      	ldr	r3, [pc, #164]	; (54c8 <_Z9keys_scanv+0x1a4>)
    synth.delay = true;
    5424:	2001      	movs	r0, #1
    5426:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    542a:	f246 6266 	movw	r2, #26214	; 0x6666
    542e:	76b0      	strb	r0, [r6, #26]
    5430:	6199      	str	r1, [r3, #24]
    5432:	625a      	str	r2, [r3, #36]	; 0x24
    5434:	e783      	b.n	533e <_Z9keys_scanv+0x1a>
                  if(transpose<-12){transpose = -12;}
    5436:	4b2c      	ldr	r3, [pc, #176]	; (54e8 <_Z9keys_scanv+0x1c4>)
    5438:	681a      	ldr	r2, [r3, #0]
    543a:	f112 0f0c 	cmn.w	r2, #12
    543e:	da10      	bge.n	5462 <_Z9keys_scanv+0x13e>
    5440:	f06f 020b 	mvn.w	r2, #11
    5444:	601a      	str	r2, [r3, #0]
    5446:	e7a8      	b.n	539a <_Z9keys_scanv+0x76>
                  double_speed = false;
    5448:	4b28      	ldr	r3, [pc, #160]	; (54ec <_Z9keys_scanv+0x1c8>)
    544a:	2200      	movs	r2, #0
    544c:	701a      	strb	r2, [r3, #0]
    544e:	e7a4      	b.n	539a <_Z9keys_scanv+0x76>
  Serial.printf("Release: %d\n", synth.release);
    5450:	4927      	ldr	r1, [pc, #156]	; (54f0 <_Z9keys_scanv+0x1cc>)
    5452:	6932      	ldr	r2, [r6, #16]
    5454:	4827      	ldr	r0, [pc, #156]	; (54f4 <_Z9keys_scanv+0x1d0>)
    5456:	f004 fdad 	bl	9fb4 <_ZN5Print6printfEPKcz>
    545a:	e79e      	b.n	539a <_Z9keys_scanv+0x76>
                    enter_dfu();
    545c:	f7ff fbcc 	bl	4bf8 <_Z9enter_dfuv>
    5460:	e79b      	b.n	539a <_Z9keys_scanv+0x76>
                  if(transpose>12){transpose = 12;}
    5462:	2a0c      	cmp	r2, #12
    5464:	dd99      	ble.n	539a <_Z9keys_scanv+0x76>
    5466:	220c      	movs	r2, #12
    5468:	601a      	str	r2, [r3, #0]
    546a:	e796      	b.n	539a <_Z9keys_scanv+0x76>
                  transpose--;
    546c:	4b1e      	ldr	r3, [pc, #120]	; (54e8 <_Z9keys_scanv+0x1c4>)
    546e:	681a      	ldr	r2, [r3, #0]
    5470:	3a01      	subs	r2, #1
                  if(transpose<-12){transpose = -24;}
    5472:	f112 0f0c 	cmn.w	r2, #12
    5476:	dae5      	bge.n	5444 <_Z9keys_scanv+0x120>
    5478:	f06f 0217 	mvn.w	r2, #23
    547c:	601a      	str	r2, [r3, #0]
    547e:	e78c      	b.n	539a <_Z9keys_scanv+0x76>
                  if(!sequencer_is_running) {
    5480:	4b1d      	ldr	r3, [pc, #116]	; (54f8 <_Z9keys_scanv+0x1d4>)
    5482:	781b      	ldrb	r3, [r3, #0]
                  next_step_is_random = true;
    5484:	2201      	movs	r2, #1
    5486:	f888 2000 	strb.w	r2, [r8]
                  if(!sequencer_is_running) {
    548a:	b1b3      	cbz	r3, 54ba <_Z9keys_scanv+0x196>
                  random_flag = true;
    548c:	2301      	movs	r3, #1
    548e:	703b      	strb	r3, [r7, #0]
    5490:	e783      	b.n	539a <_Z9keys_scanv+0x76>
                  if(!sequencer_is_running) {
    5492:	4b19      	ldr	r3, [pc, #100]	; (54f8 <_Z9keys_scanv+0x1d4>)
    5494:	781b      	ldrb	r3, [r3, #0]
    5496:	b15b      	cbz	r3, 54b0 <_Z9keys_scanv+0x18c>
                  double_speed = true;
    5498:	4b14      	ldr	r3, [pc, #80]	; (54ec <_Z9keys_scanv+0x1c8>)
    549a:	2201      	movs	r2, #1
    549c:	701a      	strb	r2, [r3, #0]
    549e:	e77c      	b.n	539a <_Z9keys_scanv+0x76>
                  transpose++;
    54a0:	4b11      	ldr	r3, [pc, #68]	; (54e8 <_Z9keys_scanv+0x1c4>)
    54a2:	681a      	ldr	r2, [r3, #0]
    54a4:	3201      	adds	r2, #1
                  if(transpose>12){transpose = 24;}
    54a6:	2a0c      	cmp	r2, #12
    54a8:	ddcc      	ble.n	5444 <_Z9keys_scanv+0x120>
    54aa:	2218      	movs	r2, #24
    54ac:	601a      	str	r2, [r3, #0]
    54ae:	e774      	b.n	539a <_Z9keys_scanv+0x76>
  sequencer_advance_without_play();
    54b0:	f7ff fe9c 	bl	51ec <_ZL30sequencer_advance_without_playv>
  sequencer_trigger_note();
    54b4:	f7ff fd24 	bl	4f00 <_ZL22sequencer_trigger_notev>
    54b8:	e7ee      	b.n	5498 <_Z9keys_scanv+0x174>
  sequencer_advance_without_play();
    54ba:	f7ff fe97 	bl	51ec <_ZL30sequencer_advance_without_playv>
  sequencer_trigger_note();
    54be:	f7ff fd1f 	bl	4f00 <_ZL22sequencer_trigger_notev>
    54c2:	e7e3      	b.n	548c <_Z9keys_scanv+0x168>
    54c4:	20001fb4 	.word	0x20001fb4
    54c8:	20002020 	.word	0x20002020
    54cc:	20002188 	.word	0x20002188
    54d0:	20001720 	.word	0x20001720
    54d4:	20001d6c 	.word	0x20001d6c
    54d8:	20000cb4 	.word	0x20000cb4
    54dc:	000118a0 	.word	0x000118a0
    54e0:	20000c8c 	.word	0x20000c8c
    54e4:	00011868 	.word	0x00011868
    54e8:	200018c4 	.word	0x200018c4
    54ec:	20001a78 	.word	0x20001a78
    54f0:	00011874 	.word	0x00011874
    54f4:	20002750 	.word	0x20002750
    54f8:	20002369 	.word	0x20002369
    54fc:	20001b56 	.word	0x20001b56
    5500:	200018e0 	.word	0x200018e0

00005504 <_Z16sequencer_updatev>:
void sequencer_update() {
    5504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      if(digitalRead(SYNC_DETECT)) {
    5508:	2002      	movs	r0, #2
    550a:	b084      	sub	sp, #16
    550c:	f001 fd3c 	bl	6f88 <digitalRead>
    5510:	2800      	cmp	r0, #0
    5512:	d068      	beq.n	55e6 <_Z16sequencer_updatev+0xe2>
        if(_source != TEMPO_SOURCE_SYNC) {
    5514:	4c90      	ldr	r4, [pc, #576]	; (5758 <_Z16sequencer_updatev+0x254>)
    5516:	7b23      	ldrb	r3, [r4, #12]
    5518:	2b02      	cmp	r3, #2
    551a:	d001      	beq.n	5520 <_Z16sequencer_updatev+0x1c>
          _source = TEMPO_SOURCE_SYNC;
    551c:	2302      	movs	r3, #2
    551e:	7323      	strb	r3, [r4, #12]
    }
    void update_sync() {
      static uint8_t _sync_pin_previous_value = 1;
      uint8_t _sync_pin_value = digitalRead(SYNC_IN);

      if(_sync_pin_previous_value && !_sync_pin_value) {
    5520:	4d8e      	ldr	r5, [pc, #568]	; (575c <_Z16sequencer_updatev+0x258>)
      uint8_t _sync_pin_value = digitalRead(SYNC_IN);
    5522:	200e      	movs	r0, #14
    5524:	f001 fd30 	bl	6f88 <digitalRead>
      if(_sync_pin_previous_value && !_sync_pin_value) {
    5528:	782b      	ldrb	r3, [r5, #0]
      uint8_t _sync_pin_value = digitalRead(SYNC_IN);
    552a:	4606      	mov	r6, r0
      if(_sync_pin_previous_value && !_sync_pin_value) {
    552c:	b113      	cbz	r3, 5534 <_Z16sequencer_updatev+0x30>
    552e:	2e00      	cmp	r6, #0
    5530:	f000 80c3 	beq.w	56ba <_Z16sequencer_updatev+0x1b6>

        if (tTempoCallback != 0) {
          trigger();
        }
      } else {
        if(micros() - _previous_clock_time > _tempo_interval) {
    5534:	f001 fd3c 	bl	6fb0 <micros>
    5538:	69a3      	ldr	r3, [r4, #24]
    553a:	8c22      	ldrh	r2, [r4, #32]
    553c:	4f86      	ldr	r7, [pc, #536]	; (5758 <_Z16sequencer_updatev+0x254>)
    553e:	1ac0      	subs	r0, r0, r3
    5540:	4290      	cmp	r0, r2
    5542:	d93c      	bls.n	55be <_Z16sequencer_updatev+0xba>
          if(_clock < TEMPO_SYNC_DIVIDER) {
    5544:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    5548:	2b0b      	cmp	r3, #11
    554a:	d838      	bhi.n	55be <_Z16sequencer_updatev+0xba>
            if (tTempoCallback != 0) {
    554c:	683b      	ldr	r3, [r7, #0]
    554e:	2b00      	cmp	r3, #0
    5550:	d035      	beq.n	55be <_Z16sequencer_updatev+0xba>
              _previous_clock_time = micros();
    5552:	f001 fd2d 	bl	6fb0 <micros>
            mSerial.write((byte)inType);
    5556:	4b82      	ldr	r3, [pc, #520]	; (5760 <_Z16sequencer_updatev+0x25c>)
    5558:	61b8      	str	r0, [r7, #24]
    555a:	6c98      	ldr	r0, [r3, #72]	; 0x48
    555c:	6803      	ldr	r3, [r0, #0]
    555e:	21f8      	movs	r1, #248	; 0xf8
    5560:	681b      	ldr	r3, [r3, #0]
    5562:	4798      	blx	r3
    /*
     * Calls the callback, updates the clock and sends out MIDI/Sync pulses
     */
    void trigger() {
      MIDI.sendRealTime(midi::Clock);
      if((_clock % 24) == 0) {
    5564:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    5568:	4a7e      	ldr	r2, [pc, #504]	; (5764 <_Z16sequencer_updatev+0x260>)
    556a:	fba2 1203 	umull	r1, r2, r2, r3
    556e:	0912      	lsrs	r2, r2, #4
    5570:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5574:	eba3 02c2 	sub.w	r2, r3, r2, lsl #3
    5578:	f012 0fff 	tst.w	r2, #255	; 0xff
    557c:	d104      	bne.n	5588 <_Z16sequencer_updatev+0x84>
        if (tResetCallback != 0) {
    557e:	687a      	ldr	r2, [r7, #4]
    5580:	b112      	cbz	r2, 5588 <_Z16sequencer_updatev+0x84>
          tResetCallback();
    5582:	4790      	blx	r2
    5584:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
        }
      }
      if((_clock % TEMPO_SYNC_DIVIDER) == 0) {
    5588:	4a76      	ldr	r2, [pc, #472]	; (5764 <_Z16sequencer_updatev+0x260>)
    558a:	fba2 1203 	umull	r1, r2, r2, r3
    558e:	08d2      	lsrs	r2, r2, #3
    5590:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5594:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
    5598:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    559c:	f000 80c8 	beq.w	5730 <_Z16sequencer_updatev+0x22c>
        digitalWrite(SYNC_OUT_PIN, HIGH);
      } else if((_clock % TEMPO_SYNC_DIVIDER) == 1) {
    55a0:	2b01      	cmp	r3, #1
    55a2:	f000 80d4 	beq.w	574e <_Z16sequencer_updatev+0x24a>
        digitalWrite(SYNC_OUT_PIN, LOW);
      }
      if (tTempoCallback != 0) {
    55a6:	6823      	ldr	r3, [r4, #0]
    55a8:	b103      	cbz	r3, 55ac <_Z16sequencer_updatev+0xa8>
        tTempoCallback();
    55aa:	4798      	blx	r3
      }
      if(_clock >= 24) { 
    55ac:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    55b0:	2b17      	cmp	r3, #23
    55b2:	bf9a      	itte	ls
    55b4:	3301      	addls	r3, #1
    55b6:	b2db      	uxtbls	r3, r3
    55b8:	2301      	movhi	r3, #1
        _clock = 0;
      }
      _clock++;
    55ba:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      _sync_pin_previous_value = _sync_pin_value;
    55be:	702e      	strb	r6, [r5, #0]
  if(!note_is_done_playing && millis() >= note_off_time && note_is_triggered) { 
    55c0:	4b69      	ldr	r3, [pc, #420]	; (5768 <_Z16sequencer_updatev+0x264>)
    55c2:	781b      	ldrb	r3, [r3, #0]
    55c4:	b963      	cbnz	r3, 55e0 <_Z16sequencer_updatev+0xdc>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    55c6:	4b69      	ldr	r3, [pc, #420]	; (576c <_Z16sequencer_updatev+0x268>)
    55c8:	4a69      	ldr	r2, [pc, #420]	; (5770 <_Z16sequencer_updatev+0x26c>)
    55ca:	681b      	ldr	r3, [r3, #0]
    55cc:	9303      	str	r3, [sp, #12]
	return ret;
    55ce:	9b03      	ldr	r3, [sp, #12]
    55d0:	6812      	ldr	r2, [r2, #0]
    55d2:	429a      	cmp	r2, r3
    55d4:	d804      	bhi.n	55e0 <_Z16sequencer_updatev+0xdc>
    55d6:	4b67      	ldr	r3, [pc, #412]	; (5774 <_Z16sequencer_updatev+0x270>)
    55d8:	781b      	ldrb	r3, [r3, #0]
    55da:	b10b      	cbz	r3, 55e0 <_Z16sequencer_updatev+0xdc>
    sequencer_untrigger_note();
    55dc:	f7ff fd2c 	bl	5038 <_ZL24sequencer_untrigger_notev>
}
    55e0:	b004      	add	sp, #16
    55e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (midi_clock > 0) { // midi_clock is a global count of incoming midi clocks
    55e6:	4b64      	ldr	r3, [pc, #400]	; (5778 <_Z16sequencer_updatev+0x274>)
        if(_source != TEMPO_SOURCE_MIDI) {
    55e8:	4c5b      	ldr	r4, [pc, #364]	; (5758 <_Z16sequencer_updatev+0x254>)
      } else if (midi_clock > 0) { // midi_clock is a global count of incoming midi clocks
    55ea:	681b      	ldr	r3, [r3, #0]
        if(_source != TEMPO_SOURCE_MIDI) {
    55ec:	7b22      	ldrb	r2, [r4, #12]
      } else if (midi_clock > 0) { // midi_clock is a global count of incoming midi clocks
    55ee:	2b00      	cmp	r3, #0
    55f0:	d048      	beq.n	5684 <_Z16sequencer_updatev+0x180>
        if(_source != TEMPO_SOURCE_MIDI) {
    55f2:	2a01      	cmp	r2, #1
    55f4:	d001      	beq.n	55fa <_Z16sequencer_updatev+0xf6>
          _source = TEMPO_SOURCE_MIDI;
    55f6:	2201      	movs	r2, #1
    55f8:	7322      	strb	r2, [r4, #12]
      if(midi_clock % _midi_divider == 0) {
    55fa:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    55fe:	4d56      	ldr	r5, [pc, #344]	; (5758 <_Z16sequencer_updatev+0x254>)
    5600:	fbb3 f1f2 	udiv	r1, r3, r2
    5604:	fb02 3311 	mls	r3, r2, r1, r3
    5608:	2b00      	cmp	r3, #0
    560a:	d152      	bne.n	56b2 <_Z16sequencer_updatev+0x1ae>
        if (!_midi_clock_block) {
    560c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
    5610:	2b00      	cmp	r3, #0
    5612:	d1d5      	bne.n	55c0 <_Z16sequencer_updatev+0xbc>
          _midi_clock_block = 1; // Block callback from triggering multiple times
    5614:	2301      	movs	r3, #1
    5616:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
          _previous_clock_time = micros();
    561a:	f001 fcc9 	bl	6fb0 <micros>
    561e:	4b50      	ldr	r3, [pc, #320]	; (5760 <_Z16sequencer_updatev+0x25c>)
    5620:	61a8      	str	r0, [r5, #24]
    5622:	6c98      	ldr	r0, [r3, #72]	; 0x48
    5624:	6803      	ldr	r3, [r0, #0]
    5626:	21f8      	movs	r1, #248	; 0xf8
    5628:	681b      	ldr	r3, [r3, #0]
    562a:	4798      	blx	r3
      if((_clock % 24) == 0) {
    562c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
    5630:	4a4c      	ldr	r2, [pc, #304]	; (5764 <_Z16sequencer_updatev+0x260>)
    5632:	fba2 1203 	umull	r1, r2, r2, r3
    5636:	0912      	lsrs	r2, r2, #4
    5638:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    563c:	eba3 02c2 	sub.w	r2, r3, r2, lsl #3
    5640:	f012 0fff 	tst.w	r2, #255	; 0xff
    5644:	d104      	bne.n	5650 <_Z16sequencer_updatev+0x14c>
        if (tResetCallback != 0) {
    5646:	686a      	ldr	r2, [r5, #4]
    5648:	b112      	cbz	r2, 5650 <_Z16sequencer_updatev+0x14c>
          tResetCallback();
    564a:	4790      	blx	r2
    564c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
      if((_clock % TEMPO_SYNC_DIVIDER) == 0) {
    5650:	4a44      	ldr	r2, [pc, #272]	; (5764 <_Z16sequencer_updatev+0x260>)
    5652:	fba2 1203 	umull	r1, r2, r2, r3
    5656:	08d2      	lsrs	r2, r2, #3
    5658:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    565c:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
    5660:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    5664:	d069      	beq.n	573a <_Z16sequencer_updatev+0x236>
      } else if((_clock % TEMPO_SYNC_DIVIDER) == 1) {
    5666:	2b01      	cmp	r3, #1
    5668:	d06c      	beq.n	5744 <_Z16sequencer_updatev+0x240>
      if (tTempoCallback != 0) {
    566a:	6823      	ldr	r3, [r4, #0]
    566c:	b103      	cbz	r3, 5670 <_Z16sequencer_updatev+0x16c>
        tTempoCallback();
    566e:	4798      	blx	r3
      if(_clock >= 24) { 
    5670:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    5674:	2b17      	cmp	r3, #23
    5676:	bf9a      	itte	ls
    5678:	3301      	addls	r3, #1
    567a:	b2db      	uxtbls	r3, r3
    567c:	2301      	movhi	r3, #1
      _clock++;
    567e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    5682:	e79d      	b.n	55c0 <_Z16sequencer_updatev+0xbc>
        if(_source != TEMPO_SOURCE_INTERNAL) {
    5684:	b102      	cbz	r2, 5688 <_Z16sequencer_updatev+0x184>
          _source = TEMPO_SOURCE_INTERNAL;
    5686:	7323      	strb	r3, [r4, #12]
      int potvalue = analogRead(TEMPO_POT);
    5688:	2022      	movs	r0, #34	; 0x22
    568a:	f001 f9d5 	bl	6a38 <analogRead>
      _tempo_interval = map(potvalue,0,1023,TEMPO_MIN_INTERVAL_USEC,TEMPO_MAX_INTERVAL_USEC);
    568e:	6922      	ldr	r2, [r4, #16]
    5690:	6963      	ldr	r3, [r4, #20]
    5692:	9200      	str	r2, [sp, #0]
    5694:	2100      	movs	r1, #0
    5696:	f240 32ff 	movw	r2, #1023	; 0x3ff
    569a:	f004 fd2b 	bl	a0f4 <_Z3maplllll>
    569e:	8420      	strh	r0, [r4, #32]
      if((micros() - _previous_clock_time) > _tempo_interval)  {
    56a0:	f001 fc86 	bl	6fb0 <micros>
    56a4:	69a3      	ldr	r3, [r4, #24]
    56a6:	8c22      	ldrh	r2, [r4, #32]
      _tempo_interval = map(potvalue,0,1023,TEMPO_MIN_INTERVAL_USEC,TEMPO_MAX_INTERVAL_USEC);
    56a8:	4d2b      	ldr	r5, [pc, #172]	; (5758 <_Z16sequencer_updatev+0x254>)
      if((micros() - _previous_clock_time) > _tempo_interval)  {
    56aa:	1ac0      	subs	r0, r0, r3
    56ac:	4290      	cmp	r0, r2
    56ae:	d987      	bls.n	55c0 <_Z16sequencer_updatev+0xbc>
    56b0:	e7b3      	b.n	561a <_Z16sequencer_updatev+0x116>
        _midi_clock_block = 0;
    56b2:	2300      	movs	r3, #0
    56b4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    56b8:	e782      	b.n	55c0 <_Z16sequencer_updatev+0xbc>
        _tempo_interval = (micros() - _previous_sync_time) / TEMPO_SYNC_DIVIDER;
    56ba:	f001 fc79 	bl	6fb0 <micros>
    56be:	69e3      	ldr	r3, [r4, #28]
    56c0:	4f28      	ldr	r7, [pc, #160]	; (5764 <_Z16sequencer_updatev+0x260>)
        _clock = 0;
    56c2:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
        _tempo_interval = (micros() - _previous_sync_time) / TEMPO_SYNC_DIVIDER;
    56c6:	1ac0      	subs	r0, r0, r3
    56c8:	fba7 2300 	umull	r2, r3, r7, r0
    56cc:	08db      	lsrs	r3, r3, #3
    56ce:	8423      	strh	r3, [r4, #32]
        _previous_sync_time = micros();
    56d0:	f001 fc6e 	bl	6fb0 <micros>
    56d4:	61e0      	str	r0, [r4, #28]
        _previous_clock_time = micros();
    56d6:	f001 fc6b 	bl	6fb0 <micros>
        if (tTempoCallback != 0) {
    56da:	6823      	ldr	r3, [r4, #0]
        _previous_clock_time = micros();
    56dc:	61a0      	str	r0, [r4, #24]
        _tempo_interval = (micros() - _previous_sync_time) / TEMPO_SYNC_DIVIDER;
    56de:	f8df 8078 	ldr.w	r8, [pc, #120]	; 5758 <_Z16sequencer_updatev+0x254>
        if (tTempoCallback != 0) {
    56e2:	2b00      	cmp	r3, #0
    56e4:	f43f af6b 	beq.w	55be <_Z16sequencer_updatev+0xba>
    56e8:	4b1d      	ldr	r3, [pc, #116]	; (5760 <_Z16sequencer_updatev+0x25c>)
    56ea:	6c98      	ldr	r0, [r3, #72]	; 0x48
    56ec:	6803      	ldr	r3, [r0, #0]
    56ee:	21f8      	movs	r1, #248	; 0xf8
    56f0:	681b      	ldr	r3, [r3, #0]
    56f2:	4798      	blx	r3
      if((_clock % 24) == 0) {
    56f4:	f898 1024 	ldrb.w	r1, [r8, #36]	; 0x24
    56f8:	fba7 2301 	umull	r2, r3, r7, r1
    56fc:	091b      	lsrs	r3, r3, #4
    56fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5702:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
    5706:	f013 0fff 	tst.w	r3, #255	; 0xff
    570a:	d105      	bne.n	5718 <_Z16sequencer_updatev+0x214>
        if (tResetCallback != 0) {
    570c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5710:	b113      	cbz	r3, 5718 <_Z16sequencer_updatev+0x214>
          tResetCallback();
    5712:	4798      	blx	r3
    5714:	f898 1024 	ldrb.w	r1, [r8, #36]	; 0x24
      if((_clock % TEMPO_SYNC_DIVIDER) == 0) {
    5718:	4a12      	ldr	r2, [pc, #72]	; (5764 <_Z16sequencer_updatev+0x260>)
    571a:	fba2 3201 	umull	r3, r2, r2, r1
    571e:	08d2      	lsrs	r2, r2, #3
    5720:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5724:	eba1 0382 	sub.w	r3, r1, r2, lsl #2
    5728:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    572c:	f47f af38 	bne.w	55a0 <_Z16sequencer_updatev+0x9c>
        digitalWrite(SYNC_OUT_PIN, HIGH);
    5730:	2007      	movs	r0, #7
    5732:	2101      	movs	r1, #1
    5734:	f001 fc22 	bl	6f7c <digitalWrite>
    5738:	e735      	b.n	55a6 <_Z16sequencer_updatev+0xa2>
    573a:	2007      	movs	r0, #7
    573c:	2101      	movs	r1, #1
    573e:	f001 fc1d 	bl	6f7c <digitalWrite>
    5742:	e792      	b.n	566a <_Z16sequencer_updatev+0x166>
        digitalWrite(SYNC_OUT_PIN, LOW);
    5744:	2007      	movs	r0, #7
    5746:	2100      	movs	r1, #0
    5748:	f001 fc18 	bl	6f7c <digitalWrite>
    574c:	e78d      	b.n	566a <_Z16sequencer_updatev+0x166>
    574e:	2007      	movs	r0, #7
    5750:	2100      	movs	r1, #0
    5752:	f001 fc13 	bl	6f7c <digitalWrite>
    5756:	e726      	b.n	55a6 <_Z16sequencer_updatev+0xa2>
    5758:	20001cc0 	.word	0x20001cc0
    575c:	20000c84 	.word	0x20000c84
    5760:	2000209c 	.word	0x2000209c
    5764:	aaaaaaab 	.word	0xaaaaaaab
    5768:	20001ce8 	.word	0x20001ce8
    576c:	20002418 	.word	0x20002418
    5770:	2000201c 	.word	0x2000201c
    5774:	20002394 	.word	0x20002394
    5778:	20001a74 	.word	0x20001a74

0000577c <_Z16keyboard_to_notev>:
}

void keyboard_to_note() {
    577c:	b538      	push	{r3, r4, r5, lr}
  static uint8_t n = 255;
  static uint8_t s = 255;

  if(!sequencer_is_running) {
    577e:	4b13      	ldr	r3, [pc, #76]	; (57cc <_Z16keyboard_to_notev+0x50>)
    5780:	781b      	ldrb	r3, [r3, #0]
    5782:	bb13      	cbnz	r3, 57ca <_Z16keyboard_to_notev+0x4e>
    if(note_stack.size() != s) {
    5784:	4a12      	ldr	r2, [pc, #72]	; (57d0 <_Z16keyboard_to_notev+0x54>)
    5786:	4913      	ldr	r1, [pc, #76]	; (57d4 <_Z16keyboard_to_notev+0x58>)
    5788:	7813      	ldrb	r3, [r2, #0]
    578a:	7808      	ldrb	r0, [r1, #0]
    578c:	4298      	cmp	r0, r3
    578e:	d01c      	beq.n	57ca <_Z16keyboard_to_notev+0x4e>
      s = note_stack.size();
    5790:	700b      	strb	r3, [r1, #0]
      if(s > 0) {
    5792:	b1ab      	cbz	r3, 57c0 <_Z16keyboard_to_notev+0x44>
    5794:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
        uint8_t k = note_stack.most_recent_note().note;
        if(k != n) {
    5798:	4d0f      	ldr	r5, [pc, #60]	; (57d8 <_Z16keyboard_to_notev+0x5c>)
        uint8_t k = note_stack.most_recent_note().note;
    579a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    579e:	441a      	add	r2, r3
        if(k != n) {
    57a0:	7829      	ldrb	r1, [r5, #0]
        uint8_t k = note_stack.most_recent_note().note;
    57a2:	7854      	ldrb	r4, [r2, #1]
        if(k != n) {
    57a4:	42a1      	cmp	r1, r4
    57a6:	d010      	beq.n	57ca <_Z16keyboard_to_notev+0x4e>
          sequencer_advance_without_play();
    57a8:	f7ff fd20 	bl	51ec <_ZL30sequencer_advance_without_playv>
          note_on(k+transpose, INITIAL_VELOCITY, true);
    57ac:	4b0b      	ldr	r3, [pc, #44]	; (57dc <_Z16keyboard_to_notev+0x60>)
    57ae:	6818      	ldr	r0, [r3, #0]
    57b0:	4420      	add	r0, r4
    57b2:	b2c0      	uxtb	r0, r0
    57b4:	2164      	movs	r1, #100	; 0x64
    57b6:	2201      	movs	r2, #1
    57b8:	f7ff fa92 	bl	4ce0 <_Z7note_onhhb>
          n = k;
    57bc:	702c      	strb	r4, [r5, #0]
    57be:	bd38      	pop	{r3, r4, r5, pc}
        }
      } else {
        note_off();
    57c0:	f7ff fbe8 	bl	4f94 <_Z8note_offv>
        n = 255; // Make sure this is a non existing note in the scale
    57c4:	4b04      	ldr	r3, [pc, #16]	; (57d8 <_Z16keyboard_to_notev+0x5c>)
    57c6:	22ff      	movs	r2, #255	; 0xff
    57c8:	701a      	strb	r2, [r3, #0]
    57ca:	bd38      	pop	{r3, r4, r5, pc}
    57cc:	20002369 	.word	0x20002369
    57d0:	20001d6c 	.word	0x20001d6c
    57d4:	20000cb0 	.word	0x20000cb0
    57d8:	20000c85 	.word	0x20000c85
    57dc:	200018c4 	.word	0x200018c4

000057e0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv>:
bool MidiInterface<SerialPort, Settings>::parse()
    57e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57e2:	4604      	mov	r4, r0
    if (mSerial.available() == 0)
    57e4:	6c80      	ldr	r0, [r0, #72]	; 0x48
    57e6:	6803      	ldr	r3, [r0, #0]
    57e8:	689b      	ldr	r3, [r3, #8]
    57ea:	4798      	blx	r3
    57ec:	b908      	cbnz	r0, 57f2 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x12>
                return false;
    57ee:	2000      	movs	r0, #0
    57f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const byte extracted = mSerial.read();
    57f2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    57f4:	6803      	ldr	r3, [r0, #0]
    57f6:	68db      	ldr	r3, [r3, #12]
    57f8:	4798      	blx	r3
    57fa:	b2c3      	uxtb	r3, r0
    if (extracted == 0xf9 || extracted == 0xfd)
    57fc:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
    5800:	2af9      	cmp	r2, #249	; 0xf9
    5802:	d0f4      	beq.n	57ee <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0xe>
    if (mPendingMessageIndex == 0)
    5804:	6da2      	ldr	r2, [r4, #88]	; 0x58
    5806:	b972      	cbnz	r2, 5826 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x46>
        if (isChannelMessage(getTypeFromStatusByte(mRunningStatus_RX)))
    5808:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
        mPendingMessage[0] = extracted;
    580c:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
    if ((inStatus  < 0x80) ||
    5810:	0617      	lsls	r7, r2, #24
    5812:	d44e      	bmi.n	58b2 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0xd2>
    5814:	061d      	lsls	r5, r3, #24
    5816:	f100 8236 	bmi.w	5c86 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x4a6>
    mPendingMessageIndex = 0;
    581a:	2000      	movs	r0, #0
    mRunningStatus_RX = InvalidType;
    581c:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
    mPendingMessageIndex = 0;
    5820:	65a0      	str	r0, [r4, #88]	; 0x58
    mPendingMessageExpectedLenght = 0;
    5822:	6560      	str	r0, [r4, #84]	; 0x54
                return false;
    5824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (extracted >= 0x80)
    5826:	0600      	lsls	r0, r0, #24
    5828:	f100 81ab 	bmi.w	5b82 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x3a2>
        if (mPendingMessage[0] == SystemExclusive)
    582c:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    5830:	29f0      	cmp	r1, #240	; 0xf0
            mMessage.sysexArray[mPendingMessageIndex] = extracted;
    5832:	eb04 0102 	add.w	r1, r4, r2
    5836:	bf0c      	ite	eq
    5838:	f881 3069 	strbeq.w	r3, [r1, #105]	; 0x69
            mPendingMessage[mPendingMessageIndex] = extracted;
    583c:	f881 304f 	strbne.w	r3, [r1, #79]	; 0x4f
        if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1))
    5840:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5842:	1e59      	subs	r1, r3, #1
    5844:	428a      	cmp	r2, r1
    5846:	d331      	bcc.n	58ac <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0xcc>
            if (mPendingMessage[0] == SystemExclusive)
    5848:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    584c:	29f0      	cmp	r1, #240	; 0xf0
    584e:	d0e4      	beq.n	581a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x3a>
    if ((inStatus  < 0x80) ||
    5850:	060a      	lsls	r2, r1, #24
    5852:	f100 81b9 	bmi.w	5bc8 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x3e8>
            mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
    5856:	2200      	movs	r2, #0
    5858:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
                mMessage.channel = 0;
    585c:	2000      	movs	r0, #0
    585e:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
            mMessage.data2 = mPendingMessageExpectedLenght == 3 ? mPendingMessage[2] : 0;
    5862:	2b03      	cmp	r3, #3
            mMessage.data1 = mPendingMessage[1];
    5864:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
            mMessage.data2 = mPendingMessageExpectedLenght == 3 ? mPendingMessage[2] : 0;
    5868:	bf08      	it	eq
    586a:	f894 5051 	ldrbeq.w	r5, [r4, #81]	; 0x51
            mMessage.data1 = mPendingMessage[1];
    586e:	f884 0067 	strb.w	r0, [r4, #103]	; 0x67
            mMessage.data2 = mPendingMessageExpectedLenght == 3 ? mPendingMessage[2] : 0;
    5872:	bf18      	it	ne
    5874:	2500      	movne	r5, #0
            mPendingMessageIndex = 0;
    5876:	2300      	movs	r3, #0
            mMessage.valid = true;
    5878:	2001      	movs	r0, #1
            switch (mMessage.type)
    587a:	2ab0      	cmp	r2, #176	; 0xb0
            mMessage.data2 = mPendingMessageExpectedLenght == 3 ? mPendingMessage[2] : 0;
    587c:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
            mPendingMessageIndex = 0;
    5880:	65a3      	str	r3, [r4, #88]	; 0x58
            mPendingMessageExpectedLenght = 0;
    5882:	6563      	str	r3, [r4, #84]	; 0x54
            mMessage.valid = true;
    5884:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
            switch (mMessage.type)
    5888:	f000 819a 	beq.w	5bc0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x3e0>
    588c:	f200 8191 	bhi.w	5bb2 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x3d2>
    5890:	2a90      	cmp	r2, #144	; 0x90
    5892:	f000 8195 	beq.w	5bc0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x3e0>
    5896:	2aa0      	cmp	r2, #160	; 0xa0
    5898:	f000 8192 	beq.w	5bc0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x3e0>
    589c:	2a80      	cmp	r2, #128	; 0x80
    589e:	f000 818f 	beq.w	5bc0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x3e0>
                    mRunningStatus_RX = InvalidType;
    58a2:	2300      	movs	r3, #0
    58a4:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
            return true;
    58a8:	2001      	movs	r0, #1
                    break;
    58aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            mPendingMessageIndex++;
    58ac:	3201      	adds	r2, #1
    58ae:	65a2      	str	r2, [r4, #88]	; 0x58
    58b0:	e79d      	b.n	57ee <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0xe>
    if ((inStatus  < 0x80) ||
    58b2:	f102 050c 	add.w	r5, r2, #12
    58b6:	b2e9      	uxtb	r1, r5
    58b8:	2901      	cmp	r1, #1
    58ba:	d9ab      	bls.n	5814 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x34>
    58bc:	2af9      	cmp	r2, #249	; 0xf9
    58be:	d0a9      	beq.n	5814 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x34>
    58c0:	2afd      	cmp	r2, #253	; 0xfd
    58c2:	d0a7      	beq.n	5814 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x34>
    if (inStatus < 0xf0)
    58c4:	2aef      	cmp	r2, #239	; 0xef
    58c6:	f200 8199 	bhi.w	5bfc <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x41c>
        return MidiType(inStatus & 0xf0);
    58ca:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
            inType == ProgramChange);
    58ce:	2980      	cmp	r1, #128	; 0x80
    58d0:	f040 8195 	bne.w	5bfe <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x41e>
            if (extracted < 0x80)
    58d4:	0606      	lsls	r6, r0, #24
    58d6:	d49d      	bmi.n	5814 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x34>
                mPendingMessageIndex = 1;
    58d8:	2101      	movs	r1, #1
                mPendingMessage[0]   = mRunningStatus_RX;
    58da:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
                mPendingMessage[1]   = extracted;
    58de:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
                mPendingMessageIndex = 1;
    58e2:	65a1      	str	r1, [r4, #88]	; 0x58
    if ((inStatus  < 0x80) ||
    58e4:	b2ed      	uxtb	r5, r5
    58e6:	2d01      	cmp	r5, #1
    58e8:	d997      	bls.n	581a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x3a>
    58ea:	f002 03fb 	and.w	r3, r2, #251	; 0xfb
    58ee:	2bf9      	cmp	r3, #249	; 0xf9
    58f0:	d093      	beq.n	581a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x3a>
    if (inStatus < 0xf0)
    58f2:	2aef      	cmp	r2, #239	; 0xef
        return MidiType(inStatus & 0xf0);
    58f4:	bf94      	ite	ls
    58f6:	f002 05f0 	andls.w	r5, r2, #240	; 0xf0
    if (inStatus < 0xf0)
    58fa:	4615      	movhi	r5, r2
        switch (getTypeFromStatusByte(mPendingMessage[0]))
    58fc:	f1a5 0380 	sub.w	r3, r5, #128	; 0x80
    5900:	2b7f      	cmp	r3, #127	; 0x7f
    5902:	d88a      	bhi.n	581a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x3a>
    5904:	a101      	add	r1, pc, #4	; (adr r1, 590c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x12c>)
    5906:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    590a:	bf00      	nop
    590c:	00005b73 	.word	0x00005b73
    5910:	0000581b 	.word	0x0000581b
    5914:	0000581b 	.word	0x0000581b
    5918:	0000581b 	.word	0x0000581b
    591c:	0000581b 	.word	0x0000581b
    5920:	0000581b 	.word	0x0000581b
    5924:	0000581b 	.word	0x0000581b
    5928:	0000581b 	.word	0x0000581b
    592c:	0000581b 	.word	0x0000581b
    5930:	0000581b 	.word	0x0000581b
    5934:	0000581b 	.word	0x0000581b
    5938:	0000581b 	.word	0x0000581b
    593c:	0000581b 	.word	0x0000581b
    5940:	0000581b 	.word	0x0000581b
    5944:	0000581b 	.word	0x0000581b
    5948:	0000581b 	.word	0x0000581b
    594c:	00005b73 	.word	0x00005b73
    5950:	0000581b 	.word	0x0000581b
    5954:	0000581b 	.word	0x0000581b
    5958:	0000581b 	.word	0x0000581b
    595c:	0000581b 	.word	0x0000581b
    5960:	0000581b 	.word	0x0000581b
    5964:	0000581b 	.word	0x0000581b
    5968:	0000581b 	.word	0x0000581b
    596c:	0000581b 	.word	0x0000581b
    5970:	0000581b 	.word	0x0000581b
    5974:	0000581b 	.word	0x0000581b
    5978:	0000581b 	.word	0x0000581b
    597c:	0000581b 	.word	0x0000581b
    5980:	0000581b 	.word	0x0000581b
    5984:	0000581b 	.word	0x0000581b
    5988:	0000581b 	.word	0x0000581b
    598c:	00005b73 	.word	0x00005b73
    5990:	0000581b 	.word	0x0000581b
    5994:	0000581b 	.word	0x0000581b
    5998:	0000581b 	.word	0x0000581b
    599c:	0000581b 	.word	0x0000581b
    59a0:	0000581b 	.word	0x0000581b
    59a4:	0000581b 	.word	0x0000581b
    59a8:	0000581b 	.word	0x0000581b
    59ac:	0000581b 	.word	0x0000581b
    59b0:	0000581b 	.word	0x0000581b
    59b4:	0000581b 	.word	0x0000581b
    59b8:	0000581b 	.word	0x0000581b
    59bc:	0000581b 	.word	0x0000581b
    59c0:	0000581b 	.word	0x0000581b
    59c4:	0000581b 	.word	0x0000581b
    59c8:	0000581b 	.word	0x0000581b
    59cc:	00005b73 	.word	0x00005b73
    59d0:	0000581b 	.word	0x0000581b
    59d4:	0000581b 	.word	0x0000581b
    59d8:	0000581b 	.word	0x0000581b
    59dc:	0000581b 	.word	0x0000581b
    59e0:	0000581b 	.word	0x0000581b
    59e4:	0000581b 	.word	0x0000581b
    59e8:	0000581b 	.word	0x0000581b
    59ec:	0000581b 	.word	0x0000581b
    59f0:	0000581b 	.word	0x0000581b
    59f4:	0000581b 	.word	0x0000581b
    59f8:	0000581b 	.word	0x0000581b
    59fc:	0000581b 	.word	0x0000581b
    5a00:	0000581b 	.word	0x0000581b
    5a04:	0000581b 	.word	0x0000581b
    5a08:	0000581b 	.word	0x0000581b
    5a0c:	00005b6b 	.word	0x00005b6b
    5a10:	0000581b 	.word	0x0000581b
    5a14:	0000581b 	.word	0x0000581b
    5a18:	0000581b 	.word	0x0000581b
    5a1c:	0000581b 	.word	0x0000581b
    5a20:	0000581b 	.word	0x0000581b
    5a24:	0000581b 	.word	0x0000581b
    5a28:	0000581b 	.word	0x0000581b
    5a2c:	0000581b 	.word	0x0000581b
    5a30:	0000581b 	.word	0x0000581b
    5a34:	0000581b 	.word	0x0000581b
    5a38:	0000581b 	.word	0x0000581b
    5a3c:	0000581b 	.word	0x0000581b
    5a40:	0000581b 	.word	0x0000581b
    5a44:	0000581b 	.word	0x0000581b
    5a48:	0000581b 	.word	0x0000581b
    5a4c:	00005b6b 	.word	0x00005b6b
    5a50:	0000581b 	.word	0x0000581b
    5a54:	0000581b 	.word	0x0000581b
    5a58:	0000581b 	.word	0x0000581b
    5a5c:	0000581b 	.word	0x0000581b
    5a60:	0000581b 	.word	0x0000581b
    5a64:	0000581b 	.word	0x0000581b
    5a68:	0000581b 	.word	0x0000581b
    5a6c:	0000581b 	.word	0x0000581b
    5a70:	0000581b 	.word	0x0000581b
    5a74:	0000581b 	.word	0x0000581b
    5a78:	0000581b 	.word	0x0000581b
    5a7c:	0000581b 	.word	0x0000581b
    5a80:	0000581b 	.word	0x0000581b
    5a84:	0000581b 	.word	0x0000581b
    5a88:	0000581b 	.word	0x0000581b
    5a8c:	00005b73 	.word	0x00005b73
    5a90:	0000581b 	.word	0x0000581b
    5a94:	0000581b 	.word	0x0000581b
    5a98:	0000581b 	.word	0x0000581b
    5a9c:	0000581b 	.word	0x0000581b
    5aa0:	0000581b 	.word	0x0000581b
    5aa4:	0000581b 	.word	0x0000581b
    5aa8:	0000581b 	.word	0x0000581b
    5aac:	0000581b 	.word	0x0000581b
    5ab0:	0000581b 	.word	0x0000581b
    5ab4:	0000581b 	.word	0x0000581b
    5ab8:	0000581b 	.word	0x0000581b
    5abc:	0000581b 	.word	0x0000581b
    5ac0:	0000581b 	.word	0x0000581b
    5ac4:	0000581b 	.word	0x0000581b
    5ac8:	0000581b 	.word	0x0000581b
    5acc:	00005b2b 	.word	0x00005b2b
    5ad0:	00005b6b 	.word	0x00005b6b
    5ad4:	00005b73 	.word	0x00005b73
    5ad8:	00005b6b 	.word	0x00005b6b
    5adc:	0000581b 	.word	0x0000581b
    5ae0:	0000581b 	.word	0x0000581b
    5ae4:	00005b0d 	.word	0x00005b0d
    5ae8:	0000581b 	.word	0x0000581b
    5aec:	00005b0d 	.word	0x00005b0d
    5af0:	0000581b 	.word	0x0000581b
    5af4:	00005b0d 	.word	0x00005b0d
    5af8:	00005b0d 	.word	0x00005b0d
    5afc:	00005b0d 	.word	0x00005b0d
    5b00:	0000581b 	.word	0x0000581b
    5b04:	00005b0d 	.word	0x00005b0d
    5b08:	00005b0d 	.word	0x00005b0d
                mMessage.channel = 0;
    5b0c:	2300      	movs	r3, #0
                mMessage.valid   = true;
    5b0e:	2001      	movs	r0, #1
                mMessage.channel = 0;
    5b10:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
                mMessage.data1   = 0;
    5b14:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
                mMessage.data2   = 0;
    5b18:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
                mMessage.type    = getTypeFromStatusByte(mPendingMessage[0]);
    5b1c:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
                mPendingMessageIndex = 0;
    5b20:	65a3      	str	r3, [r4, #88]	; 0x58
                mPendingMessageExpectedLenght = 0;
    5b22:	6563      	str	r3, [r4, #84]	; 0x54
                mMessage.valid   = true;
    5b24:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
                return true;
    5b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                mRunningStatus_RX = InvalidType;
    5b2a:	2100      	movs	r1, #0
                mPendingMessageExpectedLenght = MidiMessage::sSysExMaxSize;
    5b2c:	2080      	movs	r0, #128	; 0x80
                mMessage.sysexArray[0] = SystemExclusive;
    5b2e:	23f0      	movs	r3, #240	; 0xf0
                mRunningStatus_RX = InvalidType;
    5b30:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
                mPendingMessageExpectedLenght = MidiMessage::sSysExMaxSize;
    5b34:	6560      	str	r0, [r4, #84]	; 0x54
                mMessage.sysexArray[0] = SystemExclusive;
    5b36:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
                break;
    5b3a:	217f      	movs	r1, #127	; 0x7f
        if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1))
    5b3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
    5b3e:	428b      	cmp	r3, r1
    5b40:	d31b      	bcc.n	5b7a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x39a>
    return (inStatus & 0x0f) + 1;
    5b42:	f002 020f 	and.w	r2, r2, #15
            mMessage.data2   = 0; // Completed new message has 1 data byte
    5b46:	2300      	movs	r3, #0
    return (inStatus & 0x0f) + 1;
    5b48:	3201      	adds	r2, #1
            mMessage.data1   = mPendingMessage[1];
    5b4a:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
            mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
    5b4e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
            mMessage.valid = true;
    5b52:	2001      	movs	r0, #1
            mMessage.data1   = mPendingMessage[1];
    5b54:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
            mMessage.data2   = 0; // Completed new message has 1 data byte
    5b58:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
            mMessage.type    = getTypeFromStatusByte(mPendingMessage[0]);
    5b5c:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
            mPendingMessageIndex = 0;
    5b60:	65a3      	str	r3, [r4, #88]	; 0x58
            mPendingMessageExpectedLenght = 0;
    5b62:	6563      	str	r3, [r4, #84]	; 0x54
            mMessage.valid = true;
    5b64:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
            return true;
    5b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                mPendingMessageExpectedLenght = 2;
    5b6a:	2302      	movs	r3, #2
    5b6c:	6563      	str	r3, [r4, #84]	; 0x54
                break;
    5b6e:	2101      	movs	r1, #1
    5b70:	e7e4      	b.n	5b3c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x35c>
                mPendingMessageExpectedLenght = 3;
    5b72:	2303      	movs	r3, #3
    5b74:	6563      	str	r3, [r4, #84]	; 0x54
                break;
    5b76:	2102      	movs	r1, #2
    5b78:	e7e0      	b.n	5b3c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x35c>
            mPendingMessageIndex++;
    5b7a:	3301      	adds	r3, #1
    5b7c:	65a3      	str	r3, [r4, #88]	; 0x58
            return false;
    5b7e:	2000      	movs	r0, #0
    5b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b82:	f1a3 01f7 	sub.w	r1, r3, #247	; 0xf7
    5b86:	2908      	cmp	r1, #8
    5b88:	f63f ae50 	bhi.w	582c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x4c>
    5b8c:	2501      	movs	r5, #1
    5b8e:	fa05 f101 	lsl.w	r1, r5, r1
    5b92:	f411 76dd 	ands.w	r6, r1, #442	; 0x1ba
    5b96:	d143      	bne.n	5c20 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x440>
    5b98:	07c9      	lsls	r1, r1, #31
    5b9a:	f57f ae47 	bpl.w	582c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x4c>
                    if (mMessage.sysexArray[0] == SystemExclusive)
    5b9e:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
    5ba2:	2bf0      	cmp	r3, #240	; 0xf0
    5ba4:	d059      	beq.n	5c5a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x47a>
    mRunningStatus_RX = InvalidType;
    5ba6:	f884 604d 	strb.w	r6, [r4, #77]	; 0x4d
    mPendingMessageIndex = 0;
    5baa:	65a6      	str	r6, [r4, #88]	; 0x58
    mPendingMessageExpectedLenght = 0;
    5bac:	6566      	str	r6, [r4, #84]	; 0x54
                        return false;
    5bae:	4630      	mov	r0, r6
    5bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            switch (mMessage.type)
    5bb2:	2ad0      	cmp	r2, #208	; 0xd0
    5bb4:	d004      	beq.n	5bc0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x3e0>
    5bb6:	2ae0      	cmp	r2, #224	; 0xe0
    5bb8:	d002      	beq.n	5bc0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x3e0>
    5bba:	2ac0      	cmp	r2, #192	; 0xc0
    5bbc:	f47f ae71 	bne.w	58a2 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0xc2>
                    mRunningStatus_RX = mPendingMessage[0];
    5bc0:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
            return true;
    5bc4:	2001      	movs	r0, #1
                    break;
    5bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((inStatus  < 0x80) ||
    5bc8:	f101 020c 	add.w	r2, r1, #12
    5bcc:	b2d2      	uxtb	r2, r2
    5bce:	2a01      	cmp	r2, #1
    5bd0:	f67f ae41 	bls.w	5856 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x76>
    5bd4:	29f9      	cmp	r1, #249	; 0xf9
    5bd6:	f43f ae3e 	beq.w	5856 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x76>
    5bda:	29fd      	cmp	r1, #253	; 0xfd
    5bdc:	f43f ae3b 	beq.w	5856 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x76>
    if (inStatus < 0xf0)
    5be0:	29ef      	cmp	r1, #239	; 0xef
    5be2:	d82a      	bhi.n	5c3a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x45a>
        return MidiType(inStatus & 0xf0);
    5be4:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
            inType == ProgramChange);
    5be8:	2a80      	cmp	r2, #128	; 0x80
            mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
    5bea:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
            inType == ProgramChange);
    5bee:	d127      	bne.n	5c40 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x460>
    return (inStatus & 0x0f) + 1;
    5bf0:	f001 000f 	and.w	r0, r1, #15
    5bf4:	3001      	adds	r0, #1
                mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
    5bf6:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
    5bfa:	e632      	b.n	5862 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x82>
    if (inStatus < 0xf0)
    5bfc:	4611      	mov	r1, r2
            inType == ProgramChange);
    5bfe:	f001 06df 	and.w	r6, r1, #223	; 0xdf
    5c02:	2e90      	cmp	r6, #144	; 0x90
    5c04:	f43f ae66 	beq.w	58d4 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0xf4>
    5c08:	f001 06bf 	and.w	r6, r1, #191	; 0xbf
    5c0c:	2ea0      	cmp	r6, #160	; 0xa0
    5c0e:	f43f ae61 	beq.w	58d4 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0xf4>
    5c12:	29d0      	cmp	r1, #208	; 0xd0
    5c14:	f43f ae5e 	beq.w	58d4 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0xf4>
        if (isChannelMessage(getTypeFromStatusByte(mRunningStatus_RX)))
    5c18:	29c0      	cmp	r1, #192	; 0xc0
    5c1a:	f43f ae5b 	beq.w	58d4 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0xf4>
    5c1e:	e5f9      	b.n	5814 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x34>
                    mMessage.data1   = 0;
    5c20:	2200      	movs	r2, #0
    5c22:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
                    mMessage.data2   = 0;
    5c26:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
                    mMessage.channel = 0;
    5c2a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
                    mMessage.type    = (MidiType)extracted;
    5c2e:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
                    mMessage.valid   = true;
    5c32:	f884 50e9 	strb.w	r5, [r4, #233]	; 0xe9
                    return true;
    5c36:	4628      	mov	r0, r5
    5c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
    5c3a:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
    5c3e:	460a      	mov	r2, r1
            inType == ProgramChange);
    5c40:	f002 00df 	and.w	r0, r2, #223	; 0xdf
    5c44:	2890      	cmp	r0, #144	; 0x90
    5c46:	d0d3      	beq.n	5bf0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x410>
    5c48:	2aa0      	cmp	r2, #160	; 0xa0
    5c4a:	d0d1      	beq.n	5bf0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x410>
    5c4c:	2ad0      	cmp	r2, #208	; 0xd0
    5c4e:	d0cf      	beq.n	5bf0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x410>
    5c50:	2ae0      	cmp	r2, #224	; 0xe0
    5c52:	d0cd      	beq.n	5bf0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x410>
            if (isChannelMessage(mMessage.type))
    5c54:	2ac0      	cmp	r2, #192	; 0xc0
    5c56:	d0cb      	beq.n	5bf0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x410>
    5c58:	e600      	b.n	585c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x7c>
                        mMessage.sysexArray[mPendingMessageIndex++] = 0xf7;
    5c5a:	1c51      	adds	r1, r2, #1
    5c5c:	4422      	add	r2, r4
    5c5e:	20f7      	movs	r0, #247	; 0xf7
                        mMessage.data2   = mPendingMessageIndex >> 8;   // MSB
    5c60:	0a0f      	lsrs	r7, r1, #8
                        mMessage.sysexArray[mPendingMessageIndex++] = 0xf7;
    5c62:	f882 0069 	strb.w	r0, [r2, #105]	; 0x69
                        mMessage.data1   = mPendingMessageIndex & 0xff; // LSB
    5c66:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
                        mMessage.data2   = mPendingMessageIndex >> 8;   // MSB
    5c6a:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
                        mMessage.channel = 0;
    5c6e:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
    mRunningStatus_RX = InvalidType;
    5c72:	f884 604d 	strb.w	r6, [r4, #77]	; 0x4d
                        return true;
    5c76:	4628      	mov	r0, r5
                        mMessage.type = SystemExclusive;
    5c78:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
                        mMessage.valid   = true;
    5c7c:	f884 50e9 	strb.w	r5, [r4, #233]	; 0xe9
    mPendingMessageIndex = 0;
    5c80:	65a6      	str	r6, [r4, #88]	; 0x58
    mPendingMessageExpectedLenght = 0;
    5c82:	6566      	str	r6, [r4, #84]	; 0x54
                        return true;
    5c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((inStatus  < 0x80) ||
    5c86:	461a      	mov	r2, r3
    5c88:	f103 050c 	add.w	r5, r3, #12
    5c8c:	e62a      	b.n	58e4 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x104>
    5c8e:	bf00      	nop

00005c90 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv>:
// Private - launch callback function based on received type.
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::launchCallback()
{
    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
    5c90:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    5c94:	3a80      	subs	r2, #128	; 0x80
void MidiInterface<SerialPort, Settings>::launchCallback()
    5c96:	b510      	push	{r4, lr}
    5c98:	4603      	mov	r3, r0
    switch (mMessage.type)
    5c9a:	2a7f      	cmp	r2, #127	; 0x7f
    5c9c:	d844      	bhi.n	5d28 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x98>
    5c9e:	e8df f002 	tbb	[pc, r2]
    5ca2:	4344      	.short	0x4344
    5ca4:	43434343 	.word	0x43434343
    5ca8:	43434343 	.word	0x43434343
    5cac:	43434343 	.word	0x43434343
    5cb0:	434f4343 	.word	0x434f4343
    5cb4:	43434343 	.word	0x43434343
    5cb8:	43434343 	.word	0x43434343
    5cbc:	43434343 	.word	0x43434343
    5cc0:	43b94343 	.word	0x43b94343
    5cc4:	43434343 	.word	0x43434343
    5cc8:	43434343 	.word	0x43434343
    5ccc:	43434343 	.word	0x43434343
    5cd0:	43b14343 	.word	0x43b14343
    5cd4:	43434343 	.word	0x43434343
    5cd8:	43434343 	.word	0x43434343
    5cdc:	43434343 	.word	0x43434343
    5ce0:	43b54343 	.word	0x43b54343
    5ce4:	43434343 	.word	0x43434343
    5ce8:	43434343 	.word	0x43434343
    5cec:	43434343 	.word	0x43434343
    5cf0:	43814343 	.word	0x43814343
    5cf4:	43434343 	.word	0x43434343
    5cf8:	43434343 	.word	0x43434343
    5cfc:	43434343 	.word	0x43434343
    5d00:	438a4343 	.word	0x438a4343
    5d04:	43434343 	.word	0x43434343
    5d08:	43434343 	.word	0x43434343
    5d0c:	43434343 	.word	0x43434343
    5d10:	ad9d4343 	.word	0xad9d4343
    5d14:	43436253 	.word	0x43436253
    5d18:	436d4369 	.word	0x436d4369
    5d1c:	43797571 	.word	0x43797571
    5d20:	407d      	.short	0x407d
        case TimeCodeQuarterFrame:  if (mTimeCodeQuarterFrameCallback != 0)  mTimeCodeQuarterFrameCallback(mMessage.data1);    break;
        case SongPosition:          if (mSongPositionCallback != 0)          mSongPositionCallback((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7));    break;
        case SongSelect:            if (mSongSelectCallback != 0)            mSongSelectCallback(mMessage.data1);    break;
        case TuneRequest:           if (mTuneRequestCallback != 0)           mTuneRequestCallback();    break;

        case SystemReset:           if (mSystemResetCallback != 0)           mSystemResetCallback();    break;
    5d22:	6c43      	ldr	r3, [r0, #68]	; 0x44
    5d24:	b103      	cbz	r3, 5d28 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x98>
    5d26:	4798      	blx	r3
    5d28:	bd10      	pop	{r4, pc}
        case NoteOff:               if (mNoteOffCallback != 0)               mNoteOffCallback(mMessage.channel, mMessage.data1, mMessage.data2);   break;
    5d2a:	6804      	ldr	r4, [r0, #0]
    5d2c:	2c00      	cmp	r4, #0
    5d2e:	d0fb      	beq.n	5d28 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x98>
        case AfterTouchPoly:        if (mAfterTouchPolyCallback != 0)        mAfterTouchPolyCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
    5d30:	f893 0065 	ldrb.w	r0, [r3, #101]	; 0x65
    5d34:	f893 1067 	ldrb.w	r1, [r3, #103]	; 0x67
    5d38:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
    5d3c:	47a0      	blx	r4
    5d3e:	bd10      	pop	{r4, pc}
        case NoteOn:                if (mNoteOnCallback != 0)                mNoteOnCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
    5d40:	6844      	ldr	r4, [r0, #4]
    5d42:	2c00      	cmp	r4, #0
    5d44:	d1f4      	bne.n	5d30 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0xa0>
    5d46:	e7ef      	b.n	5d28 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x98>
        case SongPosition:          if (mSongPositionCallback != 0)          mSongPositionCallback((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7));    break;
    5d48:	6a42      	ldr	r2, [r0, #36]	; 0x24
    5d4a:	2a00      	cmp	r2, #0
    5d4c:	d0ec      	beq.n	5d28 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x98>
    5d4e:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    5d52:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
    5d56:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    5d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5d5e:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
    5d62:	4790      	blx	r2
    5d64:	bd10      	pop	{r4, pc}
        case SongSelect:            if (mSongSelectCallback != 0)            mSongSelectCallback(mMessage.data1);    break;
    5d66:	6a82      	ldr	r2, [r0, #40]	; 0x28
    5d68:	2a00      	cmp	r2, #0
    5d6a:	d0dd      	beq.n	5d28 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x98>
    5d6c:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
    5d70:	4790      	blx	r2
    5d72:	bd10      	pop	{r4, pc}
        case TuneRequest:           if (mTuneRequestCallback != 0)           mTuneRequestCallback();    break;
    5d74:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    5d76:	2b00      	cmp	r3, #0
    5d78:	d1d5      	bne.n	5d26 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x96>
    5d7a:	e7d5      	b.n	5d28 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x98>
        case Clock:                 if (mClockCallback != 0)                 mClockCallback();           break;
    5d7c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5d7e:	2b00      	cmp	r3, #0
    5d80:	d1d1      	bne.n	5d26 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x96>
    5d82:	e7d1      	b.n	5d28 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x98>
        case Start:                 if (mStartCallback != 0)                 mStartCallback();           break;
    5d84:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5d86:	2b00      	cmp	r3, #0
    5d88:	d1cd      	bne.n	5d26 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x96>
    5d8a:	e7cd      	b.n	5d28 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x98>
        case Continue:              if (mContinueCallback != 0)              mContinueCallback();        break;
    5d8c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5d8e:	2b00      	cmp	r3, #0
    5d90:	d1c9      	bne.n	5d26 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x96>
    5d92:	e7c9      	b.n	5d28 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x98>
        case Stop:                  if (mStopCallback != 0)                  mStopCallback();            break;
    5d94:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    5d96:	2b00      	cmp	r3, #0
    5d98:	d1c5      	bne.n	5d26 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x96>
    5d9a:	e7c5      	b.n	5d28 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x98>
        case ActiveSensing:         if (mActiveSensingCallback != 0)         mActiveSensingCallback();   break;
    5d9c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    5d9e:	2b00      	cmp	r3, #0
    5da0:	d1c1      	bne.n	5d26 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x96>
    5da2:	e7c1      	b.n	5d28 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x98>
        case AfterTouchChannel:     if (mAfterTouchChannelCallback != 0)     mAfterTouchChannelCallback(mMessage.channel, mMessage.data1);    break;
    5da4:	6942      	ldr	r2, [r0, #20]
    5da6:	2a00      	cmp	r2, #0
    5da8:	d0be      	beq.n	5d28 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x98>
        case ProgramChange:         if (mProgramChangeCallback != 0)         mProgramChangeCallback(mMessage.channel, mMessage.data1);    break;
    5daa:	f893 0065 	ldrb.w	r0, [r3, #101]	; 0x65
    5dae:	f893 1067 	ldrb.w	r1, [r3, #103]	; 0x67
    5db2:	4790      	blx	r2
    5db4:	bd10      	pop	{r4, pc}
        case PitchBend:             if (mPitchBendCallback != 0)             mPitchBendCallback(mMessage.channel, (int)((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)) + MIDI_PITCHBEND_MIN); break; // TODO: check this
    5db6:	6982      	ldr	r2, [r0, #24]
    5db8:	2a00      	cmp	r2, #0
    5dba:	d0b5      	beq.n	5d28 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x98>
    5dbc:	f890 4067 	ldrb.w	r4, [r0, #103]	; 0x67
    5dc0:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
    5dc4:	f890 0065 	ldrb.w	r0, [r0, #101]	; 0x65
    5dc8:	f004 037f 	and.w	r3, r4, #127	; 0x7f
    5dcc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    5dd0:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
    5dd4:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
    5dd8:	4790      	blx	r2
    5dda:	bd10      	pop	{r4, pc}
        case SystemExclusive:       if (mSystemExclusiveCallback != 0)       mSystemExclusiveCallback(mMessage.sysexArray, mMessage.getSysExSize());    break;
    5ddc:	69c2      	ldr	r2, [r0, #28]
    5dde:	2a00      	cmp	r2, #0
    5de0:	d0a2      	beq.n	5d28 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x98>
     */
    bool valid;

    inline unsigned getSysExSize() const
    {
        const unsigned size = unsigned(data2) << 8 | data1;
    5de2:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    5de6:	f893 1067 	ldrb.w	r1, [r3, #103]	; 0x67
    5dea:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    5dee:	2980      	cmp	r1, #128	; 0x80
    5df0:	bf28      	it	cs
    5df2:	2180      	movcs	r1, #128	; 0x80
    5df4:	f103 0069 	add.w	r0, r3, #105	; 0x69
    5df8:	4790      	blx	r2
    5dfa:	bd10      	pop	{r4, pc}
        case TimeCodeQuarterFrame:  if (mTimeCodeQuarterFrameCallback != 0)  mTimeCodeQuarterFrameCallback(mMessage.data1);    break;
    5dfc:	6a02      	ldr	r2, [r0, #32]
    5dfe:	2a00      	cmp	r2, #0
    5e00:	d1b4      	bne.n	5d6c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0xdc>
    5e02:	e791      	b.n	5d28 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x98>
        case ControlChange:         if (mControlChangeCallback != 0)         mControlChangeCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
    5e04:	68c4      	ldr	r4, [r0, #12]
    5e06:	2c00      	cmp	r4, #0
    5e08:	d192      	bne.n	5d30 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0xa0>
    5e0a:	e78d      	b.n	5d28 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x98>
        case ProgramChange:         if (mProgramChangeCallback != 0)         mProgramChangeCallback(mMessage.channel, mMessage.data1);    break;
    5e0c:	6902      	ldr	r2, [r0, #16]
    5e0e:	2a00      	cmp	r2, #0
    5e10:	d1cb      	bne.n	5daa <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x11a>
    5e12:	e789      	b.n	5d28 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x98>
        case AfterTouchPoly:        if (mAfterTouchPolyCallback != 0)        mAfterTouchPolyCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
    5e14:	6884      	ldr	r4, [r0, #8]
    5e16:	2c00      	cmp	r4, #0
    5e18:	d18a      	bne.n	5d30 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0xa0>
    5e1a:	e785      	b.n	5d28 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x98>

00005e1c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh>:
// - All system messages (System Exclusive, Common and Real Time) are passed
//   to output unless filter is set to Off.
// - Channel messages are passed to the output whether their channel
//   is matching the input channel and the filter setting
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::thruFilter(Channel inChannel)
    5e1c:	b570      	push	{r4, r5, r6, lr}
{
    // If the feature is disabled, don't do anything.
    if (!mThruActivated || (mThruFilterMode == Thru::Off))
    5e1e:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    5e22:	07da      	lsls	r2, r3, #31
void MidiInterface<SerialPort, Settings>::thruFilter(Channel inChannel)
    5e24:	b082      	sub	sp, #8
    5e26:	4604      	mov	r4, r0
    if (!mThruActivated || (mThruFilterMode == Thru::Off))
    5e28:	d516      	bpl.n	5e58 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x3c>
    5e2a:	085b      	lsrs	r3, r3, #1
    5e2c:	d014      	beq.n	5e58 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x3c>
        return;

    // First, check if the received message is Channel
    if (mMessage.type >= NoteOff && mMessage.type <= PitchBend)
    5e2e:	f890 5066 	ldrb.w	r5, [r0, #102]	; 0x66
    5e32:	f085 0280 	eor.w	r2, r5, #128	; 0x80
    5e36:	2a60      	cmp	r2, #96	; 0x60
    5e38:	d810      	bhi.n	5e5c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x40>
    {
        const bool filter_condition = ((mMessage.channel == inChannel) ||
                                       (inChannel == MIDI_CHANNEL_OMNI));
    5e3a:	f890 0065 	ldrb.w	r0, [r0, #101]	; 0x65
    5e3e:	4288      	cmp	r0, r1
    5e40:	d040      	beq.n	5ec4 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0xa8>
    5e42:	f1d1 0101 	rsbs	r1, r1, #1
    5e46:	bf38      	it	cc
    5e48:	2100      	movcc	r1, #0

        // Now let's pass it to the output
        switch (mThruFilterMode)
    5e4a:	2b02      	cmp	r3, #2
    5e4c:	f000 809b 	beq.w	5f86 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x16a>
    5e50:	2b03      	cmp	r3, #3
    5e52:	d02b      	beq.n	5eac <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x90>
    5e54:	2b01      	cmp	r3, #1
    5e56:	d02b      	beq.n	5eb0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x94>

            default:
                break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
        }
    }
}
    5e58:	b002      	add	sp, #8
    5e5a:	bd70      	pop	{r4, r5, r6, pc}
        switch (mMessage.type)
    5e5c:	f1a5 03f0 	sub.w	r3, r5, #240	; 0xf0
    5e60:	2b0f      	cmp	r3, #15
    5e62:	d8f9      	bhi.n	5e58 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x3c>
    5e64:	a201      	add	r2, pc, #4	; (adr r2, 5e6c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x50>)
    5e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5e6a:	bf00      	nop
    5e6c:	00005f57 	.word	0x00005f57
    5e70:	00005f37 	.word	0x00005f37
    5e74:	00005f07 	.word	0x00005f07
    5e78:	00005eeb 	.word	0x00005eeb
    5e7c:	00005e59 	.word	0x00005e59
    5e80:	00005e59 	.word	0x00005e59
    5e84:	00005ec9 	.word	0x00005ec9
    5e88:	00005e59 	.word	0x00005e59
    5e8c:	00005ec9 	.word	0x00005ec9
    5e90:	00005e59 	.word	0x00005e59
    5e94:	00005ec9 	.word	0x00005ec9
    5e98:	00005ec9 	.word	0x00005ec9
    5e9c:	00005ec9 	.word	0x00005ec9
    5ea0:	00005e59 	.word	0x00005e59
    5ea4:	00005ec9 	.word	0x00005ec9
    5ea8:	00005ec9 	.word	0x00005ec9
                if (!filter_condition)
    5eac:	2900      	cmp	r1, #0
    5eae:	d1d3      	bne.n	5e58 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x3c>
                    send(mMessage.type,
    5eb0:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
    5eb4:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    5eb8:	9000      	str	r0, [sp, #0]
    5eba:	4629      	mov	r1, r5
    5ebc:	4620      	mov	r0, r4
    5ebe:	f7fe fed3 	bl	4c68 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
    5ec2:	e7c9      	b.n	5e58 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x3c>
                                       (inChannel == MIDI_CHANNEL_OMNI));
    5ec4:	2101      	movs	r1, #1
    5ec6:	e7c0      	b.n	5e4a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x2e>
    5ec8:	f105 0308 	add.w	r3, r5, #8
    5ecc:	b2db      	uxtb	r3, r3
    5ece:	2b07      	cmp	r3, #7
    5ed0:	d8c2      	bhi.n	5e58 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x3c>
    5ed2:	2201      	movs	r2, #1
    5ed4:	fa02 f303 	lsl.w	r3, r2, r3
    5ed8:	f013 0fdd 	tst.w	r3, #221	; 0xdd
    5edc:	d0bc      	beq.n	5e58 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x3c>
    mSerial.write(inData);
    5ede:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    5ee0:	6803      	ldr	r3, [r0, #0]
    5ee2:	4629      	mov	r1, r5
    5ee4:	681b      	ldr	r3, [r3, #0]
    5ee6:	4798      	blx	r3
    5ee8:	e7b6      	b.n	5e58 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x3c>
    mSerial.write((byte)SongSelect);
    5eea:	6c80      	ldr	r0, [r0, #72]	; 0x48
                sendSongSelect(mMessage.data1);
    5eec:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    mSerial.write((byte)SongSelect);
    5ef0:	6803      	ldr	r3, [r0, #0]
    5ef2:	21f3      	movs	r1, #243	; 0xf3
    5ef4:	681b      	ldr	r3, [r3, #0]
    5ef6:	4798      	blx	r3
    mSerial.write(inSongNumber & 0x7f);
    5ef8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    5efa:	6803      	ldr	r3, [r0, #0]
    5efc:	f005 017f 	and.w	r1, r5, #127	; 0x7f
    5f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5f02:	4798      	blx	r3
    5f04:	e7a8      	b.n	5e58 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x3c>
    mSerial.write((byte)SongPosition);
    5f06:	6c80      	ldr	r0, [r0, #72]	; 0x48
                sendSongPosition(mMessage.data1 | ((unsigned)mMessage.data2 << 7));
    5f08:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
    mSerial.write((byte)SongPosition);
    5f0c:	6803      	ldr	r3, [r0, #0]
                sendSongPosition(mMessage.data1 | ((unsigned)mMessage.data2 << 7));
    5f0e:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
    mSerial.write((byte)SongPosition);
    5f12:	681b      	ldr	r3, [r3, #0]
    5f14:	21f2      	movs	r1, #242	; 0xf2
                sendSongPosition(mMessage.data1 | ((unsigned)mMessage.data2 << 7));
    5f16:	ea42 15c5 	orr.w	r5, r2, r5, lsl #7
    mSerial.write((byte)SongPosition);
    5f1a:	4798      	blx	r3
    mSerial.write(inBeats & 0x7f);
    5f1c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    5f1e:	6803      	ldr	r3, [r0, #0]
    5f20:	f005 017f 	and.w	r1, r5, #127	; 0x7f
    5f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5f26:	4798      	blx	r3
    mSerial.write((inBeats >> 7) & 0x7f);
    5f28:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    5f2a:	6803      	ldr	r3, [r0, #0]
    5f2c:	f3c5 11c6 	ubfx	r1, r5, #7, #7
    5f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5f32:	4798      	blx	r3
    5f34:	e790      	b.n	5e58 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x3c>
    mSerial.write((byte)TimeCodeQuarterFrame);
    5f36:	6c80      	ldr	r0, [r0, #72]	; 0x48
    const byte data = (((inTypeNibble & 0x07) << 4) | (inValuesNibble & 0x0f));
    5f38:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    5f3c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    mSerial.write((byte)TimeCodeQuarterFrame);
    5f40:	6803      	ldr	r3, [r0, #0]
    const byte data = (((inTypeNibble & 0x07) << 4) | (inValuesNibble & 0x0f));
    5f42:	f002 020f 	and.w	r2, r2, #15
    mSerial.write((byte)TimeCodeQuarterFrame);
    5f46:	681b      	ldr	r3, [r3, #0]
    const byte data = (((inTypeNibble & 0x07) << 4) | (inValuesNibble & 0x0f));
    5f48:	f005 0507 	and.w	r5, r5, #7
    mSerial.write((byte)TimeCodeQuarterFrame);
    5f4c:	21f1      	movs	r1, #241	; 0xf1
    const byte data = (((inTypeNibble & 0x07) << 4) | (inValuesNibble & 0x0f));
    5f4e:	ea42 1505 	orr.w	r5, r2, r5, lsl #4
    mSerial.write((byte)TimeCodeQuarterFrame);
    5f52:	4798      	blx	r3
    5f54:	e7c3      	b.n	5ede <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0xc2>
    5f56:	f890 6068 	ldrb.w	r6, [r0, #104]	; 0x68
    5f5a:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
    5f5e:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
    5f62:	2e80      	cmp	r6, #128	; 0x80
    5f64:	bf28      	it	cs
    5f66:	2680      	movcs	r6, #128	; 0x80
                sendSysEx(getSysExArrayLength(), getSysExArray(), true);
    5f68:	f100 0569 	add.w	r5, r0, #105	; 0x69
    for (unsigned i = 0; i < inLength; ++i)
    5f6c:	2e00      	cmp	r6, #0
    5f6e:	f43f af73 	beq.w	5e58 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x3c>
    5f72:	442e      	add	r6, r5
        mSerial.write(inArray[i]);
    5f74:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    5f76:	f815 1b01 	ldrb.w	r1, [r5], #1
    5f7a:	6803      	ldr	r3, [r0, #0]
    5f7c:	681b      	ldr	r3, [r3, #0]
    5f7e:	4798      	blx	r3
    for (unsigned i = 0; i < inLength; ++i)
    5f80:	42b5      	cmp	r5, r6
    5f82:	d1f7      	bne.n	5f74 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x158>
    5f84:	e768      	b.n	5e58 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x3c>
                if (filter_condition)
    5f86:	2900      	cmp	r1, #0
    5f88:	f43f af66 	beq.w	5e58 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x3c>
    5f8c:	e790      	b.n	5eb0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x94>
    5f8e:	bf00      	nop

00005f90 <_Z11midi_handlev>:
void midi_handle() {
    5f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return read(mInputChannel);
    5f94:	4c7f      	ldr	r4, [pc, #508]	; (6194 <_Z11midi_handlev+0x204>)
    5f96:	f894 504c 	ldrb.w	r5, [r4, #76]	; 0x4c
    if (inChannel >= MIDI_CHANNEL_OFF)
    5f9a:	2d10      	cmp	r5, #16
    5f9c:	b083      	sub	sp, #12
    5f9e:	f240 80d3 	bls.w	6148 <_Z11midi_handlev+0x1b8>
  if(map(midi_parameters.filter,40,380,0,127) != map(synth.filter,40,380,0,127)) {
    5fa2:	4d7d      	ldr	r5, [pc, #500]	; (6198 <_Z11midi_handlev+0x208>)
    5fa4:	4c7d      	ldr	r4, [pc, #500]	; (619c <_Z11midi_handlev+0x20c>)
    5fa6:	267f      	movs	r6, #127	; 0x7f
		return usb_midi_read(channel);
    5fa8:	2001      	movs	r0, #1
    5faa:	f003 f94b 	bl	9244 <usb_midi_read>
    5fae:	68a8      	ldr	r0, [r5, #8]
    5fb0:	9600      	str	r6, [sp, #0]
    5fb2:	2128      	movs	r1, #40	; 0x28
    5fb4:	f44f 72be 	mov.w	r2, #380	; 0x17c
    5fb8:	2300      	movs	r3, #0
    5fba:	f004 f89b 	bl	a0f4 <_Z3maplllll>
    5fbe:	2128      	movs	r1, #40	; 0x28
    5fc0:	4607      	mov	r7, r0
    5fc2:	f44f 72be 	mov.w	r2, #380	; 0x17c
    5fc6:	68a0      	ldr	r0, [r4, #8]
    5fc8:	9600      	str	r6, [sp, #0]
    5fca:	2300      	movs	r3, #0
    5fcc:	f004 f892 	bl	a0f4 <_Z3maplllll>
    5fd0:	4287      	cmp	r7, r0
    5fd2:	d020      	beq.n	6016 <_Z11midi_handlev+0x86>
    MIDI.sendControlChange(74, map(synth.filter,40,380,0,127), MIDI_CHANNEL);
    5fd4:	68a0      	ldr	r0, [r4, #8]
    5fd6:	9600      	str	r6, [sp, #0]
    5fd8:	2128      	movs	r1, #40	; 0x28
    5fda:	f44f 72be 	mov.w	r2, #380	; 0x17c
    5fde:	2300      	movs	r3, #0
    5fe0:	f004 f888 	bl	a0f4 <_Z3maplllll>
    send(ControlChange, inControlNumber, inControlValue, inChannel);
    5fe4:	2201      	movs	r2, #1
    5fe6:	b2c3      	uxtb	r3, r0
    5fe8:	9200      	str	r2, [sp, #0]
    5fea:	486a      	ldr	r0, [pc, #424]	; (6194 <_Z11midi_handlev+0x204>)
    5fec:	21b0      	movs	r1, #176	; 0xb0
    5fee:	224a      	movs	r2, #74	; 0x4a
    5ff0:	f7fe fe3a 	bl	4c68 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
    usbMIDI.sendControlChange(74, map(synth.filter,40,380,0,127), MIDI_CHANNEL);
    5ff4:	68a0      	ldr	r0, [r4, #8]
    5ff6:	9600      	str	r6, [sp, #0]
    5ff8:	2128      	movs	r1, #40	; 0x28
    5ffa:	f44f 72be 	mov.w	r2, #380	; 0x17c
    5ffe:	2300      	movs	r3, #0
    6000:	f004 f878 	bl	a0f4 <_Z3maplllll>
		  | ((control & 0x7F) << 16) | ((value & 0x7F) << 24));
    6004:	ea00 0306 	and.w	r3, r0, r6
    6008:	4865      	ldr	r0, [pc, #404]	; (61a0 <_Z11midi_handlev+0x210>)
    600a:	061b      	lsls	r3, r3, #24
    600c:	4318      	orrs	r0, r3
    600e:	f003 f8b1 	bl	9174 <usb_midi_write_packed>
    midi_parameters.filter = synth.filter;
    6012:	68a3      	ldr	r3, [r4, #8]
    6014:	60ab      	str	r3, [r5, #8]
  if((uint8_t)((midi_parameters.resonance * 38)-25) != (uint8_t)((synth.resonance * 38)-25)) {
    6016:	4963      	ldr	r1, [pc, #396]	; (61a4 <_Z11midi_handlev+0x214>)
    6018:	68e0      	ldr	r0, [r4, #12]
    601a:	4f60      	ldr	r7, [pc, #384]	; (619c <_Z11midi_handlev+0x20c>)
    601c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 6198 <_Z11midi_handlev+0x208>
    6020:	f007 f87c 	bl	d11c <__aeabi_fmul>
    6024:	4960      	ldr	r1, [pc, #384]	; (61a8 <_Z11midi_handlev+0x218>)
    6026:	f006 ff6f 	bl	cf08 <__aeabi_fsub>
    602a:	f007 fa63 	bl	d4f4 <__aeabi_f2uiz>
    602e:	495d      	ldr	r1, [pc, #372]	; (61a4 <_Z11midi_handlev+0x214>)
    6030:	b2c6      	uxtb	r6, r0
    6032:	68e8      	ldr	r0, [r5, #12]
    6034:	f007 f872 	bl	d11c <__aeabi_fmul>
    6038:	495b      	ldr	r1, [pc, #364]	; (61a8 <_Z11midi_handlev+0x218>)
    603a:	f006 ff65 	bl	cf08 <__aeabi_fsub>
    603e:	f007 fa59 	bl	d4f4 <__aeabi_f2uiz>
    6042:	b2c0      	uxtb	r0, r0
    6044:	42b0      	cmp	r0, r6
    6046:	d01a      	beq.n	607e <_Z11midi_handlev+0xee>
    6048:	2201      	movs	r2, #1
    604a:	4633      	mov	r3, r6
    604c:	9200      	str	r2, [sp, #0]
    604e:	4851      	ldr	r0, [pc, #324]	; (6194 <_Z11midi_handlev+0x204>)
    6050:	2247      	movs	r2, #71	; 0x47
    6052:	21b0      	movs	r1, #176	; 0xb0
    6054:	f7fe fe08 	bl	4c68 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
    usbMIDI.sendControlChange(71, (uint8_t)((synth.resonance * 38)-25), MIDI_CHANNEL);
    6058:	68f8      	ldr	r0, [r7, #12]
    605a:	4952      	ldr	r1, [pc, #328]	; (61a4 <_Z11midi_handlev+0x214>)
    605c:	f007 f85e 	bl	d11c <__aeabi_fmul>
    6060:	4951      	ldr	r1, [pc, #324]	; (61a8 <_Z11midi_handlev+0x218>)
    6062:	f006 ff51 	bl	cf08 <__aeabi_fsub>
    6066:	f007 fa45 	bl	d4f4 <__aeabi_f2uiz>
    606a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    606e:	484f      	ldr	r0, [pc, #316]	; (61ac <_Z11midi_handlev+0x21c>)
    6070:	061b      	lsls	r3, r3, #24
    6072:	4318      	orrs	r0, r3
    6074:	f003 f87e 	bl	9174 <usb_midi_write_packed>
    midi_parameters.resonance = synth.resonance;
    6078:	68fb      	ldr	r3, [r7, #12]
    607a:	f8c8 300c 	str.w	r3, [r8, #12]
  if(map(midi_parameters.release,30,500,0,127) != map(synth.release,30,500,0,127)) {
    607e:	267f      	movs	r6, #127	; 0x7f
    6080:	6928      	ldr	r0, [r5, #16]
    6082:	9600      	str	r6, [sp, #0]
    6084:	211e      	movs	r1, #30
    6086:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    608a:	2300      	movs	r3, #0
    608c:	f004 f832 	bl	a0f4 <_Z3maplllll>
    6090:	211e      	movs	r1, #30
    6092:	4680      	mov	r8, r0
    6094:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    6098:	6920      	ldr	r0, [r4, #16]
    609a:	9600      	str	r6, [sp, #0]
    609c:	2300      	movs	r3, #0
    609e:	f004 f829 	bl	a0f4 <_Z3maplllll>
    60a2:	4580      	cmp	r8, r0
    60a4:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 6198 <_Z11midi_handlev+0x208>
    60a8:	4f3c      	ldr	r7, [pc, #240]	; (619c <_Z11midi_handlev+0x20c>)
    60aa:	d021      	beq.n	60f0 <_Z11midi_handlev+0x160>
    MIDI.sendControlChange(72, map(synth.release,30,500,0,127), MIDI_CHANNEL);
    60ac:	6938      	ldr	r0, [r7, #16]
    60ae:	9600      	str	r6, [sp, #0]
    60b0:	211e      	movs	r1, #30
    60b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    60b6:	2300      	movs	r3, #0
    60b8:	f004 f81c 	bl	a0f4 <_Z3maplllll>
    60bc:	2201      	movs	r2, #1
    60be:	b2c3      	uxtb	r3, r0
    60c0:	9200      	str	r2, [sp, #0]
    60c2:	4834      	ldr	r0, [pc, #208]	; (6194 <_Z11midi_handlev+0x204>)
    60c4:	21b0      	movs	r1, #176	; 0xb0
    60c6:	2248      	movs	r2, #72	; 0x48
    60c8:	f7fe fdce 	bl	4c68 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
    usbMIDI.sendControlChange(72, map(synth.release,30,500,0,127), MIDI_CHANNEL);
    60cc:	6938      	ldr	r0, [r7, #16]
    60ce:	9600      	str	r6, [sp, #0]
    60d0:	211e      	movs	r1, #30
    60d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    60d6:	2300      	movs	r3, #0
    60d8:	f004 f80c 	bl	a0f4 <_Z3maplllll>
    60dc:	ea00 0306 	and.w	r3, r0, r6
    60e0:	4833      	ldr	r0, [pc, #204]	; (61b0 <_Z11midi_handlev+0x220>)
    60e2:	061b      	lsls	r3, r3, #24
    60e4:	4318      	orrs	r0, r3
    60e6:	f003 f845 	bl	9174 <usb_midi_write_packed>
    midi_parameters.release = synth.release;
    60ea:	693b      	ldr	r3, [r7, #16]
    60ec:	f8c9 3010 	str.w	r3, [r9, #16]
  if((uint8_t)(midi_parameters.pulseWidth*127.0f) != (uint8_t)(synth.pulseWidth*127.0f)) {
    60f0:	4930      	ldr	r1, [pc, #192]	; (61b4 <_Z11midi_handlev+0x224>)
    60f2:	6860      	ldr	r0, [r4, #4]
    60f4:	4e29      	ldr	r6, [pc, #164]	; (619c <_Z11midi_handlev+0x20c>)
    60f6:	4f28      	ldr	r7, [pc, #160]	; (6198 <_Z11midi_handlev+0x208>)
    60f8:	f007 f810 	bl	d11c <__aeabi_fmul>
    60fc:	f007 f9fa 	bl	d4f4 <__aeabi_f2uiz>
    6100:	492c      	ldr	r1, [pc, #176]	; (61b4 <_Z11midi_handlev+0x224>)
    6102:	b2c4      	uxtb	r4, r0
    6104:	6868      	ldr	r0, [r5, #4]
    6106:	f007 f809 	bl	d11c <__aeabi_fmul>
    610a:	f007 f9f3 	bl	d4f4 <__aeabi_f2uiz>
    610e:	b2c0      	uxtb	r0, r0
    6110:	42a0      	cmp	r0, r4
    6112:	d016      	beq.n	6142 <_Z11midi_handlev+0x1b2>
    6114:	2201      	movs	r2, #1
    6116:	4623      	mov	r3, r4
    6118:	9200      	str	r2, [sp, #0]
    611a:	481e      	ldr	r0, [pc, #120]	; (6194 <_Z11midi_handlev+0x204>)
    611c:	2246      	movs	r2, #70	; 0x46
    611e:	21b0      	movs	r1, #176	; 0xb0
    6120:	f7fe fda2 	bl	4c68 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
    usbMIDI.sendControlChange(70, (uint8_t)(synth.pulseWidth*127.0f), MIDI_CHANNEL);
    6124:	4923      	ldr	r1, [pc, #140]	; (61b4 <_Z11midi_handlev+0x224>)
    6126:	6870      	ldr	r0, [r6, #4]
    6128:	f006 fff8 	bl	d11c <__aeabi_fmul>
    612c:	f007 f9e2 	bl	d4f4 <__aeabi_f2uiz>
    6130:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    6134:	4820      	ldr	r0, [pc, #128]	; (61b8 <_Z11midi_handlev+0x228>)
    6136:	061b      	lsls	r3, r3, #24
    6138:	4318      	orrs	r0, r3
    613a:	f003 f81b 	bl	9174 <usb_midi_write_packed>
    midi_parameters.pulseWidth = synth.pulseWidth;
    613e:	6873      	ldr	r3, [r6, #4]
    6140:	607b      	str	r3, [r7, #4]
}
    6142:	b003      	add	sp, #12
    6144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!parse())
    6148:	4620      	mov	r0, r4
    614a:	f7ff fb49 	bl	57e0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv>
    614e:	2800      	cmp	r0, #0
    6150:	f43f af27 	beq.w	5fa2 <_Z11midi_handlev+0x12>
inline void MidiInterface<SerialPort, Settings>::handleNullVelocityNoteOnAsNoteOff()
    6154:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
    if (Settings::HandleNullVelocityNoteOnAsNoteOff &&
    6158:	2b90      	cmp	r3, #144	; 0x90
    615a:	d00d      	beq.n	6178 <_Z11midi_handlev+0x1e8>
    if (mMessage.type >= NoteOff && mMessage.type <= PitchBend)
    615c:	f083 0380 	eor.w	r3, r3, #128	; 0x80
    6160:	2b60      	cmp	r3, #96	; 0x60
inline bool MidiInterface<SerialPort, Settings>::read(Channel inChannel)
    6162:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
    if (mMessage.type >= NoteOff && mMessage.type <= PitchBend)
    6166:	d90c      	bls.n	6182 <_Z11midi_handlev+0x1f2>
        launchCallback();
    6168:	480a      	ldr	r0, [pc, #40]	; (6194 <_Z11midi_handlev+0x204>)
    616a:	f7ff fd91 	bl	5c90 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv>
    thruFilter(inChannel);
    616e:	4629      	mov	r1, r5
    6170:	4808      	ldr	r0, [pc, #32]	; (6194 <_Z11midi_handlev+0x204>)
    6172:	f7ff fe53 	bl	5e1c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh>
    6176:	e714      	b.n	5fa2 <_Z11midi_handlev+0x12>
    if (Settings::HandleNullVelocityNoteOnAsNoteOff &&
    6178:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    617c:	b133      	cbz	r3, 618c <_Z11midi_handlev+0x1fc>
inline bool MidiInterface<SerialPort, Settings>::read(Channel inChannel)
    617e:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
        if ((mMessage.channel == inChannel) ||
    6182:	4295      	cmp	r5, r2
    6184:	d0f0      	beq.n	6168 <_Z11midi_handlev+0x1d8>
    6186:	2d00      	cmp	r5, #0
    6188:	d0ee      	beq.n	6168 <_Z11midi_handlev+0x1d8>
    618a:	e7f0      	b.n	616e <_Z11midi_handlev+0x1de>
        mMessage.type = NoteOff;
    618c:	2380      	movs	r3, #128	; 0x80
    618e:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    6192:	e7f4      	b.n	617e <_Z11midi_handlev+0x1ee>
    6194:	2000209c 	.word	0x2000209c
    6198:	20001bb0 	.word	0x20001bb0
    619c:	20001fb4 	.word	0x20001fb4
    61a0:	004ab00b 	.word	0x004ab00b
    61a4:	42180000 	.word	0x42180000
    61a8:	41c80000 	.word	0x41c80000
    61ac:	0047b00b 	.word	0x0047b00b
    61b0:	0048b00b 	.word	0x0048b00b
    61b4:	42fe0000 	.word	0x42fe0000
    61b8:	0046b00b 	.word	0x0046b00b

000061bc <loop>:
void loop() {
    61bc:	b508      	push	{r3, lr}
  if(power_check()) {
    61be:	f7fe fb01 	bl	47c4 <_Z11power_checkv>
    61c2:	b900      	cbnz	r0, 61c6 <loop+0xa>
    61c4:	bd08      	pop	{r3, pc}
    keys_scan();
    61c6:	f7ff f8ad 	bl	5324 <_Z9keys_scanv>
    keyboard_to_note();   
    61ca:	f7ff fad7 	bl	577c <_Z16keyboard_to_notev>
    midi_handle();
    61ce:	f7ff fedf 	bl	5f90 <_Z11midi_handlev>
    pitch_update();   
    61d2:	f7fe fa09 	bl	45e8 <_Z12pitch_updatev>
    sequencer_update();
    61d6:	f7ff f995 	bl	5504 <_Z16sequencer_updatev>
    pots_read();
    61da:	f7fe fb15 	bl	4808 <_Z9pots_readv>
    sequencer_update();
    61de:	f7ff f991 	bl	5504 <_Z16sequencer_updatev>
    drum_read();
    61e2:	f7fd fe59 	bl	3e98 <_Z9drum_readv>
    sequencer_update();
    61e6:	f7ff f98d 	bl	5504 <_Z16sequencer_updatev>
    led_update();
    61ea:	f7fd fca1 	bl	3b30 <_Z10led_updatev>
}
    61ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sequencer_update();
    61f2:	f7ff b987 	b.w	5504 <_Z16sequencer_updatev>
    61f6:	bf00      	nop

000061f8 <_GLOBAL__sub_I_gate_length_msec>:
}
    61f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    , mThruFilterMode(Thru::Full)
    61fc:	4eb1      	ldr	r6, [pc, #708]	; (64c4 <_GLOBAL__sub_I_gate_length_msec+0x2cc>)
    61fe:	4bb2      	ldr	r3, [pc, #712]	; (64c8 <_GLOBAL__sub_I_gate_length_msec+0x2d0>)
    6200:	f896 7064 	ldrb.w	r7, [r6, #100]	; 0x64
    6204:	64b3      	str	r3, [r6, #72]	; 0x48
    6206:	2400      	movs	r4, #0
    6208:	2501      	movs	r5, #1
    620a:	f047 0701 	orr.w	r7, r7, #1
    620e:	b085      	sub	sp, #20
    6210:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6214:	f365 0747 	bfi	r7, r5, #1, #7
        memset(sysexArray, 0, sSysExMaxSize * sizeof(DataByte));
    6218:	4621      	mov	r1, r4
        , valid(false)
    621a:	f886 4065 	strb.w	r4, [r6, #101]	; 0x65
    621e:	f886 4066 	strb.w	r4, [r6, #102]	; 0x66
    6222:	f886 4067 	strb.w	r4, [r6, #103]	; 0x67
    6226:	f886 4068 	strb.w	r4, [r6, #104]	; 0x68
    622a:	f886 40e9 	strb.w	r4, [r6, #233]	; 0xe9
        memset(sysexArray, 0, sSysExMaxSize * sizeof(DataByte));
    622e:	f106 0069 	add.w	r0, r6, #105	; 0x69
    6232:	2280      	movs	r2, #128	; 0x80
    6234:	65f3      	str	r3, [r6, #92]	; 0x5c
    6236:	6633      	str	r3, [r6, #96]	; 0x60
    6238:	f886 7064 	strb.w	r7, [r6, #100]	; 0x64
    623c:	f886 404c 	strb.w	r4, [r6, #76]	; 0x4c
    6240:	f886 404d 	strb.w	r4, [r6, #77]	; 0x4d
    6244:	f886 404e 	strb.w	r4, [r6, #78]	; 0x4e
    6248:	6574      	str	r4, [r6, #84]	; 0x54
    624a:	65b4      	str	r4, [r6, #88]	; 0x58
    624c:	f008 f80e 	bl	e26c <memset>
MIDI_CREATE_DEFAULT_INSTANCE();
    6250:	4630      	mov	r0, r6
    6252:	499e      	ldr	r1, [pc, #632]	; (64cc <_GLOBAL__sub_I_gate_length_msec+0x2d4>)
    6254:	4a9e      	ldr	r2, [pc, #632]	; (64d0 <_GLOBAL__sub_I_gate_length_msec+0x2d8>)
    mNoteOffCallback                = 0;
    6256:	6034      	str	r4, [r6, #0]
    mNoteOnCallback                 = 0;
    6258:	6074      	str	r4, [r6, #4]
    mAfterTouchPolyCallback         = 0;
    625a:	60b4      	str	r4, [r6, #8]
    mControlChangeCallback          = 0;
    625c:	60f4      	str	r4, [r6, #12]
    mProgramChangeCallback          = 0;
    625e:	6134      	str	r4, [r6, #16]
    mAfterTouchChannelCallback      = 0;
    6260:	6174      	str	r4, [r6, #20]
    mPitchBendCallback              = 0;
    6262:	61b4      	str	r4, [r6, #24]
    mSystemExclusiveCallback        = 0;
    6264:	61f4      	str	r4, [r6, #28]
    mTimeCodeQuarterFrameCallback   = 0;
    6266:	6234      	str	r4, [r6, #32]
    mSongPositionCallback           = 0;
    6268:	6274      	str	r4, [r6, #36]	; 0x24
    mSongSelectCallback             = 0;
    626a:	62b4      	str	r4, [r6, #40]	; 0x28
    mTuneRequestCallback            = 0;
    626c:	62f4      	str	r4, [r6, #44]	; 0x2c
    mClockCallback                  = 0;
    626e:	6334      	str	r4, [r6, #48]	; 0x30
    mStartCallback                  = 0;
    6270:	6374      	str	r4, [r6, #52]	; 0x34
    mContinueCallback               = 0;
    6272:	63b4      	str	r4, [r6, #56]	; 0x38
    mStopCallback                   = 0;
    6274:	63f4      	str	r4, [r6, #60]	; 0x3c
    mActiveSensingCallback          = 0;
    6276:	6434      	str	r4, [r6, #64]	; 0x40
    mSystemResetCallback            = 0;
    6278:	6474      	str	r4, [r6, #68]	; 0x44
    627a:	f007 fc1b 	bl	dab4 <__aeabi_atexit>
Keypad button_matrix = Keypad( makeKeymap(buttons), row_pins, col_pins, ROWS, COLS );
    627e:	2204      	movs	r2, #4
    6280:	2306      	movs	r3, #6
    6282:	e88d 000c 	stmia.w	sp, {r2, r3}
    6286:	4993      	ldr	r1, [pc, #588]	; (64d4 <_GLOBAL__sub_I_gate_length_msec+0x2dc>)
    6288:	4b93      	ldr	r3, [pc, #588]	; (64d8 <_GLOBAL__sub_I_gate_length_msec+0x2e0>)
    628a:	4a94      	ldr	r2, [pc, #592]	; (64dc <_GLOBAL__sub_I_gate_length_msec+0x2e4>)
    628c:	4894      	ldr	r0, [pc, #592]	; (64e0 <_GLOBAL__sub_I_gate_length_msec+0x2e8>)
	AudioSynthWaveformDc() : AudioStream(0, NULL), state(0), magnitude(0) {}
    628e:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 655c <_GLOBAL__sub_I_gate_length_msec+0x364>
AudioMixer4              mixer1;         //xy=255.10000610351562,83
    6292:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 6560 <_GLOBAL__sub_I_gate_length_msec+0x368>
	AudioAnalyzePeak(void) : AudioStream(1, inputQueueArray) {
    6296:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 6564 <_GLOBAL__sub_I_gate_length_msec+0x36c>
	AudioEffectDelay() : AudioStream(1, inputQueueArray) {
    629a:	4e92      	ldr	r6, [pc, #584]	; (64e4 <_GLOBAL__sub_I_gate_length_msec+0x2ec>)
	  : AudioStream(1, inputQueueArray) {}
    629c:	4f92      	ldr	r7, [pc, #584]	; (64e8 <_GLOBAL__sub_I_gate_length_msec+0x2f0>)
    629e:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 6568 <_GLOBAL__sub_I_gate_length_msec+0x370>
    62a2:	f005 f8ad 	bl	b400 <_ZN6KeypadC1EPcPhS1_hh>
AudioSynthWaveform       osc_pulse;      //xy=78.10000610351562,97
    62a6:	4891      	ldr	r0, [pc, #580]	; (64ec <_GLOBAL__sub_I_gate_length_msec+0x2f4>)
    62a8:	f7fd f988 	bl	35bc <_ZN18AudioSynthWaveformC1Ev>
AudioSynthWaveform       osc_saw;        //xy=79.10000610351562,44
    62ac:	4890      	ldr	r0, [pc, #576]	; (64f0 <_GLOBAL__sub_I_gate_length_msec+0x2f8>)
    62ae:	f7fd f985 	bl	35bc <_ZN18AudioSynthWaveformC1Ev>
    62b2:	4621      	mov	r1, r4
    62b4:	4622      	mov	r2, r4
    62b6:	4648      	mov	r0, r9
    62b8:	f7fd f8aa 	bl	3410 <_ZN11AudioStreamC1EhPP18audio_block_struct>
    62bc:	4b8d      	ldr	r3, [pc, #564]	; (64f4 <_GLOBAL__sub_I_gate_length_msec+0x2fc>)
AudioEffectCustomEnvelope envelope2;      //xy=227.10000610351562,149
    62be:	488e      	ldr	r0, [pc, #568]	; (64f8 <_GLOBAL__sub_I_gate_length_msec+0x300>)
    62c0:	f8c9 3000 	str.w	r3, [r9]
    62c4:	f889 4018 	strb.w	r4, [r9, #24]
    62c8:	f8c9 401c 	str.w	r4, [r9, #28]
    62cc:	f7fd f8c8 	bl	3460 <_ZN25AudioEffectCustomEnvelopeC1Ev>
AudioMixer4              mixer1;         //xy=255.10000610351562,83
    62d0:	4650      	mov	r0, sl
    62d2:	f7fd f93f 	bl	3554 <_ZN11AudioMixer4C1Ev>
AudioFilterStateVariable filter1;        //xy=403.1000061035156,91
    62d6:	4889      	ldr	r0, [pc, #548]	; (64fc <_GLOBAL__sub_I_gate_length_msec+0x304>)
    62d8:	f7fd f8fc 	bl	34d4 <_ZN24AudioFilterStateVariableC1Ev>
AudioEffectCustomEnvelope envelope1;      //xy=560.1000061035156,81
    62dc:	4888      	ldr	r0, [pc, #544]	; (6500 <_GLOBAL__sub_I_gate_length_msec+0x308>)
    62de:	f7fd f8bf 	bl	3460 <_ZN25AudioEffectCustomEnvelopeC1Ev>
    62e2:	4629      	mov	r1, r5
    62e4:	f108 0218 	add.w	r2, r8, #24
    62e8:	4640      	mov	r0, r8
    62ea:	f7fd f891 	bl	3410 <_ZN11AudioStreamC1EhPP18audio_block_struct>
    62ee:	4b85      	ldr	r3, [pc, #532]	; (6504 <_GLOBAL__sub_I_gate_length_msec+0x30c>)
    62f0:	f8c8 3000 	str.w	r3, [r8]
		min_sample = 32767;
    62f4:	f647 7cff 	movw	ip, #32767	; 0x7fff
		max_sample = -32768;
    62f8:	f248 0300 	movw	r3, #32768	; 0x8000
    62fc:	4629      	mov	r1, r5
    62fe:	f506 7200 	add.w	r2, r6, #512	; 0x200
    6302:	4630      	mov	r0, r6
		min_sample = 32767;
    6304:	f8a8 c01e 	strh.w	ip, [r8, #30]
		max_sample = -32768;
    6308:	f8a8 3020 	strh.w	r3, [r8, #32]
    630c:	f8cd c00c 	str.w	ip, [sp, #12]
    6310:	f7fd f87e 	bl	3410 <_ZN11AudioStreamC1EhPP18audio_block_struct>
    6314:	4a7c      	ldr	r2, [pc, #496]	; (6508 <_GLOBAL__sub_I_gate_length_msec+0x310>)
    6316:	6032      	str	r2, [r6, #0]
		memset(queue, 0, sizeof(queue));
    6318:	4621      	mov	r1, r4
    631a:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    631e:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
		activemask = 0;
    6322:	7634      	strb	r4, [r6, #24]
		headindex = 0;
    6324:	7674      	strb	r4, [r6, #25]
		tailindex = 0;
    6326:	76b4      	strb	r4, [r6, #26]
		maxblocks = 0;
    6328:	76f4      	strb	r4, [r6, #27]
		memset(queue, 0, sizeof(queue));
    632a:	f007 ff9f 	bl	e26c <memset>
    632e:	4629      	mov	r1, r5
    6330:	f107 021c 	add.w	r2, r7, #28
    6334:	4638      	mov	r0, r7
    6336:	f7fd f86b 	bl	3410 <_ZN11AudioStreamC1EhPP18audio_block_struct>
    633a:	4a74      	ldr	r2, [pc, #464]	; (650c <_GLOBAL__sub_I_gate_length_msec+0x314>)
AudioMixer4              mixer_delay;     //xy=728.0999755859375,279.1000061035156
    633c:	4874      	ldr	r0, [pc, #464]	; (6510 <_GLOBAL__sub_I_gate_length_msec+0x318>)
    633e:	603a      	str	r2, [r7, #0]
    6340:	f7fd f908 	bl	3554 <_ZN11AudioMixer4C1Ev>
AudioMixer4              mixer_output;         //xy=861.1000061035156,100
    6344:	4873      	ldr	r0, [pc, #460]	; (6514 <_GLOBAL__sub_I_gate_length_msec+0x31c>)
    6346:	f7fd f905 	bl	3554 <_ZN11AudioMixer4C1Ev>
	AudioAnalyzePeak(void) : AudioStream(1, inputQueueArray) {
    634a:	4629      	mov	r1, r5
    634c:	f10b 0218 	add.w	r2, fp, #24
    6350:	4658      	mov	r0, fp
    6352:	f7fd f85d 	bl	3410 <_ZN11AudioStreamC1EhPP18audio_block_struct>
#include "DMAChannel.h"

class AudioOutputAnalog : public AudioStream
{
public:
	AudioOutputAnalog(void) : AudioStream(1, inputQueueArray) { begin(); }
    6356:	4870      	ldr	r0, [pc, #448]	; (6518 <_GLOBAL__sub_I_gate_length_msec+0x320>)
    6358:	4b6a      	ldr	r3, [pc, #424]	; (6504 <_GLOBAL__sub_I_gate_length_msec+0x30c>)
		min_sample = 32767;
    635a:	f8dd c00c 	ldr.w	ip, [sp, #12]
	AudioAnalyzePeak(void) : AudioStream(1, inputQueueArray) {
    635e:	f8cb 3000 	str.w	r3, [fp]
    6362:	4629      	mov	r1, r5
    6364:	f100 0218 	add.w	r2, r0, #24
		max_sample = -32768;
    6368:	f248 0300 	movw	r3, #32768	; 0x8000
		min_sample = 32767;
    636c:	f8ab c01e 	strh.w	ip, [fp, #30]
		max_sample = -32768;
    6370:	f8ab 3020 	strh.w	r3, [fp, #32]
    6374:	f7fd f84c 	bl	3410 <_ZN11AudioStreamC1EhPP18audio_block_struct>
    6378:	4867      	ldr	r0, [pc, #412]	; (6518 <_GLOBAL__sub_I_gate_length_msec+0x320>)
    637a:	4b68      	ldr	r3, [pc, #416]	; (651c <_GLOBAL__sub_I_gate_length_msec+0x324>)
    637c:	6003      	str	r3, [r0, #0]
    637e:	f004 fadb 	bl	a938 <_ZN17AudioOutputAnalog5beginEv>
		next_dest(NULL)
    6382:	4b67      	ldr	r3, [pc, #412]	; (6520 <_GLOBAL__sub_I_gate_length_msec+0x328>)
    6384:	4a59      	ldr	r2, [pc, #356]	; (64ec <_GLOBAL__sub_I_gate_length_msec+0x2f4>)
    6386:	601a      	str	r2, [r3, #0]
		{ connect(); }
    6388:	4618      	mov	r0, r3
		next_dest(NULL)
    638a:	f8c3 a004 	str.w	sl, [r3, #4]
    638e:	721c      	strb	r4, [r3, #8]
    6390:	725d      	strb	r5, [r3, #9]
    6392:	60dc      	str	r4, [r3, #12]
		{ connect(); }
    6394:	f003 fae0 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    6398:	4b62      	ldr	r3, [pc, #392]	; (6524 <_GLOBAL__sub_I_gate_length_msec+0x32c>)
    639a:	4855      	ldr	r0, [pc, #340]	; (64f0 <_GLOBAL__sub_I_gate_length_msec+0x2f8>)
    639c:	6018      	str	r0, [r3, #0]
		{ connect(); }
    639e:	4618      	mov	r0, r3
		next_dest(NULL)
    63a0:	f8c3 a004 	str.w	sl, [r3, #4]
    63a4:	721c      	strb	r4, [r3, #8]
    63a6:	725c      	strb	r4, [r3, #9]
    63a8:	60dc      	str	r4, [r3, #12]
		{ connect(); }
    63aa:	f003 fad5 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    63ae:	4b5e      	ldr	r3, [pc, #376]	; (6528 <_GLOBAL__sub_I_gate_length_msec+0x330>)
    63b0:	4a51      	ldr	r2, [pc, #324]	; (64f8 <_GLOBAL__sub_I_gate_length_msec+0x300>)
    63b2:	f8c3 9000 	str.w	r9, [r3]
		{ connect(); }
    63b6:	4618      	mov	r0, r3
		next_dest(NULL)
    63b8:	605a      	str	r2, [r3, #4]
    63ba:	721c      	strb	r4, [r3, #8]
    63bc:	725c      	strb	r4, [r3, #9]
    63be:	60dc      	str	r4, [r3, #12]
		{ connect(); }
    63c0:	f003 faca 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    63c4:	4b59      	ldr	r3, [pc, #356]	; (652c <_GLOBAL__sub_I_gate_length_msec+0x334>)
    63c6:	484c      	ldr	r0, [pc, #304]	; (64f8 <_GLOBAL__sub_I_gate_length_msec+0x300>)
    63c8:	6018      	str	r0, [r3, #0]
    63ca:	4a4c      	ldr	r2, [pc, #304]	; (64fc <_GLOBAL__sub_I_gate_length_msec+0x304>)
    63cc:	605a      	str	r2, [r3, #4]
		{ connect(); }
    63ce:	4618      	mov	r0, r3
		next_dest(NULL)
    63d0:	721c      	strb	r4, [r3, #8]
    63d2:	725d      	strb	r5, [r3, #9]
    63d4:	60dc      	str	r4, [r3, #12]
		{ connect(); }
    63d6:	f003 fabf 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    63da:	4b55      	ldr	r3, [pc, #340]	; (6530 <_GLOBAL__sub_I_gate_length_msec+0x338>)
    63dc:	4a47      	ldr	r2, [pc, #284]	; (64fc <_GLOBAL__sub_I_gate_length_msec+0x304>)
    63de:	f8c3 a000 	str.w	sl, [r3]
		{ connect(); }
    63e2:	4618      	mov	r0, r3
		next_dest(NULL)
    63e4:	605a      	str	r2, [r3, #4]
    63e6:	721c      	strb	r4, [r3, #8]
    63e8:	725c      	strb	r4, [r3, #9]
    63ea:	60dc      	str	r4, [r3, #12]
		{ connect(); }
    63ec:	f003 fab4 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    63f0:	4b50      	ldr	r3, [pc, #320]	; (6534 <_GLOBAL__sub_I_gate_length_msec+0x33c>)
    63f2:	4842      	ldr	r0, [pc, #264]	; (64fc <_GLOBAL__sub_I_gate_length_msec+0x304>)
    63f4:	6018      	str	r0, [r3, #0]
    63f6:	4a42      	ldr	r2, [pc, #264]	; (6500 <_GLOBAL__sub_I_gate_length_msec+0x308>)
    63f8:	605a      	str	r2, [r3, #4]
		{ connect(); }
    63fa:	4618      	mov	r0, r3
		next_dest(NULL)
    63fc:	721c      	strb	r4, [r3, #8]
    63fe:	725c      	strb	r4, [r3, #9]
    6400:	60dc      	str	r4, [r3, #12]
		{ connect(); }
    6402:	f003 faa9 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    6406:	4b4c      	ldr	r3, [pc, #304]	; (6538 <_GLOBAL__sub_I_gate_length_msec+0x340>)
    6408:	4a3d      	ldr	r2, [pc, #244]	; (6500 <_GLOBAL__sub_I_gate_length_msec+0x308>)
    640a:	601a      	str	r2, [r3, #0]
		{ connect(); }
    640c:	4618      	mov	r0, r3
		next_dest(NULL)
    640e:	f8c3 8004 	str.w	r8, [r3, #4]
    6412:	721c      	strb	r4, [r3, #8]
    6414:	725c      	strb	r4, [r3, #9]
    6416:	60dc      	str	r4, [r3, #12]
		{ connect(); }
    6418:	f003 fa9e 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    641c:	4b47      	ldr	r3, [pc, #284]	; (653c <_GLOBAL__sub_I_gate_length_msec+0x344>)
    641e:	4838      	ldr	r0, [pc, #224]	; (6500 <_GLOBAL__sub_I_gate_length_msec+0x308>)
    6420:	6018      	str	r0, [r3, #0]
		{ connect(); }
    6422:	4618      	mov	r0, r3
		next_dest(NULL)
    6424:	605f      	str	r7, [r3, #4]
    6426:	721c      	strb	r4, [r3, #8]
    6428:	725c      	strb	r4, [r3, #9]
    642a:	60dc      	str	r4, [r3, #12]
		{ connect(); }
    642c:	f003 fa94 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    6430:	4b43      	ldr	r3, [pc, #268]	; (6540 <_GLOBAL__sub_I_gate_length_msec+0x348>)
    6432:	4a38      	ldr	r2, [pc, #224]	; (6514 <_GLOBAL__sub_I_gate_length_msec+0x31c>)
    6434:	601e      	str	r6, [r3, #0]
		{ connect(); }
    6436:	4618      	mov	r0, r3
		next_dest(NULL)
    6438:	605a      	str	r2, [r3, #4]
    643a:	721c      	strb	r4, [r3, #8]
    643c:	725d      	strb	r5, [r3, #9]
    643e:	60dc      	str	r4, [r3, #12]
		{ connect(); }
    6440:	f003 fa8a 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    6444:	4b3f      	ldr	r3, [pc, #252]	; (6544 <_GLOBAL__sub_I_gate_length_msec+0x34c>)
    6446:	4a32      	ldr	r2, [pc, #200]	; (6510 <_GLOBAL__sub_I_gate_length_msec+0x318>)
    6448:	601e      	str	r6, [r3, #0]
		{ connect(); }
    644a:	4618      	mov	r0, r3
		next_dest(NULL)
    644c:	605a      	str	r2, [r3, #4]
    644e:	721c      	strb	r4, [r3, #8]
    6450:	725d      	strb	r5, [r3, #9]
    6452:	60dc      	str	r4, [r3, #12]
		{ connect(); }
    6454:	f003 fa80 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    6458:	4b3b      	ldr	r3, [pc, #236]	; (6548 <_GLOBAL__sub_I_gate_length_msec+0x350>)
    645a:	4a2e      	ldr	r2, [pc, #184]	; (6514 <_GLOBAL__sub_I_gate_length_msec+0x31c>)
    645c:	601f      	str	r7, [r3, #0]
		{ connect(); }
    645e:	4618      	mov	r0, r3
		next_dest(NULL)
    6460:	605a      	str	r2, [r3, #4]
    6462:	721c      	strb	r4, [r3, #8]
    6464:	725c      	strb	r4, [r3, #9]
    6466:	60dc      	str	r4, [r3, #12]
		{ connect(); }
    6468:	f003 fa76 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    646c:	4b37      	ldr	r3, [pc, #220]	; (654c <_GLOBAL__sub_I_gate_length_msec+0x354>)
    646e:	4a28      	ldr	r2, [pc, #160]	; (6510 <_GLOBAL__sub_I_gate_length_msec+0x318>)
    6470:	605a      	str	r2, [r3, #4]
		{ connect(); }
    6472:	4618      	mov	r0, r3
		next_dest(NULL)
    6474:	601f      	str	r7, [r3, #0]
    6476:	721c      	strb	r4, [r3, #8]
    6478:	725c      	strb	r4, [r3, #9]
    647a:	60dc      	str	r4, [r3, #12]
		{ connect(); }
    647c:	f003 fa6c 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    6480:	4b33      	ldr	r3, [pc, #204]	; (6550 <_GLOBAL__sub_I_gate_length_msec+0x358>)
AudioMixer4              hat_mixer;         //xy=872,257
    6482:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 656c <_GLOBAL__sub_I_gate_length_msec+0x374>
    6486:	605e      	str	r6, [r3, #4]
		{ connect(); }
    6488:	4618      	mov	r0, r3
		next_dest(NULL)
    648a:	4e21      	ldr	r6, [pc, #132]	; (6510 <_GLOBAL__sub_I_gate_length_msec+0x318>)
    648c:	601e      	str	r6, [r3, #0]
    648e:	721c      	strb	r4, [r3, #8]
    6490:	725c      	strb	r4, [r3, #9]
    6492:	60dc      	str	r4, [r3, #12]
		{ connect(); }
    6494:	f003 fa60 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    6498:	4b2e      	ldr	r3, [pc, #184]	; (6554 <_GLOBAL__sub_I_gate_length_msec+0x35c>)
    649a:	4a1f      	ldr	r2, [pc, #124]	; (6518 <_GLOBAL__sub_I_gate_length_msec+0x320>)
    649c:	4e1d      	ldr	r6, [pc, #116]	; (6514 <_GLOBAL__sub_I_gate_length_msec+0x31c>)
    649e:	605a      	str	r2, [r3, #4]
		{ connect(); }
    64a0:	4618      	mov	r0, r3
		next_dest(NULL)
    64a2:	601e      	str	r6, [r3, #0]
    64a4:	721c      	strb	r4, [r3, #8]
    64a6:	725c      	strb	r4, [r3, #9]
    64a8:	60dc      	str	r4, [r3, #12]
		{ connect(); }
    64aa:	f003 fa55 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    64ae:	4b2a      	ldr	r3, [pc, #168]	; (6558 <_GLOBAL__sub_I_gate_length_msec+0x360>)
    TouchSensor(int pin) : pin(pin)  {
    64b0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 6570 <_GLOBAL__sub_I_gate_length_msec+0x378>
    64b4:	721c      	strb	r4, [r3, #8]
		{ connect(); }
    64b6:	4618      	mov	r0, r3
		next_dest(NULL)
    64b8:	e883 0840 	stmia.w	r3, {r6, fp}
    64bc:	725c      	strb	r4, [r3, #9]
    64be:	60dc      	str	r4, [r3, #12]
    64c0:	e058      	b.n	6574 <_GLOBAL__sub_I_gate_length_msec+0x37c>
    64c2:	bf00      	nop
    64c4:	2000209c 	.word	0x2000209c
    64c8:	2000270c 	.word	0x2000270c
    64cc:	00002811 	.word	0x00002811
    64d0:	20000c80 	.word	0x20000c80
    64d4:	20000cc0 	.word	0x20000cc0
    64d8:	20000ca0 	.word	0x20000ca0
    64dc:	20000cac 	.word	0x20000cac
    64e0:	20002188 	.word	0x20002188
    64e4:	20001db0 	.word	0x20001db0
    64e8:	20001b90 	.word	0x20001b90
    64ec:	20001850 	.word	0x20001850
    64f0:	20001fd8 	.word	0x20001fd8
    64f4:	00012080 	.word	0x00012080
    64f8:	20001c64 	.word	0x20001c64
    64fc:	200016ac 	.word	0x200016ac
    6500:	20001c18 	.word	0x20001c18
    6504:	00012020 	.word	0x00012020
    6508:	00012040 	.word	0x00012040
    650c:	00012030 	.word	0x00012030
    6510:	20002020 	.word	0x20002020
    6514:	200016e8 	.word	0x200016e8
    6518:	20001d28 	.word	0x20001d28
    651c:	00012070 	.word	0x00012070
    6520:	200018d0 	.word	0x200018d0
    6524:	20001cb0 	.word	0x20001cb0
    6528:	2000191c 	.word	0x2000191c
    652c:	2000192c 	.word	0x2000192c
    6530:	2000193c 	.word	0x2000193c
    6534:	2000194c 	.word	0x2000194c
    6538:	2000195c 	.word	0x2000195c
    653c:	20001d48 	.word	0x20001d48
    6540:	20001b44 	.word	0x20001b44
    6544:	20001da0 	.word	0x20001da0
    6548:	200019b4 	.word	0x200019b4
    654c:	200019c4 	.word	0x200019c4
    6550:	200019d4 	.word	0x200019d4
    6554:	200019e4 	.word	0x200019e4
    6558:	200019f4 	.word	0x200019f4
    655c:	2000236c 	.word	0x2000236c
    6560:	20002060 	.word	0x20002060
    6564:	20001a28 	.word	0x20001a28
    6568:	20001a4c 	.word	0x20001a4c
    656c:	20001888 	.word	0x20001888
    6570:	20001768 	.word	0x20001768
		{ connect(); }
    6574:	f003 f9f0 	bl	9958 <_ZN15AudioConnection7connectEv>
class TempoHandler 
    6578:	4a9e      	ldr	r2, [pc, #632]	; (67f4 <_GLOBAL__sub_I_gate_length_msec+0x5fc>)
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    657a:	4b9f      	ldr	r3, [pc, #636]	; (67f8 <_GLOBAL__sub_I_gate_length_msec+0x600>)
    657c:	7314      	strb	r4, [r2, #12]
    657e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    6582:	2644      	movs	r6, #68	; 0x44
    6584:	f04f 0c33 	mov.w	ip, #51	; 0x33
    6588:	f04f 0bff 	mov.w	fp, #255	; 0xff
    658c:	20dd      	movs	r0, #221	; 0xdd
    658e:	2711      	movs	r7, #17
    6590:	f8c2 e014 	str.w	lr, [r2, #20]
    6594:	f64b 3180 	movw	r1, #48000	; 0xbb80
    6598:	f04f 0e22 	mov.w	lr, #34	; 0x22
    659c:	f883 c019 	strb.w	ip, [r3, #25]
    65a0:	f882 4022 	strb.w	r4, [r2, #34]	; 0x22
    65a4:	f882 4024 	strb.w	r4, [r2, #36]	; 0x24
    65a8:	6111      	str	r1, [r2, #16]
    65aa:	711c      	strb	r4, [r3, #4]
    65ac:	715d      	strb	r5, [r3, #5]
    65ae:	72dc      	strb	r4, [r3, #11]
    65b0:	751c      	strb	r4, [r3, #20]
    65b2:	761c      	strb	r4, [r3, #24]
    65b4:	701e      	strb	r6, [r3, #0]
    65b6:	705e      	strb	r6, [r3, #1]
    65b8:	709e      	strb	r6, [r3, #2]
    65ba:	719e      	strb	r6, [r3, #6]
    65bc:	71de      	strb	r6, [r3, #7]
    65be:	721e      	strb	r6, [r3, #8]
    65c0:	731e      	strb	r6, [r3, #12]
    65c2:	735e      	strb	r6, [r3, #13]
    65c4:	739e      	strb	r6, [r3, #14]
    65c6:	73de      	strb	r6, [r3, #15]
    65c8:	741e      	strb	r6, [r3, #16]
    65ca:	745e      	strb	r6, [r3, #17]
    65cc:	755e      	strb	r6, [r3, #21]
    65ce:	759e      	strb	r6, [r3, #22]
    65d0:	75de      	strb	r6, [r3, #23]
    65d2:	76de      	strb	r6, [r3, #27]
    65d4:	f883 b003 	strb.w	fp, [r3, #3]
    65d8:	f883 b009 	strb.w	fp, [r3, #9]
    65dc:	f883 b013 	strb.w	fp, [r3, #19]
    65e0:	7298      	strb	r0, [r3, #10]
    65e2:	7698      	strb	r0, [r3, #26]
    65e4:	749f      	strb	r7, [r3, #18]
    65e6:	2099      	movs	r0, #153	; 0x99
    65e8:	771e      	strb	r6, [r3, #28]
    65ea:	2109      	movs	r1, #9
    65ec:	f883 b01e 	strb.w	fp, [r3, #30]
    65f0:	f883 b020 	strb.w	fp, [r3, #32]
    65f4:	f883 b027 	strb.w	fp, [r3, #39]	; 0x27
    65f8:	f883 b02e 	strb.w	fp, [r3, #46]	; 0x2e
    65fc:	f883 e028 	strb.w	lr, [r3, #40]	; 0x28
    6600:	f883 e038 	strb.w	lr, [r3, #56]	; 0x38
    6604:	22ee      	movs	r2, #238	; 0xee
    6606:	f04f 0ebb 	mov.w	lr, #187	; 0xbb
    660a:	f04f 0bcc 	mov.w	fp, #204	; 0xcc
    660e:	775e      	strb	r6, [r3, #29]
    6610:	77dc      	strb	r4, [r3, #31]
    6612:	f883 6021 	strb.w	r6, [r3, #33]	; 0x21
    6616:	f883 6022 	strb.w	r6, [r3, #34]	; 0x22
    661a:	f883 6023 	strb.w	r6, [r3, #35]	; 0x23
    661e:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
    6622:	f883 6025 	strb.w	r6, [r3, #37]	; 0x25
    6626:	f883 6026 	strb.w	r6, [r3, #38]	; 0x26
    662a:	f883 602a 	strb.w	r6, [r3, #42]	; 0x2a
    662e:	f883 602b 	strb.w	r6, [r3, #43]	; 0x2b
    6632:	f883 602c 	strb.w	r6, [r3, #44]	; 0x2c
    6636:	f883 402f 	strb.w	r4, [r3, #47]	; 0x2f
    663a:	f883 6030 	strb.w	r6, [r3, #48]	; 0x30
    663e:	f883 6031 	strb.w	r6, [r3, #49]	; 0x31
    6642:	f883 6032 	strb.w	r6, [r3, #50]	; 0x32
    6646:	f883 6033 	strb.w	r6, [r3, #51]	; 0x33
    664a:	f883 6034 	strb.w	r6, [r3, #52]	; 0x34
    664e:	f883 6035 	strb.w	r6, [r3, #53]	; 0x35
    6652:	f883 4036 	strb.w	r4, [r3, #54]	; 0x36
    6656:	f883 6039 	strb.w	r6, [r3, #57]	; 0x39
    665a:	f883 603a 	strb.w	r6, [r3, #58]	; 0x3a
    665e:	f883 603b 	strb.w	r6, [r3, #59]	; 0x3b
    6662:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
    6666:	f883 1029 	strb.w	r1, [r3, #41]	; 0x29
    666a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	AudioSynthNoiseWhite() : AudioStream(0, NULL) {
    666e:	4621      	mov	r1, r4
    6670:	4622      	mov	r2, r4
    6672:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
    6676:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    667a:	f883 b03e 	strb.w	fp, [r3, #62]	; 0x3e
    667e:	485f      	ldr	r0, [pc, #380]	; (67fc <_GLOBAL__sub_I_gate_length_msec+0x604>)
    6680:	f883 c043 	strb.w	ip, [r3, #67]	; 0x43
    6684:	f883 e042 	strb.w	lr, [r3, #66]	; 0x42
    6688:	f883 e044 	strb.w	lr, [r3, #68]	; 0x44
    668c:	f883 603f 	strb.w	r6, [r3, #63]	; 0x3f
    6690:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
    6694:	f883 6041 	strb.w	r6, [r3, #65]	; 0x41
    6698:	f883 6045 	strb.w	r6, [r3, #69]	; 0x45
    669c:	f883 6046 	strb.w	r6, [r3, #70]	; 0x46
    66a0:	f883 6047 	strb.w	r6, [r3, #71]	; 0x47
    66a4:	f7fc feb4 	bl	3410 <_ZN11AudioStreamC1EhPP18audio_block_struct>
		seed = 1 + instance_count++;
    66a8:	4a55      	ldr	r2, [pc, #340]	; (6800 <_GLOBAL__sub_I_gate_length_msec+0x608>)
		level = 0;
    66aa:	4854      	ldr	r0, [pc, #336]	; (67fc <_GLOBAL__sub_I_gate_length_msec+0x604>)
		seed = 1 + instance_count++;
    66ac:	8813      	ldrh	r3, [r2, #0]
	AudioSynthNoiseWhite() : AudioStream(0, NULL) {
    66ae:	4e53      	ldr	r6, [pc, #332]	; (67fc <_GLOBAL__sub_I_gate_length_msec+0x604>)
    66b0:	4954      	ldr	r1, [pc, #336]	; (6804 <_GLOBAL__sub_I_gate_length_msec+0x60c>)
		level = 0;
    66b2:	6184      	str	r4, [r0, #24]
		seed = 1 + instance_count++;
    66b4:	442b      	add	r3, r5
AudioSynthSimpleDrum     kick_drum1;     //xy=437,383
    66b6:	4854      	ldr	r0, [pc, #336]	; (6808 <_GLOBAL__sub_I_gate_length_msec+0x610>)
	AudioSynthNoiseWhite() : AudioStream(0, NULL) {
    66b8:	6031      	str	r1, [r6, #0]
		seed = 1 + instance_count++;
    66ba:	8013      	strh	r3, [r2, #0]
    66bc:	61f3      	str	r3, [r6, #28]
    66be:	f7fc ffa7 	bl	3610 <_ZN20AudioSynthSimpleDrumC1Ev>
AudioEffectCustomEnvelope     hat_envelope1;  //xy=546,191
    66c2:	4852      	ldr	r0, [pc, #328]	; (680c <_GLOBAL__sub_I_gate_length_msec+0x614>)
    66c4:	f8df a17c 	ldr.w	sl, [pc, #380]	; 6844 <_GLOBAL__sub_I_gate_length_msec+0x64c>
    66c8:	f7fc feca 	bl	3460 <_ZN25AudioEffectCustomEnvelopeC1Ev>
AudioSynthSimpleDrum     hat_snappy;          //xy=590,250
    66cc:	4850      	ldr	r0, [pc, #320]	; (6810 <_GLOBAL__sub_I_gate_length_msec+0x618>)
    66ce:	f7fc ff9f 	bl	3610 <_ZN20AudioSynthSimpleDrumC1Ev>
AudioFilterStateVariable hat_filter_bp;    //xy=713,197
    66d2:	4850      	ldr	r0, [pc, #320]	; (6814 <_GLOBAL__sub_I_gate_length_msec+0x61c>)
    66d4:	f7fc fefe 	bl	34d4 <_ZN24AudioFilterStateVariableC1Ev>
AudioFilterStateVariable hat_filter_hp;    
    66d8:	484f      	ldr	r0, [pc, #316]	; (6818 <_GLOBAL__sub_I_gate_length_msec+0x620>)
    66da:	f7fc fefb 	bl	34d4 <_ZN24AudioFilterStateVariableC1Ev>
AudioMixer4              hat_mixer;         //xy=872,257
    66de:	4648      	mov	r0, r9
    66e0:	f7fc ff38 	bl	3554 <_ZN11AudioMixer4C1Ev>
		next_dest(NULL)
    66e4:	4b4d      	ldr	r3, [pc, #308]	; (681c <_GLOBAL__sub_I_gate_length_msec+0x624>)
    66e6:	4a49      	ldr	r2, [pc, #292]	; (680c <_GLOBAL__sub_I_gate_length_msec+0x614>)
    66e8:	601e      	str	r6, [r3, #0]
		{ connect(); }
    66ea:	4618      	mov	r0, r3
		next_dest(NULL)
    66ec:	605a      	str	r2, [r3, #4]
    66ee:	721c      	strb	r4, [r3, #8]
    66f0:	725c      	strb	r4, [r3, #9]
    66f2:	60dc      	str	r4, [r3, #12]
		{ connect(); }
    66f4:	f003 f930 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    66f8:	4b49      	ldr	r3, [pc, #292]	; (6820 <_GLOBAL__sub_I_gate_length_msec+0x628>)
    66fa:	4a47      	ldr	r2, [pc, #284]	; (6818 <_GLOBAL__sub_I_gate_length_msec+0x620>)
    66fc:	4e43      	ldr	r6, [pc, #268]	; (680c <_GLOBAL__sub_I_gate_length_msec+0x614>)
    66fe:	605a      	str	r2, [r3, #4]
		{ connect(); }
    6700:	4618      	mov	r0, r3
		next_dest(NULL)
    6702:	601e      	str	r6, [r3, #0]
    6704:	721c      	strb	r4, [r3, #8]
    6706:	725c      	strb	r4, [r3, #9]
    6708:	60dc      	str	r4, [r3, #12]
		{ connect(); }
    670a:	f003 f925 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    670e:	4b45      	ldr	r3, [pc, #276]	; (6824 <_GLOBAL__sub_I_gate_length_msec+0x62c>)
    6710:	4e3f      	ldr	r6, [pc, #252]	; (6810 <_GLOBAL__sub_I_gate_length_msec+0x618>)
    6712:	721c      	strb	r4, [r3, #8]
		{ connect(); }
    6714:	4618      	mov	r0, r3
		next_dest(NULL)
    6716:	e883 0240 	stmia.w	r3, {r6, r9}
    671a:	725d      	strb	r5, [r3, #9]
    671c:	60dc      	str	r4, [r3, #12]
		{ connect(); }
    671e:	f003 f91b 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    6722:	4b41      	ldr	r3, [pc, #260]	; (6828 <_GLOBAL__sub_I_gate_length_msec+0x630>)
    6724:	4a3b      	ldr	r2, [pc, #236]	; (6814 <_GLOBAL__sub_I_gate_length_msec+0x61c>)
    6726:	721d      	strb	r5, [r3, #8]
		{ connect(); }
    6728:	4618      	mov	r0, r3
		next_dest(NULL)
    672a:	e883 0204 	stmia.w	r3, {r2, r9}
    672e:	725c      	strb	r4, [r3, #9]
    6730:	60dc      	str	r4, [r3, #12]
		{ connect(); }
    6732:	f003 f911 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    6736:	4b3d      	ldr	r3, [pc, #244]	; (682c <_GLOBAL__sub_I_gate_length_msec+0x634>)
    6738:	4a3d      	ldr	r2, [pc, #244]	; (6830 <_GLOBAL__sub_I_gate_length_msec+0x638>)
    673a:	605a      	str	r2, [r3, #4]
    673c:	2603      	movs	r6, #3
		{ connect(); }
    673e:	4618      	mov	r0, r3
		next_dest(NULL)
    6740:	f8c3 9000 	str.w	r9, [r3]
    6744:	721c      	strb	r4, [r3, #8]
    6746:	60dc      	str	r4, [r3, #12]
    6748:	725e      	strb	r6, [r3, #9]
		{ connect(); }
    674a:	f003 f905 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    674e:	4b39      	ldr	r3, [pc, #228]	; (6834 <_GLOBAL__sub_I_gate_length_msec+0x63c>)
    6750:	4a2d      	ldr	r2, [pc, #180]	; (6808 <_GLOBAL__sub_I_gate_length_msec+0x610>)
    6752:	601a      	str	r2, [r3, #0]
    6754:	2502      	movs	r5, #2
		{ connect(); }
    6756:	4618      	mov	r0, r3
		next_dest(NULL)
    6758:	4a37      	ldr	r2, [pc, #220]	; (6838 <_GLOBAL__sub_I_gate_length_msec+0x640>)
    675a:	605a      	str	r2, [r3, #4]
    675c:	721c      	strb	r4, [r3, #8]
    675e:	60dc      	str	r4, [r3, #12]
    6760:	725d      	strb	r5, [r3, #9]
		{ connect(); }
    6762:	f003 f8f9 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    6766:	4b35      	ldr	r3, [pc, #212]	; (683c <_GLOBAL__sub_I_gate_length_msec+0x644>)
    6768:	4a33      	ldr	r2, [pc, #204]	; (6838 <_GLOBAL__sub_I_gate_length_msec+0x640>)
    676a:	f8c3 9000 	str.w	r9, [r3]
		{ connect(); }
    676e:	4618      	mov	r0, r3
		next_dest(NULL)
    6770:	605a      	str	r2, [r3, #4]
    6772:	721c      	strb	r4, [r3, #8]
    6774:	725e      	strb	r6, [r3, #9]
    6776:	60dc      	str	r4, [r3, #12]
		{ connect(); }
    6778:	f003 f8ee 	bl	9958 <_ZN15AudioConnection7connectEv>
		next_dest(NULL)
    677c:	4b30      	ldr	r3, [pc, #192]	; (6840 <_GLOBAL__sub_I_gate_length_msec+0x648>)
    677e:	4a25      	ldr	r2, [pc, #148]	; (6814 <_GLOBAL__sub_I_gate_length_msec+0x61c>)
    6780:	4e25      	ldr	r6, [pc, #148]	; (6818 <_GLOBAL__sub_I_gate_length_msec+0x620>)
    6782:	601e      	str	r6, [r3, #0]
		{ connect(); }
    6784:	4618      	mov	r0, r3
		next_dest(NULL)
    6786:	605a      	str	r2, [r3, #4]
    6788:	721d      	strb	r5, [r3, #8]
    678a:	725c      	strb	r4, [r3, #9]
      _threshold = 50;
    678c:	2532      	movs	r5, #50	; 0x32
    678e:	60dc      	str	r4, [r3, #12]
		{ connect(); }
    6790:	f003 f8e2 	bl	9958 <_ZN15AudioConnection7connectEv>
    TouchSensor(int pin) : pin(pin)  {
    6794:	2213      	movs	r2, #19
    6796:	2312      	movs	r3, #18
    6798:	f888 2000 	strb.w	r2, [r8]
    679c:	f888 3058 	strb.w	r3, [r8, #88]	; 0x58
    a.updateBaseline();
    67a0:	4640      	mov	r0, r8
      _cnt = 0;
    67a2:	f8c8 4004 	str.w	r4, [r8, #4]
    67a6:	f8c8 405c 	str.w	r4, [r8, #92]	; 0x5c
      _threshold = 50;
    67aa:	f8c8 5050 	str.w	r5, [r8, #80]	; 0x50
    67ae:	f8c8 50a8 	str.w	r5, [r8, #168]	; 0xa8
    a.updateBaseline();
    67b2:	f7fc fd1b 	bl	31ec <_ZN11TouchSensor14updateBaselineEv>
    b.updateBaseline();
    67b6:	f108 0058 	add.w	r0, r8, #88	; 0x58
    67ba:	f7fc fd17 	bl	31ec <_ZN11TouchSensor14updateBaselineEv>
    TouchSensor(int pin) : pin(pin)  {
    67be:	2310      	movs	r3, #16
    a.updateBaseline();
    67c0:	4650      	mov	r0, sl
    TouchSensor(int pin) : pin(pin)  {
    67c2:	f88a 3000 	strb.w	r3, [sl]
    67c6:	f88a 7058 	strb.w	r7, [sl, #88]	; 0x58
      _threshold = 50;
    67ca:	f8ca 5050 	str.w	r5, [sl, #80]	; 0x50
      _cnt = 0;
    67ce:	f8ca 4004 	str.w	r4, [sl, #4]
      _threshold = 50;
    67d2:	f8ca 50a8 	str.w	r5, [sl, #168]	; 0xa8
      _cnt = 0;
    67d6:	f8ca 405c 	str.w	r4, [sl, #92]	; 0x5c
    numTouches = 0;
    67da:	f8c8 40b8 	str.w	r4, [r8, #184]	; 0xb8
    a.updateBaseline();
    67de:	f7fc fd05 	bl	31ec <_ZN11TouchSensor14updateBaselineEv>
    b.updateBaseline();
    67e2:	f10a 0058 	add.w	r0, sl, #88	; 0x58
    67e6:	f7fc fd01 	bl	31ec <_ZN11TouchSensor14updateBaselineEv>
    numTouches = 0;
    67ea:	f8ca 40b8 	str.w	r4, [sl, #184]	; 0xb8
    67ee:	b005      	add	sp, #20
    67f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    67f4:	20001cc0 	.word	0x20001cc0
    67f8:	2000196c 	.word	0x2000196c
    67fc:	20001a04 	.word	0x20001a04
    6800:	200027b8 	.word	0x200027b8
    6804:	000120b0 	.word	0x000120b0
    6808:	20002398 	.word	0x20002398
    680c:	20001bcc 	.word	0x20001bcc
    6810:	20001b58 	.word	0x20001b58
    6814:	200023d4 	.word	0x200023d4
    6818:	20001cec 	.word	0x20001cec
    681c:	20001724 	.word	0x20001724
    6820:	20001738 	.word	0x20001738
    6824:	20001748 	.word	0x20001748
    6828:	20001758 	.word	0x20001758
    682c:	20001d5c 	.word	0x20001d5c
    6830:	20002020 	.word	0x20002020
    6834:	20001830 	.word	0x20001830
    6838:	200016e8 	.word	0x200016e8
    683c:	20001840 	.word	0x20001840
    6840:	2000200c 	.word	0x2000200c
    6844:	20001a7c 	.word	0x20001a7c

00006848 <wait_for_cal>:
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    6848:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    684c:	4a3a      	ldr	r2, [pc, #232]	; (6938 <wait_for_cal+0xf0>)
    684e:	493b      	ldr	r1, [pc, #236]	; (693c <wait_for_cal+0xf4>)
    6850:	6813      	ldr	r3, [r2, #0]
    6852:	061b      	lsls	r3, r3, #24
    6854:	d4fc      	bmi.n	6850 <wait_for_cal+0x8>
    6856:	680b      	ldr	r3, [r1, #0]
    6858:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    685c:	d1f8      	bne.n	6850 <wait_for_cal+0x8>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    685e:	b672      	cpsid	i
	if (calibrating) {
    6860:	4a37      	ldr	r2, [pc, #220]	; (6940 <wait_for_cal+0xf8>)
    6862:	7811      	ldrb	r1, [r2, #0]
    6864:	2900      	cmp	r1, #0
    6866:	d063      	beq.n	6930 <wait_for_cal+0xe8>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    6868:	4836      	ldr	r0, [pc, #216]	; (6944 <wait_for_cal+0xfc>)
    686a:	4c37      	ldr	r4, [pc, #220]	; (6948 <wait_for_cal+0x100>)
    686c:	4937      	ldr	r1, [pc, #220]	; (694c <wait_for_cal+0x104>)
    686e:	f8d4 a000 	ldr.w	sl, [r4]
    6872:	f8d0 b000 	ldr.w	fp, [r0]
    6876:	f8d1 9000 	ldr.w	r9, [r1]
    687a:	f8d4 800c 	ldr.w	r8, [r4, #12]
    687e:	f8d0 c00c 	ldr.w	ip, [r0, #12]
    6882:	68cf      	ldr	r7, [r1, #12]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    6884:	4e32      	ldr	r6, [pc, #200]	; (6950 <wait_for_cal+0x108>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    6886:	4d33      	ldr	r5, [pc, #204]	; (6954 <wait_for_cal+0x10c>)
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    6888:	44da      	add	sl, fp
    688a:	44d1      	add	r9, sl
    688c:	44c8      	add	r8, r9
    688e:	44c4      	add	ip, r8
    6890:	4467      	add	r7, ip
		sum = (sum / 2) | 0x8000;
    6892:	f3c7 074e 	ubfx	r7, r7, #1, #15
		ADC0_PG = sum;
    6896:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
    689a:	6037      	str	r7, [r6, #0]
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    689c:	f8d5 a000 	ldr.w	sl, [r5]
    68a0:	f8d0 b020 	ldr.w	fp, [r0, #32]
    68a4:	f8d1 9020 	ldr.w	r9, [r1, #32]
    68a8:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
    68ac:	f8d0 c02c 	ldr.w	ip, [r0, #44]	; 0x2c
    68b0:	6acf      	ldr	r7, [r1, #44]	; 0x2c
    68b2:	44da      	add	sl, fp
    68b4:	44d1      	add	r9, sl
    68b6:	44c8      	add	r8, r9
    68b8:	44c4      	add	ip, r8
    68ba:	4467      	add	r7, ip
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    68bc:	f505 25ff 	add.w	r5, r5, #522240	; 0x7f800
		sum = (sum / 2) | 0x8000;
    68c0:	f3c7 074e 	ubfx	r7, r7, #1, #15
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    68c4:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
    68c8:	f505 65fc 	add.w	r5, r5, #2016	; 0x7e0
		ADC0_MG = sum;
    68cc:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
    68d0:	6077      	str	r7, [r6, #4]
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    68d2:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    68d6:	340c      	adds	r4, #12
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    68d8:	f8d5 a000 	ldr.w	sl, [r5]
    68dc:	f8d0 b000 	ldr.w	fp, [r0]
    68e0:	f8d1 9000 	ldr.w	r9, [r1]
    68e4:	f504 2400 	add.w	r4, r4, #524288	; 0x80000
    68e8:	44da      	add	sl, fp
    68ea:	f8d4 8000 	ldr.w	r8, [r4]
    68ee:	f8d0 c00c 	ldr.w	ip, [r0, #12]
    68f2:	68cf      	ldr	r7, [r1, #12]
    68f4:	44d1      	add	r9, sl
    68f6:	44c8      	add	r8, r9
    68f8:	44c4      	add	ip, r8
    68fa:	4467      	add	r7, ip
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    68fc:	f506 2600 	add.w	r6, r6, #524288	; 0x80000
		sum = (sum / 2) | 0x8000;
    6900:	f3c7 074e 	ubfx	r7, r7, #1, #15
		ADC1_PG = sum;
    6904:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
    6908:	6037      	str	r7, [r6, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    690a:	6a2f      	ldr	r7, [r5, #32]
    690c:	f8d0 c020 	ldr.w	ip, [r0, #32]
    6910:	6a0e      	ldr	r6, [r1, #32]
    6912:	6a25      	ldr	r5, [r4, #32]
    6914:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    6916:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    6918:	4467      	add	r7, ip
    691a:	443e      	add	r6, r7
    691c:	4435      	add	r5, r6
    691e:	442c      	add	r4, r5
    6920:	4420      	add	r0, r4
		sum = (sum / 2) | 0x8000;
    6922:	f3c0 004e 	ubfx	r0, r0, #1, #15
		ADC1_MG = sum;
    6926:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    692a:	f841 0c10 	str.w	r0, [r1, #-16]
#endif
		calibrating = 0;
    692e:	7013      	strb	r3, [r2, #0]
	}
	__enable_irq();
    6930:	b662      	cpsie	i
}
    6932:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    6936:	4770      	bx	lr
    6938:	4003b024 	.word	0x4003b024
    693c:	400bb024 	.word	0x400bb024
    6940:	20002412 	.word	0x20002412
    6944:	4003b03c 	.word	0x4003b03c
    6948:	4003b038 	.word	0x4003b038
    694c:	4003b040 	.word	0x4003b040
    6950:	4003b02c 	.word	0x4003b02c
    6954:	4003b058 	.word	0x4003b058

00006958 <analog_init>:
{
    6958:	b430      	push	{r4, r5}
	VREF_TRM = 0x60;
    695a:	4829      	ldr	r0, [pc, #164]	; (6a00 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    695c:	4a29      	ldr	r2, [pc, #164]	; (6a04 <analog_init+0xac>)
	if (analog_config_bits == 8) {
    695e:	4b2a      	ldr	r3, [pc, #168]	; (6a08 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    6960:	4d2a      	ldr	r5, [pc, #168]	; (6a0c <analog_init+0xb4>)
	VREF_TRM = 0x60;
    6962:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    6964:	21e1      	movs	r1, #225	; 0xe1
	VREF_TRM = 0x60;
    6966:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    6968:	7011      	strb	r1, [r2, #0]
	if (analog_config_bits == 8) {
    696a:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    696c:	4c28      	ldr	r4, [pc, #160]	; (6a10 <analog_init+0xb8>)
	if (analog_config_bits == 8) {
    696e:	2b08      	cmp	r3, #8
    6970:	d030      	beq.n	69d4 <analog_init+0x7c>
	} else if (analog_config_bits == 10) {
    6972:	2b0a      	cmp	r3, #10
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    6974:	4827      	ldr	r0, [pc, #156]	; (6a14 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    6976:	4928      	ldr	r1, [pc, #160]	; (6a18 <analog_init+0xc0>)
	} else if (analog_config_bits == 10) {
    6978:	d037      	beq.n	69ea <analog_init+0x92>
	} else if (analog_config_bits == 12) {
    697a:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    697c:	bf0c      	ite	eq
    697e:	2215      	moveq	r2, #21
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    6980:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    6982:	2312      	movs	r3, #18
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    6984:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    6986:	6023      	str	r3, [r4, #0]
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    6988:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    698a:	600b      	str	r3, [r1, #0]
	if (analog_reference_internal) {
    698c:	4b23      	ldr	r3, [pc, #140]	; (6a1c <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    698e:	4924      	ldr	r1, [pc, #144]	; (6a20 <analog_init+0xc8>)
	if (analog_reference_internal) {
    6990:	781b      	ldrb	r3, [r3, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    6992:	4a24      	ldr	r2, [pc, #144]	; (6a24 <analog_init+0xcc>)
	if (analog_reference_internal) {
    6994:	b1bb      	cbz	r3, 69c6 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    6996:	2301      	movs	r3, #1
    6998:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    699a:	6013      	str	r3, [r2, #0]
	num = analog_num_average;
    699c:	4b22      	ldr	r3, [pc, #136]	; (6a28 <analog_init+0xd0>)
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    699e:	4923      	ldr	r1, [pc, #140]	; (6a2c <analog_init+0xd4>)
	num = analog_num_average;
    69a0:	781b      	ldrb	r3, [r3, #0]
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    69a2:	4a23      	ldr	r2, [pc, #140]	; (6a30 <analog_init+0xd8>)
	if (num <= 1) {
    69a4:	2b01      	cmp	r3, #1
    69a6:	d926      	bls.n	69f6 <analog_init+0x9e>
	} else if (num <= 4) {
    69a8:	2b04      	cmp	r3, #4
    69aa:	d90f      	bls.n	69cc <analog_init+0x74>
	} else if (num <= 8) {
    69ac:	2b08      	cmp	r3, #8
    69ae:	d91e      	bls.n	69ee <analog_init+0x96>
	} else if (num <= 16) {
    69b0:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    69b2:	bf94      	ite	ls
    69b4:	2386      	movls	r3, #134	; 0x86
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    69b6:	2387      	movhi	r3, #135	; 0x87
    69b8:	600b      	str	r3, [r1, #0]
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    69ba:	6013      	str	r3, [r2, #0]
	calibrating = 1;
    69bc:	4b1d      	ldr	r3, [pc, #116]	; (6a34 <analog_init+0xdc>)
    69be:	2201      	movs	r2, #1
    69c0:	701a      	strb	r2, [r3, #0]
}
    69c2:	bc30      	pop	{r4, r5}
    69c4:	4770      	bx	lr
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    69c6:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    69c8:	6013      	str	r3, [r2, #0]
    69ca:	e7e7      	b.n	699c <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    69cc:	2384      	movs	r3, #132	; 0x84
    69ce:	600b      	str	r3, [r1, #0]
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    69d0:	6013      	str	r3, [r2, #0]
    69d2:	e7f3      	b.n	69bc <analog_init+0x64>
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    69d4:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    69d8:	490f      	ldr	r1, [pc, #60]	; (6a18 <analog_init+0xc0>)
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    69da:	3008      	adds	r0, #8
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    69dc:	2201      	movs	r2, #1
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    69de:	2313      	movs	r3, #19
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    69e0:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    69e2:	6023      	str	r3, [r4, #0]
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    69e4:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    69e6:	600b      	str	r3, [r1, #0]
    69e8:	e7d0      	b.n	698c <analog_init+0x34>
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    69ea:	2219      	movs	r2, #25
    69ec:	e7f7      	b.n	69de <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    69ee:	2385      	movs	r3, #133	; 0x85
    69f0:	600b      	str	r3, [r1, #0]
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    69f2:	6013      	str	r3, [r2, #0]
    69f4:	e7e2      	b.n	69bc <analog_init+0x64>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    69f6:	2380      	movs	r3, #128	; 0x80
    69f8:	600b      	str	r3, [r1, #0]
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    69fa:	6013      	str	r3, [r2, #0]
    69fc:	e7de      	b.n	69bc <analog_init+0x64>
    69fe:	bf00      	nop
    6a00:	40074000 	.word	0x40074000
    6a04:	40074001 	.word	0x40074001
    6a08:	20000cd8 	.word	0x20000cd8
    6a0c:	4003b008 	.word	0x4003b008
    6a10:	4003b00c 	.word	0x4003b00c
    6a14:	400bb008 	.word	0x400bb008
    6a18:	400bb00c 	.word	0x400bb00c
    6a1c:	20002415 	.word	0x20002415
    6a20:	4003b020 	.word	0x4003b020
    6a24:	400bb020 	.word	0x400bb020
    6a28:	20000cd9 	.word	0x20000cd9
    6a2c:	4003b024 	.word	0x4003b024
    6a30:	400bb024 	.word	0x400bb024
    6a34:	20002412 	.word	0x20002412

00006a38 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    6a38:	2828      	cmp	r0, #40	; 0x28
{
    6a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (pin >= sizeof(pin2sc1a)) return 0;
    6a3e:	d82b      	bhi.n	6a98 <analogRead+0x60>
	channel = pin2sc1a[pin];
    6a40:	4b2f      	ldr	r3, [pc, #188]	; (6b00 <analogRead+0xc8>)
    6a42:	5c1e      	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    6a44:	2eff      	cmp	r6, #255	; 0xff
    6a46:	d027      	beq.n	6a98 <analogRead+0x60>

	if (calibrating) wait_for_cal();
    6a48:	4b2e      	ldr	r3, [pc, #184]	; (6b04 <analogRead+0xcc>)
    6a4a:	781b      	ldrb	r3, [r3, #0]
    6a4c:	bb3b      	cbnz	r3, 6a9e <analogRead+0x66>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    6a4e:	0632      	lsls	r2, r6, #24
    6a50:	d429      	bmi.n	6aa6 <analogRead+0x6e>
#endif

	__disable_irq();
    6a52:	b672      	cpsid	i
    6a54:	4d2c      	ldr	r5, [pc, #176]	; (6b08 <analogRead+0xd0>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    6a56:	4c2d      	ldr	r4, [pc, #180]	; (6b0c <analogRead+0xd4>)
	analogReadBusyADC0 = 1;
    6a58:	462f      	mov	r7, r5
    6a5a:	2301      	movs	r3, #1
	ADC0_SC1A = channel;
    6a5c:	6026      	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    6a5e:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    6a60:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    6a62:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    6a64:	6823      	ldr	r3, [r4, #0]
    6a66:	061b      	lsls	r3, r3, #24
    6a68:	d40c      	bmi.n	6a84 <analogRead+0x4c>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    6a6a:	783b      	ldrb	r3, [r7, #0]
    6a6c:	b91b      	cbnz	r3, 6a76 <analogRead+0x3e>
    6a6e:	e7f4      	b.n	6a5a <analogRead+0x22>
    6a70:	782b      	ldrb	r3, [r5, #0]
    6a72:	2b00      	cmp	r3, #0
    6a74:	d0f1      	beq.n	6a5a <analogRead+0x22>
		__enable_irq();
    6a76:	b662      	cpsie	i
		yield();
    6a78:	f003 fb72 	bl	a160 <yield>
		__disable_irq();
    6a7c:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    6a7e:	6823      	ldr	r3, [r4, #0]
    6a80:	0618      	lsls	r0, r3, #24
    6a82:	d5f5      	bpl.n	6a70 <analogRead+0x38>
			result = ADC0_RA;
    6a84:	4a22      	ldr	r2, [pc, #136]	; (6b10 <analogRead+0xd8>)
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
			analogReadBusyADC1 = 0;
    6a86:	2300      	movs	r3, #0
			result = ADC1_RA;
    6a88:	6810      	ldr	r0, [r2, #0]
			analogReadBusyADC1 = 0;
    6a8a:	702b      	strb	r3, [r5, #0]
			__enable_irq();
    6a8c:	b662      	cpsie	i
			result >>= analog_right_shift;
    6a8e:	4b21      	ldr	r3, [pc, #132]	; (6b14 <analogRead+0xdc>)
    6a90:	781b      	ldrb	r3, [r3, #0]
    6a92:	4118      	asrs	r0, r3
			return result;
    6a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (pin >= sizeof(pin2sc1a)) return 0;
    6a98:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    6a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (calibrating) wait_for_cal();
    6a9e:	f7ff fed3 	bl	6848 <wait_for_cal>
	if (channel & 0x80) goto beginADC1;
    6aa2:	0632      	lsls	r2, r6, #24
    6aa4:	d5d5      	bpl.n	6a52 <analogRead+0x1a>
	__disable_irq();
    6aa6:	b672      	cpsid	i
    6aa8:	4d1b      	ldr	r5, [pc, #108]	; (6b18 <analogRead+0xe0>)
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    6aaa:	4f1c      	ldr	r7, [pc, #112]	; (6b1c <analogRead+0xe4>)
	ADC1_SC1A = channel & 0x3F;
    6aac:	4c1c      	ldr	r4, [pc, #112]	; (6b20 <analogRead+0xe8>)
    6aae:	f006 0840 	and.w	r8, r6, #64	; 0x40
    6ab2:	fa5f f888 	uxtb.w	r8, r8
    6ab6:	f006 063f 	and.w	r6, r6, #63	; 0x3f
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    6aba:	683b      	ldr	r3, [r7, #0]
	if (channel & 0x40) {
    6abc:	f1b8 0f00 	cmp.w	r8, #0
    6ac0:	d01a      	beq.n	6af8 <analogRead+0xc0>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    6ac2:	f023 0310 	bic.w	r3, r3, #16
    6ac6:	603b      	str	r3, [r7, #0]
	analogReadBusyADC1 = 1;
    6ac8:	2301      	movs	r3, #1
	ADC1_SC1A = channel & 0x3F;
    6aca:	6026      	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    6acc:	4a12      	ldr	r2, [pc, #72]	; (6b18 <analogRead+0xe0>)
    6ace:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    6ad0:	b662      	cpsie	i
		__disable_irq();
    6ad2:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    6ad4:	6823      	ldr	r3, [r4, #0]
    6ad6:	0619      	lsls	r1, r3, #24
    6ad8:	d40c      	bmi.n	6af4 <analogRead+0xbc>
		if (!analogReadBusyADC1) goto startADC1;
    6ada:	7813      	ldrb	r3, [r2, #0]
    6adc:	b91b      	cbnz	r3, 6ae6 <analogRead+0xae>
    6ade:	e7ec      	b.n	6aba <analogRead+0x82>
    6ae0:	782b      	ldrb	r3, [r5, #0]
    6ae2:	2b00      	cmp	r3, #0
    6ae4:	d0e9      	beq.n	6aba <analogRead+0x82>
		__enable_irq();
    6ae6:	b662      	cpsie	i
		yield();
    6ae8:	f003 fb3a 	bl	a160 <yield>
		__disable_irq();
    6aec:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    6aee:	6823      	ldr	r3, [r4, #0]
    6af0:	061b      	lsls	r3, r3, #24
    6af2:	d5f5      	bpl.n	6ae0 <analogRead+0xa8>
			result = ADC1_RA;
    6af4:	4a0b      	ldr	r2, [pc, #44]	; (6b24 <analogRead+0xec>)
    6af6:	e7c6      	b.n	6a86 <analogRead+0x4e>
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    6af8:	f043 0310 	orr.w	r3, r3, #16
    6afc:	603b      	str	r3, [r7, #0]
    6afe:	e7e3      	b.n	6ac8 <analogRead+0x90>
    6b00:	00011ae8 	.word	0x00011ae8
    6b04:	20002412 	.word	0x20002412
    6b08:	20002414 	.word	0x20002414
    6b0c:	4003b000 	.word	0x4003b000
    6b10:	4003b010 	.word	0x4003b010
    6b14:	20002411 	.word	0x20002411
    6b18:	20002413 	.word	0x20002413
    6b1c:	400bb00c 	.word	0x400bb00c
    6b20:	400bb000 	.word	0x400bb000
    6b24:	400bb010 	.word	0x400bb010

00006b28 <analogWriteDAC0>:


void analogWriteDAC0(int val)
{
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    6b28:	4b0b      	ldr	r3, [pc, #44]	; (6b58 <analogWriteDAC0+0x30>)
	if (analog_reference_internal) {
    6b2a:	4a0c      	ldr	r2, [pc, #48]	; (6b5c <analogWriteDAC0+0x34>)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    6b2c:	6819      	ldr	r1, [r3, #0]
    6b2e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    6b32:	6019      	str	r1, [r3, #0]
	if (analog_reference_internal) {
    6b34:	7813      	ldrb	r3, [r2, #0]
    6b36:	b13b      	cbz	r3, 6b48 <analogWriteDAC0+0x20>
		DAC0_C0 = DAC_C0_DACEN;  // 1.2V ref is DACREF_1
    6b38:	4b09      	ldr	r3, [pc, #36]	; (6b60 <analogWriteDAC0+0x38>)
    6b3a:	2280      	movs	r2, #128	; 0x80
    6b3c:	701a      	strb	r2, [r3, #0]
	} else {
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
	}
	if (val < 0) val = 0;  // TODO: saturate instruction?
	else if (val > 4095) val = 4095;
	*(int16_t *)&(DAC0_DAT0L) = val;
    6b3e:	4b09      	ldr	r3, [pc, #36]	; (6b64 <analogWriteDAC0+0x3c>)
    6b40:	f380 000c 	usat	r0, #12, r0
    6b44:	8018      	strh	r0, [r3, #0]
    6b46:	4770      	bx	lr
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
    6b48:	4b05      	ldr	r3, [pc, #20]	; (6b60 <analogWriteDAC0+0x38>)
    6b4a:	22c0      	movs	r2, #192	; 0xc0
    6b4c:	701a      	strb	r2, [r3, #0]
	*(int16_t *)&(DAC0_DAT0L) = val;
    6b4e:	4b05      	ldr	r3, [pc, #20]	; (6b64 <analogWriteDAC0+0x3c>)
    6b50:	f380 000c 	usat	r0, #12, r0
    6b54:	8018      	strh	r0, [r3, #0]
    6b56:	4770      	bx	lr
    6b58:	4004802c 	.word	0x4004802c
    6b5c:	20002415 	.word	0x20002415
    6b60:	400cc021 	.word	0x400cc021
    6b64:	400cc000 	.word	0x400cc000

00006b68 <systick_default_isr>:
	systick_millis_count++;
    6b68:	4b02      	ldr	r3, [pc, #8]	; (6b74 <systick_default_isr+0xc>)
    6b6a:	681a      	ldr	r2, [r3, #0]
    6b6c:	3201      	adds	r2, #1
    6b6e:	601a      	str	r2, [r3, #0]
    6b70:	4770      	bx	lr
    6b72:	bf00      	nop
    6b74:	20002418 	.word	0x20002418

00006b78 <fault_isr>:
{
    6b78:	b508      	push	{r3, lr}
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    6b7a:	4c10      	ldr	r4, [pc, #64]	; (6bbc <fault_isr+0x44>)
    6b7c:	e008      	b.n	6b90 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    6b7e:	6823      	ldr	r3, [r4, #0]
    6b80:	0559      	lsls	r1, r3, #21
    6b82:	d40d      	bmi.n	6ba0 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    6b84:	6823      	ldr	r3, [r4, #0]
    6b86:	051a      	lsls	r2, r3, #20
    6b88:	d40f      	bmi.n	6baa <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    6b8a:	6823      	ldr	r3, [r4, #0]
    6b8c:	04db      	lsls	r3, r3, #19
    6b8e:	d411      	bmi.n	6bb4 <fault_isr+0x3c>
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    6b90:	6823      	ldr	r3, [r4, #0]
    6b92:	0358      	lsls	r0, r3, #13
    6b94:	d5f3      	bpl.n	6b7e <fault_isr+0x6>
    6b96:	f001 fe21 	bl	87dc <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    6b9a:	6823      	ldr	r3, [r4, #0]
    6b9c:	0559      	lsls	r1, r3, #21
    6b9e:	d5f1      	bpl.n	6b84 <fault_isr+0xc>
    6ba0:	f000 fdfc 	bl	779c <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    6ba4:	6823      	ldr	r3, [r4, #0]
    6ba6:	051a      	lsls	r2, r3, #20
    6ba8:	d5ef      	bpl.n	6b8a <fault_isr+0x12>
    6baa:	f001 f9a5 	bl	7ef8 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    6bae:	6823      	ldr	r3, [r4, #0]
    6bb0:	04db      	lsls	r3, r3, #19
    6bb2:	d5ed      	bpl.n	6b90 <fault_isr+0x18>
    6bb4:	f001 fc5e 	bl	8474 <uart2_status_isr>
    6bb8:	e7ea      	b.n	6b90 <fault_isr+0x18>
    6bba:	bf00      	nop
    6bbc:	40048034 	.word	0x40048034

00006bc0 <unused_isr>:
{
    6bc0:	b508      	push	{r3, lr}
	fault_isr();
    6bc2:	f7ff ffd9 	bl	6b78 <fault_isr>
    6bc6:	bf00      	nop

00006bc8 <startup_early_hook>:
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    6bc8:	4b01      	ldr	r3, [pc, #4]	; (6bd0 <startup_early_hook+0x8>)
    6bca:	2210      	movs	r2, #16
    6bcc:	801a      	strh	r2, [r3, #0]
    6bce:	4770      	bx	lr
    6bd0:	40052000 	.word	0x40052000

00006bd4 <startup_late_hook>:
static void startup_default_late_hook(void) {}
    6bd4:	4770      	bx	lr
    6bd6:	bf00      	nop

00006bd8 <_sbrk>:
#define STACK_MARGIN  8192
#endif
#endif

void * _sbrk(int incr)
{
    6bd8:	b508      	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    6bda:	4b09      	ldr	r3, [pc, #36]	; (6c00 <_sbrk+0x28>)
    6bdc:	681a      	ldr	r2, [r3, #0]
	if (incr != 0) {
    6bde:	b130      	cbz	r0, 6bee <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    6be0:	4669      	mov	r1, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    6be2:	4410      	add	r0, r2
    6be4:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
    6be8:	4288      	cmp	r0, r1
    6bea:	d202      	bcs.n	6bf2 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    6bec:	6018      	str	r0, [r3, #0]
	}
	return prev;
    6bee:	4610      	mov	r0, r2
}
    6bf0:	bd08      	pop	{r3, pc}
			errno = ENOMEM;
    6bf2:	f006 ff6f 	bl	dad4 <__errno>
    6bf6:	230c      	movs	r3, #12
    6bf8:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    6bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6bfe:	bd08      	pop	{r3, pc}
    6c00:	20000cdc 	.word	0x20000cdc

00006c04 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    6c04:	e7fe      	b.n	6c04 <__cxa_pure_virtual>
    6c06:	bf00      	nop

00006c08 <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    6c08:	7800      	ldrb	r0, [r0, #0]
}
    6c0a:	f1d0 0001 	rsbs	r0, r0, #1
    6c0e:	bf38      	it	cc
    6c10:	2000      	movcc	r0, #0
    6c12:	4770      	bx	lr

00006c14 <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    6c14:	2301      	movs	r3, #1
    6c16:	7003      	strb	r3, [r0, #0]
    6c18:	4770      	bx	lr
    6c1a:	bf00      	nop

00006c1c <nvic_execution_priority>:
	int priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    6c1c:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    6c20:	b970      	cbnz	r0, 6c40 <nvic_execution_priority+0x24>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    6c22:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    6c26:	b96b      	cbnz	r3, 6c44 <nvic_execution_priority+0x28>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    6c28:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    6c2c:	b95a      	cbnz	r2, 6c46 <nvic_execution_priority+0x2a>
	int priority=256;
    6c2e:	f44f 7080 	mov.w	r0, #256	; 0x100
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    6c32:	f3ef 8211 	mrs	r2, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    6c36:	b12a      	cbz	r2, 6c44 <nvic_execution_priority+0x28>
    6c38:	4282      	cmp	r2, r0
    6c3a:	bf38      	it	cc
    6c3c:	4610      	movcc	r0, r2
    6c3e:	4770      	bx	lr
	if (faultmask) return -1;
    6c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return priority;
}
    6c44:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    6c46:	2a0f      	cmp	r2, #15
    6c48:	d801      	bhi.n	6c4e <nvic_execution_priority+0x32>
    6c4a:	4618      	mov	r0, r3
    6c4c:	e7f1      	b.n	6c32 <nvic_execution_priority+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    6c4e:	4b01      	ldr	r3, [pc, #4]	; (6c54 <nvic_execution_priority+0x38>)
    6c50:	5cd0      	ldrb	r0, [r2, r3]
    6c52:	e7ee      	b.n	6c32 <nvic_execution_priority+0x16>
    6c54:	e000e3f0 	.word	0xe000e3f0

00006c58 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    6c58:	b410      	push	{r4}
	unsigned digit;
	int i=0, j;
    6c5a:	2300      	movs	r3, #0
    6c5c:	e000      	b.n	6c60 <ultoa+0x8>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    6c5e:	3301      	adds	r3, #1
		digit = val % radix;
    6c60:	fbb0 f4f2 	udiv	r4, r0, r2
    6c64:	fb02 0014 	mls	r0, r2, r4, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    6c68:	2809      	cmp	r0, #9
    6c6a:	bf94      	ite	ls
    6c6c:	3030      	addls	r0, #48	; 0x30
    6c6e:	3037      	addhi	r0, #55	; 0x37
    6c70:	b2c0      	uxtb	r0, r0
    6c72:	54c8      	strb	r0, [r1, r3]
		if (val == 0) break;
    6c74:	4620      	mov	r0, r4
    6c76:	2c00      	cmp	r4, #0
    6c78:	d1f1      	bne.n	6c5e <ultoa+0x6>
	}
	buf[i + 1] = 0;
    6c7a:	18ca      	adds	r2, r1, r3
    6c7c:	7054      	strb	r4, [r2, #1]
	for (j=0; j < i; j++, i--) {
    6c7e:	b143      	cbz	r3, 6c92 <ultoa+0x3a>
    6c80:	4622      	mov	r2, r4
		t = buf[j];
    6c82:	5c88      	ldrb	r0, [r1, r2]
		buf[j] = buf[i];
    6c84:	5ccc      	ldrb	r4, [r1, r3]
    6c86:	548c      	strb	r4, [r1, r2]
		buf[i] = t;
    6c88:	54c8      	strb	r0, [r1, r3]
	for (j=0; j < i; j++, i--) {
    6c8a:	3201      	adds	r2, #1
    6c8c:	3b01      	subs	r3, #1
    6c8e:	429a      	cmp	r2, r3
    6c90:	dbf7      	blt.n	6c82 <ultoa+0x2a>
	}
	return buf;
}
    6c92:	4608      	mov	r0, r1
    6c94:	f85d 4b04 	ldr.w	r4, [sp], #4
    6c98:	4770      	bx	lr
    6c9a:	bf00      	nop

00006c9c <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    6c9c:	b410      	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    6c9e:	4b11      	ldr	r3, [pc, #68]	; (6ce4 <digitalWrite.part.1+0x48>)
    6ca0:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    6ca4:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    6ca8:	b134      	cbz	r4, 6cb8 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    6caa:	2301      	movs	r3, #1
		if (val) {
    6cac:	b179      	cbz	r1, 6cce <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    6cae:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    6cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
    6cb6:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    6cb8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    6cbc:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    6cbe:	681a      	ldr	r2, [r3, #0]
		if (val) {
    6cc0:	b951      	cbnz	r1, 6cd8 <digitalWrite.part.1+0x3c>
			*config &= ~(PORT_PCR_PE);
    6cc2:	f022 0202 	bic.w	r2, r2, #2
    6cc6:	601a      	str	r2, [r3, #0]
}
    6cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
    6ccc:	4770      	bx	lr
			*portClearRegister(pin) = 1;
    6cce:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    6cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
    6cd6:	4770      	bx	lr
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    6cd8:	f042 0203 	orr.w	r2, r2, #3
    6cdc:	601a      	str	r2, [r3, #0]
}
    6cde:	f85d 4b04 	ldr.w	r4, [sp], #4
    6ce2:	4770      	bx	lr
    6ce4:	00011b14 	.word	0x00011b14

00006ce8 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    6ce8:	4b1c      	ldr	r3, [pc, #112]	; (6d5c <pinMode.part.2+0x74>)
    6cea:	eb03 02c0 	add.w	r2, r3, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    6cee:	2901      	cmp	r1, #1
	config = portConfigRegister(pin);
    6cf0:	6852      	ldr	r2, [r2, #4]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    6cf2:	d011      	beq.n	6d18 <pinMode.part.2+0x30>
    6cf4:	2904      	cmp	r1, #4
    6cf6:	d01b      	beq.n	6d30 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    6cf8:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
    6cfc:	2300      	movs	r3, #0
    6cfe:	f880 3280 	strb.w	r3, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    6d02:	b129      	cbz	r1, 6d10 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    6d04:	2902      	cmp	r1, #2
    6d06:	d020      	beq.n	6d4a <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    6d08:	2903      	cmp	r1, #3
    6d0a:	d022      	beq.n	6d52 <pinMode.part.2+0x6a>
		    *config &= ~PORT_PCR_ODE;
    6d0c:	6013      	str	r3, [r2, #0]
    6d0e:	4770      	bx	lr
			*config = PORT_PCR_MUX(1);
    6d10:	f44f 7380 	mov.w	r3, #256	; 0x100
    6d14:	6013      	str	r3, [r2, #0]
    6d16:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    6d18:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    6d1c:	f44f 73a2 	mov.w	r3, #324	; 0x144
		*portModeRegister(pin) = 1;
    6d20:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    6d24:	6013      	str	r3, [r2, #0]
		    *config &= ~PORT_PCR_ODE;
    6d26:	6813      	ldr	r3, [r2, #0]
    6d28:	f023 0320 	bic.w	r3, r3, #32
    6d2c:	6013      	str	r3, [r2, #0]
    6d2e:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    6d30:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    6d34:	f44f 73a2 	mov.w	r3, #324	; 0x144
		*portModeRegister(pin) = 1;
    6d38:	2001      	movs	r0, #1
    6d3a:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    6d3e:	6013      	str	r3, [r2, #0]
		    *config |= PORT_PCR_ODE;
    6d40:	6813      	ldr	r3, [r2, #0]
    6d42:	f043 0320 	orr.w	r3, r3, #32
    6d46:	6013      	str	r3, [r2, #0]
    6d48:	4770      	bx	lr
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    6d4a:	f240 1303 	movw	r3, #259	; 0x103
    6d4e:	6013      	str	r3, [r2, #0]
    6d50:	4770      	bx	lr
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    6d52:	f44f 7381 	mov.w	r3, #258	; 0x102
    6d56:	6013      	str	r3, [r2, #0]
    6d58:	4770      	bx	lr
    6d5a:	bf00      	nop
    6d5c:	00011b14 	.word	0x00011b14

00006d60 <rtc_set>:
{
    6d60:	b430      	push	{r4, r5}
	RTC_SR = 0;
    6d62:	4b05      	ldr	r3, [pc, #20]	; (6d78 <rtc_set+0x18>)
	RTC_TPR = 0;
    6d64:	4c05      	ldr	r4, [pc, #20]	; (6d7c <rtc_set+0x1c>)
	RTC_TSR = t;
    6d66:	4906      	ldr	r1, [pc, #24]	; (6d80 <rtc_set+0x20>)
	RTC_SR = 0;
    6d68:	2200      	movs	r2, #0
	RTC_SR = RTC_SR_TCE;
    6d6a:	2510      	movs	r5, #16
	RTC_SR = 0;
    6d6c:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    6d6e:	6022      	str	r2, [r4, #0]
	RTC_TSR = t;
    6d70:	6008      	str	r0, [r1, #0]
	RTC_SR = RTC_SR_TCE;
    6d72:	601d      	str	r5, [r3, #0]
}
    6d74:	bc30      	pop	{r4, r5}
    6d76:	4770      	bx	lr
    6d78:	4003d014 	.word	0x4003d014
    6d7c:	4003d004 	.word	0x4003d004
    6d80:	4003d000 	.word	0x4003d000

00006d84 <analogWrite>:
{
    6d84:	b538      	push	{r3, r4, r5, lr}
		uint8_t res = analog_write_res;
    6d86:	4b61      	ldr	r3, [pc, #388]	; (6f0c <analogWrite+0x188>)
	if (pin == A14) {
    6d88:	2828      	cmp	r0, #40	; 0x28
{
    6d8a:	4604      	mov	r4, r0
		uint8_t res = analog_write_res;
    6d8c:	781b      	ldrb	r3, [r3, #0]
	if (pin == A14) {
    6d8e:	d02b      	beq.n	6de8 <analogWrite+0x64>
	if (val <= 0) {
    6d90:	2900      	cmp	r1, #0
    6d92:	dd4c      	ble.n	6e2e <analogWrite+0xaa>
	max = 1 << analog_write_res;
    6d94:	2501      	movs	r5, #1
    6d96:	fa05 f203 	lsl.w	r2, r5, r3
	} else if (val >= max) {
    6d9a:	428a      	cmp	r2, r1
    6d9c:	d802      	bhi.n	6da4 <analogWrite+0x20>
	if (pin >= CORE_NUM_DIGITAL) return;
    6d9e:	2821      	cmp	r0, #33	; 0x21
    6da0:	d935      	bls.n	6e0e <analogWrite+0x8a>
    6da2:	bd38      	pop	{r3, r4, r5, pc}
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    6da4:	1ec2      	subs	r2, r0, #3
    6da6:	b2d0      	uxtb	r0, r2
    6da8:	2801      	cmp	r0, #1
    6daa:	d939      	bls.n	6e20 <analogWrite+0x9c>
	} else if (pin == FTM2_CH0_PIN || pin == FTM2_CH1_PIN) {
    6dac:	2c20      	cmp	r4, #32
    6dae:	d049      	beq.n	6e44 <analogWrite+0xc0>
    6db0:	2c19      	cmp	r4, #25
    6db2:	d047      	beq.n	6e44 <analogWrite+0xc0>
		cval = ((uint32_t)val * (uint32_t)(FTM0_MOD + 1)) >> analog_write_res;
    6db4:	4856      	ldr	r0, [pc, #344]	; (6f10 <analogWrite+0x18c>)
    6db6:	6800      	ldr	r0, [r0, #0]
    6db8:	fb00 1001 	mla	r0, r0, r1, r1
    6dbc:	fa20 f303 	lsr.w	r3, r0, r3
	switch (pin) {
    6dc0:	2a1d      	cmp	r2, #29
    6dc2:	f200 809a 	bhi.w	6efa <analogWrite+0x176>
    6dc6:	e8df f002 	tbb	[pc, r2]
    6dca:	8a91      	.short	0x8a91
    6dcc:	98987c83 	.word	0x98987c83
    6dd0:	98986e75 	.word	0x98986e75
    6dd4:	98989898 	.word	0x98989898
    6dd8:	67989898 	.word	0x67989898
    6ddc:	98525960 	.word	0x98525960
    6de0:	9898984b 	.word	0x9898984b
    6de4:	44989898 	.word	0x44989898
		if (res < 12) {
    6de8:	2b0b      	cmp	r3, #11
    6dea:	d908      	bls.n	6dfe <analogWrite+0x7a>
		} else if (res > 12) {
    6dec:	2b0c      	cmp	r3, #12
			val >>= res - 12;
    6dee:	bf1c      	itt	ne
    6df0:	3b0c      	subne	r3, #12
    6df2:	4119      	asrne	r1, r3
		analogWriteDAC0(val);
    6df4:	4608      	mov	r0, r1
}
    6df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		analogWriteDAC0(val);
    6dfa:	f7ff be95 	b.w	6b28 <analogWriteDAC0>
			val <<= 12 - res;
    6dfe:	f1c3 030c 	rsb	r3, r3, #12
    6e02:	4099      	lsls	r1, r3
		analogWriteDAC0(val);
    6e04:	4608      	mov	r0, r1
}
    6e06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		analogWriteDAC0(val);
    6e0a:	f7ff be8d 	b.w	6b28 <analogWriteDAC0>
    6e0e:	4629      	mov	r1, r5
    6e10:	f7ff ff44 	bl	6c9c <digitalWrite.part.1>
    6e14:	4620      	mov	r0, r4
    6e16:	4629      	mov	r1, r5
}
    6e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6e1c:	f7ff bf64 	b.w	6ce8 <pinMode.part.2>
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    6e20:	483c      	ldr	r0, [pc, #240]	; (6f14 <analogWrite+0x190>)
    6e22:	6800      	ldr	r0, [r0, #0]
    6e24:	fb00 1001 	mla	r0, r0, r1, r1
    6e28:	fa20 f303 	lsr.w	r3, r0, r3
    6e2c:	e7c8      	b.n	6dc0 <analogWrite+0x3c>
	if (pin >= CORE_NUM_DIGITAL) return;
    6e2e:	2821      	cmp	r0, #33	; 0x21
    6e30:	d8b7      	bhi.n	6da2 <analogWrite+0x1e>
    6e32:	2100      	movs	r1, #0
    6e34:	f7ff ff32 	bl	6c9c <digitalWrite.part.1>
    6e38:	4620      	mov	r0, r4
    6e3a:	2101      	movs	r1, #1
}
    6e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6e40:	f7ff bf52 	b.w	6ce8 <pinMode.part.2>
		cval = ((uint32_t)val * (uint32_t)(FTM2_MOD + 1)) >> analog_write_res;
    6e44:	4834      	ldr	r0, [pc, #208]	; (6f18 <analogWrite+0x194>)
    6e46:	6800      	ldr	r0, [r0, #0]
    6e48:	fb00 1001 	mla	r0, r0, r1, r1
    6e4c:	fa20 f303 	lsr.w	r3, r0, r3
    6e50:	e7b6      	b.n	6dc0 <analogWrite+0x3c>
		FTM2_C0V = cval;
    6e52:	4932      	ldr	r1, [pc, #200]	; (6f1c <analogWrite+0x198>)
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    6e54:	4a32      	ldr	r2, [pc, #200]	; (6f20 <analogWrite+0x19c>)
		FTM2_C0V = cval;
    6e56:	600b      	str	r3, [r1, #0]
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    6e58:	f44f 7351 	mov.w	r3, #836	; 0x344
    6e5c:	6013      	str	r3, [r2, #0]
		break;
    6e5e:	bd38      	pop	{r3, r4, r5, pc}
		FTM2_C1V = cval;
    6e60:	4930      	ldr	r1, [pc, #192]	; (6f24 <analogWrite+0x1a0>)
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    6e62:	4a31      	ldr	r2, [pc, #196]	; (6f28 <analogWrite+0x1a4>)
		FTM2_C1V = cval;
    6e64:	600b      	str	r3, [r1, #0]
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    6e66:	f44f 7351 	mov.w	r3, #836	; 0x344
    6e6a:	6013      	str	r3, [r2, #0]
		break;
    6e6c:	bd38      	pop	{r3, r4, r5, pc}
		FTM0_C1V = cval;
    6e6e:	492f      	ldr	r1, [pc, #188]	; (6f2c <analogWrite+0x1a8>)
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    6e70:	4a2f      	ldr	r2, [pc, #188]	; (6f30 <analogWrite+0x1ac>)
		FTM0_C1V = cval;
    6e72:	600b      	str	r3, [r1, #0]
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    6e74:	f240 4344 	movw	r3, #1092	; 0x444
    6e78:	6013      	str	r3, [r2, #0]
		break;
    6e7a:	bd38      	pop	{r3, r4, r5, pc}
		FTM0_C0V = cval;
    6e7c:	492d      	ldr	r1, [pc, #180]	; (6f34 <analogWrite+0x1b0>)
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    6e7e:	4a2e      	ldr	r2, [pc, #184]	; (6f38 <analogWrite+0x1b4>)
		FTM0_C0V = cval;
    6e80:	600b      	str	r3, [r1, #0]
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    6e82:	f240 4344 	movw	r3, #1092	; 0x444
    6e86:	6013      	str	r3, [r2, #0]
		break;
    6e88:	bd38      	pop	{r3, r4, r5, pc}
		FTM0_C6V = cval;
    6e8a:	492c      	ldr	r1, [pc, #176]	; (6f3c <analogWrite+0x1b8>)
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    6e8c:	4a2c      	ldr	r2, [pc, #176]	; (6f40 <analogWrite+0x1bc>)
		FTM0_C6V = cval;
    6e8e:	600b      	str	r3, [r1, #0]
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    6e90:	f240 4344 	movw	r3, #1092	; 0x444
    6e94:	6013      	str	r3, [r2, #0]
		break;
    6e96:	bd38      	pop	{r3, r4, r5, pc}
		FTM0_C5V = cval;
    6e98:	492a      	ldr	r1, [pc, #168]	; (6f44 <analogWrite+0x1c0>)
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    6e9a:	4a2b      	ldr	r2, [pc, #172]	; (6f48 <analogWrite+0x1c4>)
		FTM0_C5V = cval;
    6e9c:	600b      	str	r3, [r1, #0]
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    6e9e:	f240 4344 	movw	r3, #1092	; 0x444
    6ea2:	6013      	str	r3, [r2, #0]
		break;
    6ea4:	bd38      	pop	{r3, r4, r5, pc}
		FTM0_C3V = cval;
    6ea6:	4929      	ldr	r1, [pc, #164]	; (6f4c <analogWrite+0x1c8>)
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    6ea8:	4a29      	ldr	r2, [pc, #164]	; (6f50 <analogWrite+0x1cc>)
		FTM0_C3V = cval;
    6eaa:	600b      	str	r3, [r1, #0]
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    6eac:	f240 4344 	movw	r3, #1092	; 0x444
    6eb0:	6013      	str	r3, [r2, #0]
		break;
    6eb2:	bd38      	pop	{r3, r4, r5, pc}
		FTM0_C2V = cval;
    6eb4:	4927      	ldr	r1, [pc, #156]	; (6f54 <analogWrite+0x1d0>)
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    6eb6:	4a28      	ldr	r2, [pc, #160]	; (6f58 <analogWrite+0x1d4>)
		FTM0_C2V = cval;
    6eb8:	600b      	str	r3, [r1, #0]
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    6eba:	f240 4344 	movw	r3, #1092	; 0x444
    6ebe:	6013      	str	r3, [r2, #0]
		break;
    6ec0:	bd38      	pop	{r3, r4, r5, pc}
		FTM0_C4V = cval;
    6ec2:	4926      	ldr	r1, [pc, #152]	; (6f5c <analogWrite+0x1d8>)
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    6ec4:	4a26      	ldr	r2, [pc, #152]	; (6f60 <analogWrite+0x1dc>)
		FTM0_C4V = cval;
    6ec6:	600b      	str	r3, [r1, #0]
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    6ec8:	f240 4344 	movw	r3, #1092	; 0x444
    6ecc:	6013      	str	r3, [r2, #0]
		break;
    6ece:	bd38      	pop	{r3, r4, r5, pc}
		FTM0_C7V = cval;
    6ed0:	4924      	ldr	r1, [pc, #144]	; (6f64 <analogWrite+0x1e0>)
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    6ed2:	4a25      	ldr	r2, [pc, #148]	; (6f68 <analogWrite+0x1e4>)
		FTM0_C7V = cval;
    6ed4:	600b      	str	r3, [r1, #0]
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    6ed6:	f240 4344 	movw	r3, #1092	; 0x444
    6eda:	6013      	str	r3, [r2, #0]
		break;
    6edc:	bd38      	pop	{r3, r4, r5, pc}
		FTM1_C1V = cval;
    6ede:	4923      	ldr	r1, [pc, #140]	; (6f6c <analogWrite+0x1e8>)
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    6ee0:	4a23      	ldr	r2, [pc, #140]	; (6f70 <analogWrite+0x1ec>)
		FTM1_C1V = cval;
    6ee2:	600b      	str	r3, [r1, #0]
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    6ee4:	f44f 7351 	mov.w	r3, #836	; 0x344
    6ee8:	6013      	str	r3, [r2, #0]
		break;
    6eea:	bd38      	pop	{r3, r4, r5, pc}
		FTM1_C0V = cval;
    6eec:	4921      	ldr	r1, [pc, #132]	; (6f74 <analogWrite+0x1f0>)
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    6eee:	4a22      	ldr	r2, [pc, #136]	; (6f78 <analogWrite+0x1f4>)
		FTM1_C0V = cval;
    6ef0:	600b      	str	r3, [r1, #0]
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    6ef2:	f44f 7351 	mov.w	r3, #836	; 0x344
    6ef6:	6013      	str	r3, [r2, #0]
		break;
    6ef8:	bd38      	pop	{r3, r4, r5, pc}
	if (pin >= CORE_NUM_DIGITAL) return;
    6efa:	2c21      	cmp	r4, #33	; 0x21
    6efc:	f63f af51 	bhi.w	6da2 <analogWrite+0x1e>
    6f00:	297f      	cmp	r1, #127	; 0x7f
    6f02:	bfd4      	ite	le
    6f04:	2100      	movle	r1, #0
    6f06:	2101      	movgt	r1, #1
    6f08:	4620      	mov	r0, r4
    6f0a:	e793      	b.n	6e34 <analogWrite+0xb0>
    6f0c:	20000ce0 	.word	0x20000ce0
    6f10:	40038008 	.word	0x40038008
    6f14:	40039008 	.word	0x40039008
    6f18:	400b8008 	.word	0x400b8008
    6f1c:	400b8010 	.word	0x400b8010
    6f20:	4004a048 	.word	0x4004a048
    6f24:	400b8018 	.word	0x400b8018
    6f28:	4004a04c 	.word	0x4004a04c
    6f2c:	40038018 	.word	0x40038018
    6f30:	4004b008 	.word	0x4004b008
    6f34:	40038010 	.word	0x40038010
    6f38:	4004b004 	.word	0x4004b004
    6f3c:	40038040 	.word	0x40038040
    6f40:	4004c018 	.word	0x4004c018
    6f44:	40038038 	.word	0x40038038
    6f48:	4004c014 	.word	0x4004c014
    6f4c:	40038028 	.word	0x40038028
    6f50:	4004b010 	.word	0x4004b010
    6f54:	40038020 	.word	0x40038020
    6f58:	4004b00c 	.word	0x4004b00c
    6f5c:	40038030 	.word	0x40038030
    6f60:	4004c010 	.word	0x4004c010
    6f64:	40038048 	.word	0x40038048
    6f68:	4004c01c 	.word	0x4004c01c
    6f6c:	40039018 	.word	0x40039018
    6f70:	40049034 	.word	0x40049034
    6f74:	40039010 	.word	0x40039010
    6f78:	40049030 	.word	0x40049030

00006f7c <digitalWrite>:
    6f7c:	2821      	cmp	r0, #33	; 0x21
    6f7e:	d801      	bhi.n	6f84 <digitalWrite+0x8>
    6f80:	f7ff be8c 	b.w	6c9c <digitalWrite.part.1>
    6f84:	4770      	bx	lr
    6f86:	bf00      	nop

00006f88 <digitalRead>:
	if (pin >= CORE_NUM_DIGITAL) return 0;
    6f88:	2821      	cmp	r0, #33	; 0x21
    6f8a:	d806      	bhi.n	6f9a <digitalRead+0x12>
	return *portInputRegister(pin);
    6f8c:	4b04      	ldr	r3, [pc, #16]	; (6fa0 <digitalRead+0x18>)
    6f8e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    6f92:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    6f96:	b2c0      	uxtb	r0, r0
    6f98:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    6f9a:	2000      	movs	r0, #0
}
    6f9c:	4770      	bx	lr
    6f9e:	bf00      	nop
    6fa0:	00011b14 	.word	0x00011b14

00006fa4 <pinMode>:
	if (pin >= CORE_NUM_DIGITAL) return;
    6fa4:	2821      	cmp	r0, #33	; 0x21
    6fa6:	d801      	bhi.n	6fac <pinMode+0x8>
    6fa8:	f7ff be9e 	b.w	6ce8 <pinMode.part.2>
    6fac:	4770      	bx	lr
    6fae:	bf00      	nop

00006fb0 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    6fb0:	b672      	cpsid	i
	current = SYST_CVR;
    6fb2:	4b0c      	ldr	r3, [pc, #48]	; (6fe4 <micros+0x34>)
	count = systick_millis_count;
    6fb4:	4a0c      	ldr	r2, [pc, #48]	; (6fe8 <micros+0x38>)
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    6fb6:	490d      	ldr	r1, [pc, #52]	; (6fec <micros+0x3c>)
	current = SYST_CVR;
    6fb8:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    6fba:	6812      	ldr	r2, [r2, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    6fbc:	6809      	ldr	r1, [r1, #0]
	__enable_irq();
    6fbe:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    6fc0:	0149      	lsls	r1, r1, #5
    6fc2:	d502      	bpl.n	6fca <micros+0x1a>
    6fc4:	2b32      	cmp	r3, #50	; 0x32
    6fc6:	bf88      	it	hi
    6fc8:	3201      	addhi	r2, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    6fca:	4909      	ldr	r1, [pc, #36]	; (6ff0 <micros+0x40>)
	current = ((F_CPU / 1000) - 1) - current;
    6fcc:	f5c3 338c 	rsb	r3, r3, #71680	; 0x11800
    6fd0:	f203 133f 	addw	r3, r3, #319	; 0x13f
	return count * 1000 + current / (F_CPU / 1000000);
    6fd4:	fba1 0303 	umull	r0, r3, r1, r3
    6fd8:	091b      	lsrs	r3, r3, #4
    6fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
    6fde:	fb00 3002 	mla	r0, r0, r2, r3
    6fe2:	4770      	bx	lr
    6fe4:	e000e018 	.word	0xe000e018
    6fe8:	20002418 	.word	0x20002418
    6fec:	e000ed04 	.word	0xe000ed04
    6ff0:	38e38e39 	.word	0x38e38e39

00006ff4 <delay>:

void delay(uint32_t ms)
{
    6ff4:	b538      	push	{r3, r4, r5, lr}
    6ff6:	4605      	mov	r5, r0
	uint32_t start = micros();
    6ff8:	f7ff ffda 	bl	6fb0 <micros>
    6ffc:	4604      	mov	r4, r0

	if (ms > 0) {
    6ffe:	b19d      	cbz	r5, 7028 <delay+0x34>
		while (1) {
			while ((micros() - start) >= 1000) {
    7000:	f7ff ffd6 	bl	6fb0 <micros>
    7004:	1b00      	subs	r0, r0, r4
    7006:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    700a:	d309      	bcc.n	7020 <delay+0x2c>
				ms--;
				if (ms == 0) return;
    700c:	3d01      	subs	r5, #1
    700e:	d00a      	beq.n	7026 <delay+0x32>
			while ((micros() - start) >= 1000) {
    7010:	f7ff ffce 	bl	6fb0 <micros>
				start += 1000;
    7014:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
			while ((micros() - start) >= 1000) {
    7018:	1b00      	subs	r0, r0, r4
    701a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    701e:	d2f5      	bcs.n	700c <delay+0x18>
			}
			yield();
    7020:	f003 f89e 	bl	a160 <yield>
		}
    7024:	e7ec      	b.n	7000 <delay+0xc>
    7026:	bd38      	pop	{r3, r4, r5, pc}
    7028:	bd38      	pop	{r3, r4, r5, pc}
    702a:	bf00      	nop

0000702c <_init_Teensyduino_internal_>:
{
    702c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    7030:	4b36      	ldr	r3, [pc, #216]	; (710c <_init_Teensyduino_internal_+0xe0>)
	FTM0_CNT = 0;
    7032:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 712c <_init_Teensyduino_internal_+0x100>
	FTM0_MOD = DEFAULT_FTM_MOD;
    7036:	4a36      	ldr	r2, [pc, #216]	; (7110 <_init_Teensyduino_internal_+0xe4>)
	FTM0_C2SC = 0x28;
    7038:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 7130 <_init_Teensyduino_internal_+0x104>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    703c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 7134 <_init_Teensyduino_internal_+0x108>
	FTM0_C1SC = 0x28;
    7040:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 7138 <_init_Teensyduino_internal_+0x10c>
	FTM0_C3SC = 0x28;
    7044:	4f33      	ldr	r7, [pc, #204]	; (7114 <_init_Teensyduino_internal_+0xe8>)
	FTM0_C4SC = 0x28;
    7046:	4e34      	ldr	r6, [pc, #208]	; (7118 <_init_Teensyduino_internal_+0xec>)
	FTM0_C5SC = 0x28;
    7048:	4d34      	ldr	r5, [pc, #208]	; (711c <_init_Teensyduino_internal_+0xf0>)
	FTM0_C6SC = 0x28;
    704a:	4c35      	ldr	r4, [pc, #212]	; (7120 <_init_Teensyduino_internal_+0xf4>)
	FTM0_C7SC = 0x28;
    704c:	4835      	ldr	r0, [pc, #212]	; (7124 <_init_Teensyduino_internal_+0xf8>)
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    704e:	4936      	ldr	r1, [pc, #216]	; (7128 <_init_Teensyduino_internal_+0xfc>)
	FTM1_CNT = 0;
    7050:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 713c <_init_Teensyduino_internal_+0x110>
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    7054:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
    7058:	f8c3 b000 	str.w	fp, [r3]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    705c:	f04f 7b80 	mov.w	fp, #16777216	; 0x1000000
    7060:	f8c3 b000 	str.w	fp, [r3]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    7064:	f04f 7b00 	mov.w	fp, #33554432	; 0x2000000
    7068:	f8c3 b000 	str.w	fp, [r3]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    706c:	f04f 6b80 	mov.w	fp, #67108864	; 0x4000000
    7070:	f8c3 b000 	str.w	fp, [r3]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    7074:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
    7078:	f8c3 b000 	str.w	fp, [r3]
	FTM0_CNT = 0;
    707c:	2300      	movs	r3, #0
    707e:	f8ca 3000 	str.w	r3, [sl]
	FTM0_MOD = DEFAULT_FTM_MOD;
    7082:	f648 7aff 	movw	sl, #36863	; 0x8fff
    7086:	f8c2 a000 	str.w	sl, [r2]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    708a:	2228      	movs	r2, #40	; 0x28
    708c:	f8c8 2000 	str.w	r2, [r8]
	FTM0_C1SC = 0x28;
    7090:	f8cc 2000 	str.w	r2, [ip]
	FTM0_C2SC = 0x28;
    7094:	f8ce 2000 	str.w	r2, [lr]
	FTM0_C3SC = 0x28;
    7098:	603a      	str	r2, [r7, #0]
	FTM0_C4SC = 0x28;
    709a:	6032      	str	r2, [r6, #0]
	FTM2_CNT = 0;
    709c:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
	FTM0_C5SC = 0x28;
    70a0:	602a      	str	r2, [r5, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    70a2:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_C6SC = 0x28;
    70a6:	6022      	str	r2, [r4, #0]
	FTM2_C0SC = 0x28;
    70a8:	f505 25ff 	add.w	r5, r5, #522240	; 0x7f800
	FTM0_C7SC = 0x28;
    70ac:	6002      	str	r2, [r0, #0]
	FTM2_C1SC = 0x28;
    70ae:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    70b2:	2009      	movs	r0, #9
    70b4:	6008      	str	r0, [r1, #0]
	FTM1_C1SC = 0x28;
    70b6:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
	FTM1_CNT = 0;
    70ba:	f8c9 3000 	str.w	r3, [r9]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    70be:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    70c2:	f8c8 affc 	str.w	sl, [r8, #4092]	; 0xffc
	FTM2_CNT = 0;
    70c6:	f507 67fc 	add.w	r7, r7, #2016	; 0x7e0
	FTM2_MOD = DEFAULT_FTM_MOD;
    70ca:	f206 76dc 	addw	r6, r6, #2012	; 0x7dc
	FTM2_C0SC = 0x28;
    70ce:	f505 65fb 	add.w	r5, r5, #2008	; 0x7d8
	FTM2_C1SC = 0x28;
    70d2:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
	FTM1_MOD = DEFAULT_FTM_MOD;
    70d6:	f608 78fc 	addw	r8, r8, #4092	; 0xffc
	FTM1_C0SC = 0x28;
    70da:	f8c8 2004 	str.w	r2, [r8, #4]
	FTM1_C1SC = 0x28;
    70de:	f8cc 2000 	str.w	r2, [ip]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    70e2:	f8ce 0fe4 	str.w	r0, [lr, #4068]	; 0xfe4
	FTM2_CNT = 0;
    70e6:	603b      	str	r3, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    70e8:	f8c6 a000 	str.w	sl, [r6]
	FTM2_C0SC = 0x28;
    70ec:	602a      	str	r2, [r5, #0]
	FTM2_C1SC = 0x28;
    70ee:	6022      	str	r2, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    70f0:	6008      	str	r0, [r1, #0]
	analog_init();
    70f2:	f7ff fc31 	bl	6958 <analog_init>
	delay(50);
    70f6:	2032      	movs	r0, #50	; 0x32
    70f8:	f7ff ff7c 	bl	6ff4 <delay>
	usb_init();
    70fc:	f001 ff6e 	bl	8fdc <usb_init>
	delay(350);
    7100:	f44f 70af 	mov.w	r0, #350	; 0x15e
}
    7104:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	delay(350);
    7108:	f7ff bf74 	b.w	6ff4 <delay>
    710c:	e000e108 	.word	0xe000e108
    7110:	40038008 	.word	0x40038008
    7114:	40038024 	.word	0x40038024
    7118:	4003802c 	.word	0x4003802c
    711c:	40038034 	.word	0x40038034
    7120:	4003803c 	.word	0x4003803c
    7124:	40038044 	.word	0x40038044
    7128:	40038000 	.word	0x40038000
    712c:	40038004 	.word	0x40038004
    7130:	4003801c 	.word	0x4003801c
    7134:	4003800c 	.word	0x4003800c
    7138:	40038014 	.word	0x40038014
    713c:	40039004 	.word	0x40039004

00007140 <serial_putchar.part.0>:
#else
	return 0;
#endif
}

void serial_putchar(uint32_t c)
    7140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	if (transmit_pin) transmit_assert();
    7144:	4b20      	ldr	r3, [pc, #128]	; (71c8 <serial_putchar.part.0+0x88>)
    7146:	681b      	ldr	r3, [r3, #0]
void serial_putchar(uint32_t c)
    7148:	4683      	mov	fp, r0
	if (transmit_pin) transmit_assert();
    714a:	b10b      	cbz	r3, 7150 <serial_putchar.part.0+0x10>
    714c:	2201      	movs	r2, #1
    714e:	701a      	strb	r2, [r3, #0]
	head = tx_buffer_head;
    7150:	f8df 8088 	ldr.w	r8, [pc, #136]	; 71dc <serial_putchar.part.0+0x9c>
    7154:	4d1d      	ldr	r5, [pc, #116]	; (71cc <serial_putchar.part.0+0x8c>)
    7156:	f898 4000 	ldrb.w	r4, [r8]
    715a:	4f1d      	ldr	r7, [pc, #116]	; (71d0 <serial_putchar.part.0+0x90>)
	if (++head >= SERIAL1_TX_BUFFER_SIZE) head = 0;
	while (tx_buffer_tail == head) {
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART0_S1 & UART_S1_TDRE)) {
    715c:	4e1d      	ldr	r6, [pc, #116]	; (71d4 <serial_putchar.part.0+0x94>)
	if (++head >= SERIAL1_TX_BUFFER_SIZE) head = 0;
    715e:	3401      	adds	r4, #1
    7160:	2c3f      	cmp	r4, #63	; 0x3f
    7162:	bf8a      	itet	hi
    7164:	f04f 0900 	movhi.w	r9, #0
    7168:	fa5f f984 	uxtbls.w	r9, r4
    716c:	464c      	movhi	r4, r9
	while (tx_buffer_tail == head) {
    716e:	46aa      	mov	sl, r5
    7170:	782b      	ldrb	r3, [r5, #0]
    7172:	42a3      	cmp	r3, r4
    7174:	d115      	bne.n	71a2 <serial_putchar.part.0+0x62>
		int priority = nvic_execution_priority();
    7176:	f7ff fd51 	bl	6c1c <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    717a:	2840      	cmp	r0, #64	; 0x40
    717c:	dc1f      	bgt.n	71be <serial_putchar.part.0+0x7e>
			if ((UART0_S1 & UART_S1_TDRE)) {
    717e:	7933      	ldrb	r3, [r6, #4]
    7180:	061b      	lsls	r3, r3, #24
    7182:	d5f5      	bpl.n	7170 <serial_putchar.part.0+0x30>
				uint32_t tail = tx_buffer_tail;
    7184:	f89a 3000 	ldrb.w	r3, [sl]
				if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    7188:	3301      	adds	r3, #1
    718a:	2b3f      	cmp	r3, #63	; 0x3f
    718c:	bf86      	itte	hi
    718e:	2200      	movhi	r2, #0
    7190:	4613      	movhi	r3, r2
    7192:	b2da      	uxtbls	r2, r3
				n = tx_buffer[tail];
    7194:	5cfb      	ldrb	r3, [r7, r3]
    7196:	b2db      	uxtb	r3, r3
				if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART0_D = n;
    7198:	71f3      	strb	r3, [r6, #7]
				tx_buffer_tail = tail;
    719a:	702a      	strb	r2, [r5, #0]
	while (tx_buffer_tail == head) {
    719c:	782b      	ldrb	r3, [r5, #0]
    719e:	42a3      	cmp	r3, r4
    71a0:	d0e9      	beq.n	7176 <serial_putchar.part.0+0x36>
		} else if (priority >= 256) {
			yield();
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
    71a2:	490d      	ldr	r1, [pc, #52]	; (71d8 <serial_putchar.part.0+0x98>)
	tx_buffer_head = head;
	UART0_C2 = C2_TX_ACTIVE;
    71a4:	4b0b      	ldr	r3, [pc, #44]	; (71d4 <serial_putchar.part.0+0x94>)
	tx_buffer[head] = c;
    71a6:	fa5f fb8b 	uxtb.w	fp, fp
    71aa:	f807 b004 	strb.w	fp, [r7, r4]
	transmitting = 1;
    71ae:	2001      	movs	r0, #1
	UART0_C2 = C2_TX_ACTIVE;
    71b0:	22bc      	movs	r2, #188	; 0xbc
	transmitting = 1;
    71b2:	7008      	strb	r0, [r1, #0]
	tx_buffer_head = head;
    71b4:	f888 9000 	strb.w	r9, [r8]
	UART0_C2 = C2_TX_ACTIVE;
    71b8:	70da      	strb	r2, [r3, #3]
    71ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (priority >= 256) {
    71be:	28ff      	cmp	r0, #255	; 0xff
    71c0:	ddd6      	ble.n	7170 <serial_putchar.part.0+0x30>
			yield();
    71c2:	f002 ffcd 	bl	a160 <yield>
    71c6:	e7d3      	b.n	7170 <serial_putchar.part.0+0x30>
    71c8:	200024ac 	.word	0x200024ac
    71cc:	200024a9 	.word	0x200024a9
    71d0:	20002424 	.word	0x20002424
    71d4:	4006a000 	.word	0x4006a000
    71d8:	200024a8 	.word	0x200024a8
    71dc:	200024b0 	.word	0x200024b0

000071e0 <serial_begin>:
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    71e0:	4b2c      	ldr	r3, [pc, #176]	; (7294 <serial_begin+0xb4>)
	switch (rx_pin_num) {
    71e2:	4a2d      	ldr	r2, [pc, #180]	; (7298 <serial_begin+0xb8>)
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    71e4:	f8d3 c000 	ldr.w	ip, [r3]
	transmitting = 0;
    71e8:	492c      	ldr	r1, [pc, #176]	; (729c <serial_begin+0xbc>)
{
    71ea:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    71ee:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
    71f2:	f8c3 c000 	str.w	ip, [r3]
	rx_buffer_head = 0;
    71f6:	4f2a      	ldr	r7, [pc, #168]	; (72a0 <serial_begin+0xc0>)
	rx_buffer_tail = 0;
    71f8:	4e2a      	ldr	r6, [pc, #168]	; (72a4 <serial_begin+0xc4>)
	tx_buffer_head = 0;
    71fa:	4d2b      	ldr	r5, [pc, #172]	; (72a8 <serial_begin+0xc8>)
	tx_buffer_tail = 0;
    71fc:	4c2b      	ldr	r4, [pc, #172]	; (72ac <serial_begin+0xcc>)
	switch (rx_pin_num) {
    71fe:	7812      	ldrb	r2, [r2, #0]
	rx_buffer_head = 0;
    7200:	2300      	movs	r3, #0
    7202:	703b      	strb	r3, [r7, #0]
	rx_buffer_tail = 0;
    7204:	7033      	strb	r3, [r6, #0]
	tx_buffer_head = 0;
    7206:	702b      	strb	r3, [r5, #0]
	tx_buffer_tail = 0;
    7208:	7023      	strb	r3, [r4, #0]
	transmitting = 0;
    720a:	700b      	strb	r3, [r1, #0]
	switch (rx_pin_num) {
    720c:	2a00      	cmp	r2, #0
    720e:	d03b      	beq.n	7288 <serial_begin+0xa8>
    7210:	2a15      	cmp	r2, #21
    7212:	d02c      	beq.n	726e <serial_begin+0x8e>
	switch (tx_pin_num) {
    7214:	4b26      	ldr	r3, [pc, #152]	; (72b0 <serial_begin+0xd0>)
    7216:	781b      	ldrb	r3, [r3, #0]
    7218:	2b01      	cmp	r3, #1
    721a:	d030      	beq.n	727e <serial_begin+0x9e>
    721c:	2b05      	cmp	r3, #5
    721e:	d103      	bne.n	7228 <serial_begin+0x48>
		case 5:  CORE_PIN5_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    7220:	4b24      	ldr	r3, [pc, #144]	; (72b4 <serial_begin+0xd4>)
    7222:	f44f 7251 	mov.w	r2, #836	; 0x344
    7226:	601a      	str	r2, [r3, #0]
	UART0_BDH = (divisor >> 13) & 0x1F;
    7228:	4b23      	ldr	r3, [pc, #140]	; (72b8 <serial_begin+0xd8>)
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    722a:	4d24      	ldr	r5, [pc, #144]	; (72bc <serial_begin+0xdc>)
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    722c:	4924      	ldr	r1, [pc, #144]	; (72c0 <serial_begin+0xe0>)
	UART0_BDH = (divisor >> 13) & 0x1F;
    722e:	f3c0 3a44 	ubfx	sl, r0, #13, #5
	UART0_BDL = (divisor >> 5) & 0xFF;
    7232:	f3c0 1947 	ubfx	r9, r0, #5, #8
	UART0_C1 = UART_C1_ILT;
    7236:	2204      	movs	r2, #4
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    7238:	f04f 0802 	mov.w	r8, #2
	UART0_C2 = C2_TX_INACTIVE;
    723c:	273c      	movs	r7, #60	; 0x3c
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    723e:	2640      	movs	r6, #64	; 0x40
	UART0_C4 = divisor & 0x1F;
    7240:	f000 001f 	and.w	r0, r0, #31
	UART0_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    7244:	f04f 0c88 	mov.w	ip, #136	; 0x88
	UART0_BDH = (divisor >> 13) & 0x1F;
    7248:	f883 a000 	strb.w	sl, [r3]
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    724c:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	UART0_BDL = (divisor >> 5) & 0xFF;
    7250:	f883 9001 	strb.w	r9, [r3, #1]
	UART0_C4 = divisor & 0x1F;
    7254:	7298      	strb	r0, [r3, #10]
	UART0_C1 = UART_C1_ILT;
    7256:	709a      	strb	r2, [r3, #2]
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    7258:	f883 8013 	strb.w	r8, [r3, #19]
	UART0_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    725c:	755a      	strb	r2, [r3, #21]
	UART0_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    725e:	f883 c010 	strb.w	ip, [r3, #16]
	UART0_C2 = C2_TX_INACTIVE;
    7262:	70df      	strb	r7, [r3, #3]
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    7264:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    7266:	600c      	str	r4, [r1, #0]
}
    7268:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    726c:	4770      	bx	lr
		case 21: CORE_PIN21_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    726e:	4b15      	ldr	r3, [pc, #84]	; (72c4 <serial_begin+0xe4>)
    7270:	f240 3213 	movw	r2, #787	; 0x313
    7274:	601a      	str	r2, [r3, #0]
	switch (tx_pin_num) {
    7276:	4b0e      	ldr	r3, [pc, #56]	; (72b0 <serial_begin+0xd0>)
    7278:	781b      	ldrb	r3, [r3, #0]
    727a:	2b01      	cmp	r3, #1
    727c:	d1ce      	bne.n	721c <serial_begin+0x3c>
		case 1:  CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    727e:	4b12      	ldr	r3, [pc, #72]	; (72c8 <serial_begin+0xe8>)
    7280:	f44f 7251 	mov.w	r2, #836	; 0x344
    7284:	601a      	str	r2, [r3, #0]
    7286:	e7cf      	b.n	7228 <serial_begin+0x48>
		case 0:  CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    7288:	4b10      	ldr	r3, [pc, #64]	; (72cc <serial_begin+0xec>)
    728a:	f240 3213 	movw	r2, #787	; 0x313
    728e:	601a      	str	r2, [r3, #0]
    7290:	e7c0      	b.n	7214 <serial_begin+0x34>
    7292:	bf00      	nop
    7294:	40048034 	.word	0x40048034
    7298:	20002464 	.word	0x20002464
    729c:	200024a8 	.word	0x200024a8
    72a0:	20002420 	.word	0x20002420
    72a4:	20002421 	.word	0x20002421
    72a8:	200024b0 	.word	0x200024b0
    72ac:	200024a9 	.word	0x200024a9
    72b0:	20000ce1 	.word	0x20000ce1
    72b4:	4004c01c 	.word	0x4004c01c
    72b8:	4006a000 	.word	0x4006a000
    72bc:	e000e42d 	.word	0xe000e42d
    72c0:	e000e104 	.word	0xe000e104
    72c4:	4004c018 	.word	0x4004c018
    72c8:	4004a044 	.word	0x4004a044
    72cc:	4004a040 	.word	0x4004a040

000072d0 <serial_format>:
	c = UART0_C1;
    72d0:	4b14      	ldr	r3, [pc, #80]	; (7324 <serial_format+0x54>)
    72d2:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    72d4:	f000 0203 	and.w	r2, r0, #3
    72d8:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    72dc:	4313      	orrs	r3, r2
	if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    72de:	f000 010f 	and.w	r1, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    72e2:	0742      	lsls	r2, r0, #29
	UART0_C1 = c;
    72e4:	4a0f      	ldr	r2, [pc, #60]	; (7324 <serial_format+0x54>)
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    72e6:	bf48      	it	mi
    72e8:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    72ec:	2904      	cmp	r1, #4
	UART0_C1 = c;
    72ee:	7093      	strb	r3, [r2, #2]
	if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    72f0:	d013      	beq.n	731a <serial_format+0x4a>
	c = UART0_S2 & ~0x10;
    72f2:	4b0c      	ldr	r3, [pc, #48]	; (7324 <serial_format+0x54>)
    72f4:	795a      	ldrb	r2, [r3, #5]
	UART0_S2 = c;
    72f6:	4b0b      	ldr	r3, [pc, #44]	; (7324 <serial_format+0x54>)
	c = UART0_S2 & ~0x10;
    72f8:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    72fc:	06c1      	lsls	r1, r0, #27
    72fe:	bf48      	it	mi
    7300:	f042 0210 	orrmi.w	r2, r2, #16
	UART0_S2 = c;
    7304:	715a      	strb	r2, [r3, #5]
	c = UART0_C3 & ~0x10;
    7306:	799b      	ldrb	r3, [r3, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    7308:	0682      	lsls	r2, r0, #26
	c = UART0_C3 & ~0x10;
    730a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART0_C3 = c;
    730e:	4a05      	ldr	r2, [pc, #20]	; (7324 <serial_format+0x54>)
	if (format & 0x20) c |= 0x10;		// tx invert
    7310:	bf48      	it	mi
    7312:	f043 0310 	orrmi.w	r3, r3, #16
	UART0_C3 = c;
    7316:	7193      	strb	r3, [r2, #6]
    7318:	4770      	bx	lr
	if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    731a:	7993      	ldrb	r3, [r2, #6]
    731c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7320:	7193      	strb	r3, [r2, #6]
    7322:	e7e6      	b.n	72f2 <serial_format+0x22>
    7324:	4006a000 	.word	0x4006a000

00007328 <serial_end>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    7328:	4b21      	ldr	r3, [pc, #132]	; (73b0 <serial_end+0x88>)
    732a:	681b      	ldr	r3, [r3, #0]
    732c:	055b      	lsls	r3, r3, #21
{
    732e:	b510      	push	{r4, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    7330:	d52d      	bpl.n	738e <serial_end+0x66>
	while (transmitting) yield();  // wait for buffered data to send
    7332:	4c20      	ldr	r4, [pc, #128]	; (73b4 <serial_end+0x8c>)
    7334:	7823      	ldrb	r3, [r4, #0]
    7336:	b123      	cbz	r3, 7342 <serial_end+0x1a>
    7338:	f002 ff12 	bl	a160 <yield>
    733c:	7823      	ldrb	r3, [r4, #0]
    733e:	2b00      	cmp	r3, #0
    7340:	d1fa      	bne.n	7338 <serial_end+0x10>
	NVIC_DISABLE_IRQ(IRQ_UART0_STATUS);
    7342:	481d      	ldr	r0, [pc, #116]	; (73b8 <serial_end+0x90>)
	UART0_C2 = 0;
    7344:	4a1d      	ldr	r2, [pc, #116]	; (73bc <serial_end+0x94>)
	switch (rx_pin_num) {
    7346:	4b1e      	ldr	r3, [pc, #120]	; (73c0 <serial_end+0x98>)
	NVIC_DISABLE_IRQ(IRQ_UART0_STATUS);
    7348:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	UART0_C2 = 0;
    734c:	2100      	movs	r1, #0
	NVIC_DISABLE_IRQ(IRQ_UART0_STATUS);
    734e:	6004      	str	r4, [r0, #0]
	UART0_C2 = 0;
    7350:	70d1      	strb	r1, [r2, #3]
	switch (rx_pin_num) {
    7352:	781b      	ldrb	r3, [r3, #0]
    7354:	b1e3      	cbz	r3, 7390 <serial_end+0x68>
    7356:	2b15      	cmp	r3, #21
    7358:	d103      	bne.n	7362 <serial_end+0x3a>
		case 21: CORE_PIN21_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
    735a:	4b1a      	ldr	r3, [pc, #104]	; (73c4 <serial_end+0x9c>)
    735c:	f240 1203 	movw	r2, #259	; 0x103
    7360:	601a      	str	r2, [r3, #0]
	switch (tx_pin_num & 127) {
    7362:	4b19      	ldr	r3, [pc, #100]	; (73c8 <serial_end+0xa0>)
    7364:	781b      	ldrb	r3, [r3, #0]
    7366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    736a:	2b01      	cmp	r3, #1
    736c:	d01a      	beq.n	73a4 <serial_end+0x7c>
    736e:	2b05      	cmp	r3, #5
    7370:	d103      	bne.n	737a <serial_end+0x52>
		case 5:  CORE_PIN5_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
    7372:	4b16      	ldr	r3, [pc, #88]	; (73cc <serial_end+0xa4>)
    7374:	f240 1203 	movw	r2, #259	; 0x103
    7378:	601a      	str	r2, [r3, #0]
	if (rts_pin) rts_deassert();
    737a:	4b15      	ldr	r3, [pc, #84]	; (73d0 <serial_end+0xa8>)
	rx_buffer_head = 0;
    737c:	4815      	ldr	r0, [pc, #84]	; (73d4 <serial_end+0xac>)
	rx_buffer_tail = 0;
    737e:	4916      	ldr	r1, [pc, #88]	; (73d8 <serial_end+0xb0>)
	if (rts_pin) rts_deassert();
    7380:	681a      	ldr	r2, [r3, #0]
	rx_buffer_head = 0;
    7382:	2300      	movs	r3, #0
    7384:	7003      	strb	r3, [r0, #0]
	rx_buffer_tail = 0;
    7386:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_deassert();
    7388:	b10a      	cbz	r2, 738e <serial_end+0x66>
    738a:	2301      	movs	r3, #1
    738c:	7013      	strb	r3, [r2, #0]
    738e:	bd10      	pop	{r4, pc}
		case 0:  CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
    7390:	4b12      	ldr	r3, [pc, #72]	; (73dc <serial_end+0xb4>)
    7392:	f240 1203 	movw	r2, #259	; 0x103
    7396:	601a      	str	r2, [r3, #0]
	switch (tx_pin_num & 127) {
    7398:	4b0b      	ldr	r3, [pc, #44]	; (73c8 <serial_end+0xa0>)
    739a:	781b      	ldrb	r3, [r3, #0]
    739c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    73a0:	2b01      	cmp	r3, #1
    73a2:	d1e4      	bne.n	736e <serial_end+0x46>
		case 1:  CORE_PIN1_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
    73a4:	4b0e      	ldr	r3, [pc, #56]	; (73e0 <serial_end+0xb8>)
    73a6:	f240 1203 	movw	r2, #259	; 0x103
    73aa:	601a      	str	r2, [r3, #0]
    73ac:	e7e5      	b.n	737a <serial_end+0x52>
    73ae:	bf00      	nop
    73b0:	40048034 	.word	0x40048034
    73b4:	200024a8 	.word	0x200024a8
    73b8:	e000e184 	.word	0xe000e184
    73bc:	4006a000 	.word	0x4006a000
    73c0:	20002464 	.word	0x20002464
    73c4:	4004c018 	.word	0x4004c018
    73c8:	20000ce1 	.word	0x20000ce1
    73cc:	4004c01c 	.word	0x4004c01c
    73d0:	2000241c 	.word	0x2000241c
    73d4:	20002420 	.word	0x20002420
    73d8:	20002421 	.word	0x20002421
    73dc:	4004a040 	.word	0x4004a040
    73e0:	4004a044 	.word	0x4004a044

000073e4 <serial_set_transmit_pin>:
{
    73e4:	4a0a      	ldr	r2, [pc, #40]	; (7410 <serial_set_transmit_pin+0x2c>)
    73e6:	b538      	push	{r3, r4, r5, lr}
    73e8:	4605      	mov	r5, r0
	while (transmitting) ;
    73ea:	7813      	ldrb	r3, [r2, #0]
    73ec:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    73f0:	2b00      	cmp	r3, #0
    73f2:	d1fa      	bne.n	73ea <serial_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    73f4:	4628      	mov	r0, r5
    73f6:	2101      	movs	r1, #1
    73f8:	f7ff fdd4 	bl	6fa4 <pinMode>
	digitalWrite(pin, LOW);
    73fc:	4628      	mov	r0, r5
    73fe:	4621      	mov	r1, r4
    7400:	f7ff fdbc 	bl	6f7c <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    7404:	4a03      	ldr	r2, [pc, #12]	; (7414 <serial_set_transmit_pin+0x30>)
    7406:	4b04      	ldr	r3, [pc, #16]	; (7418 <serial_set_transmit_pin+0x34>)
    7408:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    740c:	601a      	str	r2, [r3, #0]
    740e:	bd38      	pop	{r3, r4, r5, pc}
    7410:	200024a8 	.word	0x200024a8
    7414:	00011b14 	.word	0x00011b14
    7418:	200024ac 	.word	0x200024ac

0000741c <serial_set_tx>:
{
    741c:	b410      	push	{r4}
	if (opendrain) pin |= 128;
    741e:	b109      	cbz	r1, 7424 <serial_set_tx+0x8>
    7420:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    7424:	4b16      	ldr	r3, [pc, #88]	; (7480 <serial_set_tx+0x64>)
    7426:	781a      	ldrb	r2, [r3, #0]
    7428:	4290      	cmp	r0, r2
    742a:	d014      	beq.n	7456 <serial_set_tx+0x3a>
	if ((SIM_SCGC4 & SIM_SCGC4_UART0)) {
    742c:	4c15      	ldr	r4, [pc, #84]	; (7484 <serial_set_tx+0x68>)
    742e:	6824      	ldr	r4, [r4, #0]
    7430:	0564      	lsls	r4, r4, #21
    7432:	d50f      	bpl.n	7454 <serial_set_tx+0x38>
		switch (tx_pin_num & 127) {
    7434:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7438:	2a01      	cmp	r2, #1
    743a:	d01d      	beq.n	7478 <serial_set_tx+0x5c>
    743c:	2a05      	cmp	r2, #5
    743e:	d012      	beq.n	7466 <serial_set_tx+0x4a>
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
    7440:	2900      	cmp	r1, #0
		switch (pin & 127) {
    7442:	f000 027f 	and.w	r2, r0, #127	; 0x7f
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
    7446:	bf0c      	ite	eq
    7448:	2144      	moveq	r1, #68	; 0x44
    744a:	2160      	movne	r1, #96	; 0x60
		switch (pin & 127) {
    744c:	2a01      	cmp	r2, #1
    744e:	d00e      	beq.n	746e <serial_set_tx+0x52>
    7450:	2a05      	cmp	r2, #5
    7452:	d003      	beq.n	745c <serial_set_tx+0x40>
	tx_pin_num = pin;
    7454:	7018      	strb	r0, [r3, #0]
}
    7456:	f85d 4b04 	ldr.w	r4, [sp], #4
    745a:	4770      	bx	lr
			case 5:  CORE_PIN5_CONFIG = cfg | PORT_PCR_MUX(3); break;
    745c:	4a0a      	ldr	r2, [pc, #40]	; (7488 <serial_set_tx+0x6c>)
    745e:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    7462:	6011      	str	r1, [r2, #0]
    7464:	e7f6      	b.n	7454 <serial_set_tx+0x38>
			case 5:  CORE_PIN5_CONFIG = 0; break; // PTD7
    7466:	4a08      	ldr	r2, [pc, #32]	; (7488 <serial_set_tx+0x6c>)
    7468:	2400      	movs	r4, #0
    746a:	6014      	str	r4, [r2, #0]
    746c:	e7e8      	b.n	7440 <serial_set_tx+0x24>
			case 1:  CORE_PIN1_CONFIG = cfg | PORT_PCR_MUX(3); break;
    746e:	4a07      	ldr	r2, [pc, #28]	; (748c <serial_set_tx+0x70>)
    7470:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    7474:	6011      	str	r1, [r2, #0]
    7476:	e7ed      	b.n	7454 <serial_set_tx+0x38>
			case 1:  CORE_PIN1_CONFIG = 0; break; // PTB17
    7478:	4a04      	ldr	r2, [pc, #16]	; (748c <serial_set_tx+0x70>)
    747a:	2400      	movs	r4, #0
    747c:	6014      	str	r4, [r2, #0]
    747e:	e7df      	b.n	7440 <serial_set_tx+0x24>
    7480:	20000ce1 	.word	0x20000ce1
    7484:	40048034 	.word	0x40048034
    7488:	4004c01c 	.word	0x4004c01c
    748c:	4004a044 	.word	0x4004a044

00007490 <serial_set_rx>:
	if (pin == rx_pin_num) return;
    7490:	4b10      	ldr	r3, [pc, #64]	; (74d4 <serial_set_rx+0x44>)
    7492:	781a      	ldrb	r2, [r3, #0]
    7494:	4290      	cmp	r0, r2
    7496:	d00a      	beq.n	74ae <serial_set_rx+0x1e>
	if ((SIM_SCGC4 & SIM_SCGC4_UART0)) {
    7498:	490f      	ldr	r1, [pc, #60]	; (74d8 <serial_set_rx+0x48>)
    749a:	6809      	ldr	r1, [r1, #0]
    749c:	0549      	lsls	r1, r1, #21
    749e:	d505      	bpl.n	74ac <serial_set_rx+0x1c>
		switch (rx_pin_num) {
    74a0:	b1aa      	cbz	r2, 74ce <serial_set_rx+0x3e>
    74a2:	2a15      	cmp	r2, #21
    74a4:	d009      	beq.n	74ba <serial_set_rx+0x2a>
		switch (pin) {
    74a6:	b168      	cbz	r0, 74c4 <serial_set_rx+0x34>
    74a8:	2815      	cmp	r0, #21
    74aa:	d001      	beq.n	74b0 <serial_set_rx+0x20>
	rx_pin_num = pin;
    74ac:	7018      	strb	r0, [r3, #0]
    74ae:	4770      	bx	lr
			case 21: CORE_PIN21_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    74b0:	4a0a      	ldr	r2, [pc, #40]	; (74dc <serial_set_rx+0x4c>)
    74b2:	f240 3113 	movw	r1, #787	; 0x313
    74b6:	6011      	str	r1, [r2, #0]
    74b8:	e7f8      	b.n	74ac <serial_set_rx+0x1c>
			case 21: CORE_PIN21_CONFIG = 0; break; // PTD6
    74ba:	4a08      	ldr	r2, [pc, #32]	; (74dc <serial_set_rx+0x4c>)
    74bc:	2100      	movs	r1, #0
    74be:	6011      	str	r1, [r2, #0]
		switch (pin) {
    74c0:	2800      	cmp	r0, #0
    74c2:	d1f1      	bne.n	74a8 <serial_set_rx+0x18>
			case 0:  CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    74c4:	4a06      	ldr	r2, [pc, #24]	; (74e0 <serial_set_rx+0x50>)
    74c6:	f240 3113 	movw	r1, #787	; 0x313
    74ca:	6011      	str	r1, [r2, #0]
    74cc:	e7ee      	b.n	74ac <serial_set_rx+0x1c>
			case 0:  CORE_PIN0_CONFIG = 0; break; // PTB16
    74ce:	4904      	ldr	r1, [pc, #16]	; (74e0 <serial_set_rx+0x50>)
    74d0:	600a      	str	r2, [r1, #0]
    74d2:	e7e8      	b.n	74a6 <serial_set_rx+0x16>
    74d4:	20002464 	.word	0x20002464
    74d8:	40048034 	.word	0x40048034
    74dc:	4004c018 	.word	0x4004c018
    74e0:	4004a040 	.word	0x4004a040

000074e4 <serial_set_rts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return 0;
    74e4:	4b0d      	ldr	r3, [pc, #52]	; (751c <serial_set_rts+0x38>)
    74e6:	681b      	ldr	r3, [r3, #0]
    74e8:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
{
    74ec:	b510      	push	{r4, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return 0;
    74ee:	d005      	beq.n	74fc <serial_set_rts+0x18>
	if (pin < CORE_NUM_DIGITAL) {
    74f0:	2821      	cmp	r0, #33	; 0x21
    74f2:	d905      	bls.n	7500 <serial_set_rts+0x1c>
		rts_pin = NULL;
    74f4:	4b0a      	ldr	r3, [pc, #40]	; (7520 <serial_set_rts+0x3c>)
    74f6:	2000      	movs	r0, #0
    74f8:	6018      	str	r0, [r3, #0]
		return 0;
    74fa:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return 0;
    74fc:	4618      	mov	r0, r3
}
    74fe:	bd10      	pop	{r4, pc}
		rts_pin = portOutputRegister(pin);
    7500:	4b08      	ldr	r3, [pc, #32]	; (7524 <serial_set_rts+0x40>)
    7502:	4c07      	ldr	r4, [pc, #28]	; (7520 <serial_set_rts+0x3c>)
    7504:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    7508:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    750a:	2101      	movs	r1, #1
    750c:	f7ff fd4a 	bl	6fa4 <pinMode>
		rts_assert();
    7510:	6823      	ldr	r3, [r4, #0]
    7512:	2200      	movs	r2, #0
    7514:	701a      	strb	r2, [r3, #0]
	return 1;
    7516:	2001      	movs	r0, #1
    7518:	bd10      	pop	{r4, pc}
    751a:	bf00      	nop
    751c:	40048034 	.word	0x40048034
    7520:	2000241c 	.word	0x2000241c
    7524:	00011b14 	.word	0x00011b14

00007528 <serial_set_cts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return 0;
    7528:	4b0f      	ldr	r3, [pc, #60]	; (7568 <serial_set_cts+0x40>)
    752a:	681b      	ldr	r3, [r3, #0]
    752c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
    7530:	d008      	beq.n	7544 <serial_set_cts+0x1c>
	if (pin == 18) {
    7532:	2812      	cmp	r0, #18
    7534:	d008      	beq.n	7548 <serial_set_cts+0x20>
	} else if (pin == 20) {
    7536:	2814      	cmp	r0, #20
    7538:	d011      	beq.n	755e <serial_set_cts+0x36>
		UART0_MODEM &= ~UART_MODEM_TXCTSE;
    753a:	4b0c      	ldr	r3, [pc, #48]	; (756c <serial_set_cts+0x44>)
    753c:	7b5a      	ldrb	r2, [r3, #13]
    753e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    7542:	735a      	strb	r2, [r3, #13]
		return 0;
    7544:	2000      	movs	r0, #0
    7546:	4770      	bx	lr
		CORE_PIN18_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    7548:	4b09      	ldr	r3, [pc, #36]	; (7570 <serial_set_cts+0x48>)
    754a:	f240 3202 	movw	r2, #770	; 0x302
    754e:	601a      	str	r2, [r3, #0]
	UART0_MODEM |= UART_MODEM_TXCTSE;
    7550:	4b06      	ldr	r3, [pc, #24]	; (756c <serial_set_cts+0x44>)
    7552:	7b5a      	ldrb	r2, [r3, #13]
    7554:	f042 0201 	orr.w	r2, r2, #1
    7558:	735a      	strb	r2, [r3, #13]
	return 1;
    755a:	2001      	movs	r0, #1
    755c:	4770      	bx	lr
		CORE_PIN20_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    755e:	4b05      	ldr	r3, [pc, #20]	; (7574 <serial_set_cts+0x4c>)
    7560:	f240 3202 	movw	r2, #770	; 0x302
    7564:	601a      	str	r2, [r3, #0]
    7566:	e7f3      	b.n	7550 <serial_set_cts+0x28>
    7568:	40048034 	.word	0x40048034
    756c:	4006a000 	.word	0x4006a000
    7570:	4004a00c 	.word	0x4004a00c
    7574:	4004c014 	.word	0x4004c014

00007578 <serial_putchar>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    7578:	4b03      	ldr	r3, [pc, #12]	; (7588 <serial_putchar+0x10>)
    757a:	681b      	ldr	r3, [r3, #0]
    757c:	055b      	lsls	r3, r3, #21
    757e:	d501      	bpl.n	7584 <serial_putchar+0xc>
    7580:	f7ff bdde 	b.w	7140 <serial_putchar.part.0>
    7584:	4770      	bx	lr
    7586:	bf00      	nop
    7588:	40048034 	.word	0x40048034

0000758c <serial_write>:
}

#ifdef HAS_KINETISK_UART0_FIFO
void serial_write(const void *buf, unsigned int count)
{
    758c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    7590:	4b2c      	ldr	r3, [pc, #176]	; (7644 <serial_write+0xb8>)
    7592:	681b      	ldr	r3, [r3, #0]
    7594:	055a      	lsls	r2, r3, #21
{
    7596:	b083      	sub	sp, #12
    7598:	4607      	mov	r7, r0
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    759a:	d550      	bpl.n	763e <serial_write+0xb2>
	if (transmit_pin) transmit_assert();
    759c:	4b2a      	ldr	r3, [pc, #168]	; (7648 <serial_write+0xbc>)
    759e:	681b      	ldr	r3, [r3, #0]
    75a0:	b10b      	cbz	r3, 75a6 <serial_write+0x1a>
    75a2:	2201      	movs	r2, #1
    75a4:	701a      	strb	r2, [r3, #0]
	const uint8_t *end = p + count;
    75a6:	1879      	adds	r1, r7, r1
	while (p < end) {
    75a8:	428f      	cmp	r7, r1
	const uint8_t *end = p + count;
    75aa:	9101      	str	r1, [sp, #4]
	while (p < end) {
    75ac:	d244      	bcs.n	7638 <serial_write+0xac>
    75ae:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 7658 <serial_write+0xcc>
    75b2:	4d26      	ldr	r5, [pc, #152]	; (764c <serial_write+0xc0>)
    75b4:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 765c <serial_write+0xd0>
		head = tx_buffer_head;
		if (++head >= SERIAL1_TX_BUFFER_SIZE) head = 0;
		if (tx_buffer_tail == head) {
			UART0_C2 = C2_TX_ACTIVE;
    75b8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 7654 <serial_write+0xc8>
    75bc:	e00b      	b.n	75d6 <serial_write+0x4a>
				} else if (priority >= 256) {
					yield();
				}
			} while (tx_buffer_tail == head);
		}
		tx_buffer[head] = *p++;
    75be:	f817 3b01 	ldrb.w	r3, [r7], #1
		transmitting = 1;
    75c2:	4a23      	ldr	r2, [pc, #140]	; (7650 <serial_write+0xc4>)
		tx_buffer[head] = *p++;
    75c4:	f80b 3006 	strb.w	r3, [fp, r6]
		transmitting = 1;
    75c8:	2301      	movs	r3, #1
    75ca:	7013      	strb	r3, [r2, #0]
	while (p < end) {
    75cc:	9b01      	ldr	r3, [sp, #4]
		tx_buffer_head = head;
    75ce:	f88a 8000 	strb.w	r8, [sl]
	while (p < end) {
    75d2:	429f      	cmp	r7, r3
    75d4:	d030      	beq.n	7638 <serial_write+0xac>
		head = tx_buffer_head;
    75d6:	f89a 6000 	ldrb.w	r6, [sl]
		if (tx_buffer_tail == head) {
    75da:	782c      	ldrb	r4, [r5, #0]
		if (++head >= SERIAL1_TX_BUFFER_SIZE) head = 0;
    75dc:	3601      	adds	r6, #1
    75de:	2e3f      	cmp	r6, #63	; 0x3f
    75e0:	bf84      	itt	hi
    75e2:	f04f 0800 	movhi.w	r8, #0
    75e6:	4646      	movhi	r6, r8
		if (tx_buffer_tail == head) {
    75e8:	b2e4      	uxtb	r4, r4
    75ea:	bf98      	it	ls
    75ec:	fa5f f886 	uxtbls.w	r8, r6
    75f0:	42b4      	cmp	r4, r6
    75f2:	d1e4      	bne.n	75be <serial_write+0x32>
			UART0_C2 = C2_TX_ACTIVE;
    75f4:	23bc      	movs	r3, #188	; 0xbc
    75f6:	f889 3003 	strb.w	r3, [r9, #3]
    75fa:	e006      	b.n	760a <serial_write+0x7e>
					if ((UART0_S1 & UART_S1_TDRE)) {
    75fc:	f899 3004 	ldrb.w	r3, [r9, #4]
    7600:	061b      	lsls	r3, r3, #24
    7602:	d40b      	bmi.n	761c <serial_write+0x90>
			} while (tx_buffer_tail == head);
    7604:	782b      	ldrb	r3, [r5, #0]
    7606:	429c      	cmp	r4, r3
    7608:	d1d9      	bne.n	75be <serial_write+0x32>
				int priority = nvic_execution_priority();
    760a:	f7ff fb07 	bl	6c1c <nvic_execution_priority>
				if (priority <= IRQ_PRIORITY) {
    760e:	2840      	cmp	r0, #64	; 0x40
    7610:	ddf4      	ble.n	75fc <serial_write+0x70>
				} else if (priority >= 256) {
    7612:	28ff      	cmp	r0, #255	; 0xff
    7614:	ddf6      	ble.n	7604 <serial_write+0x78>
					yield();
    7616:	f002 fda3 	bl	a160 <yield>
    761a:	e7f3      	b.n	7604 <serial_write+0x78>
						uint32_t tail = tx_buffer_tail;
    761c:	782b      	ldrb	r3, [r5, #0]
						if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    761e:	3301      	adds	r3, #1
    7620:	2b3f      	cmp	r3, #63	; 0x3f
    7622:	bf86      	itte	hi
    7624:	2200      	movhi	r2, #0
    7626:	4613      	movhi	r3, r2
    7628:	b2da      	uxtbls	r2, r3
						n = tx_buffer[tail];
    762a:	f81b 3003 	ldrb.w	r3, [fp, r3]
    762e:	b2db      	uxtb	r3, r3
						UART0_D = n;
    7630:	f889 3007 	strb.w	r3, [r9, #7]
						tx_buffer_tail = tail;
    7634:	702a      	strb	r2, [r5, #0]
    7636:	e7e5      	b.n	7604 <serial_write+0x78>
	}
	UART0_C2 = C2_TX_ACTIVE;
    7638:	4b06      	ldr	r3, [pc, #24]	; (7654 <serial_write+0xc8>)
    763a:	22bc      	movs	r2, #188	; 0xbc
    763c:	70da      	strb	r2, [r3, #3]
}
    763e:	b003      	add	sp, #12
    7640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7644:	40048034 	.word	0x40048034
    7648:	200024ac 	.word	0x200024ac
    764c:	200024a9 	.word	0x200024a9
    7650:	200024a8 	.word	0x200024a8
    7654:	4006a000 	.word	0x4006a000
    7658:	200024b0 	.word	0x200024b0
    765c:	20002424 	.word	0x20002424

00007660 <serial_flush>:
	while (count-- > 0) serial_putchar(*p++);
}
#endif

void serial_flush(void)
{
    7660:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    7662:	4c04      	ldr	r4, [pc, #16]	; (7674 <serial_flush+0x14>)
    7664:	7823      	ldrb	r3, [r4, #0]
    7666:	b123      	cbz	r3, 7672 <serial_flush+0x12>
    7668:	f002 fd7a 	bl	a160 <yield>
    766c:	7823      	ldrb	r3, [r4, #0]
    766e:	2b00      	cmp	r3, #0
    7670:	d1fa      	bne.n	7668 <serial_flush+0x8>
    7672:	bd10      	pop	{r4, pc}
    7674:	200024a8 	.word	0x200024a8

00007678 <serial_write_buffer_free>:

int serial_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    7678:	4b06      	ldr	r3, [pc, #24]	; (7694 <serial_write_buffer_free+0x1c>)
	tail = tx_buffer_tail;
    767a:	4a07      	ldr	r2, [pc, #28]	; (7698 <serial_write_buffer_free+0x20>)
	head = tx_buffer_head;
    767c:	781b      	ldrb	r3, [r3, #0]
	tail = tx_buffer_tail;
    767e:	7812      	ldrb	r2, [r2, #0]
	head = tx_buffer_head;
    7680:	b2db      	uxtb	r3, r3
	tail = tx_buffer_tail;
    7682:	b2d2      	uxtb	r2, r2
	if (head >= tail) return SERIAL1_TX_BUFFER_SIZE - 1 - head + tail;
    7684:	4293      	cmp	r3, r2
    7686:	bf2c      	ite	cs
    7688:	323f      	addcs	r2, #63	; 0x3f
	return tail - head - 1;
    768a:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
    768e:	1ad0      	subs	r0, r2, r3
}
    7690:	4770      	bx	lr
    7692:	bf00      	nop
    7694:	200024b0 	.word	0x200024b0
    7698:	200024a9 	.word	0x200024a9

0000769c <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    769c:	4a05      	ldr	r2, [pc, #20]	; (76b4 <serial_available+0x18>)
	tail = rx_buffer_tail;
    769e:	4b06      	ldr	r3, [pc, #24]	; (76b8 <serial_available+0x1c>)
	head = rx_buffer_head;
    76a0:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    76a2:	781b      	ldrb	r3, [r3, #0]
	head = rx_buffer_head;
    76a4:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    76a6:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    76a8:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    76aa:	bf38      	it	cc
    76ac:	3040      	addcc	r0, #64	; 0x40
    76ae:	1ac0      	subs	r0, r0, r3
}
    76b0:	4770      	bx	lr
    76b2:	bf00      	nop
    76b4:	20002420 	.word	0x20002420
    76b8:	20002421 	.word	0x20002421

000076bc <serial_getchar>:

int serial_getchar(void)
{
    76bc:	b430      	push	{r4, r5}
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    76be:	4b14      	ldr	r3, [pc, #80]	; (7710 <serial_getchar+0x54>)
	tail = rx_buffer_tail;
    76c0:	4914      	ldr	r1, [pc, #80]	; (7714 <serial_getchar+0x58>)
	head = rx_buffer_head;
    76c2:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    76c4:	780b      	ldrb	r3, [r1, #0]
	head = rx_buffer_head;
    76c6:	b2d2      	uxtb	r2, r2
	tail = rx_buffer_tail;
    76c8:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    76ca:	429a      	cmp	r2, r3
    76cc:	d01d      	beq.n	770a <serial_getchar+0x4e>
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
    76ce:	3301      	adds	r3, #1
    76d0:	2b3f      	cmp	r3, #63	; 0x3f
	c = rx_buffer[tail];
    76d2:	4811      	ldr	r0, [pc, #68]	; (7718 <serial_getchar+0x5c>)
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
    76d4:	d810      	bhi.n	76f8 <serial_getchar+0x3c>
	rx_buffer_tail = tail;
	if (rts_pin) {
    76d6:	4c11      	ldr	r4, [pc, #68]	; (771c <serial_getchar+0x60>)
	c = rx_buffer[tail];
    76d8:	5cc0      	ldrb	r0, [r0, r3]
	if (rts_pin) {
    76da:	6824      	ldr	r4, [r4, #0]
	rx_buffer_tail = tail;
    76dc:	b2dd      	uxtb	r5, r3
	c = rx_buffer[tail];
    76de:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    76e0:	700d      	strb	r5, [r1, #0]
	if (rts_pin) {
    76e2:	b13c      	cbz	r4, 76f4 <serial_getchar+0x38>
		int avail;
		if (head >= tail) avail = head - tail;
    76e4:	429a      	cmp	r2, r3
		else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    76e6:	bf38      	it	cc
    76e8:	3240      	addcc	r2, #64	; 0x40
    76ea:	1ad3      	subs	r3, r2, r3
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
    76ec:	2b1a      	cmp	r3, #26
    76ee:	dc01      	bgt.n	76f4 <serial_getchar+0x38>
    76f0:	2300      	movs	r3, #0
    76f2:	7023      	strb	r3, [r4, #0]
	}
	return c;
}
    76f4:	bc30      	pop	{r4, r5}
    76f6:	4770      	bx	lr
	if (rts_pin) {
    76f8:	4b08      	ldr	r3, [pc, #32]	; (771c <serial_getchar+0x60>)
	c = rx_buffer[tail];
    76fa:	7800      	ldrb	r0, [r0, #0]
	if (rts_pin) {
    76fc:	681c      	ldr	r4, [r3, #0]
	rx_buffer_tail = tail;
    76fe:	2300      	movs	r3, #0
	c = rx_buffer[tail];
    7700:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    7702:	700b      	strb	r3, [r1, #0]
	if (rts_pin) {
    7704:	2c00      	cmp	r4, #0
    7706:	d1f0      	bne.n	76ea <serial_getchar+0x2e>
    7708:	e7f4      	b.n	76f4 <serial_getchar+0x38>
	if (head == tail) return -1;
    770a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    770e:	e7f1      	b.n	76f4 <serial_getchar+0x38>
    7710:	20002420 	.word	0x20002420
    7714:	20002421 	.word	0x20002421
    7718:	20002468 	.word	0x20002468
    771c:	2000241c 	.word	0x2000241c

00007720 <serial_peek>:

int serial_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7720:	4a08      	ldr	r2, [pc, #32]	; (7744 <serial_peek+0x24>)
	tail = rx_buffer_tail;
    7722:	4b09      	ldr	r3, [pc, #36]	; (7748 <serial_peek+0x28>)
	head = rx_buffer_head;
    7724:	7812      	ldrb	r2, [r2, #0]
	tail = rx_buffer_tail;
    7726:	781b      	ldrb	r3, [r3, #0]
    7728:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    772a:	429a      	cmp	r2, r3
    772c:	d007      	beq.n	773e <serial_peek+0x1e>
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
    772e:	3301      	adds	r3, #1
    7730:	2b40      	cmp	r3, #64	; 0x40
    7732:	bf28      	it	cs
    7734:	2300      	movcs	r3, #0
	return rx_buffer[tail];
    7736:	4a05      	ldr	r2, [pc, #20]	; (774c <serial_peek+0x2c>)
    7738:	5cd0      	ldrb	r0, [r2, r3]
    773a:	b2c0      	uxtb	r0, r0
    773c:	4770      	bx	lr
	if (head == tail) return -1;
    773e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    7742:	4770      	bx	lr
    7744:	20002420 	.word	0x20002420
    7748:	20002421 	.word	0x20002421
    774c:	20002468 	.word	0x20002468

00007750 <serial_clear>:

void serial_clear(void)
{
#ifdef HAS_KINETISK_UART0_FIFO
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    7750:	4b0d      	ldr	r3, [pc, #52]	; (7788 <serial_clear+0x38>)
    7752:	681b      	ldr	r3, [r3, #0]
    7754:	055b      	lsls	r3, r3, #21
{
    7756:	b430      	push	{r4, r5}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    7758:	d514      	bpl.n	7784 <serial_clear+0x34>
	UART0_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    775a:	4b0c      	ldr	r3, [pc, #48]	; (778c <serial_clear+0x3c>)
	UART0_CFIFO = UART_CFIFO_RXFLUSH;
	UART0_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
#endif
	rx_buffer_head = rx_buffer_tail;
    775c:	490c      	ldr	r1, [pc, #48]	; (7790 <serial_clear+0x40>)
	UART0_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    775e:	78dd      	ldrb	r5, [r3, #3]
	if (rts_pin) rts_assert();
    7760:	480c      	ldr	r0, [pc, #48]	; (7794 <serial_clear+0x44>)
	rx_buffer_head = rx_buffer_tail;
    7762:	4a0d      	ldr	r2, [pc, #52]	; (7798 <serial_clear+0x48>)
	UART0_CFIFO = UART_CFIFO_RXFLUSH;
    7764:	2440      	movs	r4, #64	; 0x40
	UART0_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    7766:	f005 05cb 	and.w	r5, r5, #203	; 0xcb
    776a:	70dd      	strb	r5, [r3, #3]
	UART0_CFIFO = UART_CFIFO_RXFLUSH;
    776c:	745c      	strb	r4, [r3, #17]
	UART0_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    776e:	78dc      	ldrb	r4, [r3, #3]
    7770:	f044 0434 	orr.w	r4, r4, #52	; 0x34
    7774:	70dc      	strb	r4, [r3, #3]
	rx_buffer_head = rx_buffer_tail;
    7776:	7809      	ldrb	r1, [r1, #0]
	if (rts_pin) rts_assert();
    7778:	6803      	ldr	r3, [r0, #0]
	rx_buffer_head = rx_buffer_tail;
    777a:	b2c9      	uxtb	r1, r1
    777c:	7011      	strb	r1, [r2, #0]
	if (rts_pin) rts_assert();
    777e:	b10b      	cbz	r3, 7784 <serial_clear+0x34>
    7780:	2200      	movs	r2, #0
    7782:	701a      	strb	r2, [r3, #0]
}
    7784:	bc30      	pop	{r4, r5}
    7786:	4770      	bx	lr
    7788:	40048034 	.word	0x40048034
    778c:	4006a000 	.word	0x4006a000
    7790:	20002421 	.word	0x20002421
    7794:	2000241c 	.word	0x2000241c
    7798:	20002420 	.word	0x20002420

0000779c <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    779c:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    779e:	4b39      	ldr	r3, [pc, #228]	; (7884 <uart0_status_isr+0xe8>)
    77a0:	791a      	ldrb	r2, [r3, #4]
    77a2:	f012 0f30 	tst.w	r2, #48	; 0x30
    77a6:	d02d      	beq.n	7804 <uart0_status_isr+0x68>
		__disable_irq();
    77a8:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    77aa:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    77ac:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    77b0:	2900      	cmp	r1, #0
    77b2:	d03e      	beq.n	7832 <uart0_status_isr+0x96>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    77b4:	b662      	cpsie	i
			head = rx_buffer_head;
    77b6:	4f34      	ldr	r7, [pc, #208]	; (7888 <uart0_status_isr+0xec>)
			tail = rx_buffer_tail;
    77b8:	4834      	ldr	r0, [pc, #208]	; (788c <uart0_status_isr+0xf0>)
			head = rx_buffer_head;
    77ba:	7839      	ldrb	r1, [r7, #0]
			tail = rx_buffer_tail;
    77bc:	7804      	ldrb	r4, [r0, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    77be:	4e34      	ldr	r6, [pc, #208]	; (7890 <uart0_status_isr+0xf4>)
					n = UART0_D;
    77c0:	461d      	mov	r5, r3
			head = rx_buffer_head;
    77c2:	b2c9      	uxtb	r1, r1
			tail = rx_buffer_tail;
    77c4:	b2e4      	uxtb	r4, r4
				newhead = head + 1;
    77c6:	1c4b      	adds	r3, r1, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    77c8:	2b40      	cmp	r3, #64	; 0x40
					n = UART0_D;
    77ca:	79e8      	ldrb	r0, [r5, #7]
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    77cc:	bf28      	it	cs
    77ce:	2300      	movcs	r3, #0
				if (newhead != tail) {
    77d0:	42a3      	cmp	r3, r4
				}
			} while (--avail > 0);
    77d2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
					n = UART0_D;
    77d6:	b2c0      	uxtb	r0, r0
					rx_buffer[head] = n;
    77d8:	bf1c      	itt	ne
    77da:	54f0      	strbne	r0, [r6, r3]
    77dc:	4619      	movne	r1, r3
			} while (--avail > 0);
    77de:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    77e2:	d1f0      	bne.n	77c6 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    77e4:	4b2b      	ldr	r3, [pc, #172]	; (7894 <uart0_status_isr+0xf8>)
    77e6:	681b      	ldr	r3, [r3, #0]
			rx_buffer_head = head;
    77e8:	b2ca      	uxtb	r2, r1
    77ea:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    77ec:	b153      	cbz	r3, 7804 <uart0_status_isr+0x68>
				int avail;
				if (head >= tail) avail = head - tail;
    77ee:	42a1      	cmp	r1, r4
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    77f0:	bf36      	itet	cc
    77f2:	f1c4 0440 	rsbcc	r4, r4, #64	; 0x40
				if (head >= tail) avail = head - tail;
    77f6:	ebc4 0101 	rsbcs	r1, r4, r1
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    77fa:	1909      	addcc	r1, r1, r4
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    77fc:	2927      	cmp	r1, #39	; 0x27
    77fe:	bfc4      	itt	gt
    7800:	2201      	movgt	r2, #1
    7802:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    7804:	491f      	ldr	r1, [pc, #124]	; (7884 <uart0_status_isr+0xe8>)
    7806:	78ca      	ldrb	r2, [r1, #3]
    7808:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    780a:	0615      	lsls	r5, r2, #24
    780c:	d416      	bmi.n	783c <uart0_status_isr+0xa0>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    780e:	0652      	lsls	r2, r2, #25
    7810:	d50d      	bpl.n	782e <uart0_status_isr+0x92>
    7812:	4b1c      	ldr	r3, [pc, #112]	; (7884 <uart0_status_isr+0xe8>)
    7814:	791b      	ldrb	r3, [r3, #4]
    7816:	065b      	lsls	r3, r3, #25
    7818:	d509      	bpl.n	782e <uart0_status_isr+0x92>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    781a:	4b1f      	ldr	r3, [pc, #124]	; (7898 <uart0_status_isr+0xfc>)
		transmitting = 0;
    781c:	491f      	ldr	r1, [pc, #124]	; (789c <uart0_status_isr+0x100>)
		if (transmit_pin) transmit_deassert();
    781e:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    7820:	2200      	movs	r2, #0
    7822:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    7824:	b103      	cbz	r3, 7828 <uart0_status_isr+0x8c>
    7826:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    7828:	4b16      	ldr	r3, [pc, #88]	; (7884 <uart0_status_isr+0xe8>)
    782a:	223c      	movs	r2, #60	; 0x3c
    782c:	70da      	strb	r2, [r3, #3]
	}
}
    782e:	bcf0      	pop	{r4, r5, r6, r7}
    7830:	4770      	bx	lr
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    7832:	2240      	movs	r2, #64	; 0x40
			c = UART0_D;
    7834:	79d9      	ldrb	r1, [r3, #7]
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    7836:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    7838:	b662      	cpsie	i
    783a:	e7e3      	b.n	7804 <uart0_status_isr+0x68>
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    783c:	790b      	ldrb	r3, [r1, #4]
    783e:	061c      	lsls	r4, r3, #24
    7840:	d5e5      	bpl.n	780e <uart0_status_isr+0x72>
		head = tx_buffer_head;
    7842:	4b17      	ldr	r3, [pc, #92]	; (78a0 <uart0_status_isr+0x104>)
		tail = tx_buffer_tail;
    7844:	4e17      	ldr	r6, [pc, #92]	; (78a4 <uart0_status_isr+0x108>)
		head = tx_buffer_head;
    7846:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    7848:	7833      	ldrb	r3, [r6, #0]
		head = tx_buffer_head;
    784a:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    784c:	b2db      	uxtb	r3, r3
			if (tail == head) break;
    784e:	429c      	cmp	r4, r3
    7850:	d00e      	beq.n	7870 <uart0_status_isr+0xd4>
    7852:	4d15      	ldr	r5, [pc, #84]	; (78a8 <uart0_status_isr+0x10c>)
    7854:	e001      	b.n	785a <uart0_status_isr+0xbe>
    7856:	42a3      	cmp	r3, r4
    7858:	d00a      	beq.n	7870 <uart0_status_isr+0xd4>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    785a:	3301      	adds	r3, #1
    785c:	2b40      	cmp	r3, #64	; 0x40
    785e:	bf28      	it	cs
    7860:	2300      	movcs	r3, #0
			avail = UART0_S1;
    7862:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    7864:	5ce8      	ldrb	r0, [r5, r3]
    7866:	b2c0      	uxtb	r0, r0
			UART0_D = n;
    7868:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    786a:	7d08      	ldrb	r0, [r1, #20]
    786c:	2807      	cmp	r0, #7
    786e:	d9f2      	bls.n	7856 <uart0_status_isr+0xba>
		tx_buffer_tail = tail;
    7870:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    7872:	4904      	ldr	r1, [pc, #16]	; (7884 <uart0_status_isr+0xe8>)
		tx_buffer_tail = tail;
    7874:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    7876:	790b      	ldrb	r3, [r1, #4]
    7878:	0618      	lsls	r0, r3, #24
    787a:	bf44      	itt	mi
    787c:	237c      	movmi	r3, #124	; 0x7c
    787e:	70cb      	strbmi	r3, [r1, #3]
    7880:	e7c5      	b.n	780e <uart0_status_isr+0x72>
    7882:	bf00      	nop
    7884:	4006a000 	.word	0x4006a000
    7888:	20002420 	.word	0x20002420
    788c:	20002421 	.word	0x20002421
    7890:	20002468 	.word	0x20002468
    7894:	2000241c 	.word	0x2000241c
    7898:	200024ac 	.word	0x200024ac
    789c:	200024a8 	.word	0x200024a8
    78a0:	200024b0 	.word	0x200024b0
    78a4:	200024a9 	.word	0x200024a9
    78a8:	20002424 	.word	0x20002424

000078ac <serial2_begin>:
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial2_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    78ac:	4b2c      	ldr	r3, [pc, #176]	; (7960 <serial2_begin+0xb4>)
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
#if defined(KINETISK)
	switch (rx_pin_num) {
    78ae:	4a2d      	ldr	r2, [pc, #180]	; (7964 <serial2_begin+0xb8>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    78b0:	f8d3 c000 	ldr.w	ip, [r3]
	transmitting = 0;
    78b4:	492c      	ldr	r1, [pc, #176]	; (7968 <serial2_begin+0xbc>)
{
    78b6:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    78ba:	f44c 6c00 	orr.w	ip, ip, #2048	; 0x800
    78be:	f8c3 c000 	str.w	ip, [r3]
	switch (rx_pin_num) {
    78c2:	7812      	ldrb	r2, [r2, #0]
	rx_buffer_head = 0;
    78c4:	4f29      	ldr	r7, [pc, #164]	; (796c <serial2_begin+0xc0>)
	rx_buffer_tail = 0;
    78c6:	4e2a      	ldr	r6, [pc, #168]	; (7970 <serial2_begin+0xc4>)
	tx_buffer_head = 0;
    78c8:	4d2a      	ldr	r5, [pc, #168]	; (7974 <serial2_begin+0xc8>)
	tx_buffer_tail = 0;
    78ca:	4c2b      	ldr	r4, [pc, #172]	; (7978 <serial2_begin+0xcc>)
	rx_buffer_head = 0;
    78cc:	2300      	movs	r3, #0
	switch (rx_pin_num) {
    78ce:	2a09      	cmp	r2, #9
	rx_buffer_head = 0;
    78d0:	703b      	strb	r3, [r7, #0]
	rx_buffer_tail = 0;
    78d2:	7033      	strb	r3, [r6, #0]
	tx_buffer_head = 0;
    78d4:	702b      	strb	r3, [r5, #0]
	tx_buffer_tail = 0;
    78d6:	7023      	strb	r3, [r4, #0]
	transmitting = 0;
    78d8:	700b      	strb	r3, [r1, #0]
	switch (rx_pin_num) {
    78da:	d03b      	beq.n	7954 <serial2_begin+0xa8>
    78dc:	2a1a      	cmp	r2, #26
    78de:	d02c      	beq.n	793a <serial2_begin+0x8e>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)  // T3.5 or T3.6
		case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    78e0:	4b26      	ldr	r3, [pc, #152]	; (797c <serial2_begin+0xd0>)
    78e2:	781b      	ldrb	r3, [r3, #0]
    78e4:	2b0a      	cmp	r3, #10
    78e6:	d030      	beq.n	794a <serial2_begin+0x9e>
    78e8:	2b1f      	cmp	r3, #31
    78ea:	d103      	bne.n	78f4 <serial2_begin+0x48>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 31: CORE_PIN31_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    78ec:	4b24      	ldr	r3, [pc, #144]	; (7980 <serial2_begin+0xd4>)
    78ee:	f44f 7251 	mov.w	r2, #836	; 0x344
    78f2:	601a      	str	r2, [r3, #0]
#elif defined(KINETISL)
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
#endif
#if defined(HAS_KINETISK_UART1)
	UART1_BDH = (divisor >> 13) & 0x1F;
    78f4:	4b23      	ldr	r3, [pc, #140]	; (7984 <serial2_begin+0xd8>)
	UART1_BDH = (divisor >> 8) & 0x1F;
	UART1_BDL = divisor & 0xFF;
	UART1_C1 = 0;
#endif
	UART1_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    78f6:	4d24      	ldr	r5, [pc, #144]	; (7988 <serial2_begin+0xdc>)
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    78f8:	4924      	ldr	r1, [pc, #144]	; (798c <serial2_begin+0xe0>)
	UART1_BDH = (divisor >> 13) & 0x1F;
    78fa:	f3c0 3a44 	ubfx	sl, r0, #13, #5
	UART1_BDL = (divisor >> 5) & 0xFF;
    78fe:	f3c0 1947 	ubfx	r9, r0, #5, #8
	UART1_C1 = UART_C1_ILT;
    7902:	2204      	movs	r2, #4
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    7904:	f04f 0802 	mov.w	r8, #2
	UART1_C2 = C2_TX_INACTIVE;
    7908:	273c      	movs	r7, #60	; 0x3c
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    790a:	2640      	movs	r6, #64	; 0x40
	UART1_C4 = divisor & 0x1F;
    790c:	f000 001f 	and.w	r0, r0, #31
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    7910:	f04f 0c88 	mov.w	ip, #136	; 0x88
	UART1_BDH = (divisor >> 13) & 0x1F;
    7914:	f883 a000 	strb.w	sl, [r3]
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    7918:	f44f 4400 	mov.w	r4, #32768	; 0x8000
	UART1_BDL = (divisor >> 5) & 0xFF;
    791c:	f883 9001 	strb.w	r9, [r3, #1]
	UART1_C4 = divisor & 0x1F;
    7920:	7298      	strb	r0, [r3, #10]
	UART1_C1 = UART_C1_ILT;
    7922:	709a      	strb	r2, [r3, #2]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    7924:	f883 8013 	strb.w	r8, [r3, #19]
	UART1_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    7928:	755a      	strb	r2, [r3, #21]
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    792a:	f883 c010 	strb.w	ip, [r3, #16]
	UART1_C2 = C2_TX_INACTIVE;
    792e:	70df      	strb	r7, [r3, #3]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    7930:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    7932:	600c      	str	r4, [r1, #0]
}
    7934:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    7938:	4770      	bx	lr
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    793a:	4b15      	ldr	r3, [pc, #84]	; (7990 <serial2_begin+0xe4>)
    793c:	f240 3213 	movw	r2, #787	; 0x313
    7940:	601a      	str	r2, [r3, #0]
	switch (tx_pin_num) {
    7942:	4b0e      	ldr	r3, [pc, #56]	; (797c <serial2_begin+0xd0>)
    7944:	781b      	ldrb	r3, [r3, #0]
    7946:	2b0a      	cmp	r3, #10
    7948:	d1ce      	bne.n	78e8 <serial2_begin+0x3c>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    794a:	4b12      	ldr	r3, [pc, #72]	; (7994 <serial2_begin+0xe8>)
    794c:	f44f 7251 	mov.w	r2, #836	; 0x344
    7950:	601a      	str	r2, [r3, #0]
    7952:	e7cf      	b.n	78f4 <serial2_begin+0x48>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    7954:	4b10      	ldr	r3, [pc, #64]	; (7998 <serial2_begin+0xec>)
    7956:	f240 3213 	movw	r2, #787	; 0x313
    795a:	601a      	str	r2, [r3, #0]
    795c:	e7c0      	b.n	78e0 <serial2_begin+0x34>
    795e:	bf00      	nop
    7960:	40048034 	.word	0x40048034
    7964:	20000ce2 	.word	0x20000ce2
    7968:	200024b8 	.word	0x200024b8
    796c:	20002524 	.word	0x20002524
    7970:	200024b9 	.word	0x200024b9
    7974:	2000252c 	.word	0x2000252c
    7978:	20002525 	.word	0x20002525
    797c:	20000ce3 	.word	0x20000ce3
    7980:	4004d000 	.word	0x4004d000
    7984:	4006b000 	.word	0x4006b000
    7988:	e000e42f 	.word	0xe000e42f
    798c:	e000e104 	.word	0xe000e104
    7990:	4004d004 	.word	0x4004d004
    7994:	4004b010 	.word	0x4004b010
    7998:	4004b00c 	.word	0x4004b00c

0000799c <serial2_format>:

void serial2_format(uint32_t format)
{
	uint8_t c;

	c = UART1_C1;
    799c:	4b14      	ldr	r3, [pc, #80]	; (79f0 <serial2_format+0x54>)
    799e:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    79a0:	f000 0203 	and.w	r2, r0, #3
    79a4:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    79a8:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART1_C1 = c;
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    79aa:	f000 010f 	and.w	r1, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    79ae:	0742      	lsls	r2, r0, #29
	UART1_C1 = c;
    79b0:	4a0f      	ldr	r2, [pc, #60]	; (79f0 <serial2_format+0x54>)
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    79b2:	bf48      	it	mi
    79b4:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    79b8:	2904      	cmp	r1, #4
	UART1_C1 = c;
    79ba:	7093      	strb	r3, [r2, #2]
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    79bc:	d013      	beq.n	79e6 <serial2_format+0x4a>
	c = UART1_S2 & ~0x10;
    79be:	4b0c      	ldr	r3, [pc, #48]	; (79f0 <serial2_format+0x54>)
    79c0:	795a      	ldrb	r2, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
	UART1_S2 = c;
    79c2:	4b0b      	ldr	r3, [pc, #44]	; (79f0 <serial2_format+0x54>)
	c = UART1_S2 & ~0x10;
    79c4:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    79c8:	06c1      	lsls	r1, r0, #27
    79ca:	bf48      	it	mi
    79cc:	f042 0210 	orrmi.w	r2, r2, #16
	UART1_S2 = c;
    79d0:	715a      	strb	r2, [r3, #5]
	c = UART1_C3 & ~0x10;
    79d2:	799b      	ldrb	r3, [r3, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    79d4:	0682      	lsls	r2, r0, #26
	c = UART1_C3 & ~0x10;
    79d6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART1_C3 = c;
    79da:	4a05      	ldr	r2, [pc, #20]	; (79f0 <serial2_format+0x54>)
	if (format & 0x20) c |= 0x10;		// tx invert
    79dc:	bf48      	it	mi
    79de:	f043 0310 	orrmi.w	r3, r3, #16
	UART1_C3 = c;
    79e2:	7193      	strb	r3, [r2, #6]
    79e4:	4770      	bx	lr
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    79e6:	7993      	ldrb	r3, [r2, #6]
    79e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    79ec:	7193      	strb	r3, [r2, #6]
    79ee:	e7e6      	b.n	79be <serial2_format+0x22>
    79f0:	4006b000 	.word	0x4006b000

000079f4 <serial2_end>:
#endif
}

void serial2_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    79f4:	4b21      	ldr	r3, [pc, #132]	; (7a7c <serial2_end+0x88>)
    79f6:	681b      	ldr	r3, [r3, #0]
    79f8:	051b      	lsls	r3, r3, #20
{
    79fa:	b510      	push	{r4, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    79fc:	d52e      	bpl.n	7a5c <serial2_end+0x68>
	while (transmitting) yield();  // wait for buffered data to send
    79fe:	4c20      	ldr	r4, [pc, #128]	; (7a80 <serial2_end+0x8c>)
    7a00:	7823      	ldrb	r3, [r4, #0]
    7a02:	b123      	cbz	r3, 7a0e <serial2_end+0x1a>
    7a04:	f002 fbac 	bl	a160 <yield>
    7a08:	7823      	ldrb	r3, [r4, #0]
    7a0a:	2b00      	cmp	r3, #0
    7a0c:	d1fa      	bne.n	7a04 <serial2_end+0x10>
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    7a0e:	481d      	ldr	r0, [pc, #116]	; (7a84 <serial2_end+0x90>)
	UART1_C2 = 0;
    7a10:	4a1d      	ldr	r2, [pc, #116]	; (7a88 <serial2_end+0x94>)
#if defined(KINETISK)
	switch (rx_pin_num) {
    7a12:	4b1e      	ldr	r3, [pc, #120]	; (7a8c <serial2_end+0x98>)
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    7a14:	f44f 4400 	mov.w	r4, #32768	; 0x8000
	UART1_C2 = 0;
    7a18:	2100      	movs	r1, #0
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    7a1a:	6004      	str	r4, [r0, #0]
	UART1_C2 = 0;
    7a1c:	70d1      	strb	r1, [r2, #3]
	switch (rx_pin_num) {
    7a1e:	781b      	ldrb	r3, [r3, #0]
    7a20:	2b09      	cmp	r3, #9
    7a22:	d01c      	beq.n	7a5e <serial2_end+0x6a>
    7a24:	2b1a      	cmp	r3, #26
    7a26:	d103      	bne.n	7a30 <serial2_end+0x3c>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC3
		#if defined(__MK20DX128__) || defined(__MK20DX256__)  // T3.0, T3.1, T3.2
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
    7a28:	4b19      	ldr	r3, [pc, #100]	; (7a90 <serial2_end+0x9c>)
    7a2a:	f240 1203 	movw	r2, #259	; 0x103
    7a2e:	601a      	str	r2, [r3, #0]
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
		case 59: CORE_PIN59_CONFIG = 0; break;
		#endif
	}
	switch (tx_pin_num & 127) {
    7a30:	4b18      	ldr	r3, [pc, #96]	; (7a94 <serial2_end+0xa0>)
    7a32:	781b      	ldrb	r3, [r3, #0]
    7a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7a38:	2b0a      	cmp	r3, #10
    7a3a:	d01a      	beq.n	7a72 <serial2_end+0x7e>
    7a3c:	2b1f      	cmp	r3, #31
    7a3e:	d103      	bne.n	7a48 <serial2_end+0x54>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC4
		#if defined(__MK20DX128__) || defined(__MK20DX256__)  // T3.0, T3.1, T3.2
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE0
    7a40:	4b15      	ldr	r3, [pc, #84]	; (7a98 <serial2_end+0xa4>)
    7a42:	f240 1203 	movw	r2, #259	; 0x103
    7a46:	601a      	str	r2, [r3, #0]
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);  // PTC3
	CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); // PTC4
#endif
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	if (rts_pin) rts_deassert();
    7a48:	4b14      	ldr	r3, [pc, #80]	; (7a9c <serial2_end+0xa8>)
	rx_buffer_head = 0;
    7a4a:	4815      	ldr	r0, [pc, #84]	; (7aa0 <serial2_end+0xac>)
	rx_buffer_tail = 0;
    7a4c:	4915      	ldr	r1, [pc, #84]	; (7aa4 <serial2_end+0xb0>)
	if (rts_pin) rts_deassert();
    7a4e:	681a      	ldr	r2, [r3, #0]
	rx_buffer_head = 0;
    7a50:	2300      	movs	r3, #0
    7a52:	7003      	strb	r3, [r0, #0]
	rx_buffer_tail = 0;
    7a54:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_deassert();
    7a56:	b10a      	cbz	r2, 7a5c <serial2_end+0x68>
    7a58:	2301      	movs	r3, #1
    7a5a:	7013      	strb	r3, [r2, #0]
    7a5c:	bd10      	pop	{r4, pc}
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC3
    7a5e:	4b12      	ldr	r3, [pc, #72]	; (7aa8 <serial2_end+0xb4>)
    7a60:	f240 1203 	movw	r2, #259	; 0x103
    7a64:	601a      	str	r2, [r3, #0]
	switch (tx_pin_num & 127) {
    7a66:	4b0b      	ldr	r3, [pc, #44]	; (7a94 <serial2_end+0xa0>)
    7a68:	781b      	ldrb	r3, [r3, #0]
    7a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7a6e:	2b0a      	cmp	r3, #10
    7a70:	d1e4      	bne.n	7a3c <serial2_end+0x48>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC4
    7a72:	4b0e      	ldr	r3, [pc, #56]	; (7aac <serial2_end+0xb8>)
    7a74:	f240 1203 	movw	r2, #259	; 0x103
    7a78:	601a      	str	r2, [r3, #0]
    7a7a:	e7e5      	b.n	7a48 <serial2_end+0x54>
    7a7c:	40048034 	.word	0x40048034
    7a80:	200024b8 	.word	0x200024b8
    7a84:	e000e184 	.word	0xe000e184
    7a88:	4006b000 	.word	0x4006b000
    7a8c:	20000ce2 	.word	0x20000ce2
    7a90:	4004d004 	.word	0x4004d004
    7a94:	20000ce3 	.word	0x20000ce3
    7a98:	4004d000 	.word	0x4004d000
    7a9c:	200024b4 	.word	0x200024b4
    7aa0:	20002524 	.word	0x20002524
    7aa4:	200024b9 	.word	0x200024b9
    7aa8:	4004b00c 	.word	0x4004b00c
    7aac:	4004b010 	.word	0x4004b010

00007ab0 <serial2_set_transmit_pin>:
}

void serial2_set_transmit_pin(uint8_t pin)
{
    7ab0:	4a0a      	ldr	r2, [pc, #40]	; (7adc <serial2_set_transmit_pin+0x2c>)
    7ab2:	b538      	push	{r3, r4, r5, lr}
    7ab4:	4605      	mov	r5, r0
	while (transmitting) ;
    7ab6:	7813      	ldrb	r3, [r2, #0]
    7ab8:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    7abc:	2b00      	cmp	r3, #0
    7abe:	d1fa      	bne.n	7ab6 <serial2_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    7ac0:	4628      	mov	r0, r5
    7ac2:	2101      	movs	r1, #1
    7ac4:	f7ff fa6e 	bl	6fa4 <pinMode>
	digitalWrite(pin, LOW);
    7ac8:	4628      	mov	r0, r5
    7aca:	4621      	mov	r1, r4
    7acc:	f7ff fa56 	bl	6f7c <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    7ad0:	4a03      	ldr	r2, [pc, #12]	; (7ae0 <serial2_set_transmit_pin+0x30>)
    7ad2:	4b04      	ldr	r3, [pc, #16]	; (7ae4 <serial2_set_transmit_pin+0x34>)
    7ad4:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    7ad8:	601a      	str	r2, [r3, #0]
    7ada:	bd38      	pop	{r3, r4, r5, pc}
    7adc:	200024b8 	.word	0x200024b8
    7ae0:	00011b14 	.word	0x00011b14
    7ae4:	20002528 	.word	0x20002528

00007ae8 <serial2_set_tx>:
	transmit_mask = digitalPinToBitMask(pin);
	#endif
}

void serial2_set_tx(uint8_t pin, uint8_t opendrain)
{
    7ae8:	b410      	push	{r4}
	#if defined(KINETISK)
	uint32_t cfg;

	if (opendrain) pin |= 128;
    7aea:	b109      	cbz	r1, 7af0 <serial2_set_tx+0x8>
    7aec:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    7af0:	4b16      	ldr	r3, [pc, #88]	; (7b4c <serial2_set_tx+0x64>)
    7af2:	781a      	ldrb	r2, [r3, #0]
    7af4:	4290      	cmp	r0, r2
    7af6:	d014      	beq.n	7b22 <serial2_set_tx+0x3a>
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    7af8:	4c15      	ldr	r4, [pc, #84]	; (7b50 <serial2_set_tx+0x68>)
    7afa:	6824      	ldr	r4, [r4, #0]
    7afc:	0524      	lsls	r4, r4, #20
    7afe:	d50f      	bpl.n	7b20 <serial2_set_tx+0x38>
		switch (tx_pin_num & 127) {
    7b00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7b04:	2a0a      	cmp	r2, #10
    7b06:	d01d      	beq.n	7b44 <serial2_set_tx+0x5c>
    7b08:	2a1f      	cmp	r2, #31
    7b0a:	d012      	beq.n	7b32 <serial2_set_tx+0x4a>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 58: CORE_PIN58_CONFIG = 0; break;
			#endif
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
    7b0c:	2900      	cmp	r1, #0
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
    7b0e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
    7b12:	bf0c      	ite	eq
    7b14:	2144      	moveq	r1, #68	; 0x44
    7b16:	2160      	movne	r1, #96	; 0x60
		switch (pin & 127) {
    7b18:	2a0a      	cmp	r2, #10
    7b1a:	d00e      	beq.n	7b3a <serial2_set_tx+0x52>
    7b1c:	2a1f      	cmp	r2, #31
    7b1e:	d003      	beq.n	7b28 <serial2_set_tx+0x40>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 58: CORE_PIN58_CONFIG = cfg | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	tx_pin_num = pin;
    7b20:	7018      	strb	r0, [r3, #0]
	#endif
}
    7b22:	f85d 4b04 	ldr.w	r4, [sp], #4
    7b26:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = cfg | PORT_PCR_MUX(3); break;
    7b28:	4a0a      	ldr	r2, [pc, #40]	; (7b54 <serial2_set_tx+0x6c>)
    7b2a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    7b2e:	6011      	str	r1, [r2, #0]
    7b30:	e7f6      	b.n	7b20 <serial2_set_tx+0x38>
			case 31: CORE_PIN31_CONFIG = 0; break; // PTE0
    7b32:	4a08      	ldr	r2, [pc, #32]	; (7b54 <serial2_set_tx+0x6c>)
    7b34:	2400      	movs	r4, #0
    7b36:	6014      	str	r4, [r2, #0]
    7b38:	e7e8      	b.n	7b0c <serial2_set_tx+0x24>
			case 10: CORE_PIN10_CONFIG = cfg | PORT_PCR_MUX(3); break;
    7b3a:	4a07      	ldr	r2, [pc, #28]	; (7b58 <serial2_set_tx+0x70>)
    7b3c:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    7b40:	6011      	str	r1, [r2, #0]
    7b42:	e7ed      	b.n	7b20 <serial2_set_tx+0x38>
			case 10: CORE_PIN10_CONFIG = 0; break; // PTC4
    7b44:	4a04      	ldr	r2, [pc, #16]	; (7b58 <serial2_set_tx+0x70>)
    7b46:	2400      	movs	r4, #0
    7b48:	6014      	str	r4, [r2, #0]
    7b4a:	e7df      	b.n	7b0c <serial2_set_tx+0x24>
    7b4c:	20000ce3 	.word	0x20000ce3
    7b50:	40048034 	.word	0x40048034
    7b54:	4004d000 	.word	0x4004d000
    7b58:	4004b010 	.word	0x4004b010

00007b5c <serial2_set_rx>:

void serial2_set_rx(uint8_t pin)
{
	#if defined(KINETISK)
	if (pin == rx_pin_num) return;
    7b5c:	4b12      	ldr	r3, [pc, #72]	; (7ba8 <serial2_set_rx+0x4c>)
    7b5e:	781a      	ldrb	r2, [r3, #0]
    7b60:	4290      	cmp	r0, r2
    7b62:	d00c      	beq.n	7b7e <serial2_set_rx+0x22>
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    7b64:	4911      	ldr	r1, [pc, #68]	; (7bac <serial2_set_rx+0x50>)
    7b66:	6809      	ldr	r1, [r1, #0]
    7b68:	0509      	lsls	r1, r1, #20
    7b6a:	d507      	bpl.n	7b7c <serial2_set_rx+0x20>
		switch (rx_pin_num) {
    7b6c:	2a09      	cmp	r2, #9
    7b6e:	d016      	beq.n	7b9e <serial2_set_rx+0x42>
    7b70:	2a1a      	cmp	r2, #26
    7b72:	d00a      	beq.n	7b8a <serial2_set_rx+0x2e>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = 0; break;
			#endif
		}
		switch (pin) {
    7b74:	2809      	cmp	r0, #9
    7b76:	d00d      	beq.n	7b94 <serial2_set_rx+0x38>
    7b78:	281a      	cmp	r0, #26
    7b7a:	d001      	beq.n	7b80 <serial2_set_rx+0x24>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	rx_pin_num = pin;
    7b7c:	7018      	strb	r0, [r3, #0]
    7b7e:	4770      	bx	lr
			case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    7b80:	4a0b      	ldr	r2, [pc, #44]	; (7bb0 <serial2_set_rx+0x54>)
    7b82:	f240 3113 	movw	r1, #787	; 0x313
    7b86:	6011      	str	r1, [r2, #0]
    7b88:	e7f8      	b.n	7b7c <serial2_set_rx+0x20>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    7b8a:	4a09      	ldr	r2, [pc, #36]	; (7bb0 <serial2_set_rx+0x54>)
    7b8c:	2100      	movs	r1, #0
		switch (pin) {
    7b8e:	2809      	cmp	r0, #9
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    7b90:	6011      	str	r1, [r2, #0]
		switch (pin) {
    7b92:	d1f1      	bne.n	7b78 <serial2_set_rx+0x1c>
			case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    7b94:	4a07      	ldr	r2, [pc, #28]	; (7bb4 <serial2_set_rx+0x58>)
    7b96:	f240 3113 	movw	r1, #787	; 0x313
    7b9a:	6011      	str	r1, [r2, #0]
    7b9c:	e7ee      	b.n	7b7c <serial2_set_rx+0x20>
			case 9: CORE_PIN9_CONFIG = 0; break; // PTC3
    7b9e:	4a05      	ldr	r2, [pc, #20]	; (7bb4 <serial2_set_rx+0x58>)
    7ba0:	2100      	movs	r1, #0
    7ba2:	6011      	str	r1, [r2, #0]
    7ba4:	e7e6      	b.n	7b74 <serial2_set_rx+0x18>
    7ba6:	bf00      	nop
    7ba8:	20000ce2 	.word	0x20000ce2
    7bac:	40048034 	.word	0x40048034
    7bb0:	4004d004 	.word	0x4004d004
    7bb4:	4004b00c 	.word	0x4004b00c

00007bb8 <serial2_set_rts>:
	#endif
}

int serial2_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    7bb8:	4b0d      	ldr	r3, [pc, #52]	; (7bf0 <serial2_set_rts+0x38>)
    7bba:	681b      	ldr	r3, [r3, #0]
    7bbc:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
{
    7bc0:	b510      	push	{r4, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    7bc2:	d005      	beq.n	7bd0 <serial2_set_rts+0x18>
	if (pin < CORE_NUM_DIGITAL) {
    7bc4:	2821      	cmp	r0, #33	; 0x21
    7bc6:	d905      	bls.n	7bd4 <serial2_set_rts+0x1c>
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
		rts_assert();
	} else {
		rts_pin = NULL;
    7bc8:	4b0a      	ldr	r3, [pc, #40]	; (7bf4 <serial2_set_rts+0x3c>)
    7bca:	2000      	movs	r0, #0
    7bcc:	6018      	str	r0, [r3, #0]
		return 0;
    7bce:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    7bd0:	4618      	mov	r0, r3
		return 0;
	}
	UART1_MODEM |= UART_MODEM_RXRTSE;
*/
	return 1;
}
    7bd2:	bd10      	pop	{r4, pc}
		rts_pin = portOutputRegister(pin);
    7bd4:	4b08      	ldr	r3, [pc, #32]	; (7bf8 <serial2_set_rts+0x40>)
    7bd6:	4c07      	ldr	r4, [pc, #28]	; (7bf4 <serial2_set_rts+0x3c>)
    7bd8:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    7bdc:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    7bde:	2101      	movs	r1, #1
    7be0:	f7ff f9e0 	bl	6fa4 <pinMode>
		rts_assert();
    7be4:	6823      	ldr	r3, [r4, #0]
    7be6:	2200      	movs	r2, #0
    7be8:	701a      	strb	r2, [r3, #0]
	return 1;
    7bea:	2001      	movs	r0, #1
    7bec:	bd10      	pop	{r4, pc}
    7bee:	bf00      	nop
    7bf0:	40048034 	.word	0x40048034
    7bf4:	200024b4 	.word	0x200024b4
    7bf8:	00011b14 	.word	0x00011b14

00007bfc <serial2_set_cts>:

int serial2_set_cts(uint8_t pin)
{
#if defined(KINETISK)
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    7bfc:	4b0c      	ldr	r3, [pc, #48]	; (7c30 <serial2_set_cts+0x34>)
    7bfe:	681b      	ldr	r3, [r3, #0]
    7c00:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    7c04:	d006      	beq.n	7c14 <serial2_set_cts+0x18>
	if (pin == 23) {
    7c06:	2817      	cmp	r0, #23
    7c08:	d006      	beq.n	7c18 <serial2_set_cts+0x1c>
	#if defined(__MK64FX512__) || defined(__MK66FX1M0__)  // on T3.5 or T3.6
	} else if (pin == 60) {
		CORE_PIN60_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
	#endif
	} else {
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    7c0a:	4b0a      	ldr	r3, [pc, #40]	; (7c34 <serial2_set_cts+0x38>)
    7c0c:	7b5a      	ldrb	r2, [r3, #13]
    7c0e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    7c12:	735a      	strb	r2, [r3, #13]
		return 0;
    7c14:	2000      	movs	r0, #0
    7c16:	4770      	bx	lr
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    7c18:	4a07      	ldr	r2, [pc, #28]	; (7c38 <serial2_set_cts+0x3c>)
	}
	UART1_MODEM |= UART_MODEM_TXCTSE;
    7c1a:	4b06      	ldr	r3, [pc, #24]	; (7c34 <serial2_set_cts+0x38>)
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    7c1c:	f240 3102 	movw	r1, #770	; 0x302
    7c20:	6011      	str	r1, [r2, #0]
	UART1_MODEM |= UART_MODEM_TXCTSE;
    7c22:	7b5a      	ldrb	r2, [r3, #13]
    7c24:	f042 0201 	orr.w	r2, r2, #1
    7c28:	735a      	strb	r2, [r3, #13]
	return 1;
    7c2a:	2001      	movs	r0, #1
    7c2c:	4770      	bx	lr
    7c2e:	bf00      	nop
    7c30:	40048034 	.word	0x40048034
    7c34:	4006b000 	.word	0x4006b000
    7c38:	4004b008 	.word	0x4004b008

00007c3c <serial2_putchar>:
	return 0;
#endif
}

void serial2_putchar(uint32_t c)
{
    7c3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    7c40:	4b22      	ldr	r3, [pc, #136]	; (7ccc <serial2_putchar+0x90>)
    7c42:	681b      	ldr	r3, [r3, #0]
    7c44:	051a      	lsls	r2, r3, #20
{
    7c46:	4681      	mov	r9, r0
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    7c48:	d539      	bpl.n	7cbe <serial2_putchar+0x82>
	if (transmit_pin) transmit_assert();
    7c4a:	4b21      	ldr	r3, [pc, #132]	; (7cd0 <serial2_putchar+0x94>)
    7c4c:	681b      	ldr	r3, [r3, #0]
    7c4e:	b10b      	cbz	r3, 7c54 <serial2_putchar+0x18>
    7c50:	2201      	movs	r2, #1
    7c52:	701a      	strb	r2, [r3, #0]
	head = tx_buffer_head;
    7c54:	f8df 808c 	ldr.w	r8, [pc, #140]	; 7ce4 <serial2_putchar+0xa8>
    7c58:	4d1e      	ldr	r5, [pc, #120]	; (7cd4 <serial2_putchar+0x98>)
    7c5a:	f898 4000 	ldrb.w	r4, [r8]
    7c5e:	4f1e      	ldr	r7, [pc, #120]	; (7cd8 <serial2_putchar+0x9c>)
	if (++head >= SERIAL2_TX_BUFFER_SIZE) head = 0;
	while (tx_buffer_tail == head) {
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART1_S1 & UART_S1_TDRE)) {
    7c60:	4e1e      	ldr	r6, [pc, #120]	; (7cdc <serial2_putchar+0xa0>)
	if (++head >= SERIAL2_TX_BUFFER_SIZE) head = 0;
    7c62:	3401      	adds	r4, #1
    7c64:	2c27      	cmp	r4, #39	; 0x27
    7c66:	bf8a      	itet	hi
    7c68:	f04f 0a00 	movhi.w	sl, #0
    7c6c:	fa5f fa84 	uxtbls.w	sl, r4
    7c70:	4654      	movhi	r4, sl
	while (tx_buffer_tail == head) {
    7c72:	46ab      	mov	fp, r5
    7c74:	782b      	ldrb	r3, [r5, #0]
    7c76:	429c      	cmp	r4, r3
    7c78:	d115      	bne.n	7ca6 <serial2_putchar+0x6a>
		int priority = nvic_execution_priority();
    7c7a:	f7fe ffcf 	bl	6c1c <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    7c7e:	2840      	cmp	r0, #64	; 0x40
    7c80:	dc1f      	bgt.n	7cc2 <serial2_putchar+0x86>
			if ((UART1_S1 & UART_S1_TDRE)) {
    7c82:	7933      	ldrb	r3, [r6, #4]
    7c84:	061b      	lsls	r3, r3, #24
    7c86:	d5f5      	bpl.n	7c74 <serial2_putchar+0x38>
				uint32_t tail = tx_buffer_tail;
    7c88:	f89b 3000 	ldrb.w	r3, [fp]
				if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    7c8c:	3301      	adds	r3, #1
    7c8e:	2b27      	cmp	r3, #39	; 0x27
    7c90:	bf86      	itte	hi
    7c92:	2200      	movhi	r2, #0
    7c94:	4613      	movhi	r3, r2
    7c96:	b2da      	uxtbls	r2, r3
				n = tx_buffer[tail];
    7c98:	5cfb      	ldrb	r3, [r7, r3]
    7c9a:	b2db      	uxtb	r3, r3
				if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART1_D = n;
    7c9c:	71f3      	strb	r3, [r6, #7]
				tx_buffer_tail = tail;
    7c9e:	702a      	strb	r2, [r5, #0]
	while (tx_buffer_tail == head) {
    7ca0:	782b      	ldrb	r3, [r5, #0]
    7ca2:	429c      	cmp	r4, r3
    7ca4:	d0e9      	beq.n	7c7a <serial2_putchar+0x3e>
		} else if (priority >= 256) {
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
    7ca6:	490e      	ldr	r1, [pc, #56]	; (7ce0 <serial2_putchar+0xa4>)
	tx_buffer_head = head;
	UART1_C2 = C2_TX_ACTIVE;
    7ca8:	4b0c      	ldr	r3, [pc, #48]	; (7cdc <serial2_putchar+0xa0>)
	tx_buffer[head] = c;
    7caa:	fa5f f989 	uxtb.w	r9, r9
	transmitting = 1;
    7cae:	2001      	movs	r0, #1
	UART1_C2 = C2_TX_ACTIVE;
    7cb0:	22bc      	movs	r2, #188	; 0xbc
	tx_buffer[head] = c;
    7cb2:	f807 9004 	strb.w	r9, [r7, r4]
	transmitting = 1;
    7cb6:	7008      	strb	r0, [r1, #0]
	tx_buffer_head = head;
    7cb8:	f888 a000 	strb.w	sl, [r8]
	UART1_C2 = C2_TX_ACTIVE;
    7cbc:	70da      	strb	r2, [r3, #3]
    7cbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (priority >= 256) {
    7cc2:	28ff      	cmp	r0, #255	; 0xff
    7cc4:	ddd6      	ble.n	7c74 <serial2_putchar+0x38>
			yield(); // wait
    7cc6:	f002 fa4b 	bl	a160 <yield>
    7cca:	e7d3      	b.n	7c74 <serial2_putchar+0x38>
    7ccc:	40048034 	.word	0x40048034
    7cd0:	20002528 	.word	0x20002528
    7cd4:	20002525 	.word	0x20002525
    7cd8:	200024bc 	.word	0x200024bc
    7cdc:	4006b000 	.word	0x4006b000
    7ce0:	200024b8 	.word	0x200024b8
    7ce4:	2000252c 	.word	0x2000252c

00007ce8 <serial2_write>:
}

#ifdef HAS_KINETISK_UART1_FIFO
void serial2_write(const void *buf, unsigned int count)
{
    7ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    7cec:	4b2c      	ldr	r3, [pc, #176]	; (7da0 <serial2_write+0xb8>)
    7cee:	681b      	ldr	r3, [r3, #0]
    7cf0:	051a      	lsls	r2, r3, #20
{
    7cf2:	b083      	sub	sp, #12
    7cf4:	4607      	mov	r7, r0
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    7cf6:	d550      	bpl.n	7d9a <serial2_write+0xb2>
	if (transmit_pin) transmit_assert();
    7cf8:	4b2a      	ldr	r3, [pc, #168]	; (7da4 <serial2_write+0xbc>)
    7cfa:	681b      	ldr	r3, [r3, #0]
    7cfc:	b10b      	cbz	r3, 7d02 <serial2_write+0x1a>
    7cfe:	2201      	movs	r2, #1
    7d00:	701a      	strb	r2, [r3, #0]
	const uint8_t *end = p + count;
    7d02:	1879      	adds	r1, r7, r1
	while (p < end) {
    7d04:	428f      	cmp	r7, r1
	const uint8_t *end = p + count;
    7d06:	9101      	str	r1, [sp, #4]
	while (p < end) {
    7d08:	d244      	bcs.n	7d94 <serial2_write+0xac>
    7d0a:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 7db4 <serial2_write+0xcc>
    7d0e:	4d26      	ldr	r5, [pc, #152]	; (7da8 <serial2_write+0xc0>)
    7d10:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 7db8 <serial2_write+0xd0>
		head = tx_buffer_head;
		if (++head >= SERIAL2_TX_BUFFER_SIZE) head = 0;
		if (tx_buffer_tail == head) {
			UART1_C2 = C2_TX_ACTIVE;
    7d14:	f8df 9098 	ldr.w	r9, [pc, #152]	; 7db0 <serial2_write+0xc8>
    7d18:	e00b      	b.n	7d32 <serial2_write+0x4a>
				} else if (priority >= 256) {
					yield();
				}
			} while (tx_buffer_tail == head);
		}
		tx_buffer[head] = *p++;
    7d1a:	f817 3b01 	ldrb.w	r3, [r7], #1
		transmitting = 1;
    7d1e:	4a23      	ldr	r2, [pc, #140]	; (7dac <serial2_write+0xc4>)
		tx_buffer[head] = *p++;
    7d20:	f80b 3006 	strb.w	r3, [fp, r6]
		transmitting = 1;
    7d24:	2301      	movs	r3, #1
    7d26:	7013      	strb	r3, [r2, #0]
	while (p < end) {
    7d28:	9b01      	ldr	r3, [sp, #4]
		tx_buffer_head = head;
    7d2a:	f88a 8000 	strb.w	r8, [sl]
	while (p < end) {
    7d2e:	429f      	cmp	r7, r3
    7d30:	d030      	beq.n	7d94 <serial2_write+0xac>
		head = tx_buffer_head;
    7d32:	f89a 6000 	ldrb.w	r6, [sl]
		if (tx_buffer_tail == head) {
    7d36:	782c      	ldrb	r4, [r5, #0]
		if (++head >= SERIAL2_TX_BUFFER_SIZE) head = 0;
    7d38:	3601      	adds	r6, #1
    7d3a:	2e27      	cmp	r6, #39	; 0x27
    7d3c:	bf84      	itt	hi
    7d3e:	f04f 0800 	movhi.w	r8, #0
    7d42:	4646      	movhi	r6, r8
		if (tx_buffer_tail == head) {
    7d44:	b2e4      	uxtb	r4, r4
    7d46:	bf98      	it	ls
    7d48:	fa5f f886 	uxtbls.w	r8, r6
    7d4c:	42b4      	cmp	r4, r6
    7d4e:	d1e4      	bne.n	7d1a <serial2_write+0x32>
			UART1_C2 = C2_TX_ACTIVE;
    7d50:	23bc      	movs	r3, #188	; 0xbc
    7d52:	f889 3003 	strb.w	r3, [r9, #3]
    7d56:	e006      	b.n	7d66 <serial2_write+0x7e>
					if ((UART1_S1 & UART_S1_TDRE)) {
    7d58:	f899 3004 	ldrb.w	r3, [r9, #4]
    7d5c:	061b      	lsls	r3, r3, #24
    7d5e:	d40b      	bmi.n	7d78 <serial2_write+0x90>
			} while (tx_buffer_tail == head);
    7d60:	782b      	ldrb	r3, [r5, #0]
    7d62:	429c      	cmp	r4, r3
    7d64:	d1d9      	bne.n	7d1a <serial2_write+0x32>
				int priority = nvic_execution_priority();
    7d66:	f7fe ff59 	bl	6c1c <nvic_execution_priority>
				if (priority <= IRQ_PRIORITY) {
    7d6a:	2840      	cmp	r0, #64	; 0x40
    7d6c:	ddf4      	ble.n	7d58 <serial2_write+0x70>
				} else if (priority >= 256) {
    7d6e:	28ff      	cmp	r0, #255	; 0xff
    7d70:	ddf6      	ble.n	7d60 <serial2_write+0x78>
					yield();
    7d72:	f002 f9f5 	bl	a160 <yield>
    7d76:	e7f3      	b.n	7d60 <serial2_write+0x78>
						uint32_t tail = tx_buffer_tail;
    7d78:	782b      	ldrb	r3, [r5, #0]
						if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    7d7a:	3301      	adds	r3, #1
    7d7c:	2b27      	cmp	r3, #39	; 0x27
    7d7e:	bf86      	itte	hi
    7d80:	2200      	movhi	r2, #0
    7d82:	4613      	movhi	r3, r2
    7d84:	b2da      	uxtbls	r2, r3
						n = tx_buffer[tail];
    7d86:	f81b 3003 	ldrb.w	r3, [fp, r3]
    7d8a:	b2db      	uxtb	r3, r3
						UART1_D = n;
    7d8c:	f889 3007 	strb.w	r3, [r9, #7]
						tx_buffer_tail = tail;
    7d90:	702a      	strb	r2, [r5, #0]
    7d92:	e7e5      	b.n	7d60 <serial2_write+0x78>
	}
	UART1_C2 = C2_TX_ACTIVE;
    7d94:	4b06      	ldr	r3, [pc, #24]	; (7db0 <serial2_write+0xc8>)
    7d96:	22bc      	movs	r2, #188	; 0xbc
    7d98:	70da      	strb	r2, [r3, #3]
}
    7d9a:	b003      	add	sp, #12
    7d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7da0:	40048034 	.word	0x40048034
    7da4:	20002528 	.word	0x20002528
    7da8:	20002525 	.word	0x20002525
    7dac:	200024b8 	.word	0x200024b8
    7db0:	4006b000 	.word	0x4006b000
    7db4:	2000252c 	.word	0x2000252c
    7db8:	200024bc 	.word	0x200024bc

00007dbc <serial2_flush>:
	while (count-- > 0) serial2_putchar(*p++);
}
#endif

void serial2_flush(void)
{
    7dbc:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    7dbe:	4c04      	ldr	r4, [pc, #16]	; (7dd0 <serial2_flush+0x14>)
    7dc0:	7823      	ldrb	r3, [r4, #0]
    7dc2:	b123      	cbz	r3, 7dce <serial2_flush+0x12>
    7dc4:	f002 f9cc 	bl	a160 <yield>
    7dc8:	7823      	ldrb	r3, [r4, #0]
    7dca:	2b00      	cmp	r3, #0
    7dcc:	d1fa      	bne.n	7dc4 <serial2_flush+0x8>
    7dce:	bd10      	pop	{r4, pc}
    7dd0:	200024b8 	.word	0x200024b8

00007dd4 <serial2_write_buffer_free>:

int serial2_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    7dd4:	4b06      	ldr	r3, [pc, #24]	; (7df0 <serial2_write_buffer_free+0x1c>)
	tail = tx_buffer_tail;
    7dd6:	4a07      	ldr	r2, [pc, #28]	; (7df4 <serial2_write_buffer_free+0x20>)
	head = tx_buffer_head;
    7dd8:	781b      	ldrb	r3, [r3, #0]
	tail = tx_buffer_tail;
    7dda:	7812      	ldrb	r2, [r2, #0]
	head = tx_buffer_head;
    7ddc:	b2db      	uxtb	r3, r3
	tail = tx_buffer_tail;
    7dde:	b2d2      	uxtb	r2, r2
	if (head >= tail) return SERIAL2_TX_BUFFER_SIZE - 1 - head + tail;
    7de0:	4293      	cmp	r3, r2
    7de2:	bf2c      	ite	cs
    7de4:	3227      	addcs	r2, #39	; 0x27
	return tail - head - 1;
    7de6:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
    7dea:	1ad0      	subs	r0, r2, r3
}
    7dec:	4770      	bx	lr
    7dee:	bf00      	nop
    7df0:	2000252c 	.word	0x2000252c
    7df4:	20002525 	.word	0x20002525

00007df8 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7df8:	4a05      	ldr	r2, [pc, #20]	; (7e10 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    7dfa:	4b06      	ldr	r3, [pc, #24]	; (7e14 <serial2_available+0x1c>)
	head = rx_buffer_head;
    7dfc:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    7dfe:	781b      	ldrb	r3, [r3, #0]
	head = rx_buffer_head;
    7e00:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    7e02:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    7e04:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    7e06:	bf38      	it	cc
    7e08:	3040      	addcc	r0, #64	; 0x40
    7e0a:	1ac0      	subs	r0, r0, r3
}
    7e0c:	4770      	bx	lr
    7e0e:	bf00      	nop
    7e10:	20002524 	.word	0x20002524
    7e14:	200024b9 	.word	0x200024b9

00007e18 <serial2_getchar>:

int serial2_getchar(void)
{
    7e18:	b430      	push	{r4, r5}
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    7e1a:	4b14      	ldr	r3, [pc, #80]	; (7e6c <serial2_getchar+0x54>)
	tail = rx_buffer_tail;
    7e1c:	4914      	ldr	r1, [pc, #80]	; (7e70 <serial2_getchar+0x58>)
	head = rx_buffer_head;
    7e1e:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    7e20:	780b      	ldrb	r3, [r1, #0]
	head = rx_buffer_head;
    7e22:	b2d2      	uxtb	r2, r2
	tail = rx_buffer_tail;
    7e24:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    7e26:	429a      	cmp	r2, r3
    7e28:	d01d      	beq.n	7e66 <serial2_getchar+0x4e>
	if (++tail >= SERIAL2_RX_BUFFER_SIZE) tail = 0;
    7e2a:	3301      	adds	r3, #1
    7e2c:	2b3f      	cmp	r3, #63	; 0x3f
	c = rx_buffer[tail];
    7e2e:	4811      	ldr	r0, [pc, #68]	; (7e74 <serial2_getchar+0x5c>)
	if (++tail >= SERIAL2_RX_BUFFER_SIZE) tail = 0;
    7e30:	d810      	bhi.n	7e54 <serial2_getchar+0x3c>
	rx_buffer_tail = tail;
	if (rts_pin) {
    7e32:	4c11      	ldr	r4, [pc, #68]	; (7e78 <serial2_getchar+0x60>)
	c = rx_buffer[tail];
    7e34:	5cc0      	ldrb	r0, [r0, r3]
	if (rts_pin) {
    7e36:	6824      	ldr	r4, [r4, #0]
	rx_buffer_tail = tail;
    7e38:	b2dd      	uxtb	r5, r3
	c = rx_buffer[tail];
    7e3a:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    7e3c:	700d      	strb	r5, [r1, #0]
	if (rts_pin) {
    7e3e:	b13c      	cbz	r4, 7e50 <serial2_getchar+0x38>
		int avail;
		if (head >= tail) avail = head - tail;
    7e40:	429a      	cmp	r2, r3
		else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    7e42:	bf38      	it	cc
    7e44:	3240      	addcc	r2, #64	; 0x40
    7e46:	1ad3      	subs	r3, r2, r3
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
    7e48:	2b1a      	cmp	r3, #26
    7e4a:	dc01      	bgt.n	7e50 <serial2_getchar+0x38>
    7e4c:	2300      	movs	r3, #0
    7e4e:	7023      	strb	r3, [r4, #0]
	}
	return c;
}
    7e50:	bc30      	pop	{r4, r5}
    7e52:	4770      	bx	lr
	if (rts_pin) {
    7e54:	4b08      	ldr	r3, [pc, #32]	; (7e78 <serial2_getchar+0x60>)
	c = rx_buffer[tail];
    7e56:	7800      	ldrb	r0, [r0, #0]
	if (rts_pin) {
    7e58:	681c      	ldr	r4, [r3, #0]
	rx_buffer_tail = tail;
    7e5a:	2300      	movs	r3, #0
	c = rx_buffer[tail];
    7e5c:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    7e5e:	700b      	strb	r3, [r1, #0]
	if (rts_pin) {
    7e60:	2c00      	cmp	r4, #0
    7e62:	d1f0      	bne.n	7e46 <serial2_getchar+0x2e>
    7e64:	e7f4      	b.n	7e50 <serial2_getchar+0x38>
	if (head == tail) return -1;
    7e66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7e6a:	e7f1      	b.n	7e50 <serial2_getchar+0x38>
    7e6c:	20002524 	.word	0x20002524
    7e70:	200024b9 	.word	0x200024b9
    7e74:	200024e4 	.word	0x200024e4
    7e78:	200024b4 	.word	0x200024b4

00007e7c <serial2_peek>:

int serial2_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7e7c:	4a08      	ldr	r2, [pc, #32]	; (7ea0 <serial2_peek+0x24>)
	tail = rx_buffer_tail;
    7e7e:	4b09      	ldr	r3, [pc, #36]	; (7ea4 <serial2_peek+0x28>)
	head = rx_buffer_head;
    7e80:	7812      	ldrb	r2, [r2, #0]
	tail = rx_buffer_tail;
    7e82:	781b      	ldrb	r3, [r3, #0]
    7e84:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    7e86:	429a      	cmp	r2, r3
    7e88:	d007      	beq.n	7e9a <serial2_peek+0x1e>
	if (++tail >= SERIAL2_RX_BUFFER_SIZE) tail = 0;
    7e8a:	3301      	adds	r3, #1
    7e8c:	2b40      	cmp	r3, #64	; 0x40
    7e8e:	bf28      	it	cs
    7e90:	2300      	movcs	r3, #0
	return rx_buffer[tail];
    7e92:	4a05      	ldr	r2, [pc, #20]	; (7ea8 <serial2_peek+0x2c>)
    7e94:	5cd0      	ldrb	r0, [r2, r3]
    7e96:	b2c0      	uxtb	r0, r0
    7e98:	4770      	bx	lr
	if (head == tail) return -1;
    7e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    7e9e:	4770      	bx	lr
    7ea0:	20002524 	.word	0x20002524
    7ea4:	200024b9 	.word	0x200024b9
    7ea8:	200024e4 	.word	0x200024e4

00007eac <serial2_clear>:

void serial2_clear(void)
{
#ifdef HAS_KINETISK_UART1_FIFO
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    7eac:	4b0d      	ldr	r3, [pc, #52]	; (7ee4 <serial2_clear+0x38>)
    7eae:	681b      	ldr	r3, [r3, #0]
    7eb0:	051b      	lsls	r3, r3, #20
{
    7eb2:	b430      	push	{r4, r5}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    7eb4:	d514      	bpl.n	7ee0 <serial2_clear+0x34>
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    7eb6:	4b0c      	ldr	r3, [pc, #48]	; (7ee8 <serial2_clear+0x3c>)
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
#endif
	rx_buffer_head = rx_buffer_tail;
    7eb8:	490c      	ldr	r1, [pc, #48]	; (7eec <serial2_clear+0x40>)
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    7eba:	78dd      	ldrb	r5, [r3, #3]
	if (rts_pin) rts_assert();
    7ebc:	480c      	ldr	r0, [pc, #48]	; (7ef0 <serial2_clear+0x44>)
	rx_buffer_head = rx_buffer_tail;
    7ebe:	4a0d      	ldr	r2, [pc, #52]	; (7ef4 <serial2_clear+0x48>)
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    7ec0:	2440      	movs	r4, #64	; 0x40
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    7ec2:	f005 05cb 	and.w	r5, r5, #203	; 0xcb
    7ec6:	70dd      	strb	r5, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    7ec8:	745c      	strb	r4, [r3, #17]
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    7eca:	78dc      	ldrb	r4, [r3, #3]
    7ecc:	f044 0434 	orr.w	r4, r4, #52	; 0x34
    7ed0:	70dc      	strb	r4, [r3, #3]
	rx_buffer_head = rx_buffer_tail;
    7ed2:	7809      	ldrb	r1, [r1, #0]
	if (rts_pin) rts_assert();
    7ed4:	6803      	ldr	r3, [r0, #0]
	rx_buffer_head = rx_buffer_tail;
    7ed6:	b2c9      	uxtb	r1, r1
    7ed8:	7011      	strb	r1, [r2, #0]
	if (rts_pin) rts_assert();
    7eda:	b10b      	cbz	r3, 7ee0 <serial2_clear+0x34>
    7edc:	2200      	movs	r2, #0
    7ede:	701a      	strb	r2, [r3, #0]
}
    7ee0:	bc30      	pop	{r4, r5}
    7ee2:	4770      	bx	lr
    7ee4:	40048034 	.word	0x40048034
    7ee8:	4006b000 	.word	0x4006b000
    7eec:	200024b9 	.word	0x200024b9
    7ef0:	200024b4 	.word	0x200024b4
    7ef4:	20002524 	.word	0x20002524

00007ef8 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    7ef8:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    7efa:	4b39      	ldr	r3, [pc, #228]	; (7fe0 <uart1_status_isr+0xe8>)
    7efc:	791a      	ldrb	r2, [r3, #4]
    7efe:	f012 0f30 	tst.w	r2, #48	; 0x30
    7f02:	d02d      	beq.n	7f60 <uart1_status_isr+0x68>
		__disable_irq();
    7f04:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    7f06:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    7f08:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    7f0c:	2900      	cmp	r1, #0
    7f0e:	d03e      	beq.n	7f8e <uart1_status_isr+0x96>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    7f10:	b662      	cpsie	i
			head = rx_buffer_head;
    7f12:	4f34      	ldr	r7, [pc, #208]	; (7fe4 <uart1_status_isr+0xec>)
			tail = rx_buffer_tail;
    7f14:	4834      	ldr	r0, [pc, #208]	; (7fe8 <uart1_status_isr+0xf0>)
			head = rx_buffer_head;
    7f16:	7839      	ldrb	r1, [r7, #0]
			tail = rx_buffer_tail;
    7f18:	7804      	ldrb	r4, [r0, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    7f1a:	4e34      	ldr	r6, [pc, #208]	; (7fec <uart1_status_isr+0xf4>)
					n = UART1_D;
    7f1c:	461d      	mov	r5, r3
			head = rx_buffer_head;
    7f1e:	b2c9      	uxtb	r1, r1
			tail = rx_buffer_tail;
    7f20:	b2e4      	uxtb	r4, r4
				newhead = head + 1;
    7f22:	1c4b      	adds	r3, r1, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    7f24:	2b40      	cmp	r3, #64	; 0x40
					n = UART1_D;
    7f26:	79e8      	ldrb	r0, [r5, #7]
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    7f28:	bf28      	it	cs
    7f2a:	2300      	movcs	r3, #0
				if (newhead != tail) {
    7f2c:	42a3      	cmp	r3, r4
				}
			} while (--avail > 0);
    7f2e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
					n = UART1_D;
    7f32:	b2c0      	uxtb	r0, r0
					rx_buffer[head] = n;
    7f34:	bf1c      	itt	ne
    7f36:	54f0      	strbne	r0, [r6, r3]
    7f38:	4619      	movne	r1, r3
			} while (--avail > 0);
    7f3a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    7f3e:	d1f0      	bne.n	7f22 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    7f40:	4b2b      	ldr	r3, [pc, #172]	; (7ff0 <uart1_status_isr+0xf8>)
    7f42:	681b      	ldr	r3, [r3, #0]
			rx_buffer_head = head;
    7f44:	b2ca      	uxtb	r2, r1
    7f46:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    7f48:	b153      	cbz	r3, 7f60 <uart1_status_isr+0x68>
				int avail;
				if (head >= tail) avail = head - tail;
    7f4a:	42a1      	cmp	r1, r4
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    7f4c:	bf36      	itet	cc
    7f4e:	f1c4 0440 	rsbcc	r4, r4, #64	; 0x40
				if (head >= tail) avail = head - tail;
    7f52:	ebc4 0101 	rsbcs	r1, r4, r1
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    7f56:	1909      	addcc	r1, r1, r4
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    7f58:	2927      	cmp	r1, #39	; 0x27
    7f5a:	bfc4      	itt	gt
    7f5c:	2201      	movgt	r2, #1
    7f5e:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    7f60:	491f      	ldr	r1, [pc, #124]	; (7fe0 <uart1_status_isr+0xe8>)
    7f62:	78ca      	ldrb	r2, [r1, #3]
    7f64:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    7f66:	0615      	lsls	r5, r2, #24
    7f68:	d416      	bmi.n	7f98 <uart1_status_isr+0xa0>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    7f6a:	0652      	lsls	r2, r2, #25
    7f6c:	d50d      	bpl.n	7f8a <uart1_status_isr+0x92>
    7f6e:	4b1c      	ldr	r3, [pc, #112]	; (7fe0 <uart1_status_isr+0xe8>)
    7f70:	791b      	ldrb	r3, [r3, #4]
    7f72:	065b      	lsls	r3, r3, #25
    7f74:	d509      	bpl.n	7f8a <uart1_status_isr+0x92>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    7f76:	4b1f      	ldr	r3, [pc, #124]	; (7ff4 <uart1_status_isr+0xfc>)
		transmitting = 0;
    7f78:	491f      	ldr	r1, [pc, #124]	; (7ff8 <uart1_status_isr+0x100>)
		if (transmit_pin) transmit_deassert();
    7f7a:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    7f7c:	2200      	movs	r2, #0
    7f7e:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    7f80:	b103      	cbz	r3, 7f84 <uart1_status_isr+0x8c>
    7f82:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    7f84:	4b16      	ldr	r3, [pc, #88]	; (7fe0 <uart1_status_isr+0xe8>)
    7f86:	223c      	movs	r2, #60	; 0x3c
    7f88:	70da      	strb	r2, [r3, #3]
	}
}
    7f8a:	bcf0      	pop	{r4, r5, r6, r7}
    7f8c:	4770      	bx	lr
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    7f8e:	2240      	movs	r2, #64	; 0x40
			c = UART1_D;
    7f90:	79d9      	ldrb	r1, [r3, #7]
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    7f92:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    7f94:	b662      	cpsie	i
    7f96:	e7e3      	b.n	7f60 <uart1_status_isr+0x68>
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    7f98:	790b      	ldrb	r3, [r1, #4]
    7f9a:	061c      	lsls	r4, r3, #24
    7f9c:	d5e5      	bpl.n	7f6a <uart1_status_isr+0x72>
		head = tx_buffer_head;
    7f9e:	4b17      	ldr	r3, [pc, #92]	; (7ffc <uart1_status_isr+0x104>)
		tail = tx_buffer_tail;
    7fa0:	4e17      	ldr	r6, [pc, #92]	; (8000 <uart1_status_isr+0x108>)
		head = tx_buffer_head;
    7fa2:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    7fa4:	7833      	ldrb	r3, [r6, #0]
		head = tx_buffer_head;
    7fa6:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    7fa8:	b2db      	uxtb	r3, r3
			if (tail == head) break;
    7faa:	429c      	cmp	r4, r3
    7fac:	d00e      	beq.n	7fcc <uart1_status_isr+0xd4>
    7fae:	4d15      	ldr	r5, [pc, #84]	; (8004 <uart1_status_isr+0x10c>)
    7fb0:	e001      	b.n	7fb6 <uart1_status_isr+0xbe>
    7fb2:	42a3      	cmp	r3, r4
    7fb4:	d00a      	beq.n	7fcc <uart1_status_isr+0xd4>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    7fb6:	3301      	adds	r3, #1
    7fb8:	2b28      	cmp	r3, #40	; 0x28
    7fba:	bf28      	it	cs
    7fbc:	2300      	movcs	r3, #0
			avail = UART1_S1;
    7fbe:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    7fc0:	5ce8      	ldrb	r0, [r5, r3]
    7fc2:	b2c0      	uxtb	r0, r0
			UART1_D = n;
    7fc4:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    7fc6:	7d08      	ldrb	r0, [r1, #20]
    7fc8:	2807      	cmp	r0, #7
    7fca:	d9f2      	bls.n	7fb2 <uart1_status_isr+0xba>
		tx_buffer_tail = tail;
    7fcc:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    7fce:	4904      	ldr	r1, [pc, #16]	; (7fe0 <uart1_status_isr+0xe8>)
		tx_buffer_tail = tail;
    7fd0:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    7fd2:	790b      	ldrb	r3, [r1, #4]
    7fd4:	0618      	lsls	r0, r3, #24
    7fd6:	bf44      	itt	mi
    7fd8:	237c      	movmi	r3, #124	; 0x7c
    7fda:	70cb      	strbmi	r3, [r1, #3]
    7fdc:	e7c5      	b.n	7f6a <uart1_status_isr+0x72>
    7fde:	bf00      	nop
    7fe0:	4006b000 	.word	0x4006b000
    7fe4:	20002524 	.word	0x20002524
    7fe8:	200024b9 	.word	0x200024b9
    7fec:	200024e4 	.word	0x200024e4
    7ff0:	200024b4 	.word	0x200024b4
    7ff4:	20002528 	.word	0x20002528
    7ff8:	200024b8 	.word	0x200024b8
    7ffc:	2000252c 	.word	0x2000252c
    8000:	20002525 	.word	0x20002525
    8004:	200024bc 	.word	0x200024bc

00008008 <serial3_begin>:
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial3_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    8008:	4a20      	ldr	r2, [pc, #128]	; (808c <serial3_begin+0x84>)
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
    800a:	f8df c09c 	ldr.w	ip, [pc, #156]	; 80a8 <serial3_begin+0xa0>
		case 8:  CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		case 20: CORE_PIN20_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
	}
#endif
#if defined(HAS_KINETISK_UART2)
	UART2_BDH = (divisor >> 13) & 0x1F;
    800e:	4b20      	ldr	r3, [pc, #128]	; (8090 <serial3_begin+0x88>)
	UART2_BDL = divisor & 0xFF;
	UART2_C1 = 0;
#endif
	UART2_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    8010:	4920      	ldr	r1, [pc, #128]	; (8094 <serial3_begin+0x8c>)
{
    8012:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    8016:	f8d2 b000 	ldr.w	fp, [r2]
	rx_buffer_head = 0;
    801a:	f8df a090 	ldr.w	sl, [pc, #144]	; 80ac <serial3_begin+0xa4>
	rx_buffer_tail = 0;
    801e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80b0 <serial3_begin+0xa8>
	tx_buffer_head = 0;
    8022:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80b4 <serial3_begin+0xac>
	transmitting = 0;
    8026:	4f1c      	ldr	r7, [pc, #112]	; (8098 <serial3_begin+0x90>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    8028:	4e1c      	ldr	r6, [pc, #112]	; (809c <serial3_begin+0x94>)
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    802a:	4d1d      	ldr	r5, [pc, #116]	; (80a0 <serial3_begin+0x98>)
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    802c:	4c1d      	ldr	r4, [pc, #116]	; (80a4 <serial3_begin+0x9c>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    802e:	f44b 5b80 	orr.w	fp, fp, #4096	; 0x1000
    8032:	f8c2 b000 	str.w	fp, [r2]
	rx_buffer_head = 0;
    8036:	2200      	movs	r2, #0
    8038:	f88a 2000 	strb.w	r2, [sl]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    803c:	f240 3b13 	movw	fp, #787	; 0x313
	rx_buffer_tail = 0;
    8040:	f889 2000 	strb.w	r2, [r9]
	UART2_BDH = (divisor >> 13) & 0x1F;
    8044:	f3c0 3a44 	ubfx	sl, r0, #13, #5
	tx_buffer_head = 0;
    8048:	f888 2000 	strb.w	r2, [r8]
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    804c:	f44f 7951 	mov.w	r9, #836	; 0x344
	tx_buffer_tail = 0;
    8050:	f88c 2000 	strb.w	r2, [ip]
	UART2_BDL = (divisor >> 5) & 0xFF;
    8054:	f3c0 1847 	ubfx	r8, r0, #5, #8
	transmitting = 0;
    8058:	703a      	strb	r2, [r7, #0]
	UART2_C4 = divisor & 0x1F;
    805a:	f000 001f 	and.w	r0, r0, #31
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    805e:	2740      	movs	r7, #64	; 0x40
	UART2_C2 = C2_TX_INACTIVE;
    8060:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    8064:	f8c6 b000 	str.w	fp, [r6]
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    8068:	f8c5 9000 	str.w	r9, [r5]
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    806c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
	UART2_BDH = (divisor >> 13) & 0x1F;
    8070:	f883 a000 	strb.w	sl, [r3]
	UART2_BDL = (divisor >> 5) & 0xFF;
    8074:	f883 8001 	strb.w	r8, [r3, #1]
	UART2_C4 = divisor & 0x1F;
    8078:	7298      	strb	r0, [r3, #10]
	UART2_C1 = 0;
    807a:	709a      	strb	r2, [r3, #2]
	UART2_PFIFO = 0;
    807c:	741a      	strb	r2, [r3, #16]
	UART2_C2 = C2_TX_INACTIVE;
    807e:	f883 c003 	strb.w	ip, [r3, #3]
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    8082:	7027      	strb	r7, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    8084:	600e      	str	r6, [r1, #0]
}
    8086:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    808a:	4770      	bx	lr
    808c:	40048034 	.word	0x40048034
    8090:	4006c000 	.word	0x4006c000
    8094:	e000e104 	.word	0xe000e104
    8098:	20002534 	.word	0x20002534
    809c:	4004c008 	.word	0x4004c008
    80a0:	4004c00c 	.word	0x4004c00c
    80a4:	e000e431 	.word	0xe000e431
    80a8:	200025a1 	.word	0x200025a1
    80ac:	200025a0 	.word	0x200025a0
    80b0:	20002535 	.word	0x20002535
    80b4:	200025a8 	.word	0x200025a8

000080b8 <serial3_format>:

void serial3_format(uint32_t format)
{
	uint8_t c;

	c = UART2_C1;
    80b8:	4b14      	ldr	r3, [pc, #80]	; (810c <serial3_format+0x54>)
    80ba:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    80bc:	f000 0203 	and.w	r2, r0, #3
    80c0:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    80c4:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART2_C1 = c;
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    80c6:	f000 010f 	and.w	r1, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    80ca:	0742      	lsls	r2, r0, #29
	UART2_C1 = c;
    80cc:	4a0f      	ldr	r2, [pc, #60]	; (810c <serial3_format+0x54>)
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    80ce:	bf48      	it	mi
    80d0:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    80d4:	2904      	cmp	r1, #4
	UART2_C1 = c;
    80d6:	7093      	strb	r3, [r2, #2]
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    80d8:	d013      	beq.n	8102 <serial3_format+0x4a>
	c = UART2_S2 & ~0x10;
    80da:	4b0c      	ldr	r3, [pc, #48]	; (810c <serial3_format+0x54>)
    80dc:	795a      	ldrb	r2, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
	UART2_S2 = c;
    80de:	4b0b      	ldr	r3, [pc, #44]	; (810c <serial3_format+0x54>)
	c = UART2_S2 & ~0x10;
    80e0:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    80e4:	06c1      	lsls	r1, r0, #27
    80e6:	bf48      	it	mi
    80e8:	f042 0210 	orrmi.w	r2, r2, #16
	UART2_S2 = c;
    80ec:	715a      	strb	r2, [r3, #5]
	c = UART2_C3 & ~0x10;
    80ee:	799b      	ldrb	r3, [r3, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    80f0:	0682      	lsls	r2, r0, #26
	c = UART2_C3 & ~0x10;
    80f2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART2_C3 = c;
    80f6:	4a05      	ldr	r2, [pc, #20]	; (810c <serial3_format+0x54>)
	if (format & 0x20) c |= 0x10;		// tx invert
    80f8:	bf48      	it	mi
    80fa:	f043 0310 	orrmi.w	r3, r3, #16
	UART2_C3 = c;
    80fe:	7193      	strb	r3, [r2, #6]
    8100:	4770      	bx	lr
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    8102:	7993      	ldrb	r3, [r2, #6]
    8104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8108:	7193      	strb	r3, [r2, #6]
    810a:	e7e6      	b.n	80da <serial3_format+0x22>
    810c:	4006c000 	.word	0x4006c000

00008110 <serial3_end>:

}

void serial3_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    8110:	4b14      	ldr	r3, [pc, #80]	; (8164 <serial3_end+0x54>)
    8112:	681b      	ldr	r3, [r3, #0]
    8114:	04db      	lsls	r3, r3, #19
{
    8116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    811a:	d51f      	bpl.n	815c <serial3_end+0x4c>
	while (transmitting) yield();  // wait for buffered data to send
    811c:	4c12      	ldr	r4, [pc, #72]	; (8168 <serial3_end+0x58>)
    811e:	7823      	ldrb	r3, [r4, #0]
    8120:	b123      	cbz	r3, 812c <serial3_end+0x1c>
    8122:	f002 f81d 	bl	a160 <yield>
    8126:	7823      	ldrb	r3, [r4, #0]
    8128:	2b00      	cmp	r3, #0
    812a:	d1fa      	bne.n	8122 <serial3_end+0x12>
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    812c:	f8df c054 	ldr.w	ip, [pc, #84]	; 8184 <serial3_end+0x74>
	UART2_C2 = 0;
    8130:	4f0e      	ldr	r7, [pc, #56]	; (816c <serial3_end+0x5c>)
	#if defined(KINETISK)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    8132:	4e0f      	ldr	r6, [pc, #60]	; (8170 <serial3_end+0x60>)
	CORE_PIN8_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    8134:	4d0f      	ldr	r5, [pc, #60]	; (8174 <serial3_end+0x64>)
		case 20: CORE_PIN20_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
	}
	#endif	
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	if (rts_pin) rts_deassert();
    8136:	4c10      	ldr	r4, [pc, #64]	; (8178 <serial3_end+0x68>)
	rx_buffer_head = 0;
    8138:	4810      	ldr	r0, [pc, #64]	; (817c <serial3_end+0x6c>)
	rx_buffer_tail = 0;
    813a:	4911      	ldr	r1, [pc, #68]	; (8180 <serial3_end+0x70>)
	UART2_C2 = 0;
    813c:	2300      	movs	r3, #0
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    813e:	f44f 3800 	mov.w	r8, #131072	; 0x20000
    8142:	f8cc 8000 	str.w	r8, [ip]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    8146:	f240 1203 	movw	r2, #259	; 0x103
	UART2_C2 = 0;
    814a:	70fb      	strb	r3, [r7, #3]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    814c:	6032      	str	r2, [r6, #0]
	CORE_PIN8_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    814e:	602a      	str	r2, [r5, #0]
	if (rts_pin) rts_deassert();
    8150:	6822      	ldr	r2, [r4, #0]
	rx_buffer_head = 0;
    8152:	7003      	strb	r3, [r0, #0]
	rx_buffer_tail = 0;
    8154:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_deassert();
    8156:	b11a      	cbz	r2, 8160 <serial3_end+0x50>
    8158:	2301      	movs	r3, #1
    815a:	7013      	strb	r3, [r2, #0]
    815c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8164:	40048034 	.word	0x40048034
    8168:	20002534 	.word	0x20002534
    816c:	4006c000 	.word	0x4006c000
    8170:	4004c008 	.word	0x4004c008
    8174:	4004c00c 	.word	0x4004c00c
    8178:	20002530 	.word	0x20002530
    817c:	200025a0 	.word	0x200025a0
    8180:	20002535 	.word	0x20002535
    8184:	e000e184 	.word	0xe000e184

00008188 <serial3_set_transmit_pin>:
}

void serial3_set_transmit_pin(uint8_t pin)
{
    8188:	4a0a      	ldr	r2, [pc, #40]	; (81b4 <serial3_set_transmit_pin+0x2c>)
    818a:	b538      	push	{r3, r4, r5, lr}
    818c:	4605      	mov	r5, r0
	while (transmitting) ;
    818e:	7813      	ldrb	r3, [r2, #0]
    8190:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    8194:	2b00      	cmp	r3, #0
    8196:	d1fa      	bne.n	818e <serial3_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    8198:	4628      	mov	r0, r5
    819a:	2101      	movs	r1, #1
    819c:	f7fe ff02 	bl	6fa4 <pinMode>
	digitalWrite(pin, LOW);
    81a0:	4628      	mov	r0, r5
    81a2:	4621      	mov	r1, r4
    81a4:	f7fe feea 	bl	6f7c <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    81a8:	4a03      	ldr	r2, [pc, #12]	; (81b8 <serial3_set_transmit_pin+0x30>)
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <serial3_set_transmit_pin+0x34>)
    81ac:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    81b0:	601a      	str	r2, [r3, #0]
    81b2:	bd38      	pop	{r3, r4, r5, pc}
    81b4:	20002534 	.word	0x20002534
    81b8:	00011b14 	.word	0x00011b14
    81bc:	200025a4 	.word	0x200025a4

000081c0 <serial3_set_tx>:
	transmit_mask = digitalPinToBitMask(pin);
	#endif
}

void serial3_set_tx(uint8_t pin, uint8_t opendrain)
{
    81c0:	b410      	push	{r4}
	uint32_t cfg;

	if (opendrain) pin |= 128;
    81c2:	b109      	cbz	r1, 81c8 <serial3_set_tx+0x8>
    81c4:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <serial3_set_tx+0x48>)
    81ca:	781a      	ldrb	r2, [r3, #0]
    81cc:	4290      	cmp	r0, r2
    81ce:	d017      	beq.n	8200 <serial3_set_tx+0x40>
	if ((SIM_SCGC4 & SIM_SCGC4_UART2)) {
    81d0:	4c0e      	ldr	r4, [pc, #56]	; (820c <serial3_set_tx+0x4c>)
    81d2:	6824      	ldr	r4, [r4, #0]
    81d4:	04e4      	lsls	r4, r4, #19
    81d6:	d512      	bpl.n	81fe <serial3_set_tx+0x3e>
		switch (tx_pin_num & 127) {
    81d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    81dc:	2a08      	cmp	r2, #8
    81de:	d102      	bne.n	81e6 <serial3_set_tx+0x26>
			case 8:  CORE_PIN8_CONFIG = 0; break; // PTD3
    81e0:	4a0b      	ldr	r2, [pc, #44]	; (8210 <serial3_set_tx+0x50>)
    81e2:	2400      	movs	r4, #0
    81e4:	6014      	str	r4, [r2, #0]
	#if defined(KINETISL)
			case 20: CORE_PIN20_CONFIG = 0; break; // PTD5
	#endif
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
    81e6:	2900      	cmp	r1, #0
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
    81e8:	f000 027f 	and.w	r2, r0, #127	; 0x7f
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
    81ec:	bf0c      	ite	eq
    81ee:	2144      	moveq	r1, #68	; 0x44
    81f0:	2160      	movne	r1, #96	; 0x60
		switch (pin & 127) {
    81f2:	2a08      	cmp	r2, #8
    81f4:	d103      	bne.n	81fe <serial3_set_tx+0x3e>
			case 8:  CORE_PIN8_CONFIG = cfg | PORT_PCR_MUX(3); break;
    81f6:	4a06      	ldr	r2, [pc, #24]	; (8210 <serial3_set_tx+0x50>)
    81f8:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    81fc:	6011      	str	r1, [r2, #0]
	#if defined(KINETISL)
			case 20: CORE_PIN20_CONFIG = cfg | PORT_PCR_MUX(3); break;
	#endif
		}
	}
	tx_pin_num = pin;
    81fe:	7018      	strb	r0, [r3, #0]
}
    8200:	f85d 4b04 	ldr.w	r4, [sp], #4
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	20000ce4 	.word	0x20000ce4
    820c:	40048034 	.word	0x40048034
    8210:	4004c00c 	.word	0x4004c00c

00008214 <serial3_set_rx>:

void serial3_set_rx(uint8_t pin)
{
    8214:	4770      	bx	lr
    8216:	bf00      	nop

00008218 <serial3_set_rts>:
	#endif
}

int serial3_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    8218:	4b0d      	ldr	r3, [pc, #52]	; (8250 <serial3_set_rts+0x38>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
{
    8220:	b510      	push	{r4, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    8222:	d005      	beq.n	8230 <serial3_set_rts+0x18>
	if (pin < CORE_NUM_DIGITAL) {
    8224:	2821      	cmp	r0, #33	; 0x21
    8226:	d905      	bls.n	8234 <serial3_set_rts+0x1c>
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
		rts_assert();
	} else {
		rts_pin = NULL;
    8228:	4b0a      	ldr	r3, [pc, #40]	; (8254 <serial3_set_rts+0x3c>)
    822a:	2000      	movs	r0, #0
    822c:	6018      	str	r0, [r3, #0]
		return 0;
    822e:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    8230:	4618      	mov	r0, r3
		return 0;
	}
	UART2_MODEM |= UART_MODEM_RXRTSE;
*/
	return 1;
}
    8232:	bd10      	pop	{r4, pc}
		rts_pin = portOutputRegister(pin);
    8234:	4b08      	ldr	r3, [pc, #32]	; (8258 <serial3_set_rts+0x40>)
    8236:	4c07      	ldr	r4, [pc, #28]	; (8254 <serial3_set_rts+0x3c>)
    8238:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    823c:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    823e:	2101      	movs	r1, #1
    8240:	f7fe feb0 	bl	6fa4 <pinMode>
		rts_assert();
    8244:	6823      	ldr	r3, [r4, #0]
    8246:	2200      	movs	r2, #0
    8248:	701a      	strb	r2, [r3, #0]
	return 1;
    824a:	2001      	movs	r0, #1
    824c:	bd10      	pop	{r4, pc}
    824e:	bf00      	nop
    8250:	40048034 	.word	0x40048034
    8254:	20002530 	.word	0x20002530
    8258:	00011b14 	.word	0x00011b14

0000825c <serial3_set_cts>:

int serial3_set_cts(uint8_t pin)
{
#if defined(KINETISK)
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    825c:	4b0c      	ldr	r3, [pc, #48]	; (8290 <serial3_set_cts+0x34>)
    825e:	681b      	ldr	r3, [r3, #0]
    8260:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    8264:	d006      	beq.n	8274 <serial3_set_cts+0x18>
	if (pin == 14) {
    8266:	280e      	cmp	r0, #14
    8268:	d006      	beq.n	8278 <serial3_set_cts+0x1c>
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
	} else {
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    826a:	4b0a      	ldr	r3, [pc, #40]	; (8294 <serial3_set_cts+0x38>)
    826c:	7b5a      	ldrb	r2, [r3, #13]
    826e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    8272:	735a      	strb	r2, [r3, #13]
		return 0;
    8274:	2000      	movs	r0, #0
    8276:	4770      	bx	lr
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    8278:	4a07      	ldr	r2, [pc, #28]	; (8298 <serial3_set_cts+0x3c>)
	}
	UART2_MODEM |= UART_MODEM_TXCTSE;
    827a:	4b06      	ldr	r3, [pc, #24]	; (8294 <serial3_set_cts+0x38>)
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    827c:	f240 3102 	movw	r1, #770	; 0x302
    8280:	6011      	str	r1, [r2, #0]
	UART2_MODEM |= UART_MODEM_TXCTSE;
    8282:	7b5a      	ldrb	r2, [r3, #13]
    8284:	f042 0201 	orr.w	r2, r2, #1
    8288:	735a      	strb	r2, [r3, #13]
	return 1;
    828a:	2001      	movs	r0, #1
    828c:	4770      	bx	lr
    828e:	bf00      	nop
    8290:	40048034 	.word	0x40048034
    8294:	4006c000 	.word	0x4006c000
    8298:	4004c004 	.word	0x4004c004

0000829c <serial3_putchar>:
	return 0;
#endif
}

void serial3_putchar(uint32_t c)
{
    829c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    82a0:	4b22      	ldr	r3, [pc, #136]	; (832c <serial3_putchar+0x90>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	04da      	lsls	r2, r3, #19
{
    82a6:	4681      	mov	r9, r0
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    82a8:	d539      	bpl.n	831e <serial3_putchar+0x82>
	if (transmit_pin) transmit_assert();
    82aa:	4b21      	ldr	r3, [pc, #132]	; (8330 <serial3_putchar+0x94>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	b10b      	cbz	r3, 82b4 <serial3_putchar+0x18>
    82b0:	2201      	movs	r2, #1
    82b2:	701a      	strb	r2, [r3, #0]
	head = tx_buffer_head;
    82b4:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8344 <serial3_putchar+0xa8>
    82b8:	4d1e      	ldr	r5, [pc, #120]	; (8334 <serial3_putchar+0x98>)
    82ba:	f898 4000 	ldrb.w	r4, [r8]
    82be:	4f1e      	ldr	r7, [pc, #120]	; (8338 <serial3_putchar+0x9c>)
	if (++head >= SERIAL3_TX_BUFFER_SIZE) head = 0;
	while (tx_buffer_tail == head) {
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART2_S1 & UART_S1_TDRE)) {
    82c0:	4e1e      	ldr	r6, [pc, #120]	; (833c <serial3_putchar+0xa0>)
	if (++head >= SERIAL3_TX_BUFFER_SIZE) head = 0;
    82c2:	3401      	adds	r4, #1
    82c4:	2c27      	cmp	r4, #39	; 0x27
    82c6:	bf8a      	itet	hi
    82c8:	f04f 0a00 	movhi.w	sl, #0
    82cc:	fa5f fa84 	uxtbls.w	sl, r4
    82d0:	4654      	movhi	r4, sl
	while (tx_buffer_tail == head) {
    82d2:	46ab      	mov	fp, r5
    82d4:	782b      	ldrb	r3, [r5, #0]
    82d6:	429c      	cmp	r4, r3
    82d8:	d115      	bne.n	8306 <serial3_putchar+0x6a>
		int priority = nvic_execution_priority();
    82da:	f7fe fc9f 	bl	6c1c <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    82de:	2840      	cmp	r0, #64	; 0x40
    82e0:	dc1f      	bgt.n	8322 <serial3_putchar+0x86>
			if ((UART2_S1 & UART_S1_TDRE)) {
    82e2:	7933      	ldrb	r3, [r6, #4]
    82e4:	061b      	lsls	r3, r3, #24
    82e6:	d5f5      	bpl.n	82d4 <serial3_putchar+0x38>
				uint32_t tail = tx_buffer_tail;
    82e8:	f89b 3000 	ldrb.w	r3, [fp]
				if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    82ec:	3301      	adds	r3, #1
    82ee:	2b27      	cmp	r3, #39	; 0x27
    82f0:	bf86      	itte	hi
    82f2:	2200      	movhi	r2, #0
    82f4:	4613      	movhi	r3, r2
    82f6:	b2da      	uxtbls	r2, r3
				n = tx_buffer[tail];
    82f8:	5cfb      	ldrb	r3, [r7, r3]
    82fa:	b2db      	uxtb	r3, r3
				if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART2_D = n;
    82fc:	71f3      	strb	r3, [r6, #7]
				tx_buffer_tail = tail;
    82fe:	702a      	strb	r2, [r5, #0]
	while (tx_buffer_tail == head) {
    8300:	782b      	ldrb	r3, [r5, #0]
    8302:	429c      	cmp	r4, r3
    8304:	d0e9      	beq.n	82da <serial3_putchar+0x3e>
		} else if (priority >= 256) {
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
    8306:	490e      	ldr	r1, [pc, #56]	; (8340 <serial3_putchar+0xa4>)
	tx_buffer_head = head;
	UART2_C2 = C2_TX_ACTIVE;
    8308:	4b0c      	ldr	r3, [pc, #48]	; (833c <serial3_putchar+0xa0>)
	tx_buffer[head] = c;
    830a:	fa5f f989 	uxtb.w	r9, r9
	transmitting = 1;
    830e:	2001      	movs	r0, #1
	UART2_C2 = C2_TX_ACTIVE;
    8310:	22ac      	movs	r2, #172	; 0xac
	tx_buffer[head] = c;
    8312:	f807 9004 	strb.w	r9, [r7, r4]
	transmitting = 1;
    8316:	7008      	strb	r0, [r1, #0]
	tx_buffer_head = head;
    8318:	f888 a000 	strb.w	sl, [r8]
	UART2_C2 = C2_TX_ACTIVE;
    831c:	70da      	strb	r2, [r3, #3]
    831e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (priority >= 256) {
    8322:	28ff      	cmp	r0, #255	; 0xff
    8324:	ddd6      	ble.n	82d4 <serial3_putchar+0x38>
			yield(); // wait
    8326:	f001 ff1b 	bl	a160 <yield>
    832a:	e7d3      	b.n	82d4 <serial3_putchar+0x38>
    832c:	40048034 	.word	0x40048034
    8330:	200025a4 	.word	0x200025a4
    8334:	200025a1 	.word	0x200025a1
    8338:	20002538 	.word	0x20002538
    833c:	4006c000 	.word	0x4006c000
    8340:	20002534 	.word	0x20002534
    8344:	200025a8 	.word	0x200025a8

00008348 <serial3_write>:
}

void serial3_write(const void *buf, unsigned int count)
{
    8348:	b538      	push	{r3, r4, r5, lr}
    834a:	4605      	mov	r5, r0
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial3_putchar(*p++);
    834c:	b131      	cbz	r1, 835c <serial3_write+0x14>
    834e:	460c      	mov	r4, r1
    8350:	f815 0b01 	ldrb.w	r0, [r5], #1
    8354:	f7ff ffa2 	bl	829c <serial3_putchar>
    8358:	3c01      	subs	r4, #1
    835a:	d1f9      	bne.n	8350 <serial3_write+0x8>
    835c:	bd38      	pop	{r3, r4, r5, pc}
    835e:	bf00      	nop

00008360 <serial3_flush>:
}

void serial3_flush(void)
{
    8360:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    8362:	4c04      	ldr	r4, [pc, #16]	; (8374 <serial3_flush+0x14>)
    8364:	7823      	ldrb	r3, [r4, #0]
    8366:	b123      	cbz	r3, 8372 <serial3_flush+0x12>
    8368:	f001 fefa 	bl	a160 <yield>
    836c:	7823      	ldrb	r3, [r4, #0]
    836e:	2b00      	cmp	r3, #0
    8370:	d1fa      	bne.n	8368 <serial3_flush+0x8>
    8372:	bd10      	pop	{r4, pc}
    8374:	20002534 	.word	0x20002534

00008378 <serial3_write_buffer_free>:

int serial3_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    8378:	4b06      	ldr	r3, [pc, #24]	; (8394 <serial3_write_buffer_free+0x1c>)
	tail = tx_buffer_tail;
    837a:	4a07      	ldr	r2, [pc, #28]	; (8398 <serial3_write_buffer_free+0x20>)
	head = tx_buffer_head;
    837c:	781b      	ldrb	r3, [r3, #0]
	tail = tx_buffer_tail;
    837e:	7812      	ldrb	r2, [r2, #0]
	head = tx_buffer_head;
    8380:	b2db      	uxtb	r3, r3
	tail = tx_buffer_tail;
    8382:	b2d2      	uxtb	r2, r2
	if (head >= tail) return SERIAL3_TX_BUFFER_SIZE - 1 - head + tail;
    8384:	4293      	cmp	r3, r2
    8386:	bf2c      	ite	cs
    8388:	3227      	addcs	r2, #39	; 0x27
	return tail - head - 1;
    838a:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
    838e:	1ad0      	subs	r0, r2, r3
}
    8390:	4770      	bx	lr
    8392:	bf00      	nop
    8394:	200025a8 	.word	0x200025a8
    8398:	200025a1 	.word	0x200025a1

0000839c <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    839c:	4a05      	ldr	r2, [pc, #20]	; (83b4 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    839e:	4b06      	ldr	r3, [pc, #24]	; (83b8 <serial3_available+0x1c>)
	head = rx_buffer_head;
    83a0:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    83a2:	781b      	ldrb	r3, [r3, #0]
	head = rx_buffer_head;
    83a4:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    83a6:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    83a8:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    83aa:	bf38      	it	cc
    83ac:	3040      	addcc	r0, #64	; 0x40
    83ae:	1ac0      	subs	r0, r0, r3
}
    83b0:	4770      	bx	lr
    83b2:	bf00      	nop
    83b4:	200025a0 	.word	0x200025a0
    83b8:	20002535 	.word	0x20002535

000083bc <serial3_getchar>:

int serial3_getchar(void)
{
    83bc:	b430      	push	{r4, r5}
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    83be:	4b14      	ldr	r3, [pc, #80]	; (8410 <serial3_getchar+0x54>)
	tail = rx_buffer_tail;
    83c0:	4914      	ldr	r1, [pc, #80]	; (8414 <serial3_getchar+0x58>)
	head = rx_buffer_head;
    83c2:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    83c4:	780b      	ldrb	r3, [r1, #0]
	head = rx_buffer_head;
    83c6:	b2d2      	uxtb	r2, r2
	tail = rx_buffer_tail;
    83c8:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    83ca:	429a      	cmp	r2, r3
    83cc:	d01d      	beq.n	840a <serial3_getchar+0x4e>
	if (++tail >= SERIAL3_RX_BUFFER_SIZE) tail = 0;
    83ce:	3301      	adds	r3, #1
    83d0:	2b3f      	cmp	r3, #63	; 0x3f
	c = rx_buffer[tail];
    83d2:	4811      	ldr	r0, [pc, #68]	; (8418 <serial3_getchar+0x5c>)
	if (++tail >= SERIAL3_RX_BUFFER_SIZE) tail = 0;
    83d4:	d810      	bhi.n	83f8 <serial3_getchar+0x3c>
	rx_buffer_tail = tail;
	if (rts_pin) {
    83d6:	4c11      	ldr	r4, [pc, #68]	; (841c <serial3_getchar+0x60>)
	c = rx_buffer[tail];
    83d8:	5cc0      	ldrb	r0, [r0, r3]
	if (rts_pin) {
    83da:	6824      	ldr	r4, [r4, #0]
	rx_buffer_tail = tail;
    83dc:	b2dd      	uxtb	r5, r3
	c = rx_buffer[tail];
    83de:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    83e0:	700d      	strb	r5, [r1, #0]
	if (rts_pin) {
    83e2:	b13c      	cbz	r4, 83f4 <serial3_getchar+0x38>
		int avail;
		if (head >= tail) avail = head - tail;
    83e4:	429a      	cmp	r2, r3
		else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    83e6:	bf38      	it	cc
    83e8:	3240      	addcc	r2, #64	; 0x40
    83ea:	1ad3      	subs	r3, r2, r3
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
    83ec:	2b1a      	cmp	r3, #26
    83ee:	dc01      	bgt.n	83f4 <serial3_getchar+0x38>
    83f0:	2300      	movs	r3, #0
    83f2:	7023      	strb	r3, [r4, #0]
	}
	return c;
}
    83f4:	bc30      	pop	{r4, r5}
    83f6:	4770      	bx	lr
	if (rts_pin) {
    83f8:	4b08      	ldr	r3, [pc, #32]	; (841c <serial3_getchar+0x60>)
	c = rx_buffer[tail];
    83fa:	7800      	ldrb	r0, [r0, #0]
	if (rts_pin) {
    83fc:	681c      	ldr	r4, [r3, #0]
	rx_buffer_tail = tail;
    83fe:	2300      	movs	r3, #0
	c = rx_buffer[tail];
    8400:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    8402:	700b      	strb	r3, [r1, #0]
	if (rts_pin) {
    8404:	2c00      	cmp	r4, #0
    8406:	d1f0      	bne.n	83ea <serial3_getchar+0x2e>
    8408:	e7f4      	b.n	83f4 <serial3_getchar+0x38>
	if (head == tail) return -1;
    840a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    840e:	e7f1      	b.n	83f4 <serial3_getchar+0x38>
    8410:	200025a0 	.word	0x200025a0
    8414:	20002535 	.word	0x20002535
    8418:	20002560 	.word	0x20002560
    841c:	20002530 	.word	0x20002530

00008420 <serial3_peek>:

int serial3_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    8420:	4a08      	ldr	r2, [pc, #32]	; (8444 <serial3_peek+0x24>)
	tail = rx_buffer_tail;
    8422:	4b09      	ldr	r3, [pc, #36]	; (8448 <serial3_peek+0x28>)
	head = rx_buffer_head;
    8424:	7812      	ldrb	r2, [r2, #0]
	tail = rx_buffer_tail;
    8426:	781b      	ldrb	r3, [r3, #0]
    8428:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    842a:	429a      	cmp	r2, r3
    842c:	d007      	beq.n	843e <serial3_peek+0x1e>
	if (++tail >= SERIAL3_RX_BUFFER_SIZE) tail = 0;
    842e:	3301      	adds	r3, #1
    8430:	2b40      	cmp	r3, #64	; 0x40
    8432:	bf28      	it	cs
    8434:	2300      	movcs	r3, #0
	return rx_buffer[tail];
    8436:	4a05      	ldr	r2, [pc, #20]	; (844c <serial3_peek+0x2c>)
    8438:	5cd0      	ldrb	r0, [r2, r3]
    843a:	b2c0      	uxtb	r0, r0
    843c:	4770      	bx	lr
	if (head == tail) return -1;
    843e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    8442:	4770      	bx	lr
    8444:	200025a0 	.word	0x200025a0
    8448:	20002535 	.word	0x20002535
    844c:	20002560 	.word	0x20002560

00008450 <serial3_clear>:

void serial3_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    8450:	4a05      	ldr	r2, [pc, #20]	; (8468 <serial3_clear+0x18>)
	if (rts_pin) rts_assert();
    8452:	4b06      	ldr	r3, [pc, #24]	; (846c <serial3_clear+0x1c>)
	rx_buffer_head = rx_buffer_tail;
    8454:	7811      	ldrb	r1, [r2, #0]
	if (rts_pin) rts_assert();
    8456:	681b      	ldr	r3, [r3, #0]
	rx_buffer_head = rx_buffer_tail;
    8458:	4a05      	ldr	r2, [pc, #20]	; (8470 <serial3_clear+0x20>)
    845a:	b2c9      	uxtb	r1, r1
    845c:	7011      	strb	r1, [r2, #0]
	if (rts_pin) rts_assert();
    845e:	b10b      	cbz	r3, 8464 <serial3_clear+0x14>
    8460:	2200      	movs	r2, #0
    8462:	701a      	strb	r2, [r3, #0]
    8464:	4770      	bx	lr
    8466:	bf00      	nop
    8468:	20002535 	.word	0x20002535
    846c:	20002530 	.word	0x20002530
    8470:	200025a0 	.word	0x200025a0

00008474 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    8474:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    8476:	4b2b      	ldr	r3, [pc, #172]	; (8524 <uart2_status_isr+0xb0>)
    8478:	791a      	ldrb	r2, [r3, #4]
    847a:	0694      	lsls	r4, r2, #26
    847c:	d520      	bpl.n	84c0 <uart2_status_isr+0x4c>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    847e:	4a2a      	ldr	r2, [pc, #168]	; (8528 <uart2_status_isr+0xb4>)
			n = UART2_D;
    8480:	79d8      	ldrb	r0, [r3, #7]
		head = rx_buffer_head + 1;
    8482:	7813      	ldrb	r3, [r2, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    8484:	4929      	ldr	r1, [pc, #164]	; (852c <uart2_status_isr+0xb8>)
		head = rx_buffer_head + 1;
    8486:	3301      	adds	r3, #1
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
    8488:	2b40      	cmp	r3, #64	; 0x40
		if (head != rx_buffer_tail) {
    848a:	7809      	ldrb	r1, [r1, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
    848c:	bf28      	it	cs
    848e:	2300      	movcs	r3, #0
		if (head != rx_buffer_tail) {
    8490:	4299      	cmp	r1, r3
			n = UART2_D;
    8492:	b2c0      	uxtb	r0, r0
		if (head != rx_buffer_tail) {
    8494:	d003      	beq.n	849e <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    8496:	4c26      	ldr	r4, [pc, #152]	; (8530 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    8498:	b2d9      	uxtb	r1, r3
			rx_buffer[head] = n;
    849a:	54e0      	strb	r0, [r4, r3]
			rx_buffer_head = head;
    849c:	7011      	strb	r1, [r2, #0]
		}
		if (rts_pin) {
    849e:	4a25      	ldr	r2, [pc, #148]	; (8534 <uart2_status_isr+0xc0>)
    84a0:	6811      	ldr	r1, [r2, #0]
    84a2:	b169      	cbz	r1, 84c0 <uart2_status_isr+0x4c>
			int avail;
			tail = tx_buffer_tail;
    84a4:	4a24      	ldr	r2, [pc, #144]	; (8538 <uart2_status_isr+0xc4>)
    84a6:	7812      	ldrb	r2, [r2, #0]
    84a8:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    84aa:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    84ac:	bf36      	itet	cc
    84ae:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			if (head >= tail) avail = head - tail;
    84b2:	ebc2 0303 	rsbcs	r3, r2, r3
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    84b6:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    84b8:	2b27      	cmp	r3, #39	; 0x27
    84ba:	bfc4      	itt	gt
    84bc:	2301      	movgt	r3, #1
    84be:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    84c0:	4a18      	ldr	r2, [pc, #96]	; (8524 <uart2_status_isr+0xb0>)
    84c2:	78d3      	ldrb	r3, [r2, #3]
    84c4:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    84c6:	0618      	lsls	r0, r3, #24
    84c8:	d411      	bmi.n	84ee <uart2_status_isr+0x7a>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    84ca:	065a      	lsls	r2, r3, #25
    84cc:	d50d      	bpl.n	84ea <uart2_status_isr+0x76>
    84ce:	4b15      	ldr	r3, [pc, #84]	; (8524 <uart2_status_isr+0xb0>)
    84d0:	791b      	ldrb	r3, [r3, #4]
    84d2:	065b      	lsls	r3, r3, #25
    84d4:	d509      	bpl.n	84ea <uart2_status_isr+0x76>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    84d6:	4b19      	ldr	r3, [pc, #100]	; (853c <uart2_status_isr+0xc8>)
		transmitting = 0;
    84d8:	4919      	ldr	r1, [pc, #100]	; (8540 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    84da:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    84dc:	2200      	movs	r2, #0
    84de:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    84e0:	b103      	cbz	r3, 84e4 <uart2_status_isr+0x70>
    84e2:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    84e4:	4b0f      	ldr	r3, [pc, #60]	; (8524 <uart2_status_isr+0xb0>)
    84e6:	222c      	movs	r2, #44	; 0x2c
    84e8:	70da      	strb	r2, [r3, #3]
	}
}
    84ea:	bc30      	pop	{r4, r5}
    84ec:	4770      	bx	lr
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    84ee:	7911      	ldrb	r1, [r2, #4]
    84f0:	0609      	lsls	r1, r1, #24
    84f2:	d5ea      	bpl.n	84ca <uart2_status_isr+0x56>
		head = tx_buffer_head;
    84f4:	4813      	ldr	r0, [pc, #76]	; (8544 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    84f6:	4910      	ldr	r1, [pc, #64]	; (8538 <uart2_status_isr+0xc4>)
		head = tx_buffer_head;
    84f8:	7804      	ldrb	r4, [r0, #0]
		tail = tx_buffer_tail;
    84fa:	7808      	ldrb	r0, [r1, #0]
    84fc:	b2c0      	uxtb	r0, r0
		if (head == tail) {
    84fe:	4284      	cmp	r4, r0
    8500:	d00d      	beq.n	851e <uart2_status_isr+0xaa>
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    8502:	1c42      	adds	r2, r0, #1
    8504:	2a27      	cmp	r2, #39	; 0x27
    8506:	bf84      	itt	hi
    8508:	2000      	movhi	r0, #0
    850a:	4602      	movhi	r2, r0
			n = tx_buffer[tail];
    850c:	4d0e      	ldr	r5, [pc, #56]	; (8548 <uart2_status_isr+0xd4>)
			UART2_D = n;
    850e:	4c05      	ldr	r4, [pc, #20]	; (8524 <uart2_status_isr+0xb0>)
    8510:	bf98      	it	ls
    8512:	b2d0      	uxtbls	r0, r2
			n = tx_buffer[tail];
    8514:	5caa      	ldrb	r2, [r5, r2]
    8516:	b2d2      	uxtb	r2, r2
			UART2_D = n;
    8518:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    851a:	7008      	strb	r0, [r1, #0]
    851c:	e7d5      	b.n	84ca <uart2_status_isr+0x56>
			UART2_C2 = C2_TX_COMPLETING;
    851e:	216c      	movs	r1, #108	; 0x6c
    8520:	70d1      	strb	r1, [r2, #3]
    8522:	e7d2      	b.n	84ca <uart2_status_isr+0x56>
    8524:	4006c000 	.word	0x4006c000
    8528:	200025a0 	.word	0x200025a0
    852c:	20002535 	.word	0x20002535
    8530:	20002560 	.word	0x20002560
    8534:	20002530 	.word	0x20002530
    8538:	200025a1 	.word	0x200025a1
    853c:	200025a4 	.word	0x200025a4
    8540:	20002534 	.word	0x20002534
    8544:	200025a8 	.word	0x200025a8
    8548:	20002538 	.word	0x20002538

0000854c <touchRead>:

int touchRead(uint8_t pin)
{
	uint32_t ch;

	if (pin >= NUM_DIGITAL_PINS) return 0;
    854c:	2821      	cmp	r0, #33	; 0x21
{
    854e:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
	if (pin >= NUM_DIGITAL_PINS) return 0;
    8552:	d830      	bhi.n	85b6 <L_70_delayMicroseconds+0x16>
	ch = pin2tsi[pin];
    8554:	4b1a      	ldr	r3, [pc, #104]	; (85c0 <L_70_delayMicroseconds+0x20>)
    8556:	5c19      	ldrb	r1, [r3, r0]
	if (ch == 255) return 0;
    8558:	29ff      	cmp	r1, #255	; 0xff
    855a:	d02c      	beq.n	85b6 <L_70_delayMicroseconds+0x16>

	*portConfigRegister(pin) = PORT_PCR_MUX(0);
    855c:	4c19      	ldr	r4, [pc, #100]	; (85c4 <L_70_delayMicroseconds+0x24>)
	SIM_SCGC5 |= SIM_SCGC5_TSI;
    855e:	4b1a      	ldr	r3, [pc, #104]	; (85c8 <L_70_delayMicroseconds+0x28>)
#if defined(HAS_KINETIS_TSI)
	TSI0_GENCS = 0;
    8560:	4a1a      	ldr	r2, [pc, #104]	; (85cc <L_70_delayMicroseconds+0x2c>)
	TSI0_PEN = (1 << ch);
    8562:	f8df c07c 	ldr.w	ip, [pc, #124]	; 85e0 <L_70_delayMicroseconds+0x40>
	TSI0_SCANC = TSI_SCANC_REFCHRG(3) | TSI_SCANC_EXTCHRG(CURRENT);
    8566:	4e1a      	ldr	r6, [pc, #104]	; (85d0 <L_70_delayMicroseconds+0x30>)
    8568:	4f1a      	ldr	r7, [pc, #104]	; (85d4 <L_70_delayMicroseconds+0x34>)
	TSI0_GENCS = TSI_GENCS_NSCN(NSCAN) | TSI_GENCS_PS(PRESCALE) | TSI_GENCS_TSIEN | TSI_GENCS_SWTS;
    856a:	4d1b      	ldr	r5, [pc, #108]	; (85d8 <L_70_delayMicroseconds+0x38>)
	*portConfigRegister(pin) = PORT_PCR_MUX(0);
    856c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    8570:	2400      	movs	r4, #0
    8572:	6840      	ldr	r0, [r0, #4]
    8574:	6004      	str	r4, [r0, #0]
	SIM_SCGC5 |= SIM_SCGC5_TSI;
    8576:	f8d3 8000 	ldr.w	r8, [r3]
	TSI0_PEN = (1 << ch);
    857a:	2001      	movs	r0, #1
	SIM_SCGC5 |= SIM_SCGC5_TSI;
    857c:	f048 0820 	orr.w	r8, r8, #32
	TSI0_PEN = (1 << ch);
    8580:	4088      	lsls	r0, r1
	SIM_SCGC5 |= SIM_SCGC5_TSI;
    8582:	f8c3 8000 	str.w	r8, [r3]
	TSI0_GENCS = 0;
    8586:	6014      	str	r4, [r2, #0]
	__asm__ volatile(
    8588:	23f0      	movs	r3, #240	; 0xf0
	TSI0_PEN = (1 << ch);
    858a:	f8cc 0000 	str.w	r0, [ip]
	TSI0_SCANC = TSI_SCANC_REFCHRG(3) | TSI_SCANC_EXTCHRG(CURRENT);
    858e:	6037      	str	r7, [r6, #0]
	TSI0_GENCS = TSI_GENCS_NSCN(NSCAN) | TSI_GENCS_PS(PRESCALE) | TSI_GENCS_TSIEN | TSI_GENCS_SWTS;
    8590:	6015      	str	r5, [r2, #0]

00008592 <L_53_delayMicroseconds>:
    8592:	3b01      	subs	r3, #1
    8594:	f47f affd 	bne.w	8592 <L_53_delayMicroseconds>
	delayMicroseconds(10);
	while (TSI0_GENCS & TSI_GENCS_SCNIP) ; // wait
    8598:	6813      	ldr	r3, [r2, #0]
    859a:	059b      	lsls	r3, r3, #22
    859c:	d4fc      	bmi.n	8598 <L_53_delayMicroseconds+0x6>
    859e:	2318      	movs	r3, #24

000085a0 <L_70_delayMicroseconds>:
    85a0:	3b01      	subs	r3, #1
    85a2:	f47f affd 	bne.w	85a0 <L_70_delayMicroseconds>
	delayMicroseconds(1);
	return *((volatile uint16_t *)(&TSI0_CNTR1) + ch);
    85a6:	4b0d      	ldr	r3, [pc, #52]	; (85dc <L_70_delayMicroseconds+0x3c>)
    85a8:	b209      	sxth	r1, r1
	delayMicroseconds(10);
	while (TSI0_GENCS & TSI_GENCS_SCNIP) ; // wait
	delayMicroseconds(1);
	return TSI0_DATA & 0xFFFF;
#endif
}
    85aa:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
	return *((volatile uint16_t *)(&TSI0_CNTR1) + ch);
    85ae:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
    85b2:	b280      	uxth	r0, r0
}
    85b4:	4770      	bx	lr
	if (pin >= NUM_DIGITAL_PINS) return 0;
    85b6:	2000      	movs	r0, #0
}
    85b8:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    85bc:	4770      	bx	lr
    85be:	bf00      	nop
    85c0:	00011c24 	.word	0x00011c24
    85c4:	00011b14 	.word	0x00011b14
    85c8:	40048038 	.word	0x40048038
    85cc:	40045000 	.word	0x40045000
    85d0:	40045004 	.word	0x40045004
    85d4:	03020000 	.word	0x03020000
    85d8:	004a0180 	.word	0x004a0180
    85dc:	40045100 	.word	0x40045100
    85e0:	40045008 	.word	0x40045008

000085e4 <usb_init_serialnumber>:
        3,
        {0,0,0,0,0,0,0,0,0,0}
};

void usb_init_serialnumber(void)
{
    85e4:	b570      	push	{r4, r5, r6, lr}
    85e6:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    85e8:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    85ea:	4b18      	ldr	r3, [pc, #96]	; (864c <usb_init_serialnumber+0x68>)
	FTFL_FCCOB0 = 0x41;
    85ec:	4d18      	ldr	r5, [pc, #96]	; (8650 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB1 = 15;
    85ee:	4819      	ldr	r0, [pc, #100]	; (8654 <usb_init_serialnumber+0x70>)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    85f0:	2270      	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    85f2:	2641      	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    85f4:	240f      	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    85f6:	2180      	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    85f8:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    85fa:	702e      	strb	r6, [r5, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    85fc:	461a      	mov	r2, r3
	FTFL_FCCOB1 = 15;
    85fe:	7004      	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    8600:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    8602:	7813      	ldrb	r3, [r2, #0]
    8604:	061b      	lsls	r3, r3, #24
    8606:	d5fc      	bpl.n	8602 <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    8608:	4b13      	ldr	r3, [pc, #76]	; (8658 <usb_init_serialnumber+0x74>)
    860a:	6818      	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    860c:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    860e:	4b13      	ldr	r3, [pc, #76]	; (865c <usb_init_serialnumber+0x78>)
    8610:	4298      	cmp	r0, r3
    8612:	bf98      	it	ls
    8614:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    8618:	ac01      	add	r4, sp, #4
    861a:	4621      	mov	r1, r4
	if (num < 10000000) num = num * 10;
    861c:	bf98      	it	ls
    861e:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    8620:	220a      	movs	r2, #10
    8622:	f7fe fb19 	bl	6c58 <ultoa>
    8626:	490e      	ldr	r1, [pc, #56]	; (8660 <usb_init_serialnumber+0x7c>)
	for (i=0; i<10; i++) {
    8628:	2300      	movs	r3, #0
    862a:	4608      	mov	r0, r1
		char c = buf[i];
    862c:	5ce2      	ldrb	r2, [r4, r3]
    862e:	3301      	adds	r3, #1
		if (!c) break;
    8630:	b13a      	cbz	r2, 8642 <usb_init_serialnumber+0x5e>
	for (i=0; i<10; i++) {
    8632:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    8634:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    8638:	d1f8      	bne.n	862c <usb_init_serialnumber+0x48>
    863a:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    863c:	700b      	strb	r3, [r1, #0]
}
    863e:	b004      	add	sp, #16
    8640:	bd70      	pop	{r4, r5, r6, pc}
    8642:	005b      	lsls	r3, r3, #1
    8644:	b2db      	uxtb	r3, r3
	usb_string_serial_number_default.bLength = i * 2 + 2;
    8646:	700b      	strb	r3, [r1, #0]
}
    8648:	b004      	add	sp, #16
    864a:	bd70      	pop	{r4, r5, r6, pc}
    864c:	40020000 	.word	0x40020000
    8650:	40020007 	.word	0x40020007
    8654:	40020006 	.word	0x40020006
    8658:	40020008 	.word	0x40020008
    865c:	0098967f 	.word	0x0098967f
    8660:	20000dc0 	.word	0x20000dc0

00008664 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    8664:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    8666:	2b03      	cmp	r3, #3
{
    8668:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    866a:	d811      	bhi.n	8690 <usb_rx+0x2c>
	__disable_irq();
    866c:	b672      	cpsid	i
	ret = rx_first[endpoint];
    866e:	4a0a      	ldr	r2, [pc, #40]	; (8698 <usb_rx+0x34>)
    8670:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
	if (ret) {
    8674:	b148      	cbz	r0, 868a <usb_rx+0x26>
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    8676:	4909      	ldr	r1, [pc, #36]	; (869c <usb_rx+0x38>)
    8678:	8805      	ldrh	r5, [r0, #0]
    867a:	f831 6013 	ldrh.w	r6, [r1, r3, lsl #1]
		rx_first[endpoint] = ret->next;
    867e:	6844      	ldr	r4, [r0, #4]
    8680:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    8684:	1b72      	subs	r2, r6, r5
    8686:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}
	__enable_irq();
    868a:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    868c:	bc70      	pop	{r4, r5, r6}
    868e:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    8690:	2000      	movs	r0, #0
}
    8692:	bc70      	pop	{r4, r5, r6}
    8694:	4770      	bx	lr
    8696:	bf00      	nop
    8698:	20002604 	.word	0x20002604
    869c:	20002814 	.word	0x20002814

000086a0 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    86a0:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    86a2:	2803      	cmp	r0, #3
    86a4:	d80b      	bhi.n	86be <usb_tx_packet_count+0x1e>
	__disable_irq();
    86a6:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    86a8:	4b07      	ldr	r3, [pc, #28]	; (86c8 <usb_tx_packet_count+0x28>)
    86aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    86ae:	b143      	cbz	r3, 86c2 <usb_tx_packet_count+0x22>
	uint32_t count=0;
    86b0:	2000      	movs	r0, #0
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    86b2:	685b      	ldr	r3, [r3, #4]
    86b4:	3001      	adds	r0, #1
    86b6:	2b00      	cmp	r3, #0
    86b8:	d1fb      	bne.n	86b2 <usb_tx_packet_count+0x12>
	__enable_irq();
    86ba:	b662      	cpsie	i
	return count;
    86bc:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return 0;
    86be:	2000      	movs	r0, #0
}
    86c0:	4770      	bx	lr
	uint32_t count=0;
    86c2:	4618      	mov	r0, r3
    86c4:	e7f9      	b.n	86ba <usb_tx_packet_count+0x1a>
    86c6:	bf00      	nop
    86c8:	20002658 	.word	0x20002658

000086cc <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    86cc:	b4f0      	push	{r4, r5, r6, r7}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    86ce:	b672      	cpsid	i
    86d0:	4d1b      	ldr	r5, [pc, #108]	; (8740 <usb_rx_memory+0x74>)
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    86d2:	4e1c      	ldr	r6, [pc, #112]	; (8744 <usb_rx_memory+0x78>)
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    86d4:	2301      	movs	r3, #1
    86d6:	18e9      	adds	r1, r5, r3
			if (table[index(i, RX, EVEN)].desc == 0) {
    86d8:	009a      	lsls	r2, r3, #2
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    86da:	f811 1c01 	ldrb.w	r1, [r1, #-1]
			if (table[index(i, RX, EVEN)].desc == 0) {
    86de:	4f19      	ldr	r7, [pc, #100]	; (8744 <usb_rx_memory+0x78>)
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    86e0:	0709      	lsls	r1, r1, #28
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    86e2:	f042 0401 	orr.w	r4, r2, #1
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    86e6:	d505      	bpl.n	86f4 <usb_rx_memory+0x28>
			if (table[index(i, RX, EVEN)].desc == 0) {
    86e8:	f856 1032 	ldr.w	r1, [r6, r2, lsl #3]
    86ec:	b161      	cbz	r1, 8708 <usb_rx_memory+0x3c>
			if (table[index(i, RX, ODD)].desc == 0) {
    86ee:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
    86f2:	b1ba      	cbz	r2, 8724 <usb_rx_memory+0x58>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    86f4:	3301      	adds	r3, #1
    86f6:	2b05      	cmp	r3, #5
    86f8:	d1ed      	bne.n	86d6 <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    86fa:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    86fc:	4b12      	ldr	r3, [pc, #72]	; (8748 <usb_rx_memory+0x7c>)
    86fe:	2200      	movs	r2, #0
    8700:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    8702:	bcf0      	pop	{r4, r5, r6, r7}
	usb_free(packet);
    8704:	f000 bcf2 	b.w	90ec <usb_free>
				usb_rx_memory_needed--;
    8708:	490f      	ldr	r1, [pc, #60]	; (8748 <usb_rx_memory+0x7c>)
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    870a:	4c10      	ldr	r4, [pc, #64]	; (874c <usb_rx_memory+0x80>)
				usb_rx_memory_needed--;
    870c:	780d      	ldrb	r5, [r1, #0]
				table[index(i, RX, EVEN)].addr = packet->buf;
    870e:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    8712:	3008      	adds	r0, #8
				usb_rx_memory_needed--;
    8714:	3d01      	subs	r5, #1
				table[index(i, RX, EVEN)].addr = packet->buf;
    8716:	6058      	str	r0, [r3, #4]
				usb_rx_memory_needed--;
    8718:	700d      	strb	r5, [r1, #0]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    871a:	f847 4032 	str.w	r4, [r7, r2, lsl #3]
				__enable_irq();
    871e:	b662      	cpsie	i
}
    8720:	bcf0      	pop	{r4, r5, r6, r7}
    8722:	4770      	bx	lr
				usb_rx_memory_needed--;
    8724:	4b08      	ldr	r3, [pc, #32]	; (8748 <usb_rx_memory+0x7c>)
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    8726:	4a0a      	ldr	r2, [pc, #40]	; (8750 <usb_rx_memory+0x84>)
				usb_rx_memory_needed--;
    8728:	7819      	ldrb	r1, [r3, #0]
				table[index(i, RX, ODD)].addr = packet->buf;
    872a:	eb07 05c4 	add.w	r5, r7, r4, lsl #3
    872e:	3008      	adds	r0, #8
				usb_rx_memory_needed--;
    8730:	3901      	subs	r1, #1
				table[index(i, RX, ODD)].addr = packet->buf;
    8732:	6068      	str	r0, [r5, #4]
				usb_rx_memory_needed--;
    8734:	7019      	strb	r1, [r3, #0]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    8736:	f847 2034 	str.w	r2, [r7, r4, lsl #3]
				__enable_irq();
    873a:	b662      	cpsie	i
				return;
    873c:	e7f0      	b.n	8720 <usb_rx_memory+0x54>
    873e:	bf00      	nop
    8740:	00011c48 	.word	0x00011c48
    8744:	1fff8000 	.word	0x1fff8000
    8748:	20002681 	.word	0x20002681
    874c:	00400088 	.word	0x00400088
    8750:	004000c8 	.word	0x004000c8

00008754 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    8754:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    8756:	2b03      	cmp	r3, #3
{
    8758:	b430      	push	{r4, r5}
	if (endpoint >= NUM_ENDPOINTS) return;
    875a:	d818      	bhi.n	878e <usb_tx+0x3a>
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    875c:	4a1b      	ldr	r2, [pc, #108]	; (87cc <usb_tx+0x78>)
    875e:	0140      	lsls	r0, r0, #5
    8760:	f040 0010 	orr.w	r0, r0, #16
    8764:	4410      	add	r0, r2
	__disable_irq();
    8766:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    8768:	4c19      	ldr	r4, [pc, #100]	; (87d0 <usb_tx+0x7c>)
    876a:	5ce2      	ldrb	r2, [r4, r3]
    876c:	2a03      	cmp	r2, #3
    876e:	d803      	bhi.n	8778 <usb_tx+0x24>
    8770:	e8df f002 	tbb	[pc, r2]
    8774:	1f0f2422 	.word	0x1f0f2422
	  case TX_STATE_ODD_FREE:
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
    8778:	4a16      	ldr	r2, [pc, #88]	; (87d4 <usb_tx+0x80>)
    877a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    877e:	b300      	cbz	r0, 87c2 <usb_tx+0x6e>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    8780:	4a15      	ldr	r2, [pc, #84]	; (87d8 <usb_tx+0x84>)
    8782:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    8786:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    8788:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    878c:	b662      	cpsie	i
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
}
    878e:	bc30      	pop	{r4, r5}
    8790:	4770      	bx	lr
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    8792:	2205      	movs	r2, #5
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    8794:	880d      	ldrh	r5, [r1, #0]
	tx_state[endpoint] = next;
    8796:	54e2      	strb	r2, [r4, r3]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    8798:	f010 0f08 	tst.w	r0, #8
    879c:	bf0c      	ite	eq
    879e:	2388      	moveq	r3, #136	; 0x88
    87a0:	23c8      	movne	r3, #200	; 0xc8
    87a2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
	b->addr = packet->buf;
    87a6:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    87a8:	6003      	str	r3, [r0, #0]
	b->addr = packet->buf;
    87aa:	6041      	str	r1, [r0, #4]
	__enable_irq();
    87ac:	b662      	cpsie	i
}
    87ae:	bc30      	pop	{r4, r5}
    87b0:	4770      	bx	lr
		b++;
    87b2:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    87b4:	2204      	movs	r2, #4
		break;
    87b6:	e7ed      	b.n	8794 <usb_tx+0x40>
		next = TX_STATE_ODD_FREE;
    87b8:	2203      	movs	r2, #3
    87ba:	e7eb      	b.n	8794 <usb_tx+0x40>
		b++;
    87bc:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    87be:	2202      	movs	r2, #2
		break;
    87c0:	e7e8      	b.n	8794 <usb_tx+0x40>
			tx_first[endpoint] = packet;
    87c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    87c6:	4a04      	ldr	r2, [pc, #16]	; (87d8 <usb_tx+0x84>)
    87c8:	e7de      	b.n	8788 <usb_tx+0x34>
    87ca:	bf00      	nop
    87cc:	1fff8000 	.word	0x1fff8000
    87d0:	20002690 	.word	0x20002690
    87d4:	20002658 	.word	0x20002658
    87d8:	20002668 	.word	0x20002668

000087dc <usb_isr>:
}



void usb_isr(void)
{
    87dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    87e0:	f8df b310 	ldr.w	fp, [pc, #784]	; 8af4 <usb_isr+0x318>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    87e4:	f8df a310 	ldr.w	sl, [pc, #784]	; 8af8 <usb_isr+0x31c>
{
    87e8:	b087      	sub	sp, #28
    87ea:	e043      	b.n	8874 <usb_isr+0x98>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    87ec:	4fac      	ldr	r7, [pc, #688]	; (8aa0 <usb_isr+0x2c4>)
    87ee:	ea4f 0893 	mov.w	r8, r3, lsr #2
    87f2:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    87f6:	3e01      	subs	r6, #1
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    87f8:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    87fc:	f003 0308 	and.w	r3, r3, #8
			endpoint--;	// endpoint is index to zero-based arrays
    8800:	b2f6      	uxtb	r6, r6
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    8802:	f1a2 0008 	sub.w	r0, r2, #8
			if (stat & 0x08) { // transmit
    8806:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    880a:	2b00      	cmp	r3, #0
    880c:	f040 8100 	bne.w	8a10 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    8810:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    8814:	0c1b      	lsrs	r3, r3, #16
    8816:	f822 3c08 	strh.w	r3, [r2, #-8]
				if (packet->len > 0) {
    881a:	2b00      	cmp	r3, #0
    881c:	f000 80ef 	beq.w	89fe <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    8820:	4ca0      	ldr	r4, [pc, #640]	; (8aa4 <usb_isr+0x2c8>)
					packet->index = 0;
    8822:	f822 1c06 	strh.w	r1, [r2, #-6]
					packet->next = NULL;
    8826:	f842 1c04 	str.w	r1, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    882a:	f854 2026 	ldr.w	r2, [r4, r6, lsl #2]
    882e:	2a00      	cmp	r2, #0
    8830:	f000 81e2 	beq.w	8bf8 <usb_isr+0x41c>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    8834:	4c9c      	ldr	r4, [pc, #624]	; (8aa8 <usb_isr+0x2cc>)
    8836:	f854 2026 	ldr.w	r2, [r4, r6, lsl #2]
    883a:	6050      	str	r0, [r2, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    883c:	4a9b      	ldr	r2, [pc, #620]	; (8aac <usb_isr+0x2d0>)
					rx_last[endpoint] = packet;
    883e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    8842:	f832 1016 	ldrh.w	r1, [r2, r6, lsl #1]
    8846:	440b      	add	r3, r1
    8848:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    884c:	f000 fc2e 	bl	90ac <usb_malloc>
					if (packet) {
    8850:	2800      	cmp	r0, #0
    8852:	f000 81ca 	beq.w	8bea <usb_isr+0x40e>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    8856:	4a96      	ldr	r2, [pc, #600]	; (8ab0 <usb_isr+0x2d4>)
    8858:	4b96      	ldr	r3, [pc, #600]	; (8ab4 <usb_isr+0x2d8>)
    885a:	f019 0f08 	tst.w	r9, #8
						b->addr = packet->buf;
    885e:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    8862:	bf08      	it	eq
    8864:	4613      	moveq	r3, r2
						b->addr = packet->buf;
    8866:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    886a:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    886e:	2308      	movs	r3, #8
    8870:	f88b 3000 	strb.w	r3, [fp]
	status = USB0_ISTAT;
    8874:	f89b 4000 	ldrb.w	r4, [fp]
    8878:	b2e4      	uxtb	r4, r4
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    887a:	0761      	lsls	r1, r4, #29
    887c:	d51c      	bpl.n	88b8 <usb_isr+0xdc>
		if (usb_configuration) {
    887e:	4b8e      	ldr	r3, [pc, #568]	; (8ab8 <usb_isr+0x2dc>)
    8880:	781b      	ldrb	r3, [r3, #0]
    8882:	b1b3      	cbz	r3, 88b2 <usb_isr+0xd6>
			t = usb_reboot_timer;
    8884:	4a8d      	ldr	r2, [pc, #564]	; (8abc <usb_isr+0x2e0>)
    8886:	7813      	ldrb	r3, [r2, #0]
			if (t) {
    8888:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    888c:	b123      	cbz	r3, 8898 <usb_isr+0xbc>
				usb_reboot_timer = --t;
    888e:	1e4b      	subs	r3, r1, #1
    8890:	b2db      	uxtb	r3, r3
    8892:	7013      	strb	r3, [r2, #0]
				if (!t) _reboot_Teensyduino_();
    8894:	b903      	cbnz	r3, 8898 <usb_isr+0xbc>
	__asm__ volatile("bkpt");
    8896:	be00      	bkpt	0x0000
			t = usb_seremu_transmit_flush_timer;
    8898:	4a89      	ldr	r2, [pc, #548]	; (8ac0 <usb_isr+0x2e4>)
    889a:	7813      	ldrb	r3, [r2, #0]
			if (t) {
    889c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    88a0:	b12b      	cbz	r3, 88ae <usb_isr+0xd2>
				usb_seremu_transmit_flush_timer = --t;
    88a2:	1e4b      	subs	r3, r1, #1
    88a4:	b2db      	uxtb	r3, r3
    88a6:	7013      	strb	r3, [r2, #0]
				if (t == 0) usb_seremu_flush_callback();
    88a8:	2b00      	cmp	r3, #0
    88aa:	f000 8169 	beq.w	8b80 <usb_isr+0x3a4>
                        usb_midi_flush_output();
    88ae:	f000 fcb1 	bl	9214 <usb_midi_flush_output>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    88b2:	2304      	movs	r3, #4
    88b4:	f88b 3000 	strb.w	r3, [fp]
	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    88b8:	f004 0308 	and.w	r3, r4, #8
    88bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    88c0:	2b00      	cmp	r3, #0
    88c2:	f000 80c9 	beq.w	8a58 <usb_isr+0x27c>
		stat = USB0_STAT;
    88c6:	f89a 3000 	ldrb.w	r3, [sl]
    88ca:	b2db      	uxtb	r3, r3
		if (endpoint == 0) {
    88cc:	091e      	lsrs	r6, r3, #4
    88ce:	d18d      	bne.n	87ec <usb_isr+0x10>
	b = stat2bufferdescriptor(stat);
    88d0:	089a      	lsrs	r2, r3, #2
    88d2:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8aa0 <usb_isr+0x2c4>
	pid = BDT_PID(b->desc);
    88d6:	f859 1032 	ldr.w	r1, [r9, r2, lsl #3]
	b = stat2bufferdescriptor(stat);
    88da:	eb09 00c2 	add.w	r0, r9, r2, lsl #3
	pid = BDT_PID(b->desc);
    88de:	f3c1 0183 	ubfx	r1, r1, #2, #4
	switch (pid) {
    88e2:	3901      	subs	r1, #1
	buf = b->addr;
    88e4:	6840      	ldr	r0, [r0, #4]
	switch (pid) {
    88e6:	290c      	cmp	r1, #12
    88e8:	f200 8085 	bhi.w	89f6 <usb_isr+0x21a>
    88ec:	e8df f001 	tbb	[pc, r1]
    88f0:	83837a7a 	.word	0x83837a7a
    88f4:	83838383 	.word	0x83838383
    88f8:	83838342 	.word	0x83838342
    88fc:	07          	.byte	0x07
    88fd:	00          	.byte	0x00
		setup.word1 = *(uint32_t *)(buf);
    88fe:	6807      	ldr	r7, [r0, #0]
    8900:	4d70      	ldr	r5, [pc, #448]	; (8ac4 <usb_isr+0x2e8>)
		setup.word2 = *(uint32_t *)(buf + 4);
    8902:	6841      	ldr	r1, [r0, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    8904:	4b6b      	ldr	r3, [pc, #428]	; (8ab4 <usb_isr+0x2d8>)
    8906:	f849 3032 	str.w	r3, [r9, r2, lsl #3]
		ep0_tx_ptr = NULL;
    890a:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8afc <usb_isr+0x320>
		ep0_tx_data_toggle = 1;
    890e:	4e6e      	ldr	r6, [pc, #440]	; (8ac8 <usb_isr+0x2ec>)
		setup.word2 = *(uint32_t *)(buf + 4);
    8910:	6069      	str	r1, [r5, #4]
	switch (setup.wRequestAndType) {
    8912:	f240 6281 	movw	r2, #1665	; 0x681
    8916:	b2b9      	uxth	r1, r7
		ep0_tx_ptr = NULL;
    8918:	2400      	movs	r4, #0
		ep0_tx_data_toggle = 1;
    891a:	2001      	movs	r0, #1
	switch (setup.wRequestAndType) {
    891c:	4291      	cmp	r1, r2
		setup.word1 = *(uint32_t *)(buf);
    891e:	602f      	str	r7, [r5, #0]
		ep0_tx_ptr = NULL;
    8920:	f8c8 4000 	str.w	r4, [r8]
		table[index(0, TX, EVEN)].desc = 0;
    8924:	f8c9 4010 	str.w	r4, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    8928:	f8c9 4018 	str.w	r4, [r9, #24]
		ep0_tx_data_toggle = 1;
    892c:	7030      	strb	r0, [r6, #0]
	switch (setup.wRequestAndType) {
    892e:	f200 80e7 	bhi.w	8b00 <usb_isr+0x324>
    8932:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    8936:	f080 8218 	bcs.w	8d6a <usb_isr+0x58e>
    893a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    893e:	f000 81ff 	beq.w	8d40 <usb_isr+0x564>
    8942:	f200 8177 	bhi.w	8c34 <usb_isr+0x458>
    8946:	2980      	cmp	r1, #128	; 0x80
    8948:	f000 822c 	beq.w	8da4 <usb_isr+0x5c8>
    894c:	2982      	cmp	r1, #130	; 0x82
    894e:	f040 81e3 	bne.w	8d18 <usb_isr+0x53c>
		if (setup.wIndex > NUM_ENDPOINTS) {
    8952:	88af      	ldrh	r7, [r5, #4]
    8954:	2f04      	cmp	r7, #4
    8956:	f200 81df 	bhi.w	8d18 <usb_isr+0x53c>
		if (*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02) reply_buffer[0] = 1;
    895a:	495c      	ldr	r1, [pc, #368]	; (8acc <usb_isr+0x2f0>)
		reply_buffer[0] = 0;
    895c:	4a5c      	ldr	r2, [pc, #368]	; (8ad0 <usb_isr+0x2f4>)
		if (*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02) reply_buffer[0] = 1;
    895e:	00bf      	lsls	r7, r7, #2
    8960:	4439      	add	r1, r7
		reply_buffer[0] = 0;
    8962:	7014      	strb	r4, [r2, #0]
		reply_buffer[1] = 0;
    8964:	7054      	strb	r4, [r2, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02) reply_buffer[0] = 1;
    8966:	7809      	ldrb	r1, [r1, #0]
    8968:	078c      	lsls	r4, r1, #30
    896a:	f140 8304 	bpl.w	8f76 <usb_isr+0x79a>
    896e:	7010      	strb	r0, [r2, #0]
		datalen = 2;
    8970:	2002      	movs	r0, #2
    8972:	e182      	b.n	8c7a <usb_isr+0x49e>
		data = ep0_tx_ptr;
    8974:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8afc <usb_isr+0x320>
    8978:	f8d8 0000 	ldr.w	r0, [r8]
		if (data) {
    897c:	b338      	cbz	r0, 89ce <usb_isr+0x1f2>
			size = ep0_tx_len;
    897e:	4f55      	ldr	r7, [pc, #340]	; (8ad4 <usb_isr+0x2f8>)
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8980:	4955      	ldr	r1, [pc, #340]	; (8ad8 <usb_isr+0x2fc>)
			size = ep0_tx_len;
    8982:	883c      	ldrh	r4, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8984:	4e50      	ldr	r6, [pc, #320]	; (8ac8 <usb_isr+0x2ec>)
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8986:	780d      	ldrb	r5, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8988:	f896 c000 	ldrb.w	ip, [r6]
    898c:	2c40      	cmp	r4, #64	; 0x40
    898e:	bf34      	ite	cc
    8990:	4622      	movcc	r2, r4
    8992:	2240      	movcs	r2, #64	; 0x40
			ep0_tx_len -= size;
    8994:	1aa4      	subs	r4, r4, r2
    8996:	b2a4      	uxth	r4, r4
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8998:	f1bc 0f00 	cmp.w	ip, #0
			ep0_tx_len -= size;
    899c:	803c      	strh	r4, [r7, #0]
	ep0_tx_bdt_bank ^= 1;
    899e:	f085 0701 	eor.w	r7, r5, #1
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    89a2:	f045 0502 	orr.w	r5, r5, #2
	ep0_tx_bdt_bank ^= 1;
    89a6:	700f      	strb	r7, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    89a8:	eb09 07c5 	add.w	r7, r9, r5, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    89ac:	bf0c      	ite	eq
    89ae:	2188      	moveq	r1, #136	; 0x88
    89b0:	21c8      	movne	r1, #200	; 0xc8
	ep0_tx_data_toggle ^= 1;
    89b2:	f08c 0c01 	eor.w	ip, ip, #1
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    89b6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    89ba:	6078      	str	r0, [r7, #4]
	ep0_tx_data_toggle ^= 1;
    89bc:	f886 c000 	strb.w	ip, [r6]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    89c0:	f849 1035 	str.w	r1, [r9, r5, lsl #3]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    89c4:	2c00      	cmp	r4, #0
    89c6:	d067      	beq.n	8a98 <usb_isr+0x2bc>
			data += size;
    89c8:	1884      	adds	r4, r0, r2
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    89ca:	f8c8 4000 	str.w	r4, [r8]
		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    89ce:	4b3d      	ldr	r3, [pc, #244]	; (8ac4 <usb_isr+0x2e8>)
    89d0:	881a      	ldrh	r2, [r3, #0]
    89d2:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    89d6:	d10e      	bne.n	89f6 <usb_isr+0x21a>
			setup.bRequest = 0;
    89d8:	2100      	movs	r1, #0
			USB0_ADDR = setup.wValue;
    89da:	789a      	ldrb	r2, [r3, #2]
			setup.bRequest = 0;
    89dc:	7059      	strb	r1, [r3, #1]
			USB0_ADDR = setup.wValue;
    89de:	4b3f      	ldr	r3, [pc, #252]	; (8adc <usb_isr+0x300>)
    89e0:	701a      	strb	r2, [r3, #0]
    89e2:	e008      	b.n	89f6 <usb_isr+0x21a>
		if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)
    89e4:	4937      	ldr	r1, [pc, #220]	; (8ac4 <usb_isr+0x2e8>)
    89e6:	4d3e      	ldr	r5, [pc, #248]	; (8ae0 <usb_isr+0x304>)
    89e8:	680c      	ldr	r4, [r1, #0]
    89ea:	42ac      	cmp	r4, r5
    89ec:	f000 8097 	beq.w	8b1e <usb_isr+0x342>
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    89f0:	4930      	ldr	r1, [pc, #192]	; (8ab4 <usb_isr+0x2d8>)
    89f2:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    89f6:	493b      	ldr	r1, [pc, #236]	; (8ae4 <usb_isr+0x308>)
    89f8:	2301      	movs	r3, #1
    89fa:	700b      	strb	r3, [r1, #0]
    89fc:	e737      	b.n	886e <usb_isr+0x92>
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    89fe:	4a2c      	ldr	r2, [pc, #176]	; (8ab0 <usb_isr+0x2d4>)
    8a00:	4b2c      	ldr	r3, [pc, #176]	; (8ab4 <usb_isr+0x2d8>)
    8a02:	f019 0f08 	tst.w	r9, #8
    8a06:	bf08      	it	eq
    8a08:	4613      	moveq	r3, r2
    8a0a:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    8a0e:	e72e      	b.n	886e <usb_isr+0x92>
				usb_free(packet);
    8a10:	f000 fb6c 	bl	90ec <usb_free>
				packet = tx_first[endpoint];
    8a14:	4a34      	ldr	r2, [pc, #208]	; (8ae8 <usb_isr+0x30c>)
					switch (tx_state[endpoint]) {
    8a16:	4d35      	ldr	r5, [pc, #212]	; (8aec <usb_isr+0x310>)
				packet = tx_first[endpoint];
    8a18:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    8a1c:	2b00      	cmp	r3, #0
    8a1e:	f000 80ef 	beq.w	8c00 <usb_isr+0x424>
					tx_first[endpoint] = packet->next;
    8a22:	6859      	ldr	r1, [r3, #4]
					switch (tx_state[endpoint]) {
    8a24:	5da8      	ldrb	r0, [r5, r6]
					tx_first[endpoint] = packet->next;
    8a26:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
					b->addr = packet->buf;
    8a2a:	f103 0208 	add.w	r2, r3, #8
    8a2e:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    8a32:	2803      	cmp	r0, #3
    8a34:	d805      	bhi.n	8a42 <usb_isr+0x266>
    8a36:	e8df f000 	tbb	[pc, r0]
    8a3a:	2c02      	.short	0x2c02
    8a3c:	2629      	.short	0x2629
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    8a3e:	2203      	movs	r2, #3
    8a40:	55aa      	strb	r2, [r5, r6]
					b->desc = BDT_DESC(packet->len,
    8a42:	881a      	ldrh	r2, [r3, #0]
    8a44:	f019 0f08 	tst.w	r9, #8
    8a48:	bf0c      	ite	eq
    8a4a:	2388      	moveq	r3, #136	; 0x88
    8a4c:	23c8      	movne	r3, #200	; 0xc8
    8a4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    8a52:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    8a56:	e70a      	b.n	886e <usb_isr+0x92>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    8a58:	07e0      	lsls	r0, r4, #31
    8a5a:	f100 8094 	bmi.w	8b86 <usb_isr+0x3aa>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    8a5e:	0621      	lsls	r1, r4, #24
    8a60:	f100 80de 	bmi.w	8c20 <usb_isr+0x444>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    8a64:	07a2      	lsls	r2, r4, #30
    8a66:	d506      	bpl.n	8a76 <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    8a68:	4b21      	ldr	r3, [pc, #132]	; (8af0 <usb_isr+0x314>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    8a6a:	4a22      	ldr	r2, [pc, #136]	; (8af4 <usb_isr+0x318>)
		uint8_t err = USB0_ERRSTAT;
    8a6c:	7818      	ldrb	r0, [r3, #0]
		USB0_ISTAT = USB_ISTAT_ERROR;
    8a6e:	2102      	movs	r1, #2
		uint8_t err = USB0_ERRSTAT;
    8a70:	b2c0      	uxtb	r0, r0
		USB0_ERRSTAT = err;
    8a72:	7018      	strb	r0, [r3, #0]
		USB0_ISTAT = USB_ISTAT_ERROR;
    8a74:	7011      	strb	r1, [r2, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    8a76:	06e3      	lsls	r3, r4, #27
    8a78:	d502      	bpl.n	8a80 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    8a7a:	4b1e      	ldr	r3, [pc, #120]	; (8af4 <usb_isr+0x318>)
    8a7c:	2210      	movs	r2, #16
    8a7e:	701a      	strb	r2, [r3, #0]
	}

}
    8a80:	b007      	add	sp, #28
    8a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    8a86:	2204      	movs	r2, #4
    8a88:	55aa      	strb	r2, [r5, r6]
						break;
    8a8a:	e7da      	b.n	8a42 <usb_isr+0x266>
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    8a8c:	2205      	movs	r2, #5
    8a8e:	55aa      	strb	r2, [r5, r6]
						break;
    8a90:	e7d7      	b.n	8a42 <usb_isr+0x266>
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    8a92:	2202      	movs	r2, #2
    8a94:	55aa      	strb	r2, [r5, r6]
						break;
    8a96:	e7d4      	b.n	8a42 <usb_isr+0x266>
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    8a98:	2a40      	cmp	r2, #64	; 0x40
    8a9a:	d196      	bne.n	89ca <usb_isr+0x1ee>
    8a9c:	e794      	b.n	89c8 <usb_isr+0x1ec>
    8a9e:	bf00      	nop
    8aa0:	1fff8000 	.word	0x1fff8000
    8aa4:	20002604 	.word	0x20002604
    8aa8:	200025b0 	.word	0x200025b0
    8aac:	20002814 	.word	0x20002814
    8ab0:	00400088 	.word	0x00400088
    8ab4:	004000c8 	.word	0x004000c8
    8ab8:	2000268c 	.word	0x2000268c
    8abc:	20002615 	.word	0x20002615
    8ac0:	200026dc 	.word	0x200026dc
    8ac4:	20002678 	.word	0x20002678
    8ac8:	20002614 	.word	0x20002614
    8acc:	400720c0 	.word	0x400720c0
    8ad0:	20002684 	.word	0x20002684
    8ad4:	200025c0 	.word	0x200025c0
    8ad8:	20002680 	.word	0x20002680
    8adc:	40072098 	.word	0x40072098
    8ae0:	03000921 	.word	0x03000921
    8ae4:	40072094 	.word	0x40072094
    8ae8:	20002658 	.word	0x20002658
    8aec:	20002690 	.word	0x20002690
    8af0:	40072088 	.word	0x40072088
    8af4:	40072080 	.word	0x40072080
    8af8:	40072090 	.word	0x40072090
    8afc:	200025ac 	.word	0x200025ac
	switch (setup.wRequestAndType) {
    8b00:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    8b04:	f000 8153 	beq.w	8dae <usb_isr+0x5d2>
    8b08:	f240 80b0 	bls.w	8c6c <usb_isr+0x490>
    8b0c:	f640 1221 	movw	r2, #2337	; 0x921
    8b10:	4291      	cmp	r1, r2
    8b12:	f040 8226 	bne.w	8f62 <usb_isr+0x786>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    8b16:	49b6      	ldr	r1, [pc, #728]	; (8df0 <usb_isr+0x614>)
    8b18:	2301      	movs	r3, #1
    8b1a:	700b      	strb	r3, [r1, #0]
    8b1c:	e76b      	b.n	89f6 <usb_isr+0x21a>
		if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)
    8b1e:	684c      	ldr	r4, [r1, #4]
    8b20:	49b4      	ldr	r1, [pc, #720]	; (8df4 <usb_isr+0x618>)
    8b22:	428c      	cmp	r4, r1
    8b24:	f47f af64 	bne.w	89f0 <usb_isr+0x214>
		  && buf[0] == 0xA9 && buf[1] == 0x45 && buf[2] == 0xC2 && buf[3] == 0x6B) {
    8b28:	7801      	ldrb	r1, [r0, #0]
    8b2a:	29a9      	cmp	r1, #169	; 0xa9
    8b2c:	f47f af60 	bne.w	89f0 <usb_isr+0x214>
    8b30:	7841      	ldrb	r1, [r0, #1]
    8b32:	2945      	cmp	r1, #69	; 0x45
    8b34:	f47f af5c 	bne.w	89f0 <usb_isr+0x214>
    8b38:	7881      	ldrb	r1, [r0, #2]
    8b3a:	29c2      	cmp	r1, #194	; 0xc2
    8b3c:	f47f af58 	bne.w	89f0 <usb_isr+0x214>
    8b40:	78c1      	ldrb	r1, [r0, #3]
    8b42:	296b      	cmp	r1, #107	; 0x6b
    8b44:	f47f af54 	bne.w	89f0 <usb_isr+0x214>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8b48:	49ab      	ldr	r1, [pc, #684]	; (8df8 <usb_isr+0x61c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8b4a:	4eac      	ldr	r6, [pc, #688]	; (8dfc <usb_isr+0x620>)
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8b4c:	780d      	ldrb	r5, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8b4e:	7834      	ldrb	r4, [r6, #0]
			usb_reboot_timer = 5;
    8b50:	4fab      	ldr	r7, [pc, #684]	; (8e00 <usb_isr+0x624>)
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8b52:	f045 0002 	orr.w	r0, r5, #2
    8b56:	eb09 0cc0 	add.w	ip, r9, r0, lsl #3
	ep0_tx_bdt_bank ^= 1;
    8b5a:	f085 0501 	eor.w	r5, r5, #1
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8b5e:	2c00      	cmp	r4, #0
	ep0_tx_bdt_bank ^= 1;
    8b60:	700d      	strb	r5, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8b62:	f04f 0100 	mov.w	r1, #0
    8b66:	f8cc 1004 	str.w	r1, [ip, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8b6a:	bf0c      	ite	eq
    8b6c:	2188      	moveq	r1, #136	; 0x88
    8b6e:	21c8      	movne	r1, #200	; 0xc8
	ep0_tx_data_toggle ^= 1;
    8b70:	f084 0401 	eor.w	r4, r4, #1
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8b74:	f849 1030 	str.w	r1, [r9, r0, lsl #3]
			usb_reboot_timer = 5;
    8b78:	2105      	movs	r1, #5
	ep0_tx_data_toggle ^= 1;
    8b7a:	7034      	strb	r4, [r6, #0]
			usb_reboot_timer = 5;
    8b7c:	7039      	strb	r1, [r7, #0]
    8b7e:	e737      	b.n	89f0 <usb_isr+0x214>
				if (t == 0) usb_seremu_flush_callback();
    8b80:	f000 fde8 	bl	9754 <usb_seremu_flush_callback>
    8b84:	e693      	b.n	88ae <usb_isr+0xd2>
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    8b86:	4b9f      	ldr	r3, [pc, #636]	; (8e04 <usb_isr+0x628>)
		USB0_CTL = USB_CTL_ODDRST;
    8b88:	4899      	ldr	r0, [pc, #612]	; (8df0 <usb_isr+0x614>)
		ep0_tx_bdt_bank = 0;
    8b8a:	499b      	ldr	r1, [pc, #620]	; (8df8 <usb_isr+0x61c>)
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    8b8c:	f8df a290 	ldr.w	sl, [pc, #656]	; 8e20 <usb_isr+0x644>
		table[index(0, TX, EVEN)].desc = 0;
    8b90:	611a      	str	r2, [r3, #16]
		USB0_CTL = USB_CTL_ODDRST;
    8b92:	f04f 0b02 	mov.w	fp, #2
    8b96:	f880 b000 	strb.w	fp, [r0]
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    8b9a:	4c9b      	ldr	r4, [pc, #620]	; (8e08 <usb_isr+0x62c>)
		ep0_tx_bdt_bank = 0;
    8b9c:	700a      	strb	r2, [r1, #0]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    8b9e:	f04f 0b0d 	mov.w	fp, #13
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    8ba2:	601c      	str	r4, [r3, #0]
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    8ba4:	609c      	str	r4, [r3, #8]
		table[index(0, TX, ODD)].desc = 0;
    8ba6:	619a      	str	r2, [r3, #24]
		USB0_ERRSTAT = 0xFF;
    8ba8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8e44 <usb_isr+0x668>
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    8bac:	f88a b000 	strb.w	fp, [sl]
		USB0_ISTAT = 0xFF;
    8bb0:	f8df c270 	ldr.w	ip, [pc, #624]	; 8e24 <usb_isr+0x648>
		USB0_ADDR = 0;
    8bb4:	4f95      	ldr	r7, [pc, #596]	; (8e0c <usb_isr+0x630>)
		USB0_ERREN = 0xFF;
    8bb6:	4e96      	ldr	r6, [pc, #600]	; (8e10 <usb_isr+0x634>)
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    8bb8:	4d96      	ldr	r5, [pc, #600]	; (8e14 <usb_isr+0x638>)
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    8bba:	f8df 828c 	ldr.w	r8, [pc, #652]	; 8e48 <usb_isr+0x66c>
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    8bbe:	f8df b28c 	ldr.w	fp, [pc, #652]	; 8e4c <usb_isr+0x670>
		USB0_ERRSTAT = 0xFF;
    8bc2:	21ff      	movs	r1, #255	; 0xff
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    8bc4:	249f      	movs	r4, #159	; 0x9f
		USB0_CTL = USB_CTL_USBENSOFEN;
    8bc6:	f04f 0a01 	mov.w	sl, #1
		USB0_ERRSTAT = 0xFF;
    8bca:	f889 1000 	strb.w	r1, [r9]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    8bce:	f8c3 8004 	str.w	r8, [r3, #4]
		USB0_ISTAT = 0xFF;
    8bd2:	f88c 1000 	strb.w	r1, [ip]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    8bd6:	f8c3 b00c 	str.w	fp, [r3, #12]
		USB0_ADDR = 0;
    8bda:	703a      	strb	r2, [r7, #0]
		USB0_ERREN = 0xFF;
    8bdc:	7031      	strb	r1, [r6, #0]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    8bde:	702c      	strb	r4, [r5, #0]
		USB0_CTL = USB_CTL_USBENSOFEN;
    8be0:	f880 a000 	strb.w	sl, [r0]
}
    8be4:	b007      	add	sp, #28
    8be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						usb_rx_memory_needed++;
    8bea:	4b8b      	ldr	r3, [pc, #556]	; (8e18 <usb_isr+0x63c>)
						b->desc = 0;
    8bec:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    8bf0:	781a      	ldrb	r2, [r3, #0]
    8bf2:	3201      	adds	r2, #1
    8bf4:	701a      	strb	r2, [r3, #0]
    8bf6:	e63a      	b.n	886e <usb_isr+0x92>
						rx_first[endpoint] = packet;
    8bf8:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    8bfc:	4c87      	ldr	r4, [pc, #540]	; (8e1c <usb_isr+0x640>)
    8bfe:	e61d      	b.n	883c <usb_isr+0x60>
					switch (tx_state[endpoint]) {
    8c00:	5dab      	ldrb	r3, [r5, r6]
    8c02:	2b03      	cmp	r3, #3
    8c04:	f200 8095 	bhi.w	8d32 <usb_isr+0x556>
    8c08:	a101      	add	r1, pc, #4	; (adr r1, 8c10 <usb_isr+0x434>)
    8c0a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    8c0e:	bf00      	nop
    8c10:	0000886f 	.word	0x0000886f
    8c14:	0000886f 	.word	0x0000886f
    8c18:	00008c67 	.word	0x00008c67
    8c1c:	00008c61 	.word	0x00008c61
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    8c20:	497f      	ldr	r1, [pc, #508]	; (8e20 <usb_isr+0x644>)
		USB0_ISTAT = USB_ISTAT_STALL;
    8c22:	4b80      	ldr	r3, [pc, #512]	; (8e24 <usb_isr+0x648>)
    8c24:	2280      	movs	r2, #128	; 0x80
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    8c26:	200d      	movs	r0, #13
    8c28:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    8c2a:	701a      	strb	r2, [r3, #0]
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    8c2c:	07a2      	lsls	r2, r4, #30
    8c2e:	f57f af22 	bpl.w	8a76 <usb_isr+0x29a>
    8c32:	e719      	b.n	8a68 <usb_isr+0x28c>
	switch (setup.wRequestAndType) {
    8c34:	f240 3202 	movw	r2, #770	; 0x302
    8c38:	4291      	cmp	r1, r2
    8c3a:	d169      	bne.n	8d10 <usb_isr+0x534>
		i = setup.wIndex & 0x7F;
    8c3c:	88aa      	ldrh	r2, [r5, #4]
    8c3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    8c42:	2a04      	cmp	r2, #4
    8c44:	dc68      	bgt.n	8d18 <usb_isr+0x53c>
    8c46:	886c      	ldrh	r4, [r5, #2]
    8c48:	2c00      	cmp	r4, #0
    8c4a:	d165      	bne.n	8d18 <usb_isr+0x53c>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    8c4c:	4974      	ldr	r1, [pc, #464]	; (8e20 <usb_isr+0x644>)
    8c4e:	9005      	str	r0, [sp, #20]
    8c50:	0092      	lsls	r2, r2, #2
    8c52:	4411      	add	r1, r2
    8c54:	46a4      	mov	ip, r4
    8c56:	780a      	ldrb	r2, [r1, #0]
    8c58:	f042 0202 	orr.w	r2, r2, #2
    8c5c:	700a      	strb	r2, [r1, #0]
    8c5e:	e148      	b.n	8ef2 <usb_isr+0x716>
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    8c60:	2301      	movs	r3, #1
    8c62:	55ab      	strb	r3, [r5, r6]
						break;
    8c64:	e603      	b.n	886e <usb_isr+0x92>
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    8c66:	2300      	movs	r3, #0
    8c68:	55ab      	strb	r3, [r5, r6]
						break;
    8c6a:	e600      	b.n	886e <usb_isr+0x92>
	switch (setup.wRequestAndType) {
    8c6c:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    8c70:	d152      	bne.n	8d18 <usb_isr+0x53c>
		reply_buffer[0] = usb_configuration;
    8c72:	496d      	ldr	r1, [pc, #436]	; (8e28 <usb_isr+0x64c>)
    8c74:	4a6d      	ldr	r2, [pc, #436]	; (8e2c <usb_isr+0x650>)
    8c76:	7809      	ldrb	r1, [r1, #0]
    8c78:	7011      	strb	r1, [r2, #0]
	if (datalen > setup.wLength) datalen = setup.wLength;
    8c7a:	f8b5 c006 	ldrh.w	ip, [r5, #6]
    8c7e:	4584      	cmp	ip, r0
    8c80:	f080 818c 	bcs.w	8f9c <usb_isr+0x7c0>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8c84:	495c      	ldr	r1, [pc, #368]	; (8df8 <usb_isr+0x61c>)
    8c86:	780c      	ldrb	r4, [r1, #0]
    8c88:	f044 0702 	orr.w	r7, r4, #2
    8c8c:	eb09 00c7 	add.w	r0, r9, r7, lsl #3
    8c90:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    8c94:	bf34      	ite	cc
    8c96:	4665      	movcc	r5, ip
    8c98:	2540      	movcs	r5, #64	; 0x40
    8c9a:	6042      	str	r2, [r0, #4]
    8c9c:	442a      	add	r2, r5
    8c9e:	9204      	str	r2, [sp, #16]
    8ca0:	042b      	lsls	r3, r5, #16
    8ca2:	2201      	movs	r2, #1
    8ca4:	ebc5 000c 	rsb	r0, r5, ip
    8ca8:	9303      	str	r3, [sp, #12]
    8caa:	f04f 0c00 	mov.w	ip, #0
    8cae:	9205      	str	r2, [sp, #20]
    8cb0:	9001      	str	r0, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8cb2:	23c8      	movs	r3, #200	; 0xc8
    8cb4:	9a03      	ldr	r2, [sp, #12]
	ep0_tx_data_toggle ^= 1;
    8cb6:	f886 c000 	strb.w	ip, [r6]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8cba:	4313      	orrs	r3, r2
	ep0_tx_bdt_bank ^= 1;
    8cbc:	f084 0201 	eor.w	r2, r4, #1
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8cc0:	f849 3037 	str.w	r3, [r9, r7, lsl #3]
	ep0_tx_bdt_bank ^= 1;
    8cc4:	700a      	strb	r2, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    8cc6:	bb58      	cbnz	r0, 8d20 <usb_isr+0x544>
    8cc8:	2d40      	cmp	r5, #64	; 0x40
    8cca:	f47f af24 	bne.w	8b16 <usb_isr+0x33a>
    8cce:	0400      	lsls	r0, r0, #16
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8cd0:	2500      	movs	r5, #0
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8cd2:	f042 0202 	orr.w	r2, r2, #2
	ep0_tx_data_toggle ^= 1;
    8cd6:	9b05      	ldr	r3, [sp, #20]
    8cd8:	7033      	strb	r3, [r6, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8cda:	f1bc 0f00 	cmp.w	ip, #0
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8cde:	eb09 07c2 	add.w	r7, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8ce2:	bf0c      	ite	eq
    8ce4:	f04f 0c88 	moveq.w	ip, #136	; 0x88
    8ce8:	f04f 0cc8 	movne.w	ip, #200	; 0xc8
	ep0_tx_bdt_bank ^= 1;
    8cec:	700c      	strb	r4, [r1, #0]
	data += size;
    8cee:	9b01      	ldr	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8cf0:	9904      	ldr	r1, [sp, #16]
    8cf2:	6079      	str	r1, [r7, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8cf4:	ea4c 0000 	orr.w	r0, ip, r0
	data += size;
    8cf8:	4419      	add	r1, r3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8cfa:	f849 0032 	str.w	r0, [r9, r2, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;
    8cfe:	b915      	cbnz	r5, 8d06 <usb_isr+0x52a>
    8d00:	2b40      	cmp	r3, #64	; 0x40
    8d02:	f47f af08 	bne.w	8b16 <usb_isr+0x33a>
	ep0_tx_len = datalen;
    8d06:	4b4a      	ldr	r3, [pc, #296]	; (8e30 <usb_isr+0x654>)
	ep0_tx_ptr = data;
    8d08:	f8c8 1000 	str.w	r1, [r8]
	ep0_tx_len = datalen;
    8d0c:	801d      	strh	r5, [r3, #0]
    8d0e:	e702      	b.n	8b16 <usb_isr+0x33a>
	switch (setup.wRequestAndType) {
    8d10:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    8d14:	f000 812a 	beq.w	8f6c <usb_isr+0x790>
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    8d18:	4a41      	ldr	r2, [pc, #260]	; (8e20 <usb_isr+0x644>)
    8d1a:	230f      	movs	r3, #15
    8d1c:	7013      	strb	r3, [r2, #0]
    8d1e:	e6fa      	b.n	8b16 <usb_isr+0x33a>
	if (size > EP0_SIZE) size = EP0_SIZE;
    8d20:	2840      	cmp	r0, #64	; 0x40
    8d22:	d9d4      	bls.n	8cce <usb_isr+0x4f2>
    8d24:	2340      	movs	r3, #64	; 0x40
    8d26:	f1a0 0540 	sub.w	r5, r0, #64	; 0x40
    8d2a:	9301      	str	r3, [sp, #4]
    8d2c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    8d30:	e7cf      	b.n	8cd2 <usb_isr+0x4f6>
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    8d32:	f019 0f08 	tst.w	r9, #8
    8d36:	bf0c      	ite	eq
    8d38:	2302      	moveq	r3, #2
    8d3a:	2303      	movne	r3, #3
    8d3c:	55ab      	strb	r3, [r5, r6]
						break;
    8d3e:	e596      	b.n	886e <usb_isr+0x92>
		i = setup.wIndex & 0x7F;
    8d40:	88aa      	ldrh	r2, [r5, #4]
    8d42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    8d46:	2a04      	cmp	r2, #4
    8d48:	dc0b      	bgt.n	8d62 <usb_isr+0x586>
    8d4a:	886c      	ldrh	r4, [r5, #2]
    8d4c:	b94c      	cbnz	r4, 8d62 <usb_isr+0x586>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    8d4e:	4934      	ldr	r1, [pc, #208]	; (8e20 <usb_isr+0x644>)
    8d50:	9005      	str	r0, [sp, #20]
    8d52:	0092      	lsls	r2, r2, #2
    8d54:	4411      	add	r1, r2
    8d56:	46a4      	mov	ip, r4
    8d58:	780a      	ldrb	r2, [r1, #0]
    8d5a:	f022 0202 	bic.w	r2, r2, #2
    8d5e:	700a      	strb	r2, [r1, #0]
    8d60:	e0c7      	b.n	8ef2 <usb_isr+0x716>
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    8d62:	492f      	ldr	r1, [pc, #188]	; (8e20 <usb_isr+0x644>)
    8d64:	230f      	movs	r3, #15
    8d66:	700b      	strb	r3, [r1, #0]
    8d68:	e6d5      	b.n	8b16 <usb_isr+0x33a>
			if (list->addr == NULL) break;
    8d6a:	4832      	ldr	r0, [pc, #200]	; (8e34 <usb_isr+0x658>)
    8d6c:	6842      	ldr	r2, [r0, #4]
    8d6e:	2a00      	cmp	r2, #0
    8d70:	d0f7      	beq.n	8d62 <usb_isr+0x586>
    8d72:	886f      	ldrh	r7, [r5, #2]
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    8d74:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    8d78:	f100 010c 	add.w	r1, r0, #12
    8d7c:	e004      	b.n	8d88 <usb_isr+0x5ac>
			if (list->addr == NULL) break;
    8d7e:	6902      	ldr	r2, [r0, #16]
    8d80:	310c      	adds	r1, #12
    8d82:	300c      	adds	r0, #12
    8d84:	2a00      	cmp	r2, #0
    8d86:	d0ec      	beq.n	8d62 <usb_isr+0x586>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    8d88:	f831 3c0c 	ldrh.w	r3, [r1, #-12]
    8d8c:	42bb      	cmp	r3, r7
    8d8e:	d1f6      	bne.n	8d7e <usb_isr+0x5a2>
    8d90:	f831 3c0a 	ldrh.w	r3, [r1, #-10]
    8d94:	4563      	cmp	r3, ip
    8d96:	d1f2      	bne.n	8d7e <usb_isr+0x5a2>
				if ((setup.wValue >> 8) == 3) {
    8d98:	0a3f      	lsrs	r7, r7, #8
    8d9a:	2f03      	cmp	r7, #3
					datalen = *(list->addr);
    8d9c:	bf0c      	ite	eq
    8d9e:	7810      	ldrbeq	r0, [r2, #0]
					datalen = list->length;
    8da0:	8900      	ldrhne	r0, [r0, #8]
    8da2:	e76a      	b.n	8c7a <usb_isr+0x49e>
		reply_buffer[0] = 0;
    8da4:	4a21      	ldr	r2, [pc, #132]	; (8e2c <usb_isr+0x650>)
		datalen = 2;
    8da6:	2002      	movs	r0, #2
		reply_buffer[0] = 0;
    8da8:	7014      	strb	r4, [r2, #0]
		reply_buffer[1] = 0;
    8daa:	7054      	strb	r4, [r2, #1]
    8dac:	e765      	b.n	8c7a <usb_isr+0x49e>
		usb_configuration = setup.wValue;
    8dae:	4a1e      	ldr	r2, [pc, #120]	; (8e28 <usb_isr+0x64c>)
    8db0:	4c14      	ldr	r4, [pc, #80]	; (8e04 <usb_isr+0x628>)
    8db2:	78a9      	ldrb	r1, [r5, #2]
    8db4:	7011      	strb	r1, [r2, #0]
    8db6:	f104 0580 	add.w	r5, r4, #128	; 0x80
    8dba:	e002      	b.n	8dc2 <usb_isr+0x5e6>
    8dbc:	3408      	adds	r4, #8
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    8dbe:	42ac      	cmp	r4, r5
    8dc0:	d007      	beq.n	8dd2 <usb_isr+0x5f6>
			if (table[i].desc & BDT_OWN) {
    8dc2:	6a23      	ldr	r3, [r4, #32]
    8dc4:	061a      	lsls	r2, r3, #24
    8dc6:	d5f9      	bpl.n	8dbc <usb_isr+0x5e0>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    8dc8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8dca:	3808      	subs	r0, #8
    8dcc:	f000 f98e 	bl	90ec <usb_free>
    8dd0:	e7f4      	b.n	8dbc <usb_isr+0x5e0>
    8dd2:	4919      	ldr	r1, [pc, #100]	; (8e38 <usb_isr+0x65c>)
    8dd4:	4c11      	ldr	r4, [pc, #68]	; (8e1c <usb_isr+0x640>)
    8dd6:	4d19      	ldr	r5, [pc, #100]	; (8e3c <usb_isr+0x660>)
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    8dd8:	f8cd 8014 	str.w	r8, [sp, #20]
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    8ddc:	2300      	movs	r3, #0
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    8dde:	9603      	str	r6, [sp, #12]
    8de0:	461f      	mov	r7, r3
    8de2:	4688      	mov	r8, r1
    8de4:	461e      	mov	r6, r3
    8de6:	9404      	str	r4, [sp, #16]
			p = rx_first[i];
    8de8:	4915      	ldr	r1, [pc, #84]	; (8e40 <usb_isr+0x664>)
    8dea:	5988      	ldr	r0, [r1, r6]
			while (p) {
    8dec:	bb88      	cbnz	r0, 8e52 <usb_isr+0x676>
    8dee:	e035      	b.n	8e5c <usb_isr+0x680>
    8df0:	40072094 	.word	0x40072094
    8df4:	00040001 	.word	0x00040001
    8df8:	20002680 	.word	0x20002680
    8dfc:	20002614 	.word	0x20002614
    8e00:	20002615 	.word	0x20002615
    8e04:	1fff8000 	.word	0x1fff8000
    8e08:	00400088 	.word	0x00400088
    8e0c:	40072098 	.word	0x40072098
    8e10:	4007208c 	.word	0x4007208c
    8e14:	40072084 	.word	0x40072084
    8e18:	20002681 	.word	0x20002681
    8e1c:	200025b0 	.word	0x200025b0
    8e20:	400720c0 	.word	0x400720c0
    8e24:	40072080 	.word	0x40072080
    8e28:	2000268c 	.word	0x2000268c
    8e2c:	20002684 	.word	0x20002684
    8e30:	200025c0 	.word	0x200025c0
    8e34:	00011c4c 	.word	0x00011c4c
    8e38:	20002812 	.word	0x20002812
    8e3c:	20002690 	.word	0x20002690
    8e40:	20002604 	.word	0x20002604
    8e44:	40072088 	.word	0x40072088
    8e48:	200025c4 	.word	0x200025c4
    8e4c:	20002618 	.word	0x20002618
				p = n;
    8e50:	4620      	mov	r0, r4
				n = p->next;
    8e52:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    8e54:	f000 f94a 	bl	90ec <usb_free>
			while (p) {
    8e58:	2c00      	cmp	r4, #0
    8e5a:	d1f9      	bne.n	8e50 <usb_isr+0x674>
			p = tx_first[i];
    8e5c:	4a56      	ldr	r2, [pc, #344]	; (8fb8 <usb_isr+0x7dc>)
			rx_first[i] = NULL;
    8e5e:	4957      	ldr	r1, [pc, #348]	; (8fbc <usb_isr+0x7e0>)
			p = tx_first[i];
    8e60:	5990      	ldr	r0, [r2, r6]
			rx_last[i] = NULL;
    8e62:	9a04      	ldr	r2, [sp, #16]
			rx_first[i] = NULL;
    8e64:	2300      	movs	r3, #0
    8e66:	518b      	str	r3, [r1, r6]
			rx_last[i] = NULL;
    8e68:	5193      	str	r3, [r2, r6]
			while (p) {
    8e6a:	b908      	cbnz	r0, 8e70 <usb_isr+0x694>
    8e6c:	e005      	b.n	8e7a <usb_isr+0x69e>
				p = n;
    8e6e:	4620      	mov	r0, r4
				n = p->next;
    8e70:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    8e72:	f000 f93b 	bl	90ec <usb_free>
			while (p) {
    8e76:	2c00      	cmp	r4, #0
    8e78:	d1f9      	bne.n	8e6e <usb_isr+0x692>
			tx_first[i] = NULL;
    8e7a:	4a4f      	ldr	r2, [pc, #316]	; (8fb8 <usb_isr+0x7dc>)
			switch (tx_state[i]) {
    8e7c:	5deb      	ldrb	r3, [r5, r7]
			tx_first[i] = NULL;
    8e7e:	2100      	movs	r1, #0
    8e80:	5191      	str	r1, [r2, r6]
			tx_last[i] = NULL;
    8e82:	4a4f      	ldr	r2, [pc, #316]	; (8fc0 <usb_isr+0x7e4>)
			usb_rx_byte_count_data[i] = 0;
    8e84:	f828 1f02 	strh.w	r1, [r8, #2]!
			switch (tx_state[i]) {
    8e88:	3b02      	subs	r3, #2
			tx_last[i] = NULL;
    8e8a:	5191      	str	r1, [r2, r6]
			switch (tx_state[i]) {
    8e8c:	2b03      	cmp	r3, #3
    8e8e:	d806      	bhi.n	8e9e <usb_isr+0x6c2>
    8e90:	e8df f003 	tbb	[pc, r3]
    8e94:	02420242 	.word	0x02420242
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    8e98:	f04f 0301 	mov.w	r3, #1
    8e9c:	55eb      	strb	r3, [r5, r7]
    8e9e:	3604      	adds	r6, #4
		for (i=0; i < NUM_ENDPOINTS; i++) {
    8ea0:	2e10      	cmp	r6, #16
    8ea2:	f107 0701 	add.w	r7, r7, #1
    8ea6:	d19f      	bne.n	8de8 <usb_isr+0x60c>
		reg = &USB0_ENDPT1;
    8ea8:	4b46      	ldr	r3, [pc, #280]	; (8fc4 <usb_isr+0x7e8>)
		usb_rx_memory_needed = 0;
    8eaa:	4947      	ldr	r1, [pc, #284]	; (8fc8 <usb_isr+0x7ec>)
    8eac:	9e03      	ldr	r6, [sp, #12]
    8eae:	f8dd 8014 	ldr.w	r8, [sp, #20]
    8eb2:	f8df c124 	ldr.w	ip, [pc, #292]	; 8fd8 <usb_isr+0x7fc>
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    8eb6:	9604      	str	r6, [sp, #16]
		usb_rx_memory_needed = 0;
    8eb8:	2700      	movs	r7, #0
    8eba:	700f      	strb	r7, [r1, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    8ebc:	2401      	movs	r4, #1
    8ebe:	461e      	mov	r6, r3
    8ec0:	eb0c 0204 	add.w	r2, ip, r4
    8ec4:	00a5      	lsls	r5, r4, #2
			epconf = *cfg++;
    8ec6:	f812 2c01 	ldrb.w	r2, [r2, #-1]
			*reg = epconf;
    8eca:	f806 2b04 	strb.w	r2, [r6], #4
			if (epconf & USB_ENDPT_EPRXEN) {
    8ece:	0713      	lsls	r3, r2, #28
    8ed0:	d426      	bmi.n	8f20 <usb_isr+0x744>
			table[index(i, TX, EVEN)].desc = 0;
    8ed2:	f045 0202 	orr.w	r2, r5, #2
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    8ed6:	3401      	adds	r4, #1
			table[index(i, TX, ODD)].desc = 0;
    8ed8:	f045 0503 	orr.w	r5, r5, #3
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    8edc:	2c05      	cmp	r4, #5
			table[index(i, TX, EVEN)].desc = 0;
    8ede:	f849 7032 	str.w	r7, [r9, r2, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    8ee2:	f849 7035 	str.w	r7, [r9, r5, lsl #3]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    8ee6:	d1eb      	bne.n	8ec0 <usb_isr+0x6e4>
    8ee8:	9e04      	ldr	r6, [sp, #16]
    8eea:	7831      	ldrb	r1, [r6, #0]
    8eec:	9105      	str	r1, [sp, #20]
    8eee:	f081 0c01 	eor.w	ip, r1, #1
	if (datalen > setup.wLength) datalen = setup.wLength;
    8ef2:	2000      	movs	r0, #0
    8ef4:	9004      	str	r0, [sp, #16]
    8ef6:	9003      	str	r0, [sp, #12]
    8ef8:	4605      	mov	r5, r0
    8efa:	4602      	mov	r2, r0
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8efc:	4933      	ldr	r1, [pc, #204]	; (8fcc <usb_isr+0x7f0>)
    8efe:	780c      	ldrb	r4, [r1, #0]
    8f00:	f044 0702 	orr.w	r7, r4, #2
    8f04:	eb09 03c7 	add.w	r3, r9, r7, lsl #3
    8f08:	605a      	str	r2, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8f0a:	9a05      	ldr	r2, [sp, #20]
    8f0c:	2a00      	cmp	r2, #0
    8f0e:	f47f aecf 	bne.w	8cb0 <usb_isr+0x4d4>
    8f12:	9001      	str	r0, [sp, #4]
    8f14:	2388      	movs	r3, #136	; 0x88
    8f16:	e6cd      	b.n	8cb4 <usb_isr+0x4d8>
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    8f18:	f04f 0200 	mov.w	r2, #0
    8f1c:	55ea      	strb	r2, [r5, r7]
    8f1e:	e7be      	b.n	8e9e <usb_isr+0x6c2>
				p = usb_malloc();
    8f20:	f8cd c008 	str.w	ip, [sp, #8]
    8f24:	f000 f8c2 	bl	90ac <usb_malloc>
					table[index(i, RX, EVEN)].addr = p->buf;
    8f28:	eb09 1244 	add.w	r2, r9, r4, lsl #5
    8f2c:	f100 0108 	add.w	r1, r0, #8
				if (p) {
    8f30:	f8dd c008 	ldr.w	ip, [sp, #8]
    8f34:	b350      	cbz	r0, 8f8c <usb_isr+0x7b0>
					table[index(i, RX, EVEN)].addr = p->buf;
    8f36:	6051      	str	r1, [r2, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    8f38:	4a25      	ldr	r2, [pc, #148]	; (8fd0 <usb_isr+0x7f4>)
    8f3a:	f849 2035 	str.w	r2, [r9, r5, lsl #3]
				p = usb_malloc();
    8f3e:	f8cd c008 	str.w	ip, [sp, #8]
    8f42:	f000 f8b3 	bl	90ac <usb_malloc>
					table[index(i, RX, ODD)].addr = p->buf;
    8f46:	f045 0201 	orr.w	r2, r5, #1
    8f4a:	eb09 01c2 	add.w	r1, r9, r2, lsl #3
    8f4e:	f100 0308 	add.w	r3, r0, #8
				if (p) {
    8f52:	f8dd c008 	ldr.w	ip, [sp, #8]
    8f56:	b180      	cbz	r0, 8f7a <usb_isr+0x79e>
					table[index(i, RX, ODD)].addr = p->buf;
    8f58:	604b      	str	r3, [r1, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    8f5a:	491e      	ldr	r1, [pc, #120]	; (8fd4 <usb_isr+0x7f8>)
    8f5c:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
    8f60:	e7b7      	b.n	8ed2 <usb_isr+0x6f6>
	switch (setup.wRequestAndType) {
    8f62:	f640 2221 	movw	r2, #2593	; 0xa21
    8f66:	4291      	cmp	r1, r2
    8f68:	f47f aed6 	bne.w	8d18 <usb_isr+0x53c>
    8f6c:	2201      	movs	r2, #1
    8f6e:	f04f 0c00 	mov.w	ip, #0
    8f72:	9205      	str	r2, [sp, #20]
    8f74:	e7bd      	b.n	8ef2 <usb_isr+0x716>
		datalen = 2;
    8f76:	2002      	movs	r0, #2
    8f78:	e67f      	b.n	8c7a <usb_isr+0x49e>
					usb_rx_memory_needed++;
    8f7a:	4b13      	ldr	r3, [pc, #76]	; (8fc8 <usb_isr+0x7ec>)
    8f7c:	781a      	ldrb	r2, [r3, #0]
					table[index(i, RX, ODD)].desc = 0;
    8f7e:	f045 0101 	orr.w	r1, r5, #1
					usb_rx_memory_needed++;
    8f82:	3201      	adds	r2, #1
					table[index(i, RX, ODD)].desc = 0;
    8f84:	f849 0031 	str.w	r0, [r9, r1, lsl #3]
					usb_rx_memory_needed++;
    8f88:	701a      	strb	r2, [r3, #0]
    8f8a:	e7a2      	b.n	8ed2 <usb_isr+0x6f6>
					usb_rx_memory_needed++;
    8f8c:	4b0e      	ldr	r3, [pc, #56]	; (8fc8 <usb_isr+0x7ec>)
    8f8e:	781a      	ldrb	r2, [r3, #0]
					table[index(i, RX, EVEN)].desc = 0;
    8f90:	00a5      	lsls	r5, r4, #2
					usb_rx_memory_needed++;
    8f92:	3201      	adds	r2, #1
					table[index(i, RX, EVEN)].desc = 0;
    8f94:	f849 0035 	str.w	r0, [r9, r5, lsl #3]
					usb_rx_memory_needed++;
    8f98:	701a      	strb	r2, [r3, #0]
    8f9a:	e7d0      	b.n	8f3e <usb_isr+0x762>
    8f9c:	2840      	cmp	r0, #64	; 0x40
    8f9e:	bf34      	ite	cc
    8fa0:	4605      	movcc	r5, r0
    8fa2:	2540      	movcs	r5, #64	; 0x40
    8fa4:	042b      	lsls	r3, r5, #16
    8fa6:	9303      	str	r3, [sp, #12]
    8fa8:	1951      	adds	r1, r2, r5
	if (datalen > setup.wLength) datalen = setup.wLength;
    8faa:	2301      	movs	r3, #1
    8fac:	1b40      	subs	r0, r0, r5
    8fae:	9104      	str	r1, [sp, #16]
    8fb0:	f04f 0c00 	mov.w	ip, #0
    8fb4:	9305      	str	r3, [sp, #20]
    8fb6:	e7a1      	b.n	8efc <usb_isr+0x720>
    8fb8:	20002658 	.word	0x20002658
    8fbc:	20002604 	.word	0x20002604
    8fc0:	20002668 	.word	0x20002668
    8fc4:	400720c4 	.word	0x400720c4
    8fc8:	20002681 	.word	0x20002681
    8fcc:	20002680 	.word	0x20002680
    8fd0:	00400088 	.word	0x00400088
    8fd4:	004000c8 	.word	0x004000c8
    8fd8:	00011c48 	.word	0x00011c48

00008fdc <usb_init>:



void usb_init(void)
{
    8fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    8fe0:	f7ff fb00 	bl	85e4 <usb_init_serialnumber>
    8fe4:	4c23      	ldr	r4, [pc, #140]	; (9074 <usb_init+0x98>)
    8fe6:	2100      	movs	r1, #0

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    8fe8:	4608      	mov	r0, r1
    8fea:	1863      	adds	r3, r4, r1
    8fec:	5060      	str	r0, [r4, r1]
    8fee:	3108      	adds	r1, #8
	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    8ff0:	2988      	cmp	r1, #136	; 0x88
		table[i].addr = 0;
    8ff2:	6058      	str	r0, [r3, #4]
		table[i].desc = 0;
    8ff4:	f04f 0200 	mov.w	r2, #0
    8ff8:	4b1e      	ldr	r3, [pc, #120]	; (9074 <usb_init+0x98>)
	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    8ffa:	d1f6      	bne.n	8fea <usb_init+0xe>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    8ffc:	491e      	ldr	r1, [pc, #120]	; (9078 <usb_init+0x9c>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    8ffe:	f8df a09c 	ldr.w	sl, [pc, #156]	; 909c <usb_init+0xc0>
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    9002:	f8d1 b000 	ldr.w	fp, [r1]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    9006:	f8df 9098 	ldr.w	r9, [pc, #152]	; 90a0 <usb_init+0xc4>
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    900a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 90a4 <usb_init+0xc8>

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    900e:	f8df c098 	ldr.w	ip, [pc, #152]	; 90a8 <usb_init+0xcc>
	USB0_ERRSTAT = 0xFF;
    9012:	4f1a      	ldr	r7, [pc, #104]	; (907c <usb_init+0xa0>)
	USB0_OTGISTAT = 0xFF;
    9014:	4e1a      	ldr	r6, [pc, #104]	; (9080 <usb_init+0xa4>)

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    9016:	4d1b      	ldr	r5, [pc, #108]	; (9084 <usb_init+0xa8>)
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    9018:	4c1b      	ldr	r4, [pc, #108]	; (9088 <usb_init+0xac>)

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    901a:	481c      	ldr	r0, [pc, #112]	; (908c <usb_init+0xb0>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    901c:	f44b 2b80 	orr.w	fp, fp, #262144	; 0x40000
    9020:	f8c1 b000 	str.w	fp, [r1]
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    9024:	f3c3 2107 	ubfx	r1, r3, #8, #8
    9028:	f88a 1000 	strb.w	r1, [sl]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    902c:	f3c3 4107 	ubfx	r1, r3, #16, #8
    9030:	f889 1000 	strb.w	r1, [r9]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    9034:	0e1b      	lsrs	r3, r3, #24
	USB0_ISTAT = 0xFF;
    9036:	21ff      	movs	r1, #255	; 0xff
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    9038:	f888 3000 	strb.w	r3, [r8]
	USB0_ISTAT = 0xFF;
    903c:	f88c 1000 	strb.w	r1, [ip]
	USB0_ERRSTAT = 0xFF;
    9040:	7039      	strb	r1, [r7, #0]
	USB0_OTGISTAT = 0xFF;
    9042:	7031      	strb	r1, [r6, #0]
	USB0_USBCTRL = 0;
    9044:	4912      	ldr	r1, [pc, #72]	; (9090 <usb_init+0xb4>)
	USB0_CTL = USB_CTL_USBENSOFEN;
    9046:	f04f 0901 	mov.w	r9, #1
    904a:	f885 9000 	strb.w	r9, [r5]
	USB0_USBCTRL = 0;
    904e:	700a      	strb	r2, [r1, #0]
	USB0_INTEN = USB_INTEN_USBRSTEN;
    9050:	4a10      	ldr	r2, [pc, #64]	; (9094 <usb_init+0xb8>)
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    9052:	4911      	ldr	r1, [pc, #68]	; (9098 <usb_init+0xbc>)
	USB0_INTEN = USB_INTEN_USBRSTEN;
    9054:	f882 9000 	strb.w	r9, [r2]
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    9058:	f04f 0870 	mov.w	r8, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    905c:	f44f 7300 	mov.w	r3, #512	; 0x200
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    9060:	f04f 0c10 	mov.w	ip, #16
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    9064:	f881 8000 	strb.w	r8, [r1]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    9068:	6023      	str	r3, [r4, #0]
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    906a:	f880 c000 	strb.w	ip, [r0]
    906e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9072:	bf00      	nop
    9074:	1fff8000 	.word	0x1fff8000
    9078:	40048034 	.word	0x40048034
    907c:	40072088 	.word	0x40072088
    9080:	40072010 	.word	0x40072010
    9084:	40072094 	.word	0x40072094
    9088:	e000e108 	.word	0xe000e108
    908c:	40072108 	.word	0x40072108
    9090:	40072100 	.word	0x40072100
    9094:	40072084 	.word	0x40072084
    9098:	e000e449 	.word	0xe000e449
    909c:	4007209c 	.word	0x4007209c
    90a0:	400720b0 	.word	0x400720b0
    90a4:	400720b4 	.word	0x400720b4
    90a8:	40072080 	.word	0x40072080

000090ac <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    90ac:	b672      	cpsid	i
	avail = usb_buffer_available;
    90ae:	4a0d      	ldr	r2, [pc, #52]	; (90e4 <usb_malloc+0x38>)
    90b0:	6811      	ldr	r1, [r2, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    90b2:	fab1 f381 	clz	r3, r1
	if (n >= NUM_USB_BUFFERS) {
    90b6:	2b0f      	cmp	r3, #15
    90b8:	d810      	bhi.n	90dc <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    90ba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    90be:	40d8      	lsrs	r0, r3
    90c0:	ea21 0100 	bic.w	r1, r1, r0
    90c4:	6011      	str	r1, [r2, #0]
	__enable_irq();
    90c6:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    90c8:	4807      	ldr	r0, [pc, #28]	; (90e8 <usb_malloc+0x3c>)
    90ca:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    90ce:	00db      	lsls	r3, r3, #3
    90d0:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    90d2:	2100      	movs	r1, #0
    90d4:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    90d6:	4610      	mov	r0, r2
	*(uint32_t *)(p + 4) = 0;
    90d8:	6051      	str	r1, [r2, #4]
}
    90da:	4770      	bx	lr
		__enable_irq();
    90dc:	b662      	cpsie	i
		return NULL;
    90de:	2000      	movs	r0, #0
    90e0:	4770      	bx	lr
    90e2:	bf00      	nop
    90e4:	20000dd8 	.word	0x20000dd8
    90e8:	20000800 	.word	0x20000800

000090ec <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    90ec:	4b0d      	ldr	r3, [pc, #52]	; (9124 <usb_free+0x38>)
    90ee:	4a0e      	ldr	r2, [pc, #56]	; (9128 <usb_free+0x3c>)
    90f0:	1ac3      	subs	r3, r0, r3
    90f2:	fba2 1303 	umull	r1, r3, r2, r3
    90f6:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    90f8:	2b0f      	cmp	r3, #15
    90fa:	d80c      	bhi.n	9116 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    90fc:	4a0b      	ldr	r2, [pc, #44]	; (912c <usb_free+0x40>)
    90fe:	7812      	ldrb	r2, [r2, #0]
    9100:	b952      	cbnz	r2, 9118 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    9102:	b672      	cpsid	i
	usb_buffer_available |= mask;
    9104:	4a0a      	ldr	r2, [pc, #40]	; (9130 <usb_free+0x44>)
	mask = (0x80000000 >> n);
    9106:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
	usb_buffer_available |= mask;
    910a:	6811      	ldr	r1, [r2, #0]
	mask = (0x80000000 >> n);
    910c:	fa20 f303 	lsr.w	r3, r0, r3
	usb_buffer_available |= mask;
    9110:	4319      	orrs	r1, r3
    9112:	6011      	str	r1, [r2, #0]
	__enable_irq();
    9114:	b662      	cpsie	i
    9116:	4770      	bx	lr
	if (usb_rx_memory_needed && usb_configuration) {
    9118:	4a06      	ldr	r2, [pc, #24]	; (9134 <usb_free+0x48>)
    911a:	7812      	ldrb	r2, [r2, #0]
    911c:	2a00      	cmp	r2, #0
    911e:	d0f0      	beq.n	9102 <usb_free+0x16>
		usb_rx_memory(p);
    9120:	f7ff bad4 	b.w	86cc <usb_rx_memory>
    9124:	20000800 	.word	0x20000800
    9128:	38e38e39 	.word	0x38e38e39
    912c:	20002681 	.word	0x20002681
    9130:	20000dd8 	.word	0x20000dd8
    9134:	2000268c 	.word	0x2000268c

00009138 <sysex_byte>:
		tx_packet = usb_malloc();
	}
}

void static sysex_byte(uint8_t b)
{
    9138:	b538      	push	{r3, r4, r5, lr}
	// when buffer is full, send another chunk to handler.
	if (usb_midi_msg_sysex_len == USB_MIDI_SYSEX_MAX) {
    913a:	4c0b      	ldr	r4, [pc, #44]	; (9168 <sysex_byte+0x30>)
    913c:	7821      	ldrb	r1, [r4, #0]
    913e:	293c      	cmp	r1, #60	; 0x3c
{
    9140:	4605      	mov	r5, r0
	if (usb_midi_msg_sysex_len == USB_MIDI_SYSEX_MAX) {
    9142:	d007      	beq.n	9154 <sysex_byte+0x1c>
		if (usb_midi_handleSysEx) {
			(*usb_midi_handleSysEx)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
			usb_midi_msg_sysex_len = 0;
		}
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    9144:	293b      	cmp	r1, #59	; 0x3b
    9146:	d804      	bhi.n	9152 <sysex_byte+0x1a>
    9148:	1c4a      	adds	r2, r1, #1
    914a:	b2d2      	uxtb	r2, r2
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    914c:	4b07      	ldr	r3, [pc, #28]	; (916c <sysex_byte+0x34>)
    914e:	7022      	strb	r2, [r4, #0]
    9150:	545d      	strb	r5, [r3, r1]
    9152:	bd38      	pop	{r3, r4, r5, pc}
		if (usb_midi_handleSysEx) {
    9154:	4b06      	ldr	r3, [pc, #24]	; (9170 <sysex_byte+0x38>)
    9156:	681b      	ldr	r3, [r3, #0]
    9158:	2b00      	cmp	r3, #0
    915a:	d0fa      	beq.n	9152 <sysex_byte+0x1a>
			(*usb_midi_handleSysEx)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    915c:	2200      	movs	r2, #0
    915e:	4803      	ldr	r0, [pc, #12]	; (916c <sysex_byte+0x34>)
    9160:	4798      	blx	r3
    9162:	2100      	movs	r1, #0
    9164:	2201      	movs	r2, #1
    9166:	e7f1      	b.n	914c <sysex_byte+0x14>
    9168:	2000281d 	.word	0x2000281d
    916c:	20002824 	.word	0x20002824
    9170:	200026bc 	.word	0x200026bc

00009174 <usb_midi_write_packed>:
{
    9174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!tx_packet) {
    9178:	4e22      	ldr	r6, [pc, #136]	; (9204 <usb_midi_write_packed+0x90>)
	tx_noautoflush = 1;
    917a:	4f23      	ldr	r7, [pc, #140]	; (9208 <usb_midi_write_packed+0x94>)
	if (!tx_packet) {
    917c:	6831      	ldr	r1, [r6, #0]
	tx_noautoflush = 1;
    917e:	2301      	movs	r3, #1
{
    9180:	4680      	mov	r8, r0
	tx_noautoflush = 1;
    9182:	703b      	strb	r3, [r7, #0]
	if (!tx_packet) {
    9184:	b1c1      	cbz	r1, 91b8 <usb_midi_write_packed+0x44>
    9186:	4d21      	ldr	r5, [pc, #132]	; (920c <usb_midi_write_packed+0x98>)
	index = tx_packet->index;
    9188:	884b      	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    918a:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    918e:	3301      	adds	r3, #1
	transmit_previous_timeout = 0;
    9190:	2200      	movs	r2, #0
	if (index < MIDI_TX_SIZE/4) {
    9192:	2b0f      	cmp	r3, #15
	((uint32_t *)(tx_packet->buf))[index++] = n;
    9194:	f8c0 8008 	str.w	r8, [r0, #8]
	transmit_previous_timeout = 0;
    9198:	702a      	strb	r2, [r5, #0]
	if (index < MIDI_TX_SIZE/4) {
    919a:	d804      	bhi.n	91a6 <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    919c:	804b      	strh	r3, [r1, #2]
	tx_noautoflush = 0;
    919e:	2300      	movs	r3, #0
    91a0:	703b      	strb	r3, [r7, #0]
    91a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		tx_packet->len = MIDI_TX_SIZE;
    91a6:	2340      	movs	r3, #64	; 0x40
    91a8:	800b      	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    91aa:	2003      	movs	r0, #3
    91ac:	f7ff fad2 	bl	8754 <usb_tx>
		tx_packet = usb_malloc();
    91b0:	f7ff ff7c 	bl	90ac <usb_malloc>
    91b4:	6030      	str	r0, [r6, #0]
    91b6:	e7f2      	b.n	919e <usb_midi_write_packed+0x2a>
                	if (!usb_configuration) {
    91b8:	f8df 9054 	ldr.w	r9, [pc, #84]	; 9210 <usb_midi_write_packed+0x9c>
    91bc:	f899 3000 	ldrb.w	r3, [r9]
    91c0:	2b00      	cmp	r3, #0
    91c2:	d0ee      	beq.n	91a2 <usb_midi_write_packed+0x2e>
    91c4:	4d11      	ldr	r5, [pc, #68]	; (920c <usb_midi_write_packed+0x98>)
    91c6:	f245 0401 	movw	r4, #20481	; 0x5001
    91ca:	e008      	b.n	91de <usb_midi_write_packed+0x6a>
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    91cc:	3c01      	subs	r4, #1
    91ce:	d012      	beq.n	91f6 <usb_midi_write_packed+0x82>
    91d0:	782b      	ldrb	r3, [r5, #0]
    91d2:	b983      	cbnz	r3, 91f6 <usb_midi_write_packed+0x82>
                	yield();
    91d4:	f000 ffc4 	bl	a160 <yield>
                	if (!usb_configuration) {
    91d8:	f899 3000 	ldrb.w	r3, [r9]
    91dc:	b17b      	cbz	r3, 91fe <usb_midi_write_packed+0x8a>
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    91de:	2003      	movs	r0, #3
    91e0:	f7ff fa5e 	bl	86a0 <usb_tx_packet_count>
    91e4:	2805      	cmp	r0, #5
    91e6:	d8f1      	bhi.n	91cc <usb_midi_write_packed+0x58>
                        	tx_packet = usb_malloc();
    91e8:	f7ff ff60 	bl	90ac <usb_malloc>
    91ec:	6030      	str	r0, [r6, #0]
                        	if (tx_packet) break;
    91ee:	2800      	cmp	r0, #0
    91f0:	d0ec      	beq.n	91cc <usb_midi_write_packed+0x58>
                        	tx_packet = usb_malloc();
    91f2:	4601      	mov	r1, r0
    91f4:	e7c8      	b.n	9188 <usb_midi_write_packed+0x14>
                        	transmit_previous_timeout = 1;
    91f6:	2301      	movs	r3, #1
    91f8:	702b      	strb	r3, [r5, #0]
                        	return;
    91fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    91fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9202:	bf00      	nop
    9204:	200026b4 	.word	0x200026b4
    9208:	200026ac 	.word	0x200026ac
    920c:	200026b8 	.word	0x200026b8
    9210:	2000268c 	.word	0x2000268c

00009214 <usb_midi_flush_output>:
{
    9214:	b510      	push	{r4, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    9216:	4b09      	ldr	r3, [pc, #36]	; (923c <usb_midi_flush_output+0x28>)
    9218:	781b      	ldrb	r3, [r3, #0]
    921a:	b923      	cbnz	r3, 9226 <usb_midi_flush_output+0x12>
    921c:	4c08      	ldr	r4, [pc, #32]	; (9240 <usb_midi_flush_output+0x2c>)
    921e:	6821      	ldr	r1, [r4, #0]
    9220:	b109      	cbz	r1, 9226 <usb_midi_flush_output+0x12>
    9222:	884b      	ldrh	r3, [r1, #2]
    9224:	b903      	cbnz	r3, 9228 <usb_midi_flush_output+0x14>
    9226:	bd10      	pop	{r4, pc}
		tx_packet->len = tx_packet->index * 4;
    9228:	009b      	lsls	r3, r3, #2
    922a:	800b      	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    922c:	2003      	movs	r0, #3
    922e:	f7ff fa91 	bl	8754 <usb_tx>
		tx_packet = usb_malloc();
    9232:	f7ff ff3b 	bl	90ac <usb_malloc>
    9236:	6020      	str	r0, [r4, #0]
    9238:	bd10      	pop	{r4, pc}
    923a:	bf00      	nop
    923c:	200026ac 	.word	0x200026ac
    9240:	200026b4 	.word	0x200026b4

00009244 <usb_midi_read>:
	}
}


int usb_midi_read(uint32_t channel)
{
    9244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t n, index, ch, type1, type2;

	if (!rx_packet) {
    9246:	4c9b      	ldr	r4, [pc, #620]	; (94b4 <usb_midi_read+0x270>)
    9248:	6823      	ldr	r3, [r4, #0]
{
    924a:	4607      	mov	r7, r0
	if (!rx_packet) {
    924c:	2b00      	cmp	r3, #0
    924e:	d060      	beq.n	9312 <usb_midi_read+0xce>
    9250:	881e      	ldrh	r6, [r3, #0]
    9252:	4618      	mov	r0, r3
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    9254:	8842      	ldrh	r2, [r0, #2]
	//n = *(uint32_t *)(rx_packet->buf + index);
	n = ((uint32_t *)rx_packet->buf)[index/4];
    9256:	0891      	lsrs	r1, r2, #2
    9258:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    925c:	3204      	adds	r2, #4
	if (index < rx_packet->len) {
    925e:	42b2      	cmp	r2, r6
	n = ((uint32_t *)rx_packet->buf)[index/4];
    9260:	688d      	ldr	r5, [r1, #8]
	if (index < rx_packet->len) {
    9262:	d22e      	bcs.n	92c2 <usb_midi_read+0x7e>
		rx_packet->index = index;
    9264:	8042      	strh	r2, [r0, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    9266:	f005 040f 	and.w	r4, r5, #15
	type2 = (n >> 12) & 15;
	ch = ((n >> 8) & 15) + 1;
    926a:	0a2b      	lsrs	r3, r5, #8
	if (type1 >= 0x08 && type1 <= 0x0E) {
    926c:	f1a4 0208 	sub.w	r2, r4, #8
	ch = ((n >> 8) & 15) + 1;
    9270:	f003 010f 	and.w	r1, r3, #15
	if (type1 >= 0x08 && type1 <= 0x0E) {
    9274:	2a06      	cmp	r2, #6
	ch = ((n >> 8) & 15) + 1;
    9276:	f101 0601 	add.w	r6, r1, #1
	if (type1 >= 0x08 && type1 <= 0x0E) {
    927a:	d90b      	bls.n	9294 <usb_midi_read+0x50>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x04) {
    927c:	2c04      	cmp	r4, #4
    927e:	f000 80aa 	beq.w	93d6 <usb_midi_read+0x192>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    9282:	1f62      	subs	r2, r4, #5
    9284:	2a02      	cmp	r2, #2
    9286:	d956      	bls.n	9336 <usb_midi_read+0xf2>
		usb_midi_msg_type = 7;				// 7 = Sys Ex
		if (usb_midi_handleSysEx)
			(*usb_midi_handleSysEx)(usb_midi_msg_sysex, usb_midi_msg_data1, 1);
		return 1;
	}
	if (type1 == 0x0F) {
    9288:	2c0f      	cmp	r4, #15
    928a:	d07d      	beq.n	9388 <usb_midi_read+0x144>
			if (usb_midi_handleRealTimeSystem)
				(*usb_midi_handleRealTimeSystem)(n >> 8);
			goto return_message;
		}
	}
	if (type1 == 0x02) {
    928c:	2c02      	cmp	r4, #2
    928e:	d01f      	beq.n	92d0 <usb_midi_read+0x8c>
		usb_midi_msg_type = 9;
		if (usb_midi_handleTimeCodeQuarterFrame)
			(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
		return 1;
	}
	return 0;
    9290:	2000      	movs	r0, #0
    9292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (channel && channel != ch) {
    9294:	b10f      	cbz	r7, 929a <usb_midi_read+0x56>
    9296:	42b7      	cmp	r7, r6
    9298:	d1fa      	bne.n	9290 <usb_midi_read+0x4c>
		if (type1 == 0x08 && type2 == 0x08) {
    929a:	2c08      	cmp	r4, #8
	type2 = (n >> 12) & 15;
    929c:	f3c5 3303 	ubfx	r3, r5, #12, #4
		if (type1 == 0x08 && type2 == 0x08) {
    92a0:	d060      	beq.n	9364 <usb_midi_read+0x120>
		if (type1 == 0x09 && type2 == 0x09) {
    92a2:	2c09      	cmp	r4, #9
    92a4:	d01e      	beq.n	92e4 <usb_midi_read+0xa0>
		if (type1 == 0x0A && type2 == 0x0A) {
    92a6:	2c0a      	cmp	r4, #10
    92a8:	f040 8087 	bne.w	93ba <usb_midi_read+0x176>
    92ac:	2b0a      	cmp	r3, #10
    92ae:	d1ef      	bne.n	9290 <usb_midi_read+0x4c>
			if (usb_midi_handleVelocityChange)
    92b0:	4b81      	ldr	r3, [pc, #516]	; (94b8 <usb_midi_read+0x274>)
			usb_midi_msg_type = 2;			// 2 = Poly Pressure
    92b2:	4a82      	ldr	r2, [pc, #520]	; (94bc <usb_midi_read+0x278>)
			if (usb_midi_handleVelocityChange)
    92b4:	681b      	ldr	r3, [r3, #0]
			usb_midi_msg_type = 2;			// 2 = Poly Pressure
    92b6:	2102      	movs	r1, #2
    92b8:	7011      	strb	r1, [r2, #0]
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
    92ba:	b2f6      	uxtb	r6, r6
			if (usb_midi_handleVelocityChange)
    92bc:	2b00      	cmp	r3, #0
    92be:	d15a      	bne.n	9376 <usb_midi_read+0x132>
    92c0:	e06f      	b.n	93a2 <usb_midi_read+0x15e>
		usb_free(rx_packet);
    92c2:	f7ff ff13 	bl	90ec <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    92c6:	2004      	movs	r0, #4
    92c8:	f7ff f9cc 	bl	8664 <usb_rx>
    92cc:	6020      	str	r0, [r4, #0]
    92ce:	e7ca      	b.n	9266 <usb_midi_read+0x22>
		if (usb_midi_handleTimeCodeQuarterFrame)
    92d0:	4b7b      	ldr	r3, [pc, #492]	; (94c0 <usb_midi_read+0x27c>)
		usb_midi_msg_type = 9;
    92d2:	4a7a      	ldr	r2, [pc, #488]	; (94bc <usb_midi_read+0x278>)
		if (usb_midi_handleTimeCodeQuarterFrame)
    92d4:	681b      	ldr	r3, [r3, #0]
		usb_midi_msg_type = 9;
    92d6:	2109      	movs	r1, #9
    92d8:	7011      	strb	r1, [r2, #0]
		if (usb_midi_handleTimeCodeQuarterFrame)
    92da:	b10b      	cbz	r3, 92e0 <usb_midi_read+0x9c>
			(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    92dc:	0c28      	lsrs	r0, r5, #16
    92de:	4798      	blx	r3
		return 1;
    92e0:	2001      	movs	r0, #1
}
    92e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (type1 == 0x09 && type2 == 0x09) {
    92e4:	2b09      	cmp	r3, #9
    92e6:	d1d3      	bne.n	9290 <usb_midi_read+0x4c>
			if ((n >> 24) > 0) {
    92e8:	0e2c      	lsrs	r4, r5, #24
    92ea:	f000 808e 	beq.w	940a <usb_midi_read+0x1c6>
				if (usb_midi_handleNoteOn)
    92ee:	4b75      	ldr	r3, [pc, #468]	; (94c4 <usb_midi_read+0x280>)
				usb_midi_msg_type = 1;		// 1 = Note on
    92f0:	4a72      	ldr	r2, [pc, #456]	; (94bc <usb_midi_read+0x278>)
				if (usb_midi_handleNoteOn)
    92f2:	681b      	ldr	r3, [r3, #0]
				usb_midi_msg_type = 1;		// 1 = Note on
    92f4:	2101      	movs	r1, #1
    92f6:	7011      	strb	r1, [r2, #0]
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    92f8:	b2f6      	uxtb	r6, r6
				if (usb_midi_handleNoteOn)
    92fa:	2b00      	cmp	r3, #0
    92fc:	f000 8094 	beq.w	9428 <usb_midi_read+0x1e4>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    9300:	f3c5 4707 	ubfx	r7, r5, #16, #8
    9304:	b2e5      	uxtb	r5, r4
    9306:	4630      	mov	r0, r6
    9308:	4639      	mov	r1, r7
    930a:	462a      	mov	r2, r5
    930c:	4798      	blx	r3
    930e:	46bc      	mov	ip, r7
    9310:	e04a      	b.n	93a8 <usb_midi_read+0x164>
		if (!usb_configuration) return 0;
    9312:	4b6d      	ldr	r3, [pc, #436]	; (94c8 <usb_midi_read+0x284>)
    9314:	781b      	ldrb	r3, [r3, #0]
    9316:	2b00      	cmp	r3, #0
    9318:	d0ba      	beq.n	9290 <usb_midi_read+0x4c>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    931a:	2004      	movs	r0, #4
    931c:	f7ff f9a2 	bl	8664 <usb_rx>
    9320:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return 0;
    9322:	2800      	cmp	r0, #0
    9324:	d0b4      	beq.n	9290 <usb_midi_read+0x4c>
		if (rx_packet->len == 0) {
    9326:	8806      	ldrh	r6, [r0, #0]
    9328:	2e00      	cmp	r6, #0
    932a:	d193      	bne.n	9254 <usb_midi_read+0x10>
			usb_free(rx_packet);
    932c:	f7ff fede 	bl	90ec <usb_free>
			rx_packet = NULL;
    9330:	6026      	str	r6, [r4, #0]
			return 0;
    9332:	4630      	mov	r0, r6
    9334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sysex_byte(n >> 8);
    9336:	b2d8      	uxtb	r0, r3
    9338:	f7ff fefe 	bl	9138 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    933c:	2c05      	cmp	r4, #5
    933e:	d156      	bne.n	93ee <usb_midi_read+0x1aa>
		if (usb_midi_handleSysEx)
    9340:	4a62      	ldr	r2, [pc, #392]	; (94cc <usb_midi_read+0x288>)
		usb_midi_msg_data1 = usb_midi_msg_sysex_len;
    9342:	4b63      	ldr	r3, [pc, #396]	; (94d0 <usb_midi_read+0x28c>)
    9344:	4863      	ldr	r0, [pc, #396]	; (94d4 <usb_midi_read+0x290>)
		if (usb_midi_handleSysEx)
    9346:	6814      	ldr	r4, [r2, #0]
		usb_midi_msg_data1 = usb_midi_msg_sysex_len;
    9348:	7819      	ldrb	r1, [r3, #0]
		usb_midi_msg_type = 7;				// 7 = Sys Ex
    934a:	4a5c      	ldr	r2, [pc, #368]	; (94bc <usb_midi_read+0x278>)
		usb_midi_msg_data1 = usb_midi_msg_sysex_len;
    934c:	7001      	strb	r1, [r0, #0]
		usb_midi_msg_sysex_len = 0;
    934e:	2500      	movs	r5, #0
		usb_midi_msg_type = 7;				// 7 = Sys Ex
    9350:	2007      	movs	r0, #7
		usb_midi_msg_sysex_len = 0;
    9352:	701d      	strb	r5, [r3, #0]
		usb_midi_msg_type = 7;				// 7 = Sys Ex
    9354:	7010      	strb	r0, [r2, #0]
		if (usb_midi_handleSysEx)
    9356:	2c00      	cmp	r4, #0
    9358:	d0c2      	beq.n	92e0 <usb_midi_read+0x9c>
			(*usb_midi_handleSysEx)(usb_midi_msg_sysex, usb_midi_msg_data1, 1);
    935a:	485f      	ldr	r0, [pc, #380]	; (94d8 <usb_midi_read+0x294>)
    935c:	2201      	movs	r2, #1
    935e:	47a0      	blx	r4
		return 1;
    9360:	2001      	movs	r0, #1
    9362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (type1 == 0x08 && type2 == 0x08) {
    9364:	2b08      	cmp	r3, #8
    9366:	d193      	bne.n	9290 <usb_midi_read+0x4c>
			if (usb_midi_handleNoteOff)
    9368:	4b5c      	ldr	r3, [pc, #368]	; (94dc <usb_midi_read+0x298>)
			usb_midi_msg_type = 0;			// 0 = Note off
    936a:	4a54      	ldr	r2, [pc, #336]	; (94bc <usb_midi_read+0x278>)
			if (usb_midi_handleNoteOff)
    936c:	681b      	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0;			// 0 = Note off
    936e:	2100      	movs	r1, #0
    9370:	7011      	strb	r1, [r2, #0]
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    9372:	b2f6      	uxtb	r6, r6
			if (usb_midi_handleNoteOff)
    9374:	b1ab      	cbz	r3, 93a2 <usb_midi_read+0x15e>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    9376:	f3c5 4407 	ubfx	r4, r5, #16, #8
    937a:	0e2d      	lsrs	r5, r5, #24
    937c:	4630      	mov	r0, r6
    937e:	4621      	mov	r1, r4
    9380:	462a      	mov	r2, r5
    9382:	4798      	blx	r3
    9384:	46a4      	mov	ip, r4
    9386:	e00f      	b.n	93a8 <usb_midi_read+0x164>
		if (usb_midi_msg_sysex_len > 0) {
    9388:	4a51      	ldr	r2, [pc, #324]	; (94d0 <usb_midi_read+0x28c>)
    938a:	7812      	ldrb	r2, [r2, #0]
    938c:	2a00      	cmp	r2, #0
    938e:	d138      	bne.n	9402 <usb_midi_read+0x1be>
			if (usb_midi_handleRealTimeSystem)
    9390:	4a53      	ldr	r2, [pc, #332]	; (94e0 <usb_midi_read+0x29c>)
			usb_midi_msg_type = 8;
    9392:	494a      	ldr	r1, [pc, #296]	; (94bc <usb_midi_read+0x278>)
			if (usb_midi_handleRealTimeSystem)
    9394:	6812      	ldr	r2, [r2, #0]
			usb_midi_msg_type = 8;
    9396:	2008      	movs	r0, #8
    9398:	7008      	strb	r0, [r1, #0]
			if (usb_midi_handleRealTimeSystem)
    939a:	b10a      	cbz	r2, 93a0 <usb_midi_read+0x15c>
				(*usb_midi_handleRealTimeSystem)(n >> 8);
    939c:	b2d8      	uxtb	r0, r3
    939e:	4790      	blx	r2
    93a0:	b2f6      	uxtb	r6, r6
    93a2:	f3c5 4c07 	ubfx	ip, r5, #16, #8
    93a6:	0e2d      	lsrs	r5, r5, #24
		usb_midi_msg_channel = ch;
    93a8:	4f4e      	ldr	r7, [pc, #312]	; (94e4 <usb_midi_read+0x2a0>)
		usb_midi_msg_data1 = (n >> 16);
    93aa:	4c4a      	ldr	r4, [pc, #296]	; (94d4 <usb_midi_read+0x290>)
		usb_midi_msg_data2 = (n >> 24);
    93ac:	4b4e      	ldr	r3, [pc, #312]	; (94e8 <usb_midi_read+0x2a4>)
		usb_midi_msg_channel = ch;
    93ae:	703e      	strb	r6, [r7, #0]
		usb_midi_msg_data1 = (n >> 16);
    93b0:	f884 c000 	strb.w	ip, [r4]
		usb_midi_msg_data2 = (n >> 24);
    93b4:	701d      	strb	r5, [r3, #0]
		return 1;
    93b6:	2001      	movs	r0, #1
    93b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
    93ba:	2c0b      	cmp	r4, #11
    93bc:	d13c      	bne.n	9438 <usb_midi_read+0x1f4>
    93be:	2b0b      	cmp	r3, #11
    93c0:	f47f af66 	bne.w	9290 <usb_midi_read+0x4c>
			if (usb_midi_handleControlChange)
    93c4:	4b49      	ldr	r3, [pc, #292]	; (94ec <usb_midi_read+0x2a8>)
			usb_midi_msg_type = 3;			// 3 = Control Change
    93c6:	4a3d      	ldr	r2, [pc, #244]	; (94bc <usb_midi_read+0x278>)
			if (usb_midi_handleControlChange)
    93c8:	681b      	ldr	r3, [r3, #0]
			usb_midi_msg_type = 3;			// 3 = Control Change
    93ca:	2103      	movs	r1, #3
    93cc:	7011      	strb	r1, [r2, #0]
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    93ce:	b2f6      	uxtb	r6, r6
			if (usb_midi_handleControlChange)
    93d0:	2b00      	cmp	r3, #0
    93d2:	d1d0      	bne.n	9376 <usb_midi_read+0x132>
    93d4:	e7e5      	b.n	93a2 <usb_midi_read+0x15e>
		sysex_byte(n >> 8);
    93d6:	b2d8      	uxtb	r0, r3
    93d8:	f7ff feae 	bl	9138 <sysex_byte>
		sysex_byte(n >> 16);
    93dc:	f3c5 4007 	ubfx	r0, r5, #16, #8
    93e0:	f7ff feaa 	bl	9138 <sysex_byte>
		sysex_byte(n >> 24);
    93e4:	0e28      	lsrs	r0, r5, #24
    93e6:	f7ff fea7 	bl	9138 <sysex_byte>
		return 0;
    93ea:	2000      	movs	r0, #0
    93ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (type1 >= 0x06) sysex_byte(n >> 16);
    93ee:	f3c5 4007 	ubfx	r0, r5, #16, #8
    93f2:	f7ff fea1 	bl	9138 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    93f6:	2c07      	cmp	r4, #7
    93f8:	d1a2      	bne.n	9340 <usb_midi_read+0xfc>
    93fa:	0e28      	lsrs	r0, r5, #24
    93fc:	f7ff fe9c 	bl	9138 <sysex_byte>
    9400:	e79e      	b.n	9340 <usb_midi_read+0xfc>
			sysex_byte(n >> 8);
    9402:	b2d8      	uxtb	r0, r3
    9404:	f7ff fe98 	bl	9138 <sysex_byte>
    9408:	e742      	b.n	9290 <usb_midi_read+0x4c>
				if (usb_midi_handleNoteOff)
    940a:	4b34      	ldr	r3, [pc, #208]	; (94dc <usb_midi_read+0x298>)
				usb_midi_msg_type = 0;		// 0 = Note off
    940c:	4a2b      	ldr	r2, [pc, #172]	; (94bc <usb_midi_read+0x278>)
				if (usb_midi_handleNoteOff)
    940e:	681b      	ldr	r3, [r3, #0]
				usb_midi_msg_type = 0;		// 0 = Note off
    9410:	7014      	strb	r4, [r2, #0]
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    9412:	b2f6      	uxtb	r6, r6
				if (usb_midi_handleNoteOff)
    9414:	b163      	cbz	r3, 9430 <usb_midi_read+0x1ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    9416:	f3c5 4507 	ubfx	r5, r5, #16, #8
    941a:	4629      	mov	r1, r5
    941c:	4630      	mov	r0, r6
    941e:	4622      	mov	r2, r4
    9420:	4798      	blx	r3
    9422:	46ac      	mov	ip, r5
    9424:	4625      	mov	r5, r4
    9426:	e7bf      	b.n	93a8 <usb_midi_read+0x164>
    9428:	f3c5 4c07 	ubfx	ip, r5, #16, #8
    942c:	b2e5      	uxtb	r5, r4
    942e:	e7bb      	b.n	93a8 <usb_midi_read+0x164>
    9430:	f3c5 4c07 	ubfx	ip, r5, #16, #8
				if (usb_midi_handleNoteOff)
    9434:	461d      	mov	r5, r3
    9436:	e7b7      	b.n	93a8 <usb_midi_read+0x164>
		if (type1 == 0x0C && type2 == 0x0C) {
    9438:	2c0c      	cmp	r4, #12
    943a:	d112      	bne.n	9462 <usb_midi_read+0x21e>
    943c:	2b0c      	cmp	r3, #12
    943e:	f47f af27 	bne.w	9290 <usb_midi_read+0x4c>
			if (usb_midi_handleProgramChange)
    9442:	4b2b      	ldr	r3, [pc, #172]	; (94f0 <usb_midi_read+0x2ac>)
			usb_midi_msg_type = 4;			// 4 = Program Change
    9444:	4a1d      	ldr	r2, [pc, #116]	; (94bc <usb_midi_read+0x278>)
			if (usb_midi_handleProgramChange)
    9446:	681b      	ldr	r3, [r3, #0]
			usb_midi_msg_type = 4;			// 4 = Program Change
    9448:	2104      	movs	r1, #4
    944a:	7011      	strb	r1, [r2, #0]
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    944c:	b2f6      	uxtb	r6, r6
			if (usb_midi_handleProgramChange)
    944e:	2b00      	cmp	r3, #0
    9450:	d0a7      	beq.n	93a2 <usb_midi_read+0x15e>
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    9452:	f3c5 4407 	ubfx	r4, r5, #16, #8
    9456:	4630      	mov	r0, r6
    9458:	4621      	mov	r1, r4
    945a:	4798      	blx	r3
    945c:	0e2d      	lsrs	r5, r5, #24
    945e:	46a4      	mov	ip, r4
    9460:	e7a2      	b.n	93a8 <usb_midi_read+0x164>
		if (type1 == 0x0D && type2 == 0x0D) {
    9462:	2c0d      	cmp	r4, #13
    9464:	d10b      	bne.n	947e <usb_midi_read+0x23a>
    9466:	2b0d      	cmp	r3, #13
    9468:	f47f af12 	bne.w	9290 <usb_midi_read+0x4c>
			if (usb_midi_handleAfterTouch)
    946c:	4b21      	ldr	r3, [pc, #132]	; (94f4 <usb_midi_read+0x2b0>)
			usb_midi_msg_type = 5;			// 5 = After Touch
    946e:	4a13      	ldr	r2, [pc, #76]	; (94bc <usb_midi_read+0x278>)
			if (usb_midi_handleAfterTouch)
    9470:	681b      	ldr	r3, [r3, #0]
			usb_midi_msg_type = 5;			// 5 = After Touch
    9472:	2105      	movs	r1, #5
    9474:	7011      	strb	r1, [r2, #0]
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    9476:	b2f6      	uxtb	r6, r6
			if (usb_midi_handleAfterTouch)
    9478:	2b00      	cmp	r3, #0
    947a:	d1ea      	bne.n	9452 <usb_midi_read+0x20e>
    947c:	e791      	b.n	93a2 <usb_midi_read+0x15e>
		if (type1 == 0x0E && type2 == 0x0E) {
    947e:	2c0e      	cmp	r4, #14
    9480:	f47f af06 	bne.w	9290 <usb_midi_read+0x4c>
    9484:	2b0e      	cmp	r3, #14
    9486:	f47f af03 	bne.w	9290 <usb_midi_read+0x4c>
			if (usb_midi_handlePitchChange)
    948a:	4b1b      	ldr	r3, [pc, #108]	; (94f8 <usb_midi_read+0x2b4>)
			usb_midi_msg_type = 6;			// 6 = Pitch Bend
    948c:	4a0b      	ldr	r2, [pc, #44]	; (94bc <usb_midi_read+0x278>)
			if (usb_midi_handlePitchChange)
    948e:	681b      	ldr	r3, [r3, #0]
			usb_midi_msg_type = 6;			// 6 = Pitch Bend
    9490:	2106      	movs	r1, #6
    9492:	7011      	strb	r1, [r2, #0]
			if (usb_midi_handlePitchChange)
    9494:	2b00      	cmp	r3, #0
    9496:	d083      	beq.n	93a0 <usb_midi_read+0x15c>
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    9498:	0c2c      	lsrs	r4, r5, #16
    949a:	0c69      	lsrs	r1, r5, #17
    949c:	f004 027f 	and.w	r2, r4, #127	; 0x7f
				(*usb_midi_handlePitchChange)(ch,
    94a0:	b2f6      	uxtb	r6, r6
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    94a2:	f401 517e 	and.w	r1, r1, #16256	; 0x3f80
				(*usb_midi_handlePitchChange)(ch,
    94a6:	4311      	orrs	r1, r2
    94a8:	4630      	mov	r0, r6
    94aa:	4798      	blx	r3
    94ac:	0e2d      	lsrs	r5, r5, #24
    94ae:	fa5f fc84 	uxtb.w	ip, r4
    94b2:	e779      	b.n	93a8 <usb_midi_read+0x164>
    94b4:	200026c0 	.word	0x200026c0
    94b8:	200026a4 	.word	0x200026a4
    94bc:	2000281c 	.word	0x2000281c
    94c0:	20002694 	.word	0x20002694
    94c4:	200026c8 	.word	0x200026c8
    94c8:	2000268c 	.word	0x2000268c
    94cc:	200026bc 	.word	0x200026bc
    94d0:	2000281d 	.word	0x2000281d
    94d4:	2000281e 	.word	0x2000281e
    94d8:	20002824 	.word	0x20002824
    94dc:	20002698 	.word	0x20002698
    94e0:	200026b0 	.word	0x200026b0
    94e4:	20002820 	.word	0x20002820
    94e8:	2000281f 	.word	0x2000281f
    94ec:	200026c4 	.word	0x200026c4
    94f0:	2000269c 	.word	0x2000269c
    94f4:	200026a8 	.word	0x200026a8
    94f8:	200026a0 	.word	0x200026a0

000094fc <usb_seremu_getchar>:
#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */


// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
    94fc:	b570      	push	{r4, r5, r6, lr}
	unsigned int i;
	int c;

	while (1) {
		if (!usb_configuration) return -1;
    94fe:	4e12      	ldr	r6, [pc, #72]	; (9548 <usb_seremu_getchar+0x4c>)
    9500:	7833      	ldrb	r3, [r6, #0]
    9502:	b18b      	cbz	r3, 9528 <usb_seremu_getchar+0x2c>
    9504:	4d11      	ldr	r5, [pc, #68]	; (954c <usb_seremu_getchar+0x50>)
    9506:	6828      	ldr	r0, [r5, #0]
		if (!rx_packet) rx_packet = usb_rx(SEREMU_RX_ENDPOINT);
    9508:	b140      	cbz	r0, 951c <usb_seremu_getchar+0x20>
		if (!rx_packet) return -1;
		i = rx_packet->index;
    950a:	8843      	ldrh	r3, [r0, #2]
		c = rx_packet->buf[i++];
    950c:	18c2      	adds	r2, r0, r3
    950e:	7a14      	ldrb	r4, [r2, #8]
		if (c) {
    9510:	b96c      	cbnz	r4, 952e <usb_seremu_getchar+0x32>
			} else {
				rx_packet->index = i;
			}
			return c;
		}
		usb_free(rx_packet);
    9512:	f7ff fdeb 	bl	90ec <usb_free>
		if (!usb_configuration) return -1;
    9516:	7833      	ldrb	r3, [r6, #0]
		rx_packet = NULL;
    9518:	602c      	str	r4, [r5, #0]
		if (!usb_configuration) return -1;
    951a:	b12b      	cbz	r3, 9528 <usb_seremu_getchar+0x2c>
		if (!rx_packet) rx_packet = usb_rx(SEREMU_RX_ENDPOINT);
    951c:	2002      	movs	r0, #2
    951e:	f7ff f8a1 	bl	8664 <usb_rx>
    9522:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    9524:	2800      	cmp	r0, #0
    9526:	d1f0      	bne.n	950a <usb_seremu_getchar+0xe>
		if (!usb_configuration) return -1;
    9528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    952c:	bd70      	pop	{r4, r5, r6, pc}
			if (i >= rx_packet->len) {
    952e:	8802      	ldrh	r2, [r0, #0]
		c = rx_packet->buf[i++];
    9530:	3301      	adds	r3, #1
			if (i >= rx_packet->len) {
    9532:	4293      	cmp	r3, r2
    9534:	d202      	bcs.n	953c <usb_seremu_getchar+0x40>
				rx_packet->index = i;
    9536:	8043      	strh	r3, [r0, #2]
		c = rx_packet->buf[i++];
    9538:	4620      	mov	r0, r4
    953a:	bd70      	pop	{r4, r5, r6, pc}
				usb_free(rx_packet);
    953c:	f7ff fdd6 	bl	90ec <usb_free>
				rx_packet = NULL;
    9540:	2300      	movs	r3, #0
		c = rx_packet->buf[i++];
    9542:	4620      	mov	r0, r4
				rx_packet = NULL;
    9544:	602b      	str	r3, [r5, #0]
    9546:	bd70      	pop	{r4, r5, r6, pc}
    9548:	2000268c 	.word	0x2000268c
    954c:	200026d8 	.word	0x200026d8

00009550 <usb_seremu_peekchar>:
	}
}

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
    9550:	b570      	push	{r4, r5, r6, lr}
	int c;

	while (1) {
		if (!usb_configuration) return -1;
    9552:	4e0d      	ldr	r6, [pc, #52]	; (9588 <usb_seremu_peekchar+0x38>)
    9554:	7833      	ldrb	r3, [r6, #0]
    9556:	b18b      	cbz	r3, 957c <usb_seremu_peekchar+0x2c>
    9558:	4d0c      	ldr	r5, [pc, #48]	; (958c <usb_seremu_peekchar+0x3c>)
    955a:	6828      	ldr	r0, [r5, #0]
		if (!rx_packet) rx_packet = usb_rx(SEREMU_RX_ENDPOINT);
    955c:	b140      	cbz	r0, 9570 <usb_seremu_peekchar+0x20>
		if (!rx_packet) return -1;
		c = rx_packet->buf[rx_packet->index];
    955e:	8843      	ldrh	r3, [r0, #2]
    9560:	4403      	add	r3, r0
    9562:	7a1c      	ldrb	r4, [r3, #8]
		if (c) return c;
    9564:	b96c      	cbnz	r4, 9582 <usb_seremu_peekchar+0x32>
		usb_free(rx_packet);
    9566:	f7ff fdc1 	bl	90ec <usb_free>
		if (!usb_configuration) return -1;
    956a:	7833      	ldrb	r3, [r6, #0]
		rx_packet = NULL;
    956c:	602c      	str	r4, [r5, #0]
		if (!usb_configuration) return -1;
    956e:	b12b      	cbz	r3, 957c <usb_seremu_peekchar+0x2c>
		if (!rx_packet) rx_packet = usb_rx(SEREMU_RX_ENDPOINT);
    9570:	2002      	movs	r0, #2
    9572:	f7ff f877 	bl	8664 <usb_rx>
    9576:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    9578:	2800      	cmp	r0, #0
    957a:	d1f0      	bne.n	955e <usb_seremu_peekchar+0xe>
		if (!usb_configuration) return -1;
    957c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9580:	bd70      	pop	{r4, r5, r6, pc}
		c = rx_packet->buf[rx_packet->index];
    9582:	4620      	mov	r0, r4
	}
}
    9584:	bd70      	pop	{r4, r5, r6, pc}
    9586:	bf00      	nop
    9588:	2000268c 	.word	0x2000268c
    958c:	200026d8 	.word	0x200026d8

00009590 <usb_seremu_available>:

// number of bytes available in the receive buffer
int usb_seremu_available(void)
{
    9590:	b538      	push	{r3, r4, r5, lr}
	int i, len, count;

	if (!rx_packet) {
    9592:	4d15      	ldr	r5, [pc, #84]	; (95e8 <usb_seremu_available+0x58>)
    9594:	6828      	ldr	r0, [r5, #0]
    9596:	b1d0      	cbz	r0, 95ce <usb_seremu_available+0x3e>
		if (usb_configuration) rx_packet = usb_rx(SEREMU_RX_ENDPOINT);
		if (!rx_packet) return 0;
	}
	len = rx_packet->len;
    9598:	8804      	ldrh	r4, [r0, #0]
	i = rx_packet->index;
	count = 0;
	for (i = rx_packet->index; i < len; i++) {
    959a:	8843      	ldrh	r3, [r0, #2]
    959c:	429c      	cmp	r4, r3
    959e:	dd11      	ble.n	95c4 <usb_seremu_available+0x34>
		if (rx_packet->buf[i] == 0) break;
    95a0:	18c2      	adds	r2, r0, r3
    95a2:	7a12      	ldrb	r2, [r2, #8]
    95a4:	b172      	cbz	r2, 95c4 <usb_seremu_available+0x34>
    95a6:	f103 0208 	add.w	r2, r3, #8
    95aa:	1ae4      	subs	r4, r4, r3
    95ac:	4402      	add	r2, r0
	count = 0;
    95ae:	2300      	movs	r3, #0
    95b0:	e002      	b.n	95b8 <usb_seremu_available+0x28>
		if (rx_packet->buf[i] == 0) break;
    95b2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    95b6:	b111      	cbz	r1, 95be <usb_seremu_available+0x2e>
		count++;
    95b8:	3301      	adds	r3, #1
	for (i = rx_packet->index; i < len; i++) {
    95ba:	42a3      	cmp	r3, r4
    95bc:	d1f9      	bne.n	95b2 <usb_seremu_available+0x22>
	}
	if (count == 0) {
    95be:	b10b      	cbz	r3, 95c4 <usb_seremu_available+0x34>
    95c0:	4618      	mov	r0, r3
    95c2:	bd38      	pop	{r3, r4, r5, pc}
		usb_free(rx_packet);
    95c4:	f7ff fd92 	bl	90ec <usb_free>
		rx_packet = NULL;
    95c8:	2000      	movs	r0, #0
    95ca:	6028      	str	r0, [r5, #0]
	}
	return count;
}
    95cc:	bd38      	pop	{r3, r4, r5, pc}
		if (usb_configuration) rx_packet = usb_rx(SEREMU_RX_ENDPOINT);
    95ce:	4b07      	ldr	r3, [pc, #28]	; (95ec <usb_seremu_available+0x5c>)
    95d0:	781b      	ldrb	r3, [r3, #0]
    95d2:	b90b      	cbnz	r3, 95d8 <usb_seremu_available+0x48>
		if (!rx_packet) return 0;
    95d4:	2000      	movs	r0, #0
    95d6:	bd38      	pop	{r3, r4, r5, pc}
		if (usb_configuration) rx_packet = usb_rx(SEREMU_RX_ENDPOINT);
    95d8:	2002      	movs	r0, #2
    95da:	f7ff f843 	bl	8664 <usb_rx>
    95de:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return 0;
    95e0:	2800      	cmp	r0, #0
    95e2:	d1d9      	bne.n	9598 <usb_seremu_available+0x8>
    95e4:	e7f6      	b.n	95d4 <usb_seremu_available+0x44>
    95e6:	bf00      	nop
    95e8:	200026d8 	.word	0x200026d8
    95ec:	2000268c 	.word	0x2000268c

000095f0 <usb_seremu_write>:
	return usb_seremu_write(&c, 1);
}


int usb_seremu_write(const void *buffer, uint32_t size)
{
    95f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    95f4:	4d3b      	ldr	r5, [pc, #236]	; (96e4 <usb_seremu_write+0xf4>)
    95f6:	2201      	movs	r2, #1
{
    95f8:	b083      	sub	sp, #12
	while (size > 0) {
    95fa:	460e      	mov	r6, r1
{
    95fc:	4683      	mov	fp, r0
	tx_noautoflush = 1;
    95fe:	702a      	strb	r2, [r5, #0]
	while (size > 0) {
    9600:	b351      	cbz	r1, 9658 <usb_seremu_write+0x68>
    9602:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 96f0 <usb_seremu_write+0x100>
    9606:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 96e8 <usb_seremu_write+0xf8>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    960a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 96f4 <usb_seremu_write+0x104>
		if (!tx_packet) {
    960e:	f8da 1000 	ldr.w	r1, [sl]
    9612:	2900      	cmp	r1, #0
    9614:	d032      	beq.n	967c <usb_seremu_write+0x8c>
    9616:	4b34      	ldr	r3, [pc, #208]	; (96e8 <usb_seremu_write+0xf8>)
    9618:	9301      	str	r3, [sp, #4]
				yield();
				tx_noautoflush = 1;
			}
		}
		transmit_previous_timeout = 0;
		len = SEREMU_TX_SIZE - tx_packet->index;
    961a:	884a      	ldrh	r2, [r1, #2]
		transmit_previous_timeout = 0;
    961c:	9b01      	ldr	r3, [sp, #4]
		len = SEREMU_TX_SIZE - tx_packet->index;
    961e:	f1c2 0440 	rsb	r4, r2, #64	; 0x40
    9622:	42a6      	cmp	r6, r4
    9624:	bf38      	it	cc
    9626:	4634      	movcc	r4, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    9628:	1910      	adds	r0, r2, r4
    962a:	b280      	uxth	r0, r0
		dest = tx_packet->buf + tx_packet->index;
    962c:	3208      	adds	r2, #8
		transmit_previous_timeout = 0;
    962e:	2700      	movs	r7, #0
		size -= len;
    9630:	1b36      	subs	r6, r6, r4
		tx_packet->index += len;
    9632:	8048      	strh	r0, [r1, #2]
		dest = tx_packet->buf + tx_packet->index;
    9634:	440a      	add	r2, r1
		transmit_previous_timeout = 0;
    9636:	701f      	strb	r7, [r3, #0]
		while (len-- > 0) *dest++ = *src++;
    9638:	b13c      	cbz	r4, 964a <usb_seremu_write+0x5a>
    963a:	445c      	add	r4, fp
    963c:	f81b 0b01 	ldrb.w	r0, [fp], #1
    9640:	f802 0b01 	strb.w	r0, [r2], #1
    9644:	45a3      	cmp	fp, r4
    9646:	d1f9      	bne.n	963c <usb_seremu_write+0x4c>
    9648:	8848      	ldrh	r0, [r1, #2]
		if (tx_packet->index < SEREMU_TX_SIZE) {
    964a:	283f      	cmp	r0, #63	; 0x3f
    964c:	d809      	bhi.n	9662 <usb_seremu_write+0x72>
			usb_seremu_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    964e:	4927      	ldr	r1, [pc, #156]	; (96ec <usb_seremu_write+0xfc>)
    9650:	2205      	movs	r2, #5
    9652:	700a      	strb	r2, [r1, #0]
	while (size > 0) {
    9654:	2e00      	cmp	r6, #0
    9656:	d1da      	bne.n	960e <usb_seremu_write+0x1e>
			usb_seremu_transmit_flush_timer = 0;
			usb_tx(SEREMU_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
	}
	tx_noautoflush = 0;
    9658:	2000      	movs	r0, #0
    965a:	7028      	strb	r0, [r5, #0]
	return 0;
#endif
}
    965c:	b003      	add	sp, #12
    965e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx_packet->len = SEREMU_TX_SIZE;
    9662:	2240      	movs	r2, #64	; 0x40
			usb_seremu_transmit_flush_timer = 0;
    9664:	4b21      	ldr	r3, [pc, #132]	; (96ec <usb_seremu_write+0xfc>)
			tx_packet->len = SEREMU_TX_SIZE;
    9666:	800a      	strh	r2, [r1, #0]
			usb_seremu_transmit_flush_timer = 0;
    9668:	2400      	movs	r4, #0
			usb_tx(SEREMU_TX_ENDPOINT, tx_packet);
    966a:	2001      	movs	r0, #1
			usb_seremu_transmit_flush_timer = 0;
    966c:	701c      	strb	r4, [r3, #0]
			usb_tx(SEREMU_TX_ENDPOINT, tx_packet);
    966e:	f7ff f871 	bl	8754 <usb_tx>
			tx_packet = NULL;
    9672:	f8ca 4000 	str.w	r4, [sl]
	while (size > 0) {
    9676:	2e00      	cmp	r6, #0
    9678:	d1c9      	bne.n	960e <usb_seremu_write+0x1e>
    967a:	e7ed      	b.n	9658 <usb_seremu_write+0x68>
				if (!usb_configuration) {
    967c:	f898 2000 	ldrb.w	r2, [r8]
    9680:	b34a      	cbz	r2, 96d6 <usb_seremu_write+0xe6>
    9682:	4919      	ldr	r1, [pc, #100]	; (96e8 <usb_seremu_write+0xf8>)
    9684:	9101      	str	r1, [sp, #4]
    9686:	f643 4401 	movw	r4, #15361	; 0x3c01
				if (usb_tx_packet_count(SEREMU_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    968a:	2701      	movs	r7, #1
    968c:	e00b      	b.n	96a6 <usb_seremu_write+0xb6>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    968e:	3c01      	subs	r4, #1
    9690:	d017      	beq.n	96c2 <usb_seremu_write+0xd2>
    9692:	f899 2000 	ldrb.w	r2, [r9]
    9696:	b9a2      	cbnz	r2, 96c2 <usb_seremu_write+0xd2>
				tx_noautoflush = 0;
    9698:	702a      	strb	r2, [r5, #0]
				yield();
    969a:	f000 fd61 	bl	a160 <yield>
				tx_noautoflush = 1;
    969e:	702f      	strb	r7, [r5, #0]
				if (!usb_configuration) {
    96a0:	f898 2000 	ldrb.w	r2, [r8]
    96a4:	b1ba      	cbz	r2, 96d6 <usb_seremu_write+0xe6>
				if (usb_tx_packet_count(SEREMU_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    96a6:	2001      	movs	r0, #1
    96a8:	f7fe fffa 	bl	86a0 <usb_tx_packet_count>
    96ac:	2805      	cmp	r0, #5
    96ae:	d8ee      	bhi.n	968e <usb_seremu_write+0x9e>
					tx_noautoflush = 1;
    96b0:	702f      	strb	r7, [r5, #0]
					tx_packet = usb_malloc();
    96b2:	f7ff fcfb 	bl	90ac <usb_malloc>
    96b6:	f8ca 0000 	str.w	r0, [sl]
					if (tx_packet) break;
    96ba:	2800      	cmp	r0, #0
    96bc:	d0e7      	beq.n	968e <usb_seremu_write+0x9e>
					tx_packet = usb_malloc();
    96be:	4601      	mov	r1, r0
    96c0:	e7ab      	b.n	961a <usb_seremu_write+0x2a>
					transmit_previous_timeout = 1;
    96c2:	9901      	ldr	r1, [sp, #4]
    96c4:	2201      	movs	r2, #1
					tx_noautoflush = 0;
    96c6:	2300      	movs	r3, #0
					return -1;
    96c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					transmit_previous_timeout = 1;
    96cc:	700a      	strb	r2, [r1, #0]
					tx_noautoflush = 0;
    96ce:	702b      	strb	r3, [r5, #0]
}
    96d0:	b003      	add	sp, #12
    96d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					tx_noautoflush = 0;
    96d6:	2300      	movs	r3, #0
					return -1;
    96d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					tx_noautoflush = 0;
    96dc:	702b      	strb	r3, [r5, #0]
}
    96de:	b003      	add	sp, #12
    96e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96e4:	200026cc 	.word	0x200026cc
    96e8:	200026d4 	.word	0x200026d4
    96ec:	200026dc 	.word	0x200026dc
    96f0:	200026d0 	.word	0x200026d0
    96f4:	2000268c 	.word	0x2000268c

000096f8 <usb_seremu_putchar>:
{
    96f8:	b500      	push	{lr}
    96fa:	b083      	sub	sp, #12
    96fc:	ab02      	add	r3, sp, #8
	return usb_seremu_write(&c, 1);
    96fe:	2101      	movs	r1, #1
{
    9700:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_seremu_write(&c, 1);
    9704:	4618      	mov	r0, r3
    9706:	f7ff ff73 	bl	95f0 <usb_seremu_write>
}
    970a:	b003      	add	sp, #12
    970c:	f85d fb04 	ldr.w	pc, [sp], #4

00009710 <usb_seremu_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_seremu_flush_output(void)
{
    9710:	b510      	push	{r4, lr}
	int i;

	if (!usb_configuration) return;
    9712:	4b0d      	ldr	r3, [pc, #52]	; (9748 <usb_seremu_flush_output+0x38>)
    9714:	781b      	ldrb	r3, [r3, #0]
    9716:	b1b3      	cbz	r3, 9746 <usb_seremu_flush_output+0x36>
	//serial_print("usb_serial_flush_output\n");
	if (tx_packet && tx_packet->index > 0) {
    9718:	4c0c      	ldr	r4, [pc, #48]	; (974c <usb_seremu_flush_output+0x3c>)
    971a:	6821      	ldr	r1, [r4, #0]
    971c:	b199      	cbz	r1, 9746 <usb_seremu_flush_output+0x36>
    971e:	884b      	ldrh	r3, [r1, #2]
    9720:	b18b      	cbz	r3, 9746 <usb_seremu_flush_output+0x36>
		usb_seremu_transmit_flush_timer = 0;
    9722:	4a0b      	ldr	r2, [pc, #44]	; (9750 <usb_seremu_flush_output+0x40>)
    9724:	2000      	movs	r0, #0
		for (i = tx_packet->index; i < SEREMU_TX_SIZE; i++) {
    9726:	2b3f      	cmp	r3, #63	; 0x3f
		usb_seremu_transmit_flush_timer = 0;
    9728:	7010      	strb	r0, [r2, #0]
		for (i = tx_packet->index; i < SEREMU_TX_SIZE; i++) {
    972a:	dc04      	bgt.n	9736 <usb_seremu_flush_output+0x26>
    972c:	18ca      	adds	r2, r1, r3
    972e:	3301      	adds	r3, #1
    9730:	2b40      	cmp	r3, #64	; 0x40
			tx_packet->buf[i] = 0;
    9732:	7210      	strb	r0, [r2, #8]
		for (i = tx_packet->index; i < SEREMU_TX_SIZE; i++) {
    9734:	d1fa      	bne.n	972c <usb_seremu_flush_output+0x1c>
		}
		tx_packet->len = SEREMU_TX_SIZE;
    9736:	2340      	movs	r3, #64	; 0x40
    9738:	800b      	strh	r3, [r1, #0]
		usb_tx(SEREMU_TX_ENDPOINT, tx_packet);
    973a:	2001      	movs	r0, #1
    973c:	f7ff f80a 	bl	8754 <usb_tx>
		tx_packet = NULL;
    9740:	2300      	movs	r3, #0
    9742:	6023      	str	r3, [r4, #0]
    9744:	bd10      	pop	{r4, pc}
    9746:	bd10      	pop	{r4, pc}
    9748:	2000268c 	.word	0x2000268c
    974c:	200026d0 	.word	0x200026d0
    9750:	200026dc 	.word	0x200026dc

00009754 <usb_seremu_flush_callback>:
	}
	// while (usb_tx_byte_count(SEREMU_TX_ENDPOINT) > 0) ; // wait
}

void usb_seremu_flush_callback(void)
{
    9754:	b510      	push	{r4, lr}
	int i;
	//serial_print("C");
	if (tx_noautoflush) return;
    9756:	4b0c      	ldr	r3, [pc, #48]	; (9788 <usb_seremu_flush_callback+0x34>)
    9758:	781b      	ldrb	r3, [r3, #0]
    975a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    975e:	b98b      	cbnz	r3, 9784 <usb_seremu_flush_callback+0x30>
	//serial_print("usb_flush_callback \n");
	for (i = tx_packet->index; i < SEREMU_TX_SIZE; i++) {
    9760:	4c0a      	ldr	r4, [pc, #40]	; (978c <usb_seremu_flush_callback+0x38>)
    9762:	6821      	ldr	r1, [r4, #0]
    9764:	884b      	ldrh	r3, [r1, #2]
    9766:	2b3f      	cmp	r3, #63	; 0x3f
    9768:	dc04      	bgt.n	9774 <usb_seremu_flush_callback+0x20>
    976a:	18ca      	adds	r2, r1, r3
    976c:	3301      	adds	r3, #1
    976e:	2b40      	cmp	r3, #64	; 0x40
		tx_packet->buf[i] = 0;
    9770:	7210      	strb	r0, [r2, #8]
	for (i = tx_packet->index; i < SEREMU_TX_SIZE; i++) {
    9772:	d1fa      	bne.n	976a <usb_seremu_flush_callback+0x16>
	}
	tx_packet->len = SEREMU_TX_SIZE;
    9774:	2340      	movs	r3, #64	; 0x40
    9776:	800b      	strh	r3, [r1, #0]
	usb_tx(SEREMU_TX_ENDPOINT, tx_packet);
    9778:	2001      	movs	r0, #1
    977a:	f7fe ffeb 	bl	8754 <usb_tx>
	tx_packet = NULL;
    977e:	2300      	movs	r3, #0
    9780:	6023      	str	r3, [r4, #0]
    9782:	bd10      	pop	{r4, pc}
    9784:	bd10      	pop	{r4, pc}
    9786:	bf00      	nop
    9788:	200026cc 	.word	0x200026cc
    978c:	200026d0 	.word	0x200026d0

00009790 <_ZN11AudioStream17initialize_memoryEP18audio_block_structj>:


// Set up the pool of audio data blocks
// placing them all onto the free list
void AudioStream::initialize_memory(audio_block_t *data, unsigned int num)
{
    9790:	b4f0      	push	{r4, r5, r6, r7}
    9792:	29c0      	cmp	r1, #192	; 0xc0
    9794:	bf28      	it	cs
    9796:	21c0      	movcs	r1, #192	; 0xc0
	unsigned int i;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > 192) num = 192;
	__disable_irq();
    9798:	b672      	cpsid	i
	memory_pool = data;
    979a:	4b12      	ldr	r3, [pc, #72]	; (97e4 <_ZN11AudioStream17initialize_memoryEP18audio_block_structj+0x54>)
	for (i=0; i < 6; i++) {
		memory_pool_available_mask[i] = 0;
    979c:	4c12      	ldr	r4, [pc, #72]	; (97e8 <_ZN11AudioStream17initialize_memoryEP18audio_block_structj+0x58>)
	memory_pool = data;
    979e:	6018      	str	r0, [r3, #0]
		memory_pool_available_mask[i] = 0;
    97a0:	2300      	movs	r3, #0
    97a2:	6023      	str	r3, [r4, #0]
    97a4:	6063      	str	r3, [r4, #4]
    97a6:	60a3      	str	r3, [r4, #8]
    97a8:	60e3      	str	r3, [r4, #12]
    97aa:	6123      	str	r3, [r4, #16]
    97ac:	6163      	str	r3, [r4, #20]
	}
	for (i=0; i < num; i++) {
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    97ae:	2701      	movs	r7, #1
	for (i=0; i < num; i++) {
    97b0:	b1a9      	cbz	r1, 97de <_ZN11AudioStream17initialize_memoryEP18audio_block_structj+0x4e>
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    97b2:	095a      	lsrs	r2, r3, #5
    97b4:	f003 061f 	and.w	r6, r3, #31
    97b8:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
    97bc:	fa07 f606 	lsl.w	r6, r7, r6
	for (i=0; i < num; i++) {
    97c0:	3301      	adds	r3, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    97c2:	4335      	orrs	r5, r6
	for (i=0; i < num; i++) {
    97c4:	428b      	cmp	r3, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    97c6:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
	for (i=0; i < num; i++) {
    97ca:	d1f2      	bne.n	97b2 <_ZN11AudioStream17initialize_memoryEP18audio_block_structj+0x22>
    97cc:	2200      	movs	r2, #0
    97ce:	4613      	mov	r3, r2
    97d0:	1884      	adds	r4, r0, r2
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
    97d2:	f502 7282 	add.w	r2, r2, #260	; 0x104
    97d6:	7063      	strb	r3, [r4, #1]
	for (i=0; i < num; i++) {
    97d8:	3301      	adds	r3, #1
    97da:	428b      	cmp	r3, r1
    97dc:	d1f8      	bne.n	97d0 <_ZN11AudioStream17initialize_memoryEP18audio_block_structj+0x40>
	}
	__enable_irq();
    97de:	b662      	cpsie	i

}
    97e0:	bcf0      	pop	{r4, r5, r6, r7}
    97e2:	4770      	bx	lr
    97e4:	200026e8 	.word	0x200026e8
    97e8:	200026f0 	.word	0x200026f0

000097ec <_ZN11AudioStream8allocateEv>:

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_t * AudioStream::allocate(void)
{
    97ec:	b470      	push	{r4, r5, r6}
	uint32_t *p;
	audio_block_t *block;
	uint8_t used;

	p = memory_pool_available_mask;
	__disable_irq();
    97ee:	b672      	cpsid	i
	do {
		avail = *p; if (avail) break;
    97f0:	4b1f      	ldr	r3, [pc, #124]	; (9870 <_ZN11AudioStream8allocateEv+0x84>)
    97f2:	6818      	ldr	r0, [r3, #0]
    97f4:	b920      	cbnz	r0, 9800 <_ZN11AudioStream8allocateEv+0x14>
		p++; avail = *p; if (avail) break;
    97f6:	6858      	ldr	r0, [r3, #4]
    97f8:	b320      	cbz	r0, 9844 <_ZN11AudioStream8allocateEv+0x58>
    97fa:	3304      	adds	r3, #4
    97fc:	2520      	movs	r5, #32
    97fe:	e000      	b.n	9802 <_ZN11AudioStream8allocateEv+0x16>
    9800:	2500      	movs	r5, #0
		//Serial.println("alloc:null");
		return NULL;
	} while (0);
	n = __builtin_clz(avail);
	*p = avail & ~(0x80000000 >> n);
	used = memory_used + 1;
    9802:	4c1c      	ldr	r4, [pc, #112]	; (9874 <_ZN11AudioStream8allocateEv+0x88>)
    9804:	7822      	ldrb	r2, [r4, #0]
	n = __builtin_clz(avail);
    9806:	fab0 f180 	clz	r1, r0
	*p = avail & ~(0x80000000 >> n);
    980a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    980e:	40ce      	lsrs	r6, r1
	used = memory_used + 1;
    9810:	3201      	adds	r2, #1
    9812:	b2d2      	uxtb	r2, r2
	*p = avail & ~(0x80000000 >> n);
    9814:	ea20 0006 	bic.w	r0, r0, r6
	memory_used = used;
    9818:	7022      	strb	r2, [r4, #0]
	*p = avail & ~(0x80000000 >> n);
    981a:	6018      	str	r0, [r3, #0]
	__enable_irq();
    981c:	b662      	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    981e:	1a6b      	subs	r3, r5, r1
    9820:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    9824:	009b      	lsls	r3, r3, #2
    9826:	4814      	ldr	r0, [pc, #80]	; (9878 <_ZN11AudioStream8allocateEv+0x8c>)
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    9828:	4914      	ldr	r1, [pc, #80]	; (987c <_ZN11AudioStream8allocateEv+0x90>)
	block = memory_pool + ((index << 5) + (31 - n));
    982a:	6800      	ldr	r0, [r0, #0]
    982c:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
    9830:	331c      	adds	r3, #28
	block->ref_count = 1;
    9832:	2401      	movs	r4, #1
    9834:	54c4      	strb	r4, [r0, r3]
	if (used > memory_used_max) memory_used_max = used;
    9836:	780c      	ldrb	r4, [r1, #0]
    9838:	4294      	cmp	r4, r2
	block = memory_pool + ((index << 5) + (31 - n));
    983a:	4418      	add	r0, r3
	if (used > memory_used_max) memory_used_max = used;
    983c:	bf38      	it	cc
    983e:	700a      	strbcc	r2, [r1, #0]
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    9840:	bc70      	pop	{r4, r5, r6}
    9842:	4770      	bx	lr
		p++; avail = *p; if (avail) break;
    9844:	6898      	ldr	r0, [r3, #8]
    9846:	b920      	cbnz	r0, 9852 <_ZN11AudioStream8allocateEv+0x66>
		p++; avail = *p; if (avail) break;
    9848:	68d8      	ldr	r0, [r3, #12]
    984a:	b128      	cbz	r0, 9858 <_ZN11AudioStream8allocateEv+0x6c>
    984c:	330c      	adds	r3, #12
    984e:	2560      	movs	r5, #96	; 0x60
    9850:	e7d7      	b.n	9802 <_ZN11AudioStream8allocateEv+0x16>
		p++; avail = *p; if (avail) break;
    9852:	3308      	adds	r3, #8
    9854:	2540      	movs	r5, #64	; 0x40
    9856:	e7d4      	b.n	9802 <_ZN11AudioStream8allocateEv+0x16>
		p++; avail = *p; if (avail) break;
    9858:	6918      	ldr	r0, [r3, #16]
    985a:	b920      	cbnz	r0, 9866 <_ZN11AudioStream8allocateEv+0x7a>
		p++; avail = *p; if (avail) break;
    985c:	6958      	ldr	r0, [r3, #20]
    985e:	b128      	cbz	r0, 986c <_ZN11AudioStream8allocateEv+0x80>
    9860:	3314      	adds	r3, #20
    9862:	25a0      	movs	r5, #160	; 0xa0
    9864:	e7cd      	b.n	9802 <_ZN11AudioStream8allocateEv+0x16>
		p++; avail = *p; if (avail) break;
    9866:	3310      	adds	r3, #16
    9868:	2580      	movs	r5, #128	; 0x80
    986a:	e7ca      	b.n	9802 <_ZN11AudioStream8allocateEv+0x16>
		__enable_irq();
    986c:	b662      	cpsie	i
		return NULL;
    986e:	e7e7      	b.n	9840 <_ZN11AudioStream8allocateEv+0x54>
    9870:	200026f0 	.word	0x200026f0
    9874:	200026ed 	.word	0x200026ed
    9878:	200026e8 	.word	0x200026e8
    987c:	200026e4 	.word	0x200026e4

00009880 <_ZN11AudioStream7releaseEP18audio_block_struct>:

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
    9880:	b470      	push	{r4, r5, r6}
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    9882:	7842      	ldrb	r2, [r0, #1]
	uint32_t index = block->memory_pool_index >> 5;


	__disable_irq();
    9884:	b672      	cpsid	i
	if (block->ref_count > 1) {
    9886:	7803      	ldrb	r3, [r0, #0]
    9888:	2b01      	cmp	r3, #1
    988a:	d904      	bls.n	9896 <_ZN11AudioStream7releaseEP18audio_block_struct+0x16>
		block->ref_count--;
    988c:	3b01      	subs	r3, #1
    988e:	7003      	strb	r3, [r0, #0]
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
		memory_used--;
	}
	__enable_irq();
    9890:	b662      	cpsie	i
}
    9892:	bc70      	pop	{r4, r5, r6}
    9894:	4770      	bx	lr
	uint32_t index = block->memory_pool_index >> 5;
    9896:	1150      	asrs	r0, r2, #5
		memory_pool_available_mask[index] |= mask;
    9898:	4909      	ldr	r1, [pc, #36]	; (98c0 <_ZN11AudioStream7releaseEP18audio_block_struct+0x40>)
		memory_used--;
    989a:	4b0a      	ldr	r3, [pc, #40]	; (98c4 <_ZN11AudioStream7releaseEP18audio_block_struct+0x44>)
		memory_pool_available_mask[index] |= mask;
    989c:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		memory_used--;
    98a0:	781d      	ldrb	r5, [r3, #0]
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    98a2:	43d2      	mvns	r2, r2
    98a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    98a8:	f002 021f 	and.w	r2, r2, #31
    98ac:	fa26 f202 	lsr.w	r2, r6, r2
		memory_pool_available_mask[index] |= mask;
    98b0:	4314      	orrs	r4, r2
		memory_used--;
    98b2:	1e6a      	subs	r2, r5, #1
		memory_pool_available_mask[index] |= mask;
    98b4:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
		memory_used--;
    98b8:	701a      	strb	r2, [r3, #0]
	__enable_irq();
    98ba:	b662      	cpsie	i
}
    98bc:	bc70      	pop	{r4, r5, r6}
    98be:	4770      	bx	lr
    98c0:	200026f0 	.word	0x200026f0
    98c4:	200026ed 	.word	0x200026ed

000098c8 <_ZN11AudioStream8transmitEP18audio_block_structh>:
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    98c8:	68c3      	ldr	r3, [r0, #12]
{
    98ca:	b430      	push	{r4, r5}
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    98cc:	b913      	cbnz	r3, 98d4 <_ZN11AudioStream8transmitEP18audio_block_structh+0xc>
    98ce:	e013      	b.n	98f8 <_ZN11AudioStream8transmitEP18audio_block_structh+0x30>
    98d0:	68db      	ldr	r3, [r3, #12]
    98d2:	b18b      	cbz	r3, 98f8 <_ZN11AudioStream8transmitEP18audio_block_structh+0x30>
		if (c->src_index == index) {
    98d4:	7a18      	ldrb	r0, [r3, #8]
    98d6:	4290      	cmp	r0, r2
    98d8:	d1fa      	bne.n	98d0 <_ZN11AudioStream8transmitEP18audio_block_structh+0x8>
			if (c->dst.inputQueue[c->dest_index] == NULL) {
    98da:	6858      	ldr	r0, [r3, #4]
    98dc:	7a5c      	ldrb	r4, [r3, #9]
    98de:	6900      	ldr	r0, [r0, #16]
    98e0:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
    98e4:	2d00      	cmp	r5, #0
    98e6:	d1f3      	bne.n	98d0 <_ZN11AudioStream8transmitEP18audio_block_structh+0x8>
				c->dst.inputQueue[c->dest_index] = block;
    98e8:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
    98ec:	7808      	ldrb	r0, [r1, #0]
    98ee:	3001      	adds	r0, #1
    98f0:	7008      	strb	r0, [r1, #0]
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    98f2:	68db      	ldr	r3, [r3, #12]
    98f4:	2b00      	cmp	r3, #0
    98f6:	d1ed      	bne.n	98d4 <_ZN11AudioStream8transmitEP18audio_block_structh+0xc>
			}
		}
	}
}
    98f8:	bc30      	pop	{r4, r5}
    98fa:	4770      	bx	lr

000098fc <_ZN11AudioStream15receiveReadOnlyEj>:
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    98fc:	7a43      	ldrb	r3, [r0, #9]
    98fe:	428b      	cmp	r3, r1
    9900:	d906      	bls.n	9910 <_ZN11AudioStream15receiveReadOnlyEj+0x14>
	in = inputQueue[index];
    9902:	6903      	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    9904:	2200      	movs	r2, #0
	in = inputQueue[index];
    9906:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    990a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	return in;
    990e:	4770      	bx	lr
	if (index >= num_inputs) return NULL;
    9910:	2000      	movs	r0, #0
}
    9912:	4770      	bx	lr

00009914 <_ZN11AudioStream15receiveWritableEj>:

// Receive block from an input.  The block will not
// be shared, so its contents may be changed.
audio_block_t * AudioStream::receiveWritable(unsigned int index)
{
    9914:	b538      	push	{r3, r4, r5, lr}
	audio_block_t *in, *p;

	if (index >= num_inputs) return NULL;
    9916:	7a43      	ldrb	r3, [r0, #9]
    9918:	428b      	cmp	r3, r1
    991a:	d91a      	bls.n	9952 <_ZN11AudioStream15receiveWritableEj+0x3e>
	in = inputQueue[index];
    991c:	6903      	ldr	r3, [r0, #16]
    991e:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    9922:	2200      	movs	r2, #0
    9924:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
    9928:	b19c      	cbz	r4, 9952 <_ZN11AudioStream15receiveWritableEj+0x3e>
    992a:	7823      	ldrb	r3, [r4, #0]
    992c:	2b01      	cmp	r3, #1
    992e:	d90e      	bls.n	994e <_ZN11AudioStream15receiveWritableEj+0x3a>
		p = allocate();
    9930:	f7ff ff5c 	bl	97ec <_ZN11AudioStream8allocateEv>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
    9934:	4605      	mov	r5, r0
    9936:	b128      	cbz	r0, 9944 <_ZN11AudioStream15receiveWritableEj+0x30>
    9938:	3004      	adds	r0, #4
    993a:	1d21      	adds	r1, r4, #4
    993c:	f44f 7280 	mov.w	r2, #256	; 0x100
    9940:	f004 fb9a 	bl	e078 <memcpy>
		in->ref_count--;
    9944:	7823      	ldrb	r3, [r4, #0]
    9946:	3b01      	subs	r3, #1
    9948:	7023      	strb	r3, [r4, #0]
		p = allocate();
    994a:	4628      	mov	r0, r5
    994c:	bd38      	pop	{r3, r4, r5, pc}
    994e:	4620      	mov	r0, r4
		in = p;
	}
	return in;
}
    9950:	bd38      	pop	{r3, r4, r5, pc}
	if (index >= num_inputs) return NULL;
    9952:	2000      	movs	r0, #0
    9954:	bd38      	pop	{r3, r4, r5, pc}
    9956:	bf00      	nop

00009958 <_ZN15AudioConnection7connectEv>:

void AudioConnection::connect(void)
{
	AudioConnection *p;

	if (dest_index > dst.num_inputs) return;
    9958:	6843      	ldr	r3, [r0, #4]
    995a:	7a42      	ldrb	r2, [r0, #9]
    995c:	7a5b      	ldrb	r3, [r3, #9]
    995e:	429a      	cmp	r2, r3
    9960:	d80e      	bhi.n	9980 <_ZN15AudioConnection7connectEv+0x28>
	__disable_irq();
    9962:	b672      	cpsid	i
	p = src.destination_list;
    9964:	6801      	ldr	r1, [r0, #0]
    9966:	68ca      	ldr	r2, [r1, #12]
	if (p == NULL) {
    9968:	b90a      	cbnz	r2, 996e <_ZN15AudioConnection7connectEv+0x16>
    996a:	e00a      	b.n	9982 <_ZN15AudioConnection7connectEv+0x2a>
		src.destination_list = this;
	} else {
		while (p->next_dest) p = p->next_dest;
    996c:	461a      	mov	r2, r3
    996e:	68d3      	ldr	r3, [r2, #12]
    9970:	2b00      	cmp	r3, #0
    9972:	d1fb      	bne.n	996c <_ZN15AudioConnection7connectEv+0x14>
		p->next_dest = this;
    9974:	60d0      	str	r0, [r2, #12]
	}
	src.active = true;
	dst.active = true;
    9976:	6842      	ldr	r2, [r0, #4]
	src.active = true;
    9978:	2301      	movs	r3, #1
    997a:	720b      	strb	r3, [r1, #8]
	dst.active = true;
    997c:	7213      	strb	r3, [r2, #8]
	__enable_irq();
    997e:	b662      	cpsie	i
    9980:	4770      	bx	lr
		src.destination_list = this;
    9982:	60c8      	str	r0, [r1, #12]
    9984:	e7f7      	b.n	9976 <_ZN15AudioConnection7connectEv+0x1e>
    9986:	bf00      	nop

00009988 <_ZN11AudioStream12update_setupEv>:
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    9988:	4b09      	ldr	r3, [pc, #36]	; (99b0 <_ZN11AudioStream12update_setupEv+0x28>)
    998a:	781a      	ldrb	r2, [r3, #0]
{
    998c:	b430      	push	{r4, r5}
	if (update_scheduled) return false;
    998e:	b95a      	cbnz	r2, 99a8 <_ZN11AudioStream12update_setupEv+0x20>
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    9990:	4808      	ldr	r0, [pc, #32]	; (99b4 <_ZN11AudioStream12update_setupEv+0x2c>)
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    9992:	4909      	ldr	r1, [pc, #36]	; (99b8 <_ZN11AudioStream12update_setupEv+0x30>)
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    9994:	25d0      	movs	r5, #208	; 0xd0
    9996:	7005      	strb	r5, [r0, #0]
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    9998:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	update_scheduled = true;
    999c:	2201      	movs	r2, #1
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    999e:	600c      	str	r4, [r1, #0]
	return true;
    99a0:	4610      	mov	r0, r2
	update_scheduled = true;
    99a2:	701a      	strb	r2, [r3, #0]
}
    99a4:	bc30      	pop	{r4, r5}
    99a6:	4770      	bx	lr
	if (update_scheduled) return false;
    99a8:	2000      	movs	r0, #0
}
    99aa:	bc30      	pop	{r4, r5}
    99ac:	4770      	bx	lr
    99ae:	bf00      	nop
    99b0:	200026ec 	.word	0x200026ec
    99b4:	e000e45e 	.word	0xe000e45e
    99b8:	e000e108 	.word	0xe000e108

000099bc <software_isr>:

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    99bc:	4a1a      	ldr	r2, [pc, #104]	; (9a28 <software_isr+0x6c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    99be:	491b      	ldr	r1, [pc, #108]	; (9a2c <software_isr+0x70>)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    99c0:	6810      	ldr	r0, [r2, #0]
{
    99c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    99c4:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    99c8:	4b19      	ldr	r3, [pc, #100]	; (9a30 <software_isr+0x74>)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    99ca:	6010      	str	r0, [r2, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    99cc:	681a      	ldr	r2, [r3, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    99ce:	4d19      	ldr	r5, [pc, #100]	; (9a34 <software_isr+0x78>)
	for (p = AudioStream::first_update; p; p = p->next_update) {
    99d0:	680c      	ldr	r4, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    99d2:	f042 0201 	orr.w	r2, r2, #1
    99d6:	601a      	str	r2, [r3, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    99d8:	682f      	ldr	r7, [r5, #0]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    99da:	b914      	cbnz	r4, 99e2 <software_isr+0x26>
    99dc:	e015      	b.n	9a0a <software_isr+0x4e>
    99de:	6964      	ldr	r4, [r4, #20]
    99e0:	b19c      	cbz	r4, 9a0a <software_isr+0x4e>
		if (p->active) {
    99e2:	7a23      	ldrb	r3, [r4, #8]
    99e4:	2b00      	cmp	r3, #0
    99e6:	d0fa      	beq.n	99de <software_isr+0x22>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    99e8:	6822      	ldr	r2, [r4, #0]
			uint32_t cycles = ARM_DWT_CYCCNT;
    99ea:	682e      	ldr	r6, [r5, #0]
			p->update();
    99ec:	6813      	ldr	r3, [r2, #0]
    99ee:	4620      	mov	r0, r4
    99f0:	4798      	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    99f2:	682b      	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    99f4:	88e1      	ldrh	r1, [r4, #6]
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    99f6:	1b9b      	subs	r3, r3, r6
    99f8:	091b      	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    99fa:	b29a      	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    99fc:	428b      	cmp	r3, r1
			p->cpu_cycles = cycles;
    99fe:	80a2      	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    9a00:	bf88      	it	hi
    9a02:	80e2      	strhhi	r2, [r4, #6]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    9a04:	6964      	ldr	r4, [r4, #20]
    9a06:	2c00      	cmp	r4, #0
    9a08:	d1eb      	bne.n	99e2 <software_isr+0x26>
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    9a0a:	4a0a      	ldr	r2, [pc, #40]	; (9a34 <software_isr+0x78>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    9a0c:	4b0a      	ldr	r3, [pc, #40]	; (9a38 <software_isr+0x7c>)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    9a0e:	6812      	ldr	r2, [r2, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    9a10:	8819      	ldrh	r1, [r3, #0]
	AudioStream::cpu_cycles_total = totalcycles;
    9a12:	480a      	ldr	r0, [pc, #40]	; (9a3c <software_isr+0x80>)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    9a14:	1bd7      	subs	r7, r2, r7
    9a16:	093f      	lsrs	r7, r7, #4
	AudioStream::cpu_cycles_total = totalcycles;
    9a18:	b2ba      	uxth	r2, r7
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    9a1a:	428f      	cmp	r7, r1
	AudioStream::cpu_cycles_total = totalcycles;
    9a1c:	8002      	strh	r2, [r0, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    9a1e:	d901      	bls.n	9a24 <software_isr+0x68>
		AudioStream::cpu_cycles_total_max = totalcycles;
    9a20:	801a      	strh	r2, [r3, #0]
    9a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a26:	bf00      	nop
    9a28:	e000edfc 	.word	0xe000edfc
    9a2c:	200026e0 	.word	0x200026e0
    9a30:	e0001000 	.word	0xe0001000
    9a34:	e0001004 	.word	0xe0001004
    9a38:	200026ee 	.word	0x200026ee
    9a3c:	20002708 	.word	0x20002708

00009a40 <_ZN10DMAChannel5beginEb>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    9a40:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
	uint32_t ch = 0;

	__disable_irq();
    9a44:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    9a46:	b999      	cbnz	r1, 9a70 <_ZN10DMAChannel5beginEb+0x30>
    9a48:	6802      	ldr	r2, [r0, #0]
    9a4a:	b18a      	cbz	r2, 9a70 <_ZN10DMAChannel5beginEb+0x30>
    9a4c:	7903      	ldrb	r3, [r0, #4]
    9a4e:	2b0f      	cmp	r3, #15
    9a50:	d80e      	bhi.n	9a70 <_ZN10DMAChannel5beginEb+0x30>
	  && (dma_channel_allocated_mask & (1 << channel))
    9a52:	4c2d      	ldr	r4, [pc, #180]	; (9b08 <_ZN10DMAChannel5beginEb+0xc8>)
    9a54:	8821      	ldrh	r1, [r4, #0]
    9a56:	fa41 f503 	asr.w	r5, r1, r3
    9a5a:	07ed      	lsls	r5, r5, #31
    9a5c:	d506      	bpl.n	9a6c <_ZN10DMAChannel5beginEb+0x2c>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    9a5e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
    9a62:	f503 6390 	add.w	r3, r3, #1152	; 0x480
    9a66:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
    9a6a:	d04a      	beq.n	9b02 <_ZN10DMAChannel5beginEb+0xc2>
    9a6c:	460d      	mov	r5, r1
    9a6e:	e002      	b.n	9a76 <_ZN10DMAChannel5beginEb+0x36>
    9a70:	4c25      	ldr	r4, [pc, #148]	; (9b08 <_ZN10DMAChannel5beginEb+0xc8>)
    9a72:	8825      	ldrh	r5, [r4, #0]
    9a74:	4629      	mov	r1, r5
    9a76:	2300      	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    9a78:	fa41 f203 	asr.w	r2, r1, r3
    9a7c:	f012 0201 	ands.w	r2, r2, #1
    9a80:	d009      	beq.n	9a96 <_ZN10DMAChannel5beginEb+0x56>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    9a82:	3301      	adds	r3, #1
    9a84:	2b10      	cmp	r3, #16
    9a86:	d1f7      	bne.n	9a78 <_ZN10DMAChannel5beginEb+0x38>
			__enable_irq();
    9a88:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    9a8a:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    9a8c:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    9a8e:	6002      	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    9a90:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    9a94:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    9a96:	2101      	movs	r1, #1
    9a98:	4099      	lsls	r1, r3
    9a9a:	430d      	orrs	r5, r1
    9a9c:	8025      	strh	r5, [r4, #0]
			__enable_irq();
    9a9e:	b662      	cpsie	i
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    9aa0:	4d1a      	ldr	r5, [pc, #104]	; (9b0c <_ZN10DMAChannel5beginEb+0xcc>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    9aa2:	4c1b      	ldr	r4, [pc, #108]	; (9b10 <_ZN10DMAChannel5beginEb+0xd0>)
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    9aa4:	f8df 9074 	ldr.w	r9, [pc, #116]	; 9b1c <_ZN10DMAChannel5beginEb+0xdc>
	DMA_CERQ = ch;
    9aa8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 9b20 <_ZN10DMAChannel5beginEb+0xe0>
	DMA_CEEI = ch;
    9aac:	4f19      	ldr	r7, [pc, #100]	; (9b14 <_ZN10DMAChannel5beginEb+0xd4>)
	DMA_CINT = ch;
    9aae:	4e1a      	ldr	r6, [pc, #104]	; (9b18 <_ZN10DMAChannel5beginEb+0xd8>)
	DMA_CERR = ch;
    9ab0:	f8df c070 	ldr.w	ip, [pc, #112]	; 9b24 <_ZN10DMAChannel5beginEb+0xe4>
	channel = ch;
    9ab4:	b2d9      	uxtb	r1, r3
    9ab6:	7101      	strb	r1, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    9ab8:	f8d5 a000 	ldr.w	sl, [r5]
    9abc:	f04a 0a02 	orr.w	sl, sl, #2
    9ac0:	f8c5 a000 	str.w	sl, [r5]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    9ac4:	6825      	ldr	r5, [r4, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    9ac6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
    9aca:	f503 6390 	add.w	r3, r3, #1152	; 0x480
    9ace:	015b      	lsls	r3, r3, #5
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    9ad0:	f045 0a02 	orr.w	sl, r5, #2
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    9ad4:	2582      	movs	r5, #130	; 0x82
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    9ad6:	f8c4 a000 	str.w	sl, [r4]
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    9ada:	f8c9 5000 	str.w	r5, [r9]
	DMA_CERQ = ch;
    9ade:	f888 1000 	strb.w	r1, [r8]
	DMA_CERR = ch;
    9ae2:	f88c 1000 	strb.w	r1, [ip]
	DMA_CEEI = ch;
    9ae6:	7039      	strb	r1, [r7, #0]
	DMA_CINT = ch;
    9ae8:	7031      	strb	r1, [r6, #0]
}
    9aea:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    9aee:	6003      	str	r3, [r0, #0]
	*p++ = 0;
    9af0:	601a      	str	r2, [r3, #0]
	*p++ = 0;
    9af2:	605a      	str	r2, [r3, #4]
	*p++ = 0;
    9af4:	609a      	str	r2, [r3, #8]
	*p++ = 0;
    9af6:	60da      	str	r2, [r3, #12]
	*p++ = 0;
    9af8:	611a      	str	r2, [r3, #16]
	*p++ = 0;
    9afa:	615a      	str	r2, [r3, #20]
	*p++ = 0;
    9afc:	619a      	str	r2, [r3, #24]
	*p++ = 0;
    9afe:	61da      	str	r2, [r3, #28]
}
    9b00:	4770      	bx	lr
		__enable_irq();
    9b02:	b662      	cpsie	i
		return;
    9b04:	e7c4      	b.n	9a90 <_ZN10DMAChannel5beginEb+0x50>
    9b06:	bf00      	nop
    9b08:	2000270a 	.word	0x2000270a
    9b0c:	40048040 	.word	0x40048040
    9b10:	4004803c 	.word	0x4004803c
    9b14:	40008018 	.word	0x40008018
    9b18:	4000801f 	.word	0x4000801f
    9b1c:	40008000 	.word	0x40008000
    9b20:	4000801a 	.word	0x4000801a
    9b24:	4000801e 	.word	0x4000801e

00009b28 <_ZN10DMAChannel7releaseEv>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    9b28:	7903      	ldrb	r3, [r0, #4]
    9b2a:	2b0f      	cmp	r3, #15
{
    9b2c:	b410      	push	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
    9b2e:	d810      	bhi.n	9b52 <_ZN10DMAChannel7releaseEv+0x2a>
	DMA_CERQ = channel;
    9b30:	4a09      	ldr	r2, [pc, #36]	; (9b58 <_ZN10DMAChannel7releaseEv+0x30>)
    9b32:	7013      	strb	r3, [r2, #0]
	__disable_irq();
    9b34:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    9b36:	4b09      	ldr	r3, [pc, #36]	; (9b5c <_ZN10DMAChannel7releaseEv+0x34>)
    9b38:	7902      	ldrb	r2, [r0, #4]
    9b3a:	8819      	ldrh	r1, [r3, #0]
    9b3c:	2401      	movs	r4, #1
    9b3e:	fa04 f202 	lsl.w	r2, r4, r2
    9b42:	ea21 0202 	bic.w	r2, r1, r2
    9b46:	801a      	strh	r2, [r3, #0]
	__enable_irq();
    9b48:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    9b4a:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    9b4c:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    9b4e:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    9b50:	6003      	str	r3, [r0, #0]
}
    9b52:	f85d 4b04 	ldr.w	r4, [sp], #4
    9b56:	4770      	bx	lr
    9b58:	4000801a 	.word	0x4000801a
    9b5c:	2000270a 	.word	0x2000270a

00009b60 <_ZN14HardwareSerial5writeEm>:
	virtual void flush(void)        { serial_flush(); }
	virtual void clear(void)	{ serial_clear(); }
	virtual int availableForWrite(void) { return serial_write_buffer_free(); }
	using Print::write;
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    9b60:	b508      	push	{r3, lr}
    9b62:	6803      	ldr	r3, [r0, #0]
    9b64:	b2c9      	uxtb	r1, r1
    9b66:	681b      	ldr	r3, [r3, #0]
    9b68:	4798      	blx	r3
    9b6a:	bd08      	pop	{r3, pc}

00009b6c <_ZN14HardwareSerial5writeEl>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    9b6c:	b508      	push	{r3, lr}
    9b6e:	6803      	ldr	r3, [r0, #0]
    9b70:	b2c9      	uxtb	r1, r1
    9b72:	681b      	ldr	r3, [r3, #0]
    9b74:	4798      	blx	r3
    9b76:	bd08      	pop	{r3, pc}

00009b78 <_ZN14HardwareSerial5writeEj>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    9b78:	b508      	push	{r3, lr}
    9b7a:	6803      	ldr	r3, [r0, #0]
    9b7c:	b2c9      	uxtb	r1, r1
    9b7e:	681b      	ldr	r3, [r3, #0]
    9b80:	4798      	blx	r3
    9b82:	bd08      	pop	{r3, pc}

00009b84 <_ZN14HardwareSerial5writeEi>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    9b84:	b508      	push	{r3, lr}
    9b86:	6803      	ldr	r3, [r0, #0]
    9b88:	b2c9      	uxtb	r1, r1
    9b8a:	681b      	ldr	r3, [r3, #0]
    9b8c:	4798      	blx	r3
    9b8e:	bd08      	pop	{r3, pc}

00009b90 <_ZN14HardwareSerial5beginEm>:
	virtual void begin(uint32_t baud) { serial_begin(BAUD2DIV(baud)); }
    9b90:	4803      	ldr	r0, [pc, #12]	; (9ba0 <_ZN14HardwareSerial5beginEm+0x10>)
    9b92:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    9b96:	fbb0 f0f1 	udiv	r0, r0, r1
    9b9a:	f7fd bb21 	b.w	71e0 <serial_begin>
    9b9e:	bf00      	nop
    9ba0:	08954400 	.word	0x08954400

00009ba4 <_ZN14HardwareSerial5beginEmm>:
	virtual void begin(uint32_t baud, uint32_t format) {
    9ba4:	b510      	push	{r4, lr}
					  serial_begin(BAUD2DIV(baud));
    9ba6:	4806      	ldr	r0, [pc, #24]	; (9bc0 <_ZN14HardwareSerial5beginEmm+0x1c>)
    9ba8:	eb00 0051 	add.w	r0, r0, r1, lsr #1
	virtual void begin(uint32_t baud, uint32_t format) {
    9bac:	4614      	mov	r4, r2
					  serial_begin(BAUD2DIV(baud));
    9bae:	fbb0 f0f1 	udiv	r0, r0, r1
    9bb2:	f7fd fb15 	bl	71e0 <serial_begin>
					  serial_format(format); }
    9bb6:	4620      	mov	r0, r4
    9bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9bbc:	f7fd bb88 	b.w	72d0 <serial_format>
    9bc0:	08954400 	.word	0x08954400

00009bc4 <_ZN14HardwareSerial3endEv>:
	virtual void end(void)		{ serial_end(); }
    9bc4:	f7fd bbb0 	b.w	7328 <serial_end>

00009bc8 <_ZN14HardwareSerial17transmitterEnableEh>:
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
    9bc8:	4608      	mov	r0, r1
    9bca:	f7fd bc0b 	b.w	73e4 <serial_set_transmit_pin>
    9bce:	bf00      	nop

00009bd0 <_ZN14HardwareSerial5setRXEh>:
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
    9bd0:	4608      	mov	r0, r1
    9bd2:	f7fd bc5d 	b.w	7490 <serial_set_rx>
    9bd6:	bf00      	nop

00009bd8 <_ZN14HardwareSerial5setTXEhb>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
    9bd8:	4608      	mov	r0, r1
    9bda:	4611      	mov	r1, r2
    9bdc:	f7fd bc1e 	b.w	741c <serial_set_tx>

00009be0 <_ZN14HardwareSerial9attachRtsEh>:
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
    9be0:	b508      	push	{r3, lr}
    9be2:	4608      	mov	r0, r1
    9be4:	f7fd fc7e 	bl	74e4 <serial_set_rts>
    9be8:	3000      	adds	r0, #0
    9bea:	bf18      	it	ne
    9bec:	2001      	movne	r0, #1
    9bee:	bd08      	pop	{r3, pc}

00009bf0 <_ZN14HardwareSerial9attachCtsEh>:
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
    9bf0:	b508      	push	{r3, lr}
    9bf2:	4608      	mov	r0, r1
    9bf4:	f7fd fc98 	bl	7528 <serial_set_cts>
    9bf8:	3000      	adds	r0, #0
    9bfa:	bf18      	it	ne
    9bfc:	2001      	movne	r0, #1
    9bfe:	bd08      	pop	{r3, pc}

00009c00 <_ZN14HardwareSerial9availableEv>:
	virtual int available(void)     { return serial_available(); }
    9c00:	f7fd bd4c 	b.w	769c <serial_available>

00009c04 <_ZN14HardwareSerial4peekEv>:
	virtual int peek(void)          { return serial_peek(); }
    9c04:	f7fd bd8c 	b.w	7720 <serial_peek>

00009c08 <_ZN14HardwareSerial4readEv>:
	virtual int read(void)          { return serial_getchar(); }
    9c08:	f7fd bd58 	b.w	76bc <serial_getchar>

00009c0c <_ZN14HardwareSerial5flushEv>:
	virtual void flush(void)        { serial_flush(); }
    9c0c:	f7fd bd28 	b.w	7660 <serial_flush>

00009c10 <_ZN14HardwareSerial5clearEv>:
	virtual void clear(void)	{ serial_clear(); }
    9c10:	f7fd bd9e 	b.w	7750 <serial_clear>

00009c14 <_ZN14HardwareSerial17availableForWriteEv>:
	virtual int availableForWrite(void) { return serial_write_buffer_free(); }
    9c14:	f7fd bd30 	b.w	7678 <serial_write_buffer_free>

00009c18 <_ZN14HardwareSerial5writeEh>:
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
    9c18:	b508      	push	{r3, lr}
    9c1a:	4608      	mov	r0, r1
    9c1c:	f7fd fcac 	bl	7578 <serial_putchar>
    9c20:	2001      	movs	r0, #1
    9c22:	bd08      	pop	{r3, pc}

00009c24 <_ZN14HardwareSerial9write9bitEm>:
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
    9c24:	b508      	push	{r3, lr}
    9c26:	4608      	mov	r0, r1
    9c28:	f7fd fca6 	bl	7578 <serial_putchar>
    9c2c:	2001      	movs	r0, #1
    9c2e:	bd08      	pop	{r3, pc}

00009c30 <_ZN14HardwareSerial5writeEPKhj>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    9c30:	b510      	push	{r4, lr}
					{ serial_write(buffer, size); return size; }
    9c32:	4608      	mov	r0, r1
	virtual size_t write(const uint8_t *buffer, size_t size)
    9c34:	4614      	mov	r4, r2
					{ serial_write(buffer, size); return size; }
    9c36:	4611      	mov	r1, r2
    9c38:	f7fd fca8 	bl	758c <serial_write>
    9c3c:	4620      	mov	r0, r4
    9c3e:	bd10      	pop	{r4, pc}

00009c40 <_ZN14HardwareSerial5writeEPKc>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    9c40:	b538      	push	{r3, r4, r5, lr}
    9c42:	4608      	mov	r0, r1
    9c44:	460d      	mov	r5, r1
    9c46:	f004 fd57 	bl	e6f8 <strlen>
    9c4a:	4604      	mov	r4, r0
					  serial_write((const uint8_t *)str, len);
    9c4c:	4621      	mov	r1, r4
    9c4e:	4628      	mov	r0, r5
    9c50:	f7fd fc9c 	bl	758c <serial_write>
					  return len; }
    9c54:	4620      	mov	r0, r4
    9c56:	bd38      	pop	{r3, r4, r5, pc}

00009c58 <_Z12serialEvent1v>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    9c58:	4770      	bx	lr
    9c5a:	bf00      	nop

00009c5c <_GLOBAL__sub_I_Serial1>:
	Print() : write_error(0) {}
    9c5c:	4b04      	ldr	r3, [pc, #16]	; (9c70 <_GLOBAL__sub_I_Serial1+0x14>)
class HardwareSerial : public Stream
    9c5e:	4a05      	ldr	r2, [pc, #20]	; (9c74 <_GLOBAL__sub_I_Serial1+0x18>)
    9c60:	601a      	str	r2, [r3, #0]
#include "Print.h"

class Stream : public Print
{
  public:
	Stream() : _timeout(1000), read_error(0) {}
    9c62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9c66:	2200      	movs	r2, #0
    9c68:	6099      	str	r1, [r3, #8]
    9c6a:	711a      	strb	r2, [r3, #4]
    9c6c:	731a      	strb	r2, [r3, #12]
    9c6e:	4770      	bx	lr
    9c70:	2000270c 	.word	0x2000270c
    9c74:	00011cc0 	.word	0x00011cc0

00009c78 <_ZN15HardwareSerial25writeEm>:
	virtual void flush(void)        { serial2_flush(); }
	virtual void clear(void)	{ serial2_clear(); }
	virtual int availableForWrite(void) { return serial2_write_buffer_free(); }
	using Print::write;
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    9c78:	b508      	push	{r3, lr}
    9c7a:	6803      	ldr	r3, [r0, #0]
    9c7c:	b2c9      	uxtb	r1, r1
    9c7e:	681b      	ldr	r3, [r3, #0]
    9c80:	4798      	blx	r3
    9c82:	bd08      	pop	{r3, pc}

00009c84 <_ZN15HardwareSerial25writeEl>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    9c84:	b508      	push	{r3, lr}
    9c86:	6803      	ldr	r3, [r0, #0]
    9c88:	b2c9      	uxtb	r1, r1
    9c8a:	681b      	ldr	r3, [r3, #0]
    9c8c:	4798      	blx	r3
    9c8e:	bd08      	pop	{r3, pc}

00009c90 <_ZN15HardwareSerial25writeEj>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    9c90:	b508      	push	{r3, lr}
    9c92:	6803      	ldr	r3, [r0, #0]
    9c94:	b2c9      	uxtb	r1, r1
    9c96:	681b      	ldr	r3, [r3, #0]
    9c98:	4798      	blx	r3
    9c9a:	bd08      	pop	{r3, pc}

00009c9c <_ZN15HardwareSerial25writeEi>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    9c9c:	b508      	push	{r3, lr}
    9c9e:	6803      	ldr	r3, [r0, #0]
    9ca0:	b2c9      	uxtb	r1, r1
    9ca2:	681b      	ldr	r3, [r3, #0]
    9ca4:	4798      	blx	r3
    9ca6:	bd08      	pop	{r3, pc}

00009ca8 <_ZN15HardwareSerial25beginEm>:
	virtual void begin(uint32_t baud) { serial2_begin(BAUD2DIV2(baud)); }
    9ca8:	4803      	ldr	r0, [pc, #12]	; (9cb8 <_ZN15HardwareSerial25beginEm+0x10>)
    9caa:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    9cae:	fbb0 f0f1 	udiv	r0, r0, r1
    9cb2:	f7fd bdfb 	b.w	78ac <serial2_begin>
    9cb6:	bf00      	nop
    9cb8:	08954400 	.word	0x08954400

00009cbc <_ZN15HardwareSerial25beginEmm>:
	virtual void begin(uint32_t baud, uint32_t format) {
    9cbc:	b510      	push	{r4, lr}
					  serial2_begin(BAUD2DIV2(baud));
    9cbe:	4806      	ldr	r0, [pc, #24]	; (9cd8 <_ZN15HardwareSerial25beginEmm+0x1c>)
    9cc0:	eb00 0051 	add.w	r0, r0, r1, lsr #1
	virtual void begin(uint32_t baud, uint32_t format) {
    9cc4:	4614      	mov	r4, r2
					  serial2_begin(BAUD2DIV2(baud));
    9cc6:	fbb0 f0f1 	udiv	r0, r0, r1
    9cca:	f7fd fdef 	bl	78ac <serial2_begin>
					  serial2_format(format); }
    9cce:	4620      	mov	r0, r4
    9cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9cd4:	f7fd be62 	b.w	799c <serial2_format>
    9cd8:	08954400 	.word	0x08954400

00009cdc <_ZN15HardwareSerial23endEv>:
	virtual void end(void)		{ serial2_end(); }
    9cdc:	f7fd be8a 	b.w	79f4 <serial2_end>

00009ce0 <_ZN15HardwareSerial217transmitterEnableEh>:
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
    9ce0:	4608      	mov	r0, r1
    9ce2:	f7fd bee5 	b.w	7ab0 <serial2_set_transmit_pin>
    9ce6:	bf00      	nop

00009ce8 <_ZN15HardwareSerial25setRXEh>:
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
    9ce8:	4608      	mov	r0, r1
    9cea:	f7fd bf37 	b.w	7b5c <serial2_set_rx>
    9cee:	bf00      	nop

00009cf0 <_ZN15HardwareSerial25setTXEhb>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
    9cf0:	4608      	mov	r0, r1
    9cf2:	4611      	mov	r1, r2
    9cf4:	f7fd bef8 	b.w	7ae8 <serial2_set_tx>

00009cf8 <_ZN15HardwareSerial29attachRtsEh>:
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
    9cf8:	b508      	push	{r3, lr}
    9cfa:	4608      	mov	r0, r1
    9cfc:	f7fd ff5c 	bl	7bb8 <serial2_set_rts>
    9d00:	3000      	adds	r0, #0
    9d02:	bf18      	it	ne
    9d04:	2001      	movne	r0, #1
    9d06:	bd08      	pop	{r3, pc}

00009d08 <_ZN15HardwareSerial29attachCtsEh>:
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
    9d08:	b508      	push	{r3, lr}
    9d0a:	4608      	mov	r0, r1
    9d0c:	f7fd ff76 	bl	7bfc <serial2_set_cts>
    9d10:	3000      	adds	r0, #0
    9d12:	bf18      	it	ne
    9d14:	2001      	movne	r0, #1
    9d16:	bd08      	pop	{r3, pc}

00009d18 <_ZN15HardwareSerial29availableEv>:
	virtual int available(void)     { return serial2_available(); }
    9d18:	f7fe b86e 	b.w	7df8 <serial2_available>

00009d1c <_ZN15HardwareSerial24peekEv>:
	virtual int peek(void)          { return serial2_peek(); }
    9d1c:	f7fe b8ae 	b.w	7e7c <serial2_peek>

00009d20 <_ZN15HardwareSerial24readEv>:
	virtual int read(void)          { return serial2_getchar(); }
    9d20:	f7fe b87a 	b.w	7e18 <serial2_getchar>

00009d24 <_ZN15HardwareSerial25flushEv>:
	virtual void flush(void)        { serial2_flush(); }
    9d24:	f7fe b84a 	b.w	7dbc <serial2_flush>

00009d28 <_ZN15HardwareSerial25clearEv>:
	virtual void clear(void)	{ serial2_clear(); }
    9d28:	f7fe b8c0 	b.w	7eac <serial2_clear>

00009d2c <_ZN15HardwareSerial217availableForWriteEv>:
	virtual int availableForWrite(void) { return serial2_write_buffer_free(); }
    9d2c:	f7fe b852 	b.w	7dd4 <serial2_write_buffer_free>

00009d30 <_ZN15HardwareSerial25writeEh>:
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    9d30:	b508      	push	{r3, lr}
    9d32:	4608      	mov	r0, r1
    9d34:	f7fd ff82 	bl	7c3c <serial2_putchar>
    9d38:	2001      	movs	r0, #1
    9d3a:	bd08      	pop	{r3, pc}

00009d3c <_ZN15HardwareSerial29write9bitEm>:
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial2_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial2_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial2_putchar(c); return 1; }
    9d3c:	b508      	push	{r3, lr}
    9d3e:	4608      	mov	r0, r1
    9d40:	f7fd ff7c 	bl	7c3c <serial2_putchar>
    9d44:	2001      	movs	r0, #1
    9d46:	bd08      	pop	{r3, pc}

00009d48 <_ZN15HardwareSerial25writeEPKhj>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    9d48:	b510      	push	{r4, lr}
					{ serial2_write(buffer, size); return size; }
    9d4a:	4608      	mov	r0, r1
	virtual size_t write(const uint8_t *buffer, size_t size)
    9d4c:	4614      	mov	r4, r2
					{ serial2_write(buffer, size); return size; }
    9d4e:	4611      	mov	r1, r2
    9d50:	f7fd ffca 	bl	7ce8 <serial2_write>
    9d54:	4620      	mov	r0, r4
    9d56:	bd10      	pop	{r4, pc}

00009d58 <_ZN15HardwareSerial25writeEPKc>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    9d58:	b538      	push	{r3, r4, r5, lr}
    9d5a:	4608      	mov	r0, r1
    9d5c:	460d      	mov	r5, r1
    9d5e:	f004 fccb 	bl	e6f8 <strlen>
    9d62:	4604      	mov	r4, r0
					  serial2_write((const uint8_t *)str, len);
    9d64:	4621      	mov	r1, r4
    9d66:	4628      	mov	r0, r5
    9d68:	f7fd ffbe 	bl	7ce8 <serial2_write>
					  return len; }
    9d6c:	4620      	mov	r0, r4
    9d6e:	bd38      	pop	{r3, r4, r5, pc}

00009d70 <_Z12serialEvent2v>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    9d70:	4770      	bx	lr
    9d72:	bf00      	nop

00009d74 <_GLOBAL__sub_I_Serial2>:
    9d74:	4b04      	ldr	r3, [pc, #16]	; (9d88 <_GLOBAL__sub_I_Serial2+0x14>)
class HardwareSerial2 : public HardwareSerial
    9d76:	4a05      	ldr	r2, [pc, #20]	; (9d8c <_GLOBAL__sub_I_Serial2+0x18>)
    9d78:	601a      	str	r2, [r3, #0]
    9d7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9d7e:	2200      	movs	r2, #0
    9d80:	6099      	str	r1, [r3, #8]
    9d82:	711a      	strb	r2, [r3, #4]
    9d84:	731a      	strb	r2, [r3, #12]
    9d86:	4770      	bx	lr
    9d88:	2000271c 	.word	0x2000271c
    9d8c:	00011d20 	.word	0x00011d20

00009d90 <_ZN15HardwareSerial35writeEm>:
	virtual void flush(void)        { serial3_flush(); }
	virtual void clear(void)	{ serial3_clear(); }
	virtual int availableForWrite(void) { return serial3_write_buffer_free(); }
	using Print::write;
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    9d90:	b508      	push	{r3, lr}
    9d92:	6803      	ldr	r3, [r0, #0]
    9d94:	b2c9      	uxtb	r1, r1
    9d96:	681b      	ldr	r3, [r3, #0]
    9d98:	4798      	blx	r3
    9d9a:	bd08      	pop	{r3, pc}

00009d9c <_ZN15HardwareSerial35writeEl>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    9d9c:	b508      	push	{r3, lr}
    9d9e:	6803      	ldr	r3, [r0, #0]
    9da0:	b2c9      	uxtb	r1, r1
    9da2:	681b      	ldr	r3, [r3, #0]
    9da4:	4798      	blx	r3
    9da6:	bd08      	pop	{r3, pc}

00009da8 <_ZN15HardwareSerial35writeEj>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    9da8:	b508      	push	{r3, lr}
    9daa:	6803      	ldr	r3, [r0, #0]
    9dac:	b2c9      	uxtb	r1, r1
    9dae:	681b      	ldr	r3, [r3, #0]
    9db0:	4798      	blx	r3
    9db2:	bd08      	pop	{r3, pc}

00009db4 <_ZN15HardwareSerial35writeEi>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    9db4:	b508      	push	{r3, lr}
    9db6:	6803      	ldr	r3, [r0, #0]
    9db8:	b2c9      	uxtb	r1, r1
    9dba:	681b      	ldr	r3, [r3, #0]
    9dbc:	4798      	blx	r3
    9dbe:	bd08      	pop	{r3, pc}

00009dc0 <_ZN15HardwareSerial35beginEm>:
	virtual void begin(uint32_t baud) { serial3_begin(BAUD2DIV3(baud)); }
    9dc0:	4803      	ldr	r0, [pc, #12]	; (9dd0 <_ZN15HardwareSerial35beginEm+0x10>)
    9dc2:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    9dc6:	fbb0 f0f1 	udiv	r0, r0, r1
    9dca:	f7fe b91d 	b.w	8008 <serial3_begin>
    9dce:	bf00      	nop
    9dd0:	044aa200 	.word	0x044aa200

00009dd4 <_ZN15HardwareSerial35beginEmm>:
	virtual void begin(uint32_t baud, uint32_t format) {
    9dd4:	b510      	push	{r4, lr}
					  serial3_begin(BAUD2DIV3(baud));
    9dd6:	4806      	ldr	r0, [pc, #24]	; (9df0 <_ZN15HardwareSerial35beginEmm+0x1c>)
    9dd8:	eb00 0051 	add.w	r0, r0, r1, lsr #1
	virtual void begin(uint32_t baud, uint32_t format) {
    9ddc:	4614      	mov	r4, r2
					  serial3_begin(BAUD2DIV3(baud));
    9dde:	fbb0 f0f1 	udiv	r0, r0, r1
    9de2:	f7fe f911 	bl	8008 <serial3_begin>
					  serial3_format(format); }
    9de6:	4620      	mov	r0, r4
    9de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9dec:	f7fe b964 	b.w	80b8 <serial3_format>
    9df0:	044aa200 	.word	0x044aa200

00009df4 <_ZN15HardwareSerial33endEv>:
	virtual void end(void)          { serial3_end(); }
    9df4:	f7fe b98c 	b.w	8110 <serial3_end>

00009df8 <_ZN15HardwareSerial317transmitterEnableEh>:
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
    9df8:	4608      	mov	r0, r1
    9dfa:	f7fe b9c5 	b.w	8188 <serial3_set_transmit_pin>
    9dfe:	bf00      	nop

00009e00 <_ZN15HardwareSerial35setRXEh>:
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
    9e00:	4608      	mov	r0, r1
    9e02:	f7fe ba07 	b.w	8214 <serial3_set_rx>
    9e06:	bf00      	nop

00009e08 <_ZN15HardwareSerial35setTXEhb>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
    9e08:	4608      	mov	r0, r1
    9e0a:	4611      	mov	r1, r2
    9e0c:	f7fe b9d8 	b.w	81c0 <serial3_set_tx>

00009e10 <_ZN15HardwareSerial39attachRtsEh>:
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
    9e10:	b508      	push	{r3, lr}
    9e12:	4608      	mov	r0, r1
    9e14:	f7fe fa00 	bl	8218 <serial3_set_rts>
    9e18:	3000      	adds	r0, #0
    9e1a:	bf18      	it	ne
    9e1c:	2001      	movne	r0, #1
    9e1e:	bd08      	pop	{r3, pc}

00009e20 <_ZN15HardwareSerial39attachCtsEh>:
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
    9e20:	b508      	push	{r3, lr}
    9e22:	4608      	mov	r0, r1
    9e24:	f7fe fa1a 	bl	825c <serial3_set_cts>
    9e28:	3000      	adds	r0, #0
    9e2a:	bf18      	it	ne
    9e2c:	2001      	movne	r0, #1
    9e2e:	bd08      	pop	{r3, pc}

00009e30 <_ZN15HardwareSerial39availableEv>:
	virtual int available(void)     { return serial3_available(); }
    9e30:	f7fe bab4 	b.w	839c <serial3_available>

00009e34 <_ZN15HardwareSerial34peekEv>:
	virtual int peek(void)          { return serial3_peek(); }
    9e34:	f7fe baf4 	b.w	8420 <serial3_peek>

00009e38 <_ZN15HardwareSerial34readEv>:
	virtual int read(void)          { return serial3_getchar(); }
    9e38:	f7fe bac0 	b.w	83bc <serial3_getchar>

00009e3c <_ZN15HardwareSerial35flushEv>:
	virtual void flush(void)        { serial3_flush(); }
    9e3c:	f7fe ba90 	b.w	8360 <serial3_flush>

00009e40 <_ZN15HardwareSerial35clearEv>:
	virtual void clear(void)	{ serial3_clear(); }
    9e40:	f7fe bb06 	b.w	8450 <serial3_clear>

00009e44 <_ZN15HardwareSerial317availableForWriteEv>:
	virtual int availableForWrite(void) { return serial3_write_buffer_free(); }
    9e44:	f7fe ba98 	b.w	8378 <serial3_write_buffer_free>

00009e48 <_ZN15HardwareSerial35writeEh>:
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9e48:	b508      	push	{r3, lr}
    9e4a:	4608      	mov	r0, r1
    9e4c:	f7fe fa26 	bl	829c <serial3_putchar>
    9e50:	2001      	movs	r0, #1
    9e52:	bd08      	pop	{r3, pc}

00009e54 <_ZN15HardwareSerial39write9bitEm>:
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial3_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial3_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial3_putchar(c); return 1; }
    9e54:	b508      	push	{r3, lr}
    9e56:	4608      	mov	r0, r1
    9e58:	f7fe fa20 	bl	829c <serial3_putchar>
    9e5c:	2001      	movs	r0, #1
    9e5e:	bd08      	pop	{r3, pc}

00009e60 <_ZN15HardwareSerial35writeEPKhj>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    9e60:	b510      	push	{r4, lr}
					{ serial3_write(buffer, size); return size; }
    9e62:	4608      	mov	r0, r1
	virtual size_t write(const uint8_t *buffer, size_t size)
    9e64:	4614      	mov	r4, r2
					{ serial3_write(buffer, size); return size; }
    9e66:	4611      	mov	r1, r2
    9e68:	f7fe fa6e 	bl	8348 <serial3_write>
    9e6c:	4620      	mov	r0, r4
    9e6e:	bd10      	pop	{r4, pc}

00009e70 <_ZN15HardwareSerial35writeEPKc>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    9e70:	b538      	push	{r3, r4, r5, lr}
    9e72:	4608      	mov	r0, r1
    9e74:	460d      	mov	r5, r1
    9e76:	f004 fc3f 	bl	e6f8 <strlen>
    9e7a:	4604      	mov	r4, r0
					  serial3_write((const uint8_t *)str, len);
    9e7c:	4621      	mov	r1, r4
    9e7e:	4628      	mov	r0, r5
    9e80:	f7fe fa62 	bl	8348 <serial3_write>
					  return len; }
    9e84:	4620      	mov	r0, r4
    9e86:	bd38      	pop	{r3, r4, r5, pc}

00009e88 <_Z12serialEvent3v>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    9e88:	4770      	bx	lr
    9e8a:	bf00      	nop

00009e8c <_GLOBAL__sub_I_Serial3>:
    9e8c:	4b04      	ldr	r3, [pc, #16]	; (9ea0 <_GLOBAL__sub_I_Serial3+0x14>)
class HardwareSerial3 : public HardwareSerial
    9e8e:	4a05      	ldr	r2, [pc, #20]	; (9ea4 <_GLOBAL__sub_I_Serial3+0x18>)
    9e90:	601a      	str	r2, [r3, #0]
    9e92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9e96:	2200      	movs	r2, #0
    9e98:	6099      	str	r1, [r3, #8]
    9e9a:	711a      	strb	r2, [r3, #4]
    9e9c:	731a      	strb	r2, [r3, #12]
    9e9e:	4770      	bx	lr
    9ea0:	2000272c 	.word	0x2000272c
    9ea4:	00011d80 	.word	0x00011d80

00009ea8 <_ZNK9IPAddress7printToER5Print>:
#include "Arduino.h"
#include "IPAddress.h"

size_t IPAddress::printTo(Print& p) const
{
    9ea8:	b570      	push	{r4, r5, r6, lr}
    9eaa:	4606      	mov	r6, r0
    9eac:	460d      	mov	r5, r1
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    9eae:	4608      	mov	r0, r1
    9eb0:	220a      	movs	r2, #10
    9eb2:	7931      	ldrb	r1, [r6, #4]
    9eb4:	2300      	movs	r3, #0
    9eb6:	f000 f88b 	bl	9fd0 <_ZN5Print11printNumberEmhh>
	int i=0;
	while (1) {
		p.print(_address.bytes[i], DEC);
		if (++i >= 4) return 4;
    9eba:	2401      	movs	r4, #1
		p.write('.');
    9ebc:	682b      	ldr	r3, [r5, #0]
    9ebe:	212e      	movs	r1, #46	; 0x2e
    9ec0:	681b      	ldr	r3, [r3, #0]
    9ec2:	4628      	mov	r0, r5
    9ec4:	4798      	blx	r3
    9ec6:	1933      	adds	r3, r6, r4
    9ec8:	4628      	mov	r0, r5
    9eca:	7919      	ldrb	r1, [r3, #4]
		if (++i >= 4) return 4;
    9ecc:	3401      	adds	r4, #1
    9ece:	220a      	movs	r2, #10
    9ed0:	2300      	movs	r3, #0
    9ed2:	f000 f87d 	bl	9fd0 <_ZN5Print11printNumberEmhh>
    9ed6:	2c04      	cmp	r4, #4
    9ed8:	d1f0      	bne.n	9ebc <_ZNK9IPAddress7printToER5Print+0x14>
	}
}
    9eda:	4620      	mov	r0, r4
    9edc:	bd70      	pop	{r4, r5, r6, pc}
    9ede:	bf00      	nop

00009ee0 <_GLOBAL__sub_I__ZNK9IPAddress7printToER5Print>:
		_address.bytes[0] = b1;
		_address.bytes[1] = b2;
		_address.bytes[2] = b3;
		_address.bytes[3] = b4;
	}
	IPAddress(uint32_t address) {
    9ee0:	4b02      	ldr	r3, [pc, #8]	; (9eec <_GLOBAL__sub_I__ZNK9IPAddress7printToER5Print+0xc>)
    9ee2:	4a03      	ldr	r2, [pc, #12]	; (9ef0 <_GLOBAL__sub_I__ZNK9IPAddress7printToER5Print+0x10>)
    9ee4:	601a      	str	r2, [r3, #0]
		_address.dword = address;
    9ee6:	2200      	movs	r2, #0
    9ee8:	605a      	str	r2, [r3, #4]
    9eea:	4770      	bx	lr
    9eec:	2000273c 	.word	0x2000273c
    9ef0:	00011de0 	.word	0x00011de0

00009ef4 <_ZL11dummy_functv>:
	}
}
#endif

static void dummy_funct(void)
{
    9ef4:	4770      	bx	lr
    9ef6:	bf00      	nop

00009ef8 <_ZN13IntervalTimer3endEv>:
	if (channel) {
    9ef8:	6803      	ldr	r3, [r0, #0]
void IntervalTimer::end() {
    9efa:	b430      	push	{r4, r5}
	if (channel) {
    9efc:	b14b      	cbz	r3, 9f12 <_ZN13IntervalTimer3endEv+0x1a>
		int index = channel - KINETISK_PIT_CHANNELS;
    9efe:	4a06      	ldr	r2, [pc, #24]	; (9f18 <_ZN13IntervalTimer3endEv+0x20>)
		funct_table[index] = dummy_funct;
    9f00:	4c06      	ldr	r4, [pc, #24]	; (9f1c <_ZN13IntervalTimer3endEv+0x24>)
    9f02:	4d07      	ldr	r5, [pc, #28]	; (9f20 <_ZN13IntervalTimer3endEv+0x28>)
		int index = channel - KINETISK_PIT_CHANNELS;
    9f04:	441a      	add	r2, r3
    9f06:	1112      	asrs	r2, r2, #4
		channel->TCTRL = 0;
    9f08:	2100      	movs	r1, #0
		funct_table[index] = dummy_funct;
    9f0a:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
		channel->TCTRL = 0;
    9f0e:	6099      	str	r1, [r3, #8]
		channel = 0;
    9f10:	6001      	str	r1, [r0, #0]
}
    9f12:	bc30      	pop	{r4, r5}
    9f14:	4770      	bx	lr
    9f16:	bf00      	nop
    9f18:	bffc8f00 	.word	0xbffc8f00
    9f1c:	20000ddc 	.word	0x20000ddc
    9f20:	00009ef5 	.word	0x00009ef5

00009f24 <pit0_isr>:
{
    9f24:	b508      	push	{r3, lr}
	PIT_TFLG0 = 1;
    9f26:	4a03      	ldr	r2, [pc, #12]	; (9f34 <pit0_isr+0x10>)
	funct_table[0]();
    9f28:	4b03      	ldr	r3, [pc, #12]	; (9f38 <pit0_isr+0x14>)
	PIT_TFLG0 = 1;
    9f2a:	2101      	movs	r1, #1
    9f2c:	6011      	str	r1, [r2, #0]
	funct_table[0]();
    9f2e:	681b      	ldr	r3, [r3, #0]
    9f30:	4798      	blx	r3
    9f32:	bd08      	pop	{r3, pc}
    9f34:	4003710c 	.word	0x4003710c
    9f38:	20000ddc 	.word	0x20000ddc

00009f3c <pit1_isr>:
void pit1_isr() {
    9f3c:	b508      	push	{r3, lr}
	PIT_TFLG1 = 1;
    9f3e:	4a03      	ldr	r2, [pc, #12]	; (9f4c <pit1_isr+0x10>)
	funct_table[1]();
    9f40:	4b03      	ldr	r3, [pc, #12]	; (9f50 <pit1_isr+0x14>)
	PIT_TFLG1 = 1;
    9f42:	2101      	movs	r1, #1
    9f44:	6011      	str	r1, [r2, #0]
	funct_table[1]();
    9f46:	685b      	ldr	r3, [r3, #4]
    9f48:	4798      	blx	r3
    9f4a:	bd08      	pop	{r3, pc}
    9f4c:	4003711c 	.word	0x4003711c
    9f50:	20000ddc 	.word	0x20000ddc

00009f54 <pit2_isr>:
void pit2_isr() {
    9f54:	b508      	push	{r3, lr}
	PIT_TFLG2 = 1;
    9f56:	4a03      	ldr	r2, [pc, #12]	; (9f64 <pit2_isr+0x10>)
	funct_table[2]();
    9f58:	4b03      	ldr	r3, [pc, #12]	; (9f68 <pit2_isr+0x14>)
	PIT_TFLG2 = 1;
    9f5a:	2101      	movs	r1, #1
    9f5c:	6011      	str	r1, [r2, #0]
	funct_table[2]();
    9f5e:	689b      	ldr	r3, [r3, #8]
    9f60:	4798      	blx	r3
    9f62:	bd08      	pop	{r3, pc}
    9f64:	4003712c 	.word	0x4003712c
    9f68:	20000ddc 	.word	0x20000ddc

00009f6c <pit3_isr>:
void pit3_isr() {
    9f6c:	b508      	push	{r3, lr}
	PIT_TFLG3 = 1;
    9f6e:	4a03      	ldr	r2, [pc, #12]	; (9f7c <pit3_isr+0x10>)
	funct_table[3]();
    9f70:	4b03      	ldr	r3, [pc, #12]	; (9f80 <pit3_isr+0x14>)
	PIT_TFLG3 = 1;
    9f72:	2101      	movs	r1, #1
    9f74:	6011      	str	r1, [r2, #0]
	funct_table[3]();
    9f76:	68db      	ldr	r3, [r3, #12]
    9f78:	4798      	blx	r3
    9f7a:	bd08      	pop	{r3, pc}
    9f7c:	4003713c 	.word	0x4003713c
    9f80:	20000ddc 	.word	0x20000ddc

00009f84 <_ZN5Print7printlnEv>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    9f84:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    9f86:	4a06      	ldr	r2, [pc, #24]	; (9fa0 <_ZN5Print7printlnEv+0x1c>)
	return write(buf, 2);
    9f88:	6803      	ldr	r3, [r0, #0]
	uint8_t buf[2]={'\r', '\n'};
    9f8a:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    9f8c:	685b      	ldr	r3, [r3, #4]
{
    9f8e:	b083      	sub	sp, #12
	return write(buf, 2);
    9f90:	a901      	add	r1, sp, #4
	uint8_t buf[2]={'\r', '\n'};
    9f92:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    9f96:	2202      	movs	r2, #2
    9f98:	4798      	blx	r3
}
    9f9a:	b003      	add	sp, #12
    9f9c:	f85d fb04 	ldr.w	pc, [sp], #4
    9fa0:	00011de8 	.word	0x00011de8

00009fa4 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    9fa4:	b510      	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    9fa6:	6803      	ldr	r3, [r0, #0]
{
    9fa8:	4614      	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    9faa:	685b      	ldr	r3, [r3, #4]
    9fac:	4798      	blx	r3
	return len;
}
    9fae:	4620      	mov	r0, r4
    9fb0:	bd10      	pop	{r4, pc}
    9fb2:	bf00      	nop

00009fb4 <_ZN5Print6printfEPKcz>:
}

int Print::printf(const char *format, ...)
{
    9fb4:	b40e      	push	{r1, r2, r3}
    9fb6:	b500      	push	{lr}
    9fb8:	b082      	sub	sp, #8
    9fba:	aa03      	add	r2, sp, #12
    9fbc:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    9fc0:	9201      	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    9fc2:	f004 fbef 	bl	e7a4 <vdprintf>
#endif
}
    9fc6:	b002      	add	sp, #8
    9fc8:	f85d eb04 	ldr.w	lr, [sp], #4
    9fcc:	b003      	add	sp, #12
    9fce:	4770      	bx	lr

00009fd0 <_ZN5Print11printNumberEmhh>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    9fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9fd2:	4686      	mov	lr, r0
    9fd4:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    9fd6:	2a00      	cmp	r2, #0
    9fd8:	d030      	beq.n	a03c <_ZN5Print11printNumberEmhh+0x6c>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    9fda:	2a01      	cmp	r2, #1
    9fdc:	bf08      	it	eq
    9fde:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    9fe0:	b339      	cbz	r1, a032 <_ZN5Print11printNumberEmhh+0x62>
    9fe2:	2421      	movs	r4, #33	; 0x21
    9fe4:	e000      	b.n	9fe8 <_ZN5Print11printNumberEmhh+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    9fe6:	b2fc      	uxtb	r4, r7
			digit = n % base;
    9fe8:	fbb1 f5f2 	udiv	r5, r1, r2
    9fec:	fb02 1115 	mls	r1, r2, r5, r1
    9ff0:	b2c9      	uxtb	r1, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9ff2:	2909      	cmp	r1, #9
    9ff4:	bf94      	ite	ls
    9ff6:	3130      	addls	r1, #48	; 0x30
    9ff8:	3137      	addhi	r1, #55	; 0x37
    9ffa:	b2ce      	uxtb	r6, r1
			if (n == 0) break;
    9ffc:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9ffe:	ad0a      	add	r5, sp, #40	; 0x28
    a000:	4425      	add	r5, r4
			i--;
    a002:	1e67      	subs	r7, r4, #1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a004:	f805 6c24 	strb.w	r6, [r5, #-36]
			if (n == 0) break;
    a008:	2900      	cmp	r1, #0
    a00a:	d1ec      	bne.n	9fe6 <_ZN5Print11printNumberEmhh+0x16>
		}
	}
	if (sign) {
    a00c:	b133      	cbz	r3, a01c <_ZN5Print11printNumberEmhh+0x4c>
		i--;
    a00e:	3c01      	subs	r4, #1
    a010:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    a012:	ab0a      	add	r3, sp, #40	; 0x28
    a014:	4423      	add	r3, r4
    a016:	222d      	movs	r2, #45	; 0x2d
    a018:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    a01c:	f8de 3000 	ldr.w	r3, [lr]
    a020:	a901      	add	r1, sp, #4
    a022:	685b      	ldr	r3, [r3, #4]
    a024:	4670      	mov	r0, lr
    a026:	4421      	add	r1, r4
    a028:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    a02c:	4798      	blx	r3
}
    a02e:	b00b      	add	sp, #44	; 0x2c
    a030:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf[sizeof(buf) - 1] = '0';
    a032:	2230      	movs	r2, #48	; 0x30
    a034:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    a038:	2421      	movs	r4, #33	; 0x21
    a03a:	e7e7      	b.n	a00c <_ZN5Print11printNumberEmhh+0x3c>
		return write((uint8_t)n);
    a03c:	6803      	ldr	r3, [r0, #0]
    a03e:	b2c9      	uxtb	r1, r1
    a040:	681b      	ldr	r3, [r3, #0]
    a042:	4798      	blx	r3
}
    a044:	b00b      	add	sp, #44	; 0x2c
    a046:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a048 <_ZN13IntervalTimerD1Ev>:
public:
	IntervalTimer() {
		channel = NULL;
		nvic_priority = 128;
	}
	~IntervalTimer() {
    a048:	b510      	push	{r4, lr}
    a04a:	4604      	mov	r4, r0
		end();
    a04c:	f7ff ff54 	bl	9ef8 <_ZN13IntervalTimer3endEv>
	}
    a050:	4620      	mov	r0, r4
    a052:	bd10      	pop	{r4, pc}

0000a054 <_GLOBAL__sub_I_tone_timer>:
		tone_timer.end();
		TONE_CLEAR_PIN; // clear
		tone_pin = 255;
	}
	__enable_irq();
}
    a054:	b430      	push	{r4, r5}
		channel = NULL;
    a056:	4b05      	ldr	r3, [pc, #20]	; (a06c <_GLOBAL__sub_I_tone_timer+0x18>)
IntervalTimer tone_timer;
    a058:	4905      	ldr	r1, [pc, #20]	; (a070 <_GLOBAL__sub_I_tone_timer+0x1c>)
    a05a:	4a06      	ldr	r2, [pc, #24]	; (a074 <_GLOBAL__sub_I_tone_timer+0x20>)
		nvic_priority = 128;
    a05c:	2480      	movs	r4, #128	; 0x80
		channel = NULL;
    a05e:	2500      	movs	r5, #0
		nvic_priority = 128;
    a060:	711c      	strb	r4, [r3, #4]
		channel = NULL;
    a062:	601d      	str	r5, [r3, #0]
    a064:	4618      	mov	r0, r3
}
    a066:	bc30      	pop	{r4, r5}
IntervalTimer tone_timer;
    a068:	f003 bd24 	b.w	dab4 <__aeabi_atexit>
    a06c:	20002744 	.word	0x20002744
    a070:	0000a049 	.word	0x0000a049
    a074:	20000c80 	.word	0x20000c80

0000a078 <_Z10randomSeedm>:

static uint32_t seed;

void randomSeed(uint32_t newseed)
{
	if (newseed > 0) seed = newseed;
    a078:	b108      	cbz	r0, a07e <_Z10randomSeedm+0x6>
    a07a:	4b01      	ldr	r3, [pc, #4]	; (a080 <_Z10randomSeedm+0x8>)
    a07c:	6018      	str	r0, [r3, #0]
    a07e:	4770      	bx	lr
    a080:	2000274c 	.word	0x2000274c

0000a084 <_Z6randomm>:
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
{
    a084:	b470      	push	{r4, r5, r6}
	if (howbig == 0) return 0;
    a086:	b140      	cbz	r0, a09a <_Z6randomm+0x16>
	x = seed;
    a088:	4910      	ldr	r1, [pc, #64]	; (a0cc <_Z6randomm+0x48>)
    a08a:	680a      	ldr	r2, [r1, #0]
	if (x == 0) x = 123459876;
    a08c:	b93a      	cbnz	r2, a09e <_Z6randomm+0x1a>
    a08e:	4b10      	ldr	r3, [pc, #64]	; (a0d0 <_Z6randomm+0x4c>)
	return random() % howbig;
    a090:	fbb3 f2f0 	udiv	r2, r3, r0
	seed = x;
    a094:	600b      	str	r3, [r1, #0]
	return random() % howbig;
    a096:	fb00 3012 	mls	r0, r0, r2, r3
}
    a09a:	bc70      	pop	{r4, r5, r6}
    a09c:	4770      	bx	lr
	lo = x % 127773;
    a09e:	4c0d      	ldr	r4, [pc, #52]	; (a0d4 <_Z6randomm+0x50>)
    a0a0:	4b0d      	ldr	r3, [pc, #52]	; (a0d8 <_Z6randomm+0x54>)
	x = 16807 * lo - 2836 * hi;
    a0a2:	4d0e      	ldr	r5, [pc, #56]	; (a0dc <_Z6randomm+0x58>)
	lo = x % 127773;
    a0a4:	fb84 6402 	smull	r6, r4, r4, r2
    a0a8:	4414      	add	r4, r2
    a0aa:	17d6      	asrs	r6, r2, #31
    a0ac:	ebc6 4424 	rsb	r4, r6, r4, asr #16
    a0b0:	fb03 2214 	mls	r2, r3, r4, r2
	x = 16807 * lo - 2836 * hi;
    a0b4:	fb05 f404 	mul.w	r4, r5, r4
    a0b8:	f244 13a7 	movw	r3, #16807	; 0x41a7
    a0bc:	fb03 4302 	mla	r3, r3, r2, r4
	if (x < 0) x += 0x7FFFFFFF;
    a0c0:	2b00      	cmp	r3, #0
    a0c2:	dae5      	bge.n	a090 <_Z6randomm+0xc>
    a0c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    a0c8:	3b01      	subs	r3, #1
    a0ca:	e7e1      	b.n	a090 <_Z6randomm+0xc>
    a0cc:	2000274c 	.word	0x2000274c
    a0d0:	1f0cce42 	.word	0x1f0cce42
    a0d4:	834e0b5f 	.word	0x834e0b5f
    a0d8:	0001f31d 	.word	0x0001f31d
    a0dc:	fffff4ec 	.word	0xfffff4ec

0000a0e0 <_Z6randomll>:

int32_t random(int32_t howsmall, int32_t howbig)
{
	if (howsmall >= howbig) return howsmall;
    a0e0:	4288      	cmp	r0, r1
{
    a0e2:	b510      	push	{r4, lr}
    a0e4:	4604      	mov	r4, r0
	if (howsmall >= howbig) return howsmall;
    a0e6:	db00      	blt.n	a0ea <_Z6randomll+0xa>
	int32_t diff = howbig - howsmall;
	return random(diff) + howsmall;
}
    a0e8:	bd10      	pop	{r4, pc}
	return random(diff) + howsmall;
    a0ea:	1a08      	subs	r0, r1, r0
    a0ec:	f7ff ffca 	bl	a084 <_Z6randomm>
    a0f0:	4420      	add	r0, r4
    a0f2:	bd10      	pop	{r4, pc}

0000a0f4 <_Z3maplllll>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    a0f4:	b410      	push	{r4}
    a0f6:	9c01      	ldr	r4, [sp, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    a0f8:	1a40      	subs	r0, r0, r1
    a0fa:	1ae4      	subs	r4, r4, r3
    a0fc:	fb04 f000 	mul.w	r0, r4, r0
    a100:	1a52      	subs	r2, r2, r1
    a102:	fb90 f0f2 	sdiv	r0, r0, r2
}
    a106:	4418      	add	r0, r3
    a108:	f85d 4b04 	ldr.w	r4, [sp], #4
    a10c:	4770      	bx	lr
    a10e:	bf00      	nop

0000a110 <main>:
#include "WProgram.h"

extern "C" int main(void)
{
    a110:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    a112:	f7fa fff9 	bl	5108 <setup>
	while (1) {
		loop();
    a116:	f7fc f851 	bl	61bc <loop>
		yield();
    a11a:	f000 f821 	bl	a160 <yield>
    a11e:	e7fa      	b.n	a116 <main+0x6>

0000a120 <_ZN16usb_seremu_class9availableEv>:
class usb_seremu_class : public Stream
{
public:
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
    a120:	f7ff ba36 	b.w	9590 <usb_seremu_available>

0000a124 <_ZN16usb_seremu_class4readEv>:
        virtual int read() { return usb_seremu_getchar(); }
    a124:	f7ff b9ea 	b.w	94fc <usb_seremu_getchar>

0000a128 <_ZN16usb_seremu_class4peekEv>:
        virtual int peek() { return usb_seremu_peekchar(); }
    a128:	f7ff ba12 	b.w	9550 <usb_seremu_peekchar>

0000a12c <_ZN16usb_seremu_class5flushEv>:
        virtual void flush() { usb_seremu_flush_output(); }
    a12c:	f7ff baf0 	b.w	9710 <usb_seremu_flush_output>

0000a130 <_ZN16usb_seremu_class5writeEh>:
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
    a130:	4608      	mov	r0, r1
    a132:	f7ff bae1 	b.w	96f8 <usb_seremu_putchar>
    a136:	bf00      	nop

0000a138 <_ZN16usb_seremu_class5writeEPKhj>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
    a138:	4608      	mov	r0, r1
    a13a:	4611      	mov	r1, r2
    a13c:	f7ff ba58 	b.w	95f0 <usb_seremu_write>

0000a140 <_Z11serialEventv>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    a140:	4770      	bx	lr
    a142:	bf00      	nop

0000a144 <_GLOBAL__sub_I_usbMIDI>:
	Print() : write_error(0) {}
    a144:	4b04      	ldr	r3, [pc, #16]	; (a158 <_GLOBAL__sub_I_usbMIDI+0x14>)
class usb_seremu_class : public Stream
    a146:	4a05      	ldr	r2, [pc, #20]	; (a15c <_GLOBAL__sub_I_usbMIDI+0x18>)
    a148:	601a      	str	r2, [r3, #0]
    a14a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a14e:	2200      	movs	r2, #0
    a150:	6099      	str	r1, [r3, #8]
    a152:	711a      	strb	r2, [r3, #4]
    a154:	731a      	strb	r2, [r3, #12]
    a156:	4770      	bx	lr
    a158:	20002750 	.word	0x20002750
    a15c:	00011df8 	.word	0x00011df8

0000a160 <yield>:
#include "usb_serial.h"
#include "usb_seremu.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a160:	b510      	push	{r4, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    a162:	4c15      	ldr	r4, [pc, #84]	; (a1b8 <yield+0x58>)
    a164:	7823      	ldrb	r3, [r4, #0]
    a166:	b103      	cbz	r3, a16a <yield+0xa>
    a168:	bd10      	pop	{r4, pc}
	running = 1;
    a16a:	2301      	movs	r3, #1
    a16c:	7023      	strb	r3, [r4, #0]
        virtual int available() { return usb_seremu_available(); }
    a16e:	f7ff fa0f 	bl	9590 <usb_seremu_available>
	if (Serial.available()) serialEvent();
    a172:	b958      	cbnz	r0, a18c <yield+0x2c>
	virtual int available(void)     { return serial_available(); }
    a174:	f7fd fa92 	bl	769c <serial_available>
	if (Serial1.available()) serialEvent1();
    a178:	b970      	cbnz	r0, a198 <yield+0x38>
	virtual int available(void)     { return serial2_available(); }
    a17a:	f7fd fe3d 	bl	7df8 <serial2_available>
	if (Serial2.available()) serialEvent2();
    a17e:	b988      	cbnz	r0, a1a4 <yield+0x44>
	virtual int available(void)     { return serial3_available(); }
    a180:	f7fe f90c 	bl	839c <serial3_available>
	if (Serial3.available()) serialEvent3();
    a184:	b9a0      	cbnz	r0, a1b0 <yield+0x50>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    a186:	2300      	movs	r3, #0
    a188:	7023      	strb	r3, [r4, #0]
    a18a:	bd10      	pop	{r4, pc}
	if (Serial.available()) serialEvent();
    a18c:	f7ff ffd8 	bl	a140 <_Z11serialEventv>
	virtual int available(void)     { return serial_available(); }
    a190:	f7fd fa84 	bl	769c <serial_available>
	if (Serial1.available()) serialEvent1();
    a194:	2800      	cmp	r0, #0
    a196:	d0f0      	beq.n	a17a <yield+0x1a>
    a198:	f7ff fd5e 	bl	9c58 <_Z12serialEvent1v>
	virtual int available(void)     { return serial2_available(); }
    a19c:	f7fd fe2c 	bl	7df8 <serial2_available>
	if (Serial2.available()) serialEvent2();
    a1a0:	2800      	cmp	r0, #0
    a1a2:	d0ed      	beq.n	a180 <yield+0x20>
    a1a4:	f7ff fde4 	bl	9d70 <_Z12serialEvent2v>
	virtual int available(void)     { return serial3_available(); }
    a1a8:	f7fe f8f8 	bl	839c <serial3_available>
	if (Serial3.available()) serialEvent3();
    a1ac:	2800      	cmp	r0, #0
    a1ae:	d0ea      	beq.n	a186 <yield+0x26>
    a1b0:	f7ff fe6a 	bl	9e88 <_Z12serialEvent3v>
    a1b4:	e7e7      	b.n	a186 <yield+0x26>
    a1b6:	bf00      	nop
    a1b8:	20002760 	.word	0x20002760

0000a1bc <_ZN16AudioAnalyzePeak6updateEv>:
 */

#include "analyze_peak.h"

void AudioAnalyzePeak::update(void)
{
    a1bc:	b570      	push	{r4, r5, r6, lr}
	audio_block_t *block;
	const int16_t *p, *end;
	int32_t min, max;

	block = receiveReadOnly();
    a1be:	2100      	movs	r1, #0
{
    a1c0:	4606      	mov	r6, r0
	block = receiveReadOnly();
    a1c2:	f7ff fb9b 	bl	98fc <_ZN11AudioStream15receiveReadOnlyEj>
	if (!block) {
    a1c6:	b1c0      	cbz	r0, a1fa <_ZN16AudioAnalyzePeak6updateEv+0x3e>
		return;
	}
	p = block->data;
	end = p + AUDIO_BLOCK_SAMPLES;
	min = min_sample;
    a1c8:	f9b6 401e 	ldrsh.w	r4, [r6, #30]
	max = max_sample;
    a1cc:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
	p = block->data;
    a1d0:	1d03      	adds	r3, r0, #4
	end = p + AUDIO_BLOCK_SAMPLES;
    a1d2:	f500 7582 	add.w	r5, r0, #260	; 0x104
	do {
		int16_t d=*p++;
		// TODO: can we speed this up with SSUB16 and SEL
		// http://www.m4-unleashed.com/parallel-comparison/
		if (d<min) min=d;
    a1d6:	f933 2b02 	ldrsh.w	r2, [r3], #2
    a1da:	4294      	cmp	r4, r2
    a1dc:	bfa8      	it	ge
    a1de:	4614      	movge	r4, r2
    a1e0:	4291      	cmp	r1, r2
    a1e2:	bfb8      	it	lt
    a1e4:	4611      	movlt	r1, r2
	do {
    a1e6:	429d      	cmp	r5, r3
    a1e8:	d8f5      	bhi.n	a1d6 <_ZN16AudioAnalyzePeak6updateEv+0x1a>
		if (d>max) max=d;
	} while (p < end);
	min_sample = min;
	max_sample = max;
	new_output = true;
    a1ea:	2301      	movs	r3, #1
	min_sample = min;
    a1ec:	83f4      	strh	r4, [r6, #30]
	max_sample = max;
    a1ee:	8431      	strh	r1, [r6, #32]
	new_output = true;
    a1f0:	7733      	strb	r3, [r6, #28]
	release(block);
}
    a1f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	release(block);
    a1f6:	f7ff bb43 	b.w	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
    a1fa:	bd70      	pop	{r4, r5, r6, pc}

0000a1fc <_ZN21AudioEffectBitcrusher6updateEv>:
 */

#include "effect_bitcrusher.h"

void AudioEffectBitcrusher::update(void)
{
    a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	audio_block_t *block;
	uint32_t i;
	uint32_t sampleSquidge, sampleSqueeze; //squidge is bitdepth, squeeze is for samplerate
			
	if (crushBits == 16 && sampleStep <= 1) {
    a1fe:	7e03      	ldrb	r3, [r0, #24]
    a200:	2b10      	cmp	r3, #16
{
    a202:	4604      	mov	r4, r0
	if (crushBits == 16 && sampleStep <= 1) {
    a204:	d04b      	beq.n	a29e <_ZN21AudioEffectBitcrusher6updateEv+0xa2>
		release(block);
		return;
	}
	// start of processing functions. Could be more elegant based on external
	// functions but left like this to enable code optimisation later.
	block = receiveWritable();
    a206:	4620      	mov	r0, r4
    a208:	2100      	movs	r1, #0
    a20a:	f7ff fb83 	bl	9914 <_ZN11AudioStream15receiveWritableEj>
	if (!block) return;
    a20e:	4607      	mov	r7, r0
    a210:	2800      	cmp	r0, #0
    a212:	d06d      	beq.n	a2f0 <_ZN21AudioEffectBitcrusher6updateEv+0xf4>

	if (sampleStep <= 1) { //no sample rate mods, just crush the bitdepth.
    a214:	7e62      	ldrb	r2, [r4, #25]
    a216:	2a01      	cmp	r2, #1
    a218:	d928      	bls.n	a26c <_ZN21AudioEffectBitcrusher6updateEv+0x70>
			sampleSquidge = block->data[i] >> (16-crushBits);
			// shift bits left again to regain the volume level.
			// fills with zeroes.
		 	block->data[i] = sampleSquidge << (16-crushBits);
		}
	} else if (crushBits == 16) { //bitcrusher not being used, samplerate mods only.
    a21a:	7e23      	ldrb	r3, [r4, #24]
    a21c:	2b10      	cmp	r3, #16
    a21e:	d050      	beq.n	a2c2 <_ZN21AudioEffectBitcrusher6updateEv+0xc6>
    a220:	2100      	movs	r1, #0
	} else {           //both being used. crush those bits and mash those samples.
		i=0;
		while (i < AUDIO_BLOCK_SAMPLES) {
			// save the root sample. this will pick up a root sample
			// every _sampleStep_ samples.
			sampleSqueeze = block->data[i];
    a222:	eb07 0341 	add.w	r3, r7, r1, lsl #1
    a226:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
			for (int j = 0; j < sampleStep && i < AUDIO_BLOCK_SAMPLES; j++) {
    a22a:	b1ea      	cbz	r2, a268 <_ZN21AudioEffectBitcrusher6updateEv+0x6c>
    a22c:	2980      	cmp	r1, #128	; 0x80
    a22e:	d02c      	beq.n	a28a <_ZN21AudioEffectBitcrusher6updateEv+0x8e>
    a230:	1c9d      	adds	r5, r3, #2
    a232:	460b      	mov	r3, r1
    a234:	e001      	b.n	a23a <_ZN21AudioEffectBitcrusher6updateEv+0x3e>
    a236:	2b80      	cmp	r3, #128	; 0x80
    a238:	d027      	beq.n	a28a <_ZN21AudioEffectBitcrusher6updateEv+0x8e>
 				// shift bits right to cut off fine detail sampleSquidge
				// is a uint32 so sign extension will not occur, fills
				// with zeroes.
				sampleSquidge = sampleSqueeze >> (16-crushBits);
    a23a:	7e22      	ldrb	r2, [r4, #24]
    a23c:	f1c2 0210 	rsb	r2, r2, #16
    a240:	fa20 f602 	lsr.w	r6, r0, r2
 				// shift bits left again to regain the volume level.
				// fills with zeroes. paste into buffer sample +
				// sampleStep offset.
				block->data[i] = sampleSquidge << (16-crushBits);
    a244:	fa06 f202 	lsl.w	r2, r6, r2
    a248:	f825 2f02 	strh.w	r2, [r5, #2]!
				i++;
    a24c:	3301      	adds	r3, #1
			for (int j = 0; j < sampleStep && i < AUDIO_BLOCK_SAMPLES; j++) {
    a24e:	7e62      	ldrb	r2, [r4, #25]
    a250:	1a5e      	subs	r6, r3, r1
    a252:	4296      	cmp	r6, r2
    a254:	dbef      	blt.n	a236 <_ZN21AudioEffectBitcrusher6updateEv+0x3a>
		while (i < AUDIO_BLOCK_SAMPLES) {
    a256:	2b80      	cmp	r3, #128	; 0x80
    a258:	d017      	beq.n	a28a <_ZN21AudioEffectBitcrusher6updateEv+0x8e>
    a25a:	4619      	mov	r1, r3
			sampleSqueeze = block->data[i];
    a25c:	eb07 0341 	add.w	r3, r7, r1, lsl #1
    a260:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
			for (int j = 0; j < sampleStep && i < AUDIO_BLOCK_SAMPLES; j++) {
    a264:	2a00      	cmp	r2, #0
    a266:	d1e1      	bne.n	a22c <_ZN21AudioEffectBitcrusher6updateEv+0x30>
    a268:	460b      	mov	r3, r1
    a26a:	e7f4      	b.n	a256 <_ZN21AudioEffectBitcrusher6updateEv+0x5a>
	if (sampleStep <= 1) { //no sample rate mods, just crush the bitdepth.
    a26c:	2300      	movs	r3, #0
    a26e:	18fa      	adds	r2, r7, r3
			sampleSquidge = block->data[i] >> (16-crushBits);
    a270:	7e21      	ldrb	r1, [r4, #24]
    a272:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
    a276:	f1c1 0110 	rsb	r1, r1, #16
    a27a:	4108      	asrs	r0, r1
    a27c:	3302      	adds	r3, #2
		 	block->data[i] = sampleSquidge << (16-crushBits);
    a27e:	fa00 f101 	lsl.w	r1, r0, r1
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    a282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
		 	block->data[i] = sampleSquidge << (16-crushBits);
    a286:	8091      	strh	r1, [r2, #4]
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    a288:	d1f1      	bne.n	a26e <_ZN21AudioEffectBitcrusher6updateEv+0x72>
			}
		}
	}
	transmit(block);
    a28a:	4620      	mov	r0, r4
    a28c:	4639      	mov	r1, r7
    a28e:	2200      	movs	r2, #0
    a290:	f7ff fb1a 	bl	98c8 <_ZN11AudioStream8transmitEP18audio_block_structh>
	release(block);
    a294:	4638      	mov	r0, r7
}
    a296:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	release(block);
    a29a:	f7ff baf1 	b.w	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
	if (crushBits == 16 && sampleStep <= 1) {
    a29e:	7e43      	ldrb	r3, [r0, #25]
    a2a0:	2b01      	cmp	r3, #1
    a2a2:	d8b0      	bhi.n	a206 <_ZN21AudioEffectBitcrusher6updateEv+0xa>
		block = receiveReadOnly();
    a2a4:	2100      	movs	r1, #0
    a2a6:	f7ff fb29 	bl	98fc <_ZN11AudioStream15receiveReadOnlyEj>
		if (!block) return;
    a2aa:	4605      	mov	r5, r0
    a2ac:	b300      	cbz	r0, a2f0 <_ZN21AudioEffectBitcrusher6updateEv+0xf4>
		transmit(block);
    a2ae:	4620      	mov	r0, r4
    a2b0:	4629      	mov	r1, r5
    a2b2:	2200      	movs	r2, #0
    a2b4:	f7ff fb08 	bl	98c8 <_ZN11AudioStream8transmitEP18audio_block_structh>
		release(block);
    a2b8:	4628      	mov	r0, r5
}
    a2ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		release(block);
    a2be:	f7ff badf 	b.w	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
	} else if (crushBits == 16) { //bitcrusher not being used, samplerate mods only.
    a2c2:	2500      	movs	r5, #0
			sampleSqueeze = block->data[i];
    a2c4:	eb07 0345 	add.w	r3, r7, r5, lsl #1
    a2c8:	889e      	ldrh	r6, [r3, #4]
			for (int j = 0; j < sampleStep && i < AUDIO_BLOCK_SAMPLES; j++) {
    a2ca:	b192      	cbz	r2, a2f2 <_ZN21AudioEffectBitcrusher6updateEv+0xf6>
    a2cc:	2d80      	cmp	r5, #128	; 0x80
    a2ce:	d0dc      	beq.n	a28a <_ZN21AudioEffectBitcrusher6updateEv+0x8e>
    a2d0:	1c99      	adds	r1, r3, #2
    a2d2:	462b      	mov	r3, r5
    a2d4:	e001      	b.n	a2da <_ZN21AudioEffectBitcrusher6updateEv+0xde>
    a2d6:	2b80      	cmp	r3, #128	; 0x80
    a2d8:	d0d7      	beq.n	a28a <_ZN21AudioEffectBitcrusher6updateEv+0x8e>
				block->data[i] = sampleSqueeze;
    a2da:	f821 6f02 	strh.w	r6, [r1, #2]!
				i++;
    a2de:	3301      	adds	r3, #1
			for (int j = 0; j < sampleStep && i < AUDIO_BLOCK_SAMPLES; j++) {
    a2e0:	7e62      	ldrb	r2, [r4, #25]
    a2e2:	1b58      	subs	r0, r3, r5
    a2e4:	4282      	cmp	r2, r0
    a2e6:	dcf6      	bgt.n	a2d6 <_ZN21AudioEffectBitcrusher6updateEv+0xda>
		while (i < AUDIO_BLOCK_SAMPLES) {
    a2e8:	2b80      	cmp	r3, #128	; 0x80
    a2ea:	d0ce      	beq.n	a28a <_ZN21AudioEffectBitcrusher6updateEv+0x8e>
    a2ec:	461d      	mov	r5, r3
    a2ee:	e7e9      	b.n	a2c4 <_ZN21AudioEffectBitcrusher6updateEv+0xc8>
    a2f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			for (int j = 0; j < sampleStep && i < AUDIO_BLOCK_SAMPLES; j++) {
    a2f2:	462b      	mov	r3, r5
    a2f4:	e7f8      	b.n	a2e8 <_ZN21AudioEffectBitcrusher6updateEv+0xec>
    a2f6:	bf00      	nop

0000a2f8 <_ZN16AudioEffectDelay6updateEv>:
 */

#include "effect_delay.h"

void AudioEffectDelay::update(void)
{
    a2f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t head, tail, count, channel, index, prev, offset;
	const int16_t *src, *end;
	int16_t *dst;

	// grab incoming data and put it into the queue
	head = headindex;
    a2fc:	7e47      	ldrb	r7, [r0, #25]
	tail = tailindex;
    a2fe:	7e84      	ldrb	r4, [r0, #26]
	if (++head >= DELAY_QUEUE_SIZE) head = 0;
    a300:	3701      	adds	r7, #1
    a302:	2f74      	cmp	r7, #116	; 0x74
    a304:	bf86      	itte	hi
    a306:	2500      	movhi	r5, #0
    a308:	462f      	movhi	r7, r5
    a30a:	b2fd      	uxtbls	r5, r7
	if (head == tail) {
    a30c:	42a7      	cmp	r7, r4
{
    a30e:	4606      	mov	r6, r0
	if (head == tail) {
    a310:	f000 808e 	beq.w	a430 <_ZN16AudioEffectDelay6updateEv+0x138>
		release(queue[tail]);
		if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
	}
	queue[head] = receiveReadOnly();
    a314:	4630      	mov	r0, r6
    a316:	2100      	movs	r1, #0
    a318:	f7ff faf0 	bl	98fc <_ZN11AudioStream15receiveReadOnlyEj>
    a31c:	eb06 0387 	add.w	r3, r6, r7, lsl #2
	//		digitalWriteFast(2, LOW);
	//	}
	//}

	// discard unneeded blocks from the queue
	if (head >= tail) {
    a320:	42a7      	cmp	r7, r4
	queue[head] = receiveReadOnly();
    a322:	62d8      	str	r0, [r3, #44]	; 0x2c
	headindex = head;
    a324:	7675      	strb	r5, [r6, #25]
	if (head >= tail) {
    a326:	f080 8095 	bcs.w	a454 <_ZN16AudioEffectDelay6updateEv+0x15c>
		count = head - tail;
	} else {
		count = DELAY_QUEUE_SIZE + head - tail;
    a32a:	f107 0575 	add.w	r5, r7, #117	; 0x75
    a32e:	1b2d      	subs	r5, r5, r4
	}
	if (count > maxblocks) {
    a330:	7ef3      	ldrb	r3, [r6, #27]
    a332:	429d      	cmp	r5, r3
    a334:	d910      	bls.n	a358 <_ZN16AudioEffectDelay6updateEv+0x60>
		count -= maxblocks;
    a336:	1aed      	subs	r5, r5, r3
		do {
			release(queue[tail]);
			queue[tail] = NULL;
    a338:	f04f 0900 	mov.w	r9, #0
    a33c:	eb06 0884 	add.w	r8, r6, r4, lsl #2
			if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
    a340:	3401      	adds	r4, #1
			release(queue[tail]);
    a342:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
    a346:	f7ff fa9b 	bl	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
			if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
    a34a:	2c75      	cmp	r4, #117	; 0x75
    a34c:	bf28      	it	cs
    a34e:	2400      	movcs	r4, #0
		do {
    a350:	3d01      	subs	r5, #1
			queue[tail] = NULL;
    a352:	f8c8 902c 	str.w	r9, [r8, #44]	; 0x2c
		do {
    a356:	d1f1      	bne.n	a33c <_ZN16AudioEffectDelay6updateEv+0x44>
		} while (--count > 0);
	}
	tailindex = tail;

	// transmit the delayed outputs using queue data
	for (channel = 0; channel < 8; channel++) {
    a358:	2500      	movs	r5, #0
	tailindex = tail;
    a35a:	76b4      	strb	r4, [r6, #26]
				while (dst < end) {
					*dst++ = *src++; // TODO: optimize
				}
			} else {
				while (dst < end) {
					*dst++ = 0;
    a35c:	46a8      	mov	r8, r5
    a35e:	4634      	mov	r4, r6
    a360:	e00d      	b.n	a37e <_ZN16AudioEffectDelay6updateEv+0x86>
			if (queue[index]) {
    a362:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
    a366:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
    a36a:	b119      	cbz	r1, a374 <_ZN16AudioEffectDelay6updateEv+0x7c>
				transmit(queue[index], channel);
    a36c:	4630      	mov	r0, r6
    a36e:	b2ea      	uxtb	r2, r5
    a370:	f7ff faaa 	bl	98c8 <_ZN11AudioStream8transmitEP18audio_block_structh>
	for (channel = 0; channel < 8; channel++) {
    a374:	3501      	adds	r5, #1
    a376:	2d08      	cmp	r5, #8
    a378:	f104 0402 	add.w	r4, r4, #2
    a37c:	d056      	beq.n	a42c <_ZN16AudioEffectDelay6updateEv+0x134>
		if (!(activemask & (1<<channel))) continue;
    a37e:	7e33      	ldrb	r3, [r6, #24]
    a380:	412b      	asrs	r3, r5
    a382:	07db      	lsls	r3, r3, #31
    a384:	d5f6      	bpl.n	a374 <_ZN16AudioEffectDelay6updateEv+0x7c>
		index =  position[channel] / AUDIO_BLOCK_SAMPLES;
    a386:	8ba3      	ldrh	r3, [r4, #28]
    a388:	09da      	lsrs	r2, r3, #7
		if (head >= index) {
    a38a:	4297      	cmp	r7, r2
			index = DELAY_QUEUE_SIZE + head - index;
    a38c:	bf38      	it	cc
    a38e:	f107 0a75 	addcc.w	sl, r7, #117	; 0x75
		offset = position[channel] % AUDIO_BLOCK_SAMPLES;
    a392:	f003 0b7f 	and.w	fp, r3, #127	; 0x7f
			index = head - index;
    a396:	bf2c      	ite	cs
    a398:	ebc2 0a07 	rsbcs	sl, r2, r7
			index = DELAY_QUEUE_SIZE + head - index;
    a39c:	ebc2 0a0a 	rsbcc	sl, r2, sl
		if (offset == 0) {
    a3a0:	f1bb 0f00 	cmp.w	fp, #0
    a3a4:	d0dd      	beq.n	a362 <_ZN16AudioEffectDelay6updateEv+0x6a>
			output = allocate();
    a3a6:	f7ff fa21 	bl	97ec <_ZN11AudioStream8allocateEv>
			if (!output) continue;
    a3aa:	4681      	mov	r9, r0
    a3ac:	2800      	cmp	r0, #0
    a3ae:	d0e1      	beq.n	a374 <_ZN16AudioEffectDelay6updateEv+0x7c>
			dst = output->data;
    a3b0:	1d03      	adds	r3, r0, #4
			if (index > 0) {
    a3b2:	f1ba 0f00 	cmp.w	sl, #0
    a3b6:	d14f      	bne.n	a458 <_ZN16AudioEffectDelay6updateEv+0x160>
				prev = DELAY_QUEUE_SIZE-1;
    a3b8:	2274      	movs	r2, #116	; 0x74
			if (queue[prev]) {
    a3ba:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    a3be:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    a3c0:	2800      	cmp	r0, #0
    a3c2:	d050      	beq.n	a466 <_ZN16AudioEffectDelay6updateEv+0x16e>
				end = queue[prev]->data + AUDIO_BLOCK_SAMPLES;
    a3c4:	f500 7082 	add.w	r0, r0, #260	; 0x104
				src = end - offset;
    a3c8:	eba0 0b4b 	sub.w	fp, r0, fp, lsl #1
				while (src < end) {
    a3cc:	4558      	cmp	r0, fp
    a3ce:	d90e      	bls.n	a3ee <_ZN16AudioEffectDelay6updateEv+0xf6>
			dst = output->data;
    a3d0:	469e      	mov	lr, r3
				while (src < end) {
    a3d2:	465a      	mov	r2, fp
					*dst++ = *src++; // TODO: optimize
    a3d4:	f832 1b02 	ldrh.w	r1, [r2], #2
    a3d8:	f82e 1b02 	strh.w	r1, [lr], #2
				while (src < end) {
    a3dc:	4290      	cmp	r0, r2
    a3de:	d8f9      	bhi.n	a3d4 <_ZN16AudioEffectDelay6updateEv+0xdc>
    a3e0:	ea6f 0b0b 	mvn.w	fp, fp
    a3e4:	4458      	add	r0, fp
    a3e6:	f020 0001 	bic.w	r0, r0, #1
    a3ea:	3002      	adds	r0, #2
    a3ec:	4403      	add	r3, r0
			if (queue[index]) {
    a3ee:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
			end = output->data + AUDIO_BLOCK_SAMPLES;
    a3f2:	f509 7082 	add.w	r0, r9, #260	; 0x104
			if (queue[index]) {
    a3f6:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
    a3fa:	2a00      	cmp	r2, #0
    a3fc:	d04b      	beq.n	a496 <_ZN16AudioEffectDelay6updateEv+0x19e>
				while (dst < end) {
    a3fe:	4283      	cmp	r3, r0
				src = queue[index]->data;
    a400:	f102 0204 	add.w	r2, r2, #4
				while (dst < end) {
    a404:	d205      	bcs.n	a412 <_ZN16AudioEffectDelay6updateEv+0x11a>
					*dst++ = *src++; // TODO: optimize
    a406:	f832 1b02 	ldrh.w	r1, [r2], #2
    a40a:	f823 1b02 	strh.w	r1, [r3], #2
				while (dst < end) {
    a40e:	4298      	cmp	r0, r3
    a410:	d8f9      	bhi.n	a406 <_ZN16AudioEffectDelay6updateEv+0x10e>
				}
			}
			transmit(output, channel);
    a412:	b2ea      	uxtb	r2, r5
    a414:	4630      	mov	r0, r6
    a416:	4649      	mov	r1, r9
    a418:	f7ff fa56 	bl	98c8 <_ZN11AudioStream8transmitEP18audio_block_structh>
	for (channel = 0; channel < 8; channel++) {
    a41c:	3501      	adds	r5, #1
			release(output);
    a41e:	4648      	mov	r0, r9
    a420:	f7ff fa2e 	bl	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
	for (channel = 0; channel < 8; channel++) {
    a424:	2d08      	cmp	r5, #8
    a426:	f104 0402 	add.w	r4, r4, #2
    a42a:	d1a8      	bne.n	a37e <_ZN16AudioEffectDelay6updateEv+0x86>
    a42c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a430:	eb00 0887 	add.w	r8, r0, r7, lsl #2
		if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
    a434:	1c7c      	adds	r4, r7, #1
		release(queue[tail]);
    a436:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
    a43a:	f7ff fa21 	bl	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
		if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
    a43e:	2c75      	cmp	r4, #117	; 0x75
    a440:	f47f af68 	bne.w	a314 <_ZN16AudioEffectDelay6updateEv+0x1c>
	queue[head] = receiveReadOnly();
    a444:	4630      	mov	r0, r6
    a446:	2100      	movs	r1, #0
    a448:	f7ff fa58 	bl	98fc <_ZN11AudioStream15receiveReadOnlyEj>
		if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
    a44c:	2400      	movs	r4, #0
	queue[head] = receiveReadOnly();
    a44e:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
	headindex = head;
    a452:	7675      	strb	r5, [r6, #25]
		count = head - tail;
    a454:	1b3d      	subs	r5, r7, r4
    a456:	e76b      	b.n	a330 <_ZN16AudioEffectDelay6updateEv+0x38>
				prev = index - 1;
    a458:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
			if (queue[prev]) {
    a45c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    a460:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    a462:	2800      	cmp	r0, #0
    a464:	d1ae      	bne.n	a3c4 <_ZN16AudioEffectDelay6updateEv+0xcc>
				end = dst + offset;
    a466:	eb03 0b4b 	add.w	fp, r3, fp, lsl #1
				while (dst < end) {
    a46a:	455b      	cmp	r3, fp
    a46c:	d2bf      	bcs.n	a3ee <_ZN16AudioEffectDelay6updateEv+0xf6>
    a46e:	461a      	mov	r2, r3
					*dst++ = 0;
    a470:	f822 8b02 	strh.w	r8, [r2], #2
				while (dst < end) {
    a474:	4593      	cmp	fp, r2
    a476:	d8fb      	bhi.n	a470 <_ZN16AudioEffectDelay6updateEv+0x178>
    a478:	ebc9 020b 	rsb	r2, r9, fp
    a47c:	3a05      	subs	r2, #5
    a47e:	f022 0201 	bic.w	r2, r2, #1
			if (queue[index]) {
    a482:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
    a486:	3202      	adds	r2, #2
    a488:	4413      	add	r3, r2
    a48a:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
			end = output->data + AUDIO_BLOCK_SAMPLES;
    a48e:	f509 7082 	add.w	r0, r9, #260	; 0x104
			if (queue[index]) {
    a492:	2a00      	cmp	r2, #0
    a494:	d1b3      	bne.n	a3fe <_ZN16AudioEffectDelay6updateEv+0x106>
				while (dst < end) {
    a496:	4283      	cmp	r3, r0
    a498:	d2bb      	bcs.n	a412 <_ZN16AudioEffectDelay6updateEv+0x11a>
					*dst++ = 0;
    a49a:	f823 8b02 	strh.w	r8, [r3], #2
				while (dst < end) {
    a49e:	4298      	cmp	r0, r3
    a4a0:	d8fb      	bhi.n	a49a <_ZN16AudioEffectDelay6updateEv+0x1a2>
    a4a2:	e7b6      	b.n	a412 <_ZN16AudioEffectDelay6updateEv+0x11a>

0000a4a4 <_ZN24AudioFilterStateVariable12update_fixedEPKsPsS2_S2_>:

#if defined(KINETISK)

void AudioFilterStateVariable::update_fixed(const int16_t *in,
	int16_t *lp, int16_t *bp, int16_t *hp)
{
    a4a4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	int32_t lowpasstmp, bandpasstmp, highpasstmp;
	int32_t fmult, damp;

	fmult = setting_fmult;
	damp = setting_damp;
	inputprev = state_inputprev;
    a4a8:	6a85      	ldr	r5, [r0, #40]	; 0x28
	fmult = setting_fmult;
    a4aa:	69c7      	ldr	r7, [r0, #28]
	damp = setting_damp;
    a4ac:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
	lowpass = state_lowpass;
    a4b0:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
	bandpass = state_bandpass;
    a4b2:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
    a4b4:	b082      	sub	sp, #8
	bandpass = state_bandpass;
    a4b6:	46ab      	mov	fp, r5
{
    a4b8:	9001      	str	r0, [sp, #4]
	bandpass = state_bandpass;
    a4ba:	2000      	movs	r0, #0
    a4bc:	e000      	b.n	a4c0 <_ZN24AudioFilterStateVariable12update_fixedEPKsPsS2_S2_+0x1c>
	do {
		input = (*in++) << 12;
    a4be:	46e3      	mov	fp, ip
    a4c0:	f931 c000 	ldrsh.w	ip, [r1, r0]
    a4c4:	ea4f 3c0c 	mov.w	ip, ip, lsl #12
	asm volatile("smmulr %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    a4c8:	fb57 f814 	smmulr	r8, r7, r4
		lowpass = lowpass + MULT(fmult, bandpass);
    a4cc:	eb06 0888 	add.w	r8, r6, r8, lsl #2
    a4d0:	fb5a f614 	smmulr	r6, sl, r4
		highpass = ((input + inputprev)>>1) - lowpass - MULT(damp, bandpass);
    a4d4:	44e3      	add	fp, ip
    a4d6:	ebc8 0b6b 	rsb	fp, r8, fp, asr #1
    a4da:	ebab 0b86 	sub.w	fp, fp, r6, lsl #2
    a4de:	fb57 f51b 	smmulr	r5, r7, fp
		inputprev = input;
		bandpass = bandpass + MULT(fmult, highpass);
    a4e2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    a4e6:	fb57 f615 	smmulr	r6, r7, r5
		lowpasstmp = lowpass;
		bandpasstmp = bandpass;
		highpasstmp = highpass;
		lowpass = lowpass + MULT(fmult, bandpass);
    a4ea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
    a4ee:	fb5a f415 	smmulr	r4, sl, r5
		highpass = input - lowpass - MULT(damp, bandpass);
    a4f2:	ebc6 090c 	rsb	r9, r6, ip
    a4f6:	eba9 0984 	sub.w	r9, r9, r4, lsl #2
    a4fa:	fb57 f419 	smmulr	r4, r7, r9
		bandpass = bandpass + MULT(fmult, highpass);
    a4fe:	eb05 0484 	add.w	r4, r5, r4, lsl #2
		lowpasstmp = signed_saturate_rshift(lowpass+lowpasstmp, 16, 13);
    a502:	44b0      	add	r8, r6
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    a504:	f328 384f 	ssat	r8, #16, r8, asr #13
		bandpasstmp = signed_saturate_rshift(bandpass+bandpasstmp, 16, 13);
    a508:	4425      	add	r5, r4
    a50a:	f325 354f 	ssat	r5, #16, r5, asr #13
		highpasstmp = signed_saturate_rshift(highpass+highpasstmp, 16, 13);
    a50e:	44d9      	add	r9, fp
    a510:	f329 394f 	ssat	r9, #16, r9, asr #13
		*lp++ = lowpasstmp;
    a514:	f822 8000 	strh.w	r8, [r2, r0]
		*bp++ = bandpasstmp;
    a518:	521d      	strh	r5, [r3, r0]
		*hp++ = highpasstmp;
    a51a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    a51c:	f825 9000 	strh.w	r9, [r5, r0]
    a520:	3002      	adds	r0, #2
	do {
    a522:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    a526:	d1ca      	bne.n	a4be <_ZN24AudioFilterStateVariable12update_fixedEPKsPsS2_S2_+0x1a>
	} while (in < end);
	state_inputprev = inputprev;
    a528:	9801      	ldr	r0, [sp, #4]
    a52a:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
	state_lowpass = lowpass;
    a52e:	62c6      	str	r6, [r0, #44]	; 0x2c
	state_bandpass = bandpass;
    a530:	6304      	str	r4, [r0, #48]	; 0x30
}
    a532:	b002      	add	sp, #8
    a534:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    a538:	4770      	bx	lr
    a53a:	bf00      	nop

0000a53c <_ZN24AudioFilterStateVariable15update_variableEPKsS1_PsS2_S2_>:


void AudioFilterStateVariable::update_variable(const int16_t *in,
	const int16_t *ctl, int16_t *lp, int16_t *bp, int16_t *hp)
{
    a53c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    a540:	b084      	sub	sp, #16
    a542:	9003      	str	r0, [sp, #12]
	int32_t lowpasstmp, bandpasstmp, highpasstmp;
	int32_t fcenter, fmult, damp, octavemult;
	int32_t n;

	fcenter = setting_fcenter;
	octavemult = setting_octavemult;
    a544:	9e03      	ldr	r6, [sp, #12]
	fcenter = setting_fcenter;
    a546:	6980      	ldr	r0, [r0, #24]
    a548:	9001      	str	r0, [sp, #4]
	damp = setting_damp;
    a54a:	9803      	ldr	r0, [sp, #12]
	octavemult = setting_octavemult;
    a54c:	6a36      	ldr	r6, [r6, #32]
	damp = setting_damp;
    a54e:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
	inputprev = state_inputprev;
    a552:	6a85      	ldr	r5, [r0, #40]	; 0x28
	lowpass = state_lowpass;
    a554:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	bandpass = state_bandpass;
    a556:	6b04      	ldr	r4, [r0, #48]	; 0x30
	octavemult = setting_octavemult;
    a558:	9602      	str	r6, [sp, #8]
	bandpass = state_bandpass;
    a55a:	2000      	movs	r0, #0
    a55c:	9300      	str	r3, [sp, #0]
    a55e:	e000      	b.n	a562 <_ZN24AudioFilterStateVariable15update_variableEPKsS1_PsS2_S2_+0x26>
			multiply_32x32_rshift32_rounded(
			multiply_32x32_rshift32_rounded(fmult, fmult),
			multiply_32x32_rshift32_rounded(fmult, -1383276101))) << 1;
		#endif
		// now do the state variable filter as normal, using fmult
		input = (*in++) << 12;
    a560:	4665      	mov	r5, ip
		control = *ctl++;          // signal is always 15 fractional bits
    a562:	f932 c000 	ldrsh.w	ip, [r2, r0]
		control *= octavemult;     // octavemult range: 0 to 28671 (12 frac bits)
    a566:	9e02      	ldr	r6, [sp, #8]
    a568:	fb06 fc0c 	mul.w	ip, r6, ip
		n = control & 0x7FFFFFF;   // 27 fractional control bits
    a56c:	f02c 4878 	bic.w	r8, ip, #4160749568	; 0xf8000000
		n = (n + 134217728) << 3;
    a570:	f108 6800 	add.w	r8, r8, #134217728	; 0x8000000
    a574:	ea4f 08c8 	mov.w	r8, r8, lsl #3
	asm volatile("smmulr %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    a578:	fb58 f818 	smmulr	r8, r8, r8
    a57c:	4b2a      	ldr	r3, [pc, #168]	; (a628 <_ZN24AudioFilterStateVariable15update_variableEPKsS1_PsS2_S2_+0xec>)
    a57e:	fb58 f813 	smmulr	r8, r8, r3
		n = n + 715827882;
    a582:	4e2a      	ldr	r6, [pc, #168]	; (a62c <_ZN24AudioFilterStateVariable15update_variableEPKsS1_PsS2_S2_+0xf0>)
    a584:	9b01      	ldr	r3, [sp, #4]
		n = multiply_32x32_rshift32_rounded(n, 715827883) << 3;
    a586:	ea4f 08c8 	mov.w	r8, r8, lsl #3
		n = n >> (6 - (control >> 27)); // 4 integer control bits
    a58a:	ea4f 6cec 	mov.w	ip, ip, asr #27
    a58e:	f1cc 0c06 	rsb	ip, ip, #6
		n = n + 715827882;
    a592:	4446      	add	r6, r8
		n = n >> (6 - (control >> 27)); // 4 integer control bits
    a594:	fa46 f60c 	asr.w	r6, r6, ip
    a598:	fb53 f616 	smmulr	r6, r3, r6
    a59c:	4b24      	ldr	r3, [pc, #144]	; (a630 <_ZN24AudioFilterStateVariable15update_variableEPKsS1_PsS2_S2_+0xf4>)
		input = (*in++) << 12;
    a59e:	f931 c000 	ldrsh.w	ip, [r1, r0]
    a5a2:	429e      	cmp	r6, r3
    a5a4:	bfa8      	it	ge
    a5a6:	461e      	movge	r6, r3
		fmult = fmult << 8;
    a5a8:	0236      	lsls	r6, r6, #8
		input = (*in++) << 12;
    a5aa:	ea4f 3c0c 	mov.w	ip, ip, lsl #12
    a5ae:	fb56 f814 	smmulr	r8, r6, r4
		lowpass = lowpass + MULT(fmult, bandpass);
    a5b2:	eb07 0888 	add.w	r8, r7, r8, lsl #2
    a5b6:	fb5a f714 	smmulr	r7, sl, r4
		highpass = ((input + inputprev)>>1) - lowpass - MULT(damp, bandpass);
    a5ba:	eb0c 0b05 	add.w	fp, ip, r5
    a5be:	ebc8 0b6b 	rsb	fp, r8, fp, asr #1
    a5c2:	ebab 0b87 	sub.w	fp, fp, r7, lsl #2
    a5c6:	fb56 f51b 	smmulr	r5, r6, fp
		inputprev = input;
		bandpass = bandpass + MULT(fmult, highpass);
    a5ca:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    a5ce:	fb56 f715 	smmulr	r7, r6, r5
		lowpasstmp = lowpass;
		bandpasstmp = bandpass;
		highpasstmp = highpass;
		lowpass = lowpass + MULT(fmult, bandpass);
    a5d2:	eb08 0787 	add.w	r7, r8, r7, lsl #2
    a5d6:	fb5a f415 	smmulr	r4, sl, r5
		highpass = input - lowpass - MULT(damp, bandpass);
    a5da:	ebc7 090c 	rsb	r9, r7, ip
    a5de:	eba9 0984 	sub.w	r9, r9, r4, lsl #2
    a5e2:	fb56 f419 	smmulr	r4, r6, r9
		bandpass = bandpass + MULT(fmult, highpass);
    a5e6:	eb05 0484 	add.w	r4, r5, r4, lsl #2
		lowpasstmp = signed_saturate_rshift(lowpass+lowpasstmp, 16, 13);
    a5ea:	44b8      	add	r8, r7
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    a5ec:	f328 384f 	ssat	r8, #16, r8, asr #13
		bandpasstmp = signed_saturate_rshift(bandpass+bandpasstmp, 16, 13);
    a5f0:	4425      	add	r5, r4
    a5f2:	f325 354f 	ssat	r5, #16, r5, asr #13
		highpasstmp = signed_saturate_rshift(highpass+highpasstmp, 16, 13);
    a5f6:	44d9      	add	r9, fp
    a5f8:	f329 394f 	ssat	r9, #16, r9, asr #13
		*lp++ = lowpasstmp;
    a5fc:	9e00      	ldr	r6, [sp, #0]
    a5fe:	f826 8000 	strh.w	r8, [r6, r0]
		*bp++ = bandpasstmp;
    a602:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    a604:	5235      	strh	r5, [r6, r0]
		*hp++ = highpasstmp;
    a606:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    a608:	f826 9000 	strh.w	r9, [r6, r0]
    a60c:	3002      	adds	r0, #2
	do {
    a60e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    a612:	d1a5      	bne.n	a560 <_ZN24AudioFilterStateVariable15update_variableEPKsS1_PsS2_S2_+0x24>
	} while (in < end);
	state_inputprev = inputprev;
    a614:	9803      	ldr	r0, [sp, #12]
    a616:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
	state_lowpass = lowpass;
    a61a:	62c7      	str	r7, [r0, #44]	; 0x2c
	state_bandpass = bandpass;
    a61c:	6304      	str	r4, [r0, #48]	; 0x30
}
    a61e:	b004      	add	sp, #16
    a620:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    a624:	4770      	bx	lr
    a626:	bf00      	nop
    a628:	2aaaaaab 	.word	0x2aaaaaab
    a62c:	2aaaaaaa 	.word	0x2aaaaaaa
    a630:	005210e7 	.word	0x005210e7

0000a634 <_ZN24AudioFilterStateVariable6updateEv>:


void AudioFilterStateVariable::update(void)
{
    a634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	audio_block_t *input_block=NULL, *control_block=NULL;
	audio_block_t *lowpass_block=NULL, *bandpass_block=NULL, *highpass_block=NULL;

	input_block = receiveReadOnly(0);
    a638:	2100      	movs	r1, #0
{
    a63a:	b083      	sub	sp, #12
    a63c:	4604      	mov	r4, r0
	input_block = receiveReadOnly(0);
    a63e:	f7ff f95d 	bl	98fc <_ZN11AudioStream15receiveReadOnlyEj>
	control_block = receiveReadOnly(1);
    a642:	2101      	movs	r1, #1
	input_block = receiveReadOnly(0);
    a644:	4605      	mov	r5, r0
	control_block = receiveReadOnly(1);
    a646:	4620      	mov	r0, r4
    a648:	f7ff f958 	bl	98fc <_ZN11AudioStream15receiveReadOnlyEj>
    a64c:	4606      	mov	r6, r0
	if (!input_block) {
    a64e:	2d00      	cmp	r5, #0
    a650:	d03c      	beq.n	a6cc <_ZN24AudioFilterStateVariable6updateEv+0x98>
		if (control_block) release(control_block);
		return;
	}
	lowpass_block = allocate();
    a652:	f7ff f8cb 	bl	97ec <_ZN11AudioStream8allocateEv>
	if (!lowpass_block) {
    a656:	4607      	mov	r7, r0
    a658:	2800      	cmp	r0, #0
    a65a:	d03c      	beq.n	a6d6 <_ZN24AudioFilterStateVariable6updateEv+0xa2>
		release(input_block);
		if (control_block) release(control_block);
		return;
	}
	bandpass_block = allocate();
    a65c:	f7ff f8c6 	bl	97ec <_ZN11AudioStream8allocateEv>
	if (!bandpass_block) {
    a660:	4680      	mov	r8, r0
    a662:	2800      	cmp	r0, #0
    a664:	d042      	beq.n	a6ec <_ZN24AudioFilterStateVariable6updateEv+0xb8>
		release(input_block);
		release(lowpass_block);
		if (control_block) release(control_block);
		return;
	}
	highpass_block = allocate();
    a666:	f7ff f8c1 	bl	97ec <_ZN11AudioStream8allocateEv>
	if (!highpass_block) {
    a66a:	4681      	mov	r9, r0
    a66c:	2800      	cmp	r0, #0
    a66e:	d050      	beq.n	a712 <_ZN24AudioFilterStateVariable6updateEv+0xde>
		release(bandpass_block);
		if (control_block) release(control_block);
		return;
	}

	if (control_block) {
    a670:	2e00      	cmp	r6, #0
    a672:	d044      	beq.n	a6fe <_ZN24AudioFilterStateVariable6updateEv+0xca>
		update_variable(input_block->data,
			 control_block->data,
			 lowpass_block->data,
			 bandpass_block->data,
			 highpass_block->data);
    a674:	1d03      	adds	r3, r0, #4
    a676:	f108 0204 	add.w	r2, r8, #4
    a67a:	e88d 000c 	stmia.w	sp, {r2, r3}
    a67e:	4620      	mov	r0, r4
    a680:	1d29      	adds	r1, r5, #4
    a682:	1d32      	adds	r2, r6, #4
    a684:	1d3b      	adds	r3, r7, #4
    a686:	f7ff ff59 	bl	a53c <_ZN24AudioFilterStateVariable15update_variableEPKsS1_PsS2_S2_>
		release(control_block);
    a68a:	4630      	mov	r0, r6
    a68c:	f7ff f8f8 	bl	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
		update_fixed(input_block->data,
			 lowpass_block->data,
			 bandpass_block->data,
			 highpass_block->data);
	}
	release(input_block);
    a690:	4628      	mov	r0, r5
    a692:	f7ff f8f5 	bl	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
	transmit(lowpass_block, 0);
    a696:	4639      	mov	r1, r7
    a698:	2200      	movs	r2, #0
    a69a:	4620      	mov	r0, r4
    a69c:	f7ff f914 	bl	98c8 <_ZN11AudioStream8transmitEP18audio_block_structh>
	release(lowpass_block);
    a6a0:	4638      	mov	r0, r7
    a6a2:	f7ff f8ed 	bl	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
	transmit(bandpass_block, 1);
    a6a6:	4641      	mov	r1, r8
    a6a8:	2201      	movs	r2, #1
    a6aa:	4620      	mov	r0, r4
    a6ac:	f7ff f90c 	bl	98c8 <_ZN11AudioStream8transmitEP18audio_block_structh>
	release(bandpass_block);
    a6b0:	4640      	mov	r0, r8
    a6b2:	f7ff f8e5 	bl	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
	transmit(highpass_block, 2);
    a6b6:	4620      	mov	r0, r4
    a6b8:	4649      	mov	r1, r9
    a6ba:	2202      	movs	r2, #2
    a6bc:	f7ff f904 	bl	98c8 <_ZN11AudioStream8transmitEP18audio_block_structh>
	release(highpass_block);
    a6c0:	4648      	mov	r0, r9
	return;
}
    a6c2:	b003      	add	sp, #12
    a6c4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	release(highpass_block);
    a6c8:	f7ff b8da 	b.w	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
		if (control_block) release(control_block);
    a6cc:	2800      	cmp	r0, #0
    a6ce:	d1f8      	bne.n	a6c2 <_ZN24AudioFilterStateVariable6updateEv+0x8e>
}
    a6d0:	b003      	add	sp, #12
    a6d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		release(input_block);
    a6d6:	4628      	mov	r0, r5
    a6d8:	f7ff f8d2 	bl	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
		if (control_block) release(control_block);
    a6dc:	2e00      	cmp	r6, #0
    a6de:	d0f7      	beq.n	a6d0 <_ZN24AudioFilterStateVariable6updateEv+0x9c>
		if (control_block) release(control_block);
    a6e0:	4630      	mov	r0, r6
}
    a6e2:	b003      	add	sp, #12
    a6e4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	release(highpass_block);
    a6e8:	f7ff b8ca 	b.w	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
		release(input_block);
    a6ec:	4628      	mov	r0, r5
    a6ee:	f7ff f8c7 	bl	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
		release(lowpass_block);
    a6f2:	4638      	mov	r0, r7
    a6f4:	f7ff f8c4 	bl	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
		if (control_block) release(control_block);
    a6f8:	2e00      	cmp	r6, #0
    a6fa:	d1f1      	bne.n	a6e0 <_ZN24AudioFilterStateVariable6updateEv+0xac>
    a6fc:	e7e8      	b.n	a6d0 <_ZN24AudioFilterStateVariable6updateEv+0x9c>
			 highpass_block->data);
    a6fe:	1d03      	adds	r3, r0, #4
    a700:	9300      	str	r3, [sp, #0]
    a702:	4620      	mov	r0, r4
    a704:	1d29      	adds	r1, r5, #4
    a706:	1d3a      	adds	r2, r7, #4
    a708:	f108 0304 	add.w	r3, r8, #4
    a70c:	f7ff feca 	bl	a4a4 <_ZN24AudioFilterStateVariable12update_fixedEPKsPsS2_S2_>
    a710:	e7be      	b.n	a690 <_ZN24AudioFilterStateVariable6updateEv+0x5c>
		release(input_block);
    a712:	4628      	mov	r0, r5
    a714:	f7ff f8b4 	bl	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
		release(lowpass_block);
    a718:	4638      	mov	r0, r7
    a71a:	f7ff f8b1 	bl	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
		release(bandpass_block);
    a71e:	4640      	mov	r0, r8
    a720:	f7ff f8ae 	bl	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
		if (control_block) release(control_block);
    a724:	2e00      	cmp	r6, #0
    a726:	d1db      	bne.n	a6e0 <_ZN24AudioFilterStateVariable6updateEv+0xac>
    a728:	e7d2      	b.n	a6d0 <_ZN24AudioFilterStateVariable6updateEv+0x9c>
    a72a:	bf00      	nop

0000a72c <_ZN10DMAChannelD1Ev>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
    a72c:	b510      	push	{r4, lr}
    a72e:	4604      	mov	r4, r0
		release();
    a730:	f7ff f9fa 	bl	9b28 <_ZN10DMAChannel7releaseEv>
	}
    a734:	4620      	mov	r0, r4
    a736:	bd10      	pop	{r4, pc}

0000a738 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE>:
audio_block_t * AudioInputAnalog::block_left = NULL;
uint16_t AudioInputAnalog::block_offset = 0;
int32_t AudioInputAnalog::dc_average_hist[16];
int32_t AudioInputAnalog::current_dc_average_index = 0;
bool AudioInputAnalog::update_responsibility = false;
DMAChannel AudioInputAnalog::dma(false);
    a738:	4802      	ldr	r0, [pc, #8]	; (a744 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0xc>)
    a73a:	4903      	ldr	r1, [pc, #12]	; (a748 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x10>)
    a73c:	4a03      	ldr	r2, [pc, #12]	; (a74c <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x14>)
    a73e:	f003 b9b9 	b.w	dab4 <__aeabi_atexit>
    a742:	bf00      	nop
    a744:	20002764 	.word	0x20002764
    a748:	0000a72d 	.word	0x0000a72d
    a74c:	20000c80 	.word	0x20000c80

0000a750 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    a750:	4802      	ldr	r0, [pc, #8]	; (a75c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    a752:	4903      	ldr	r1, [pc, #12]	; (a760 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    a754:	4a03      	ldr	r2, [pc, #12]	; (a764 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    a756:	f003 b9ad 	b.w	dab4 <__aeabi_atexit>
    a75a:	bf00      	nop
    a75c:	2000276c 	.word	0x2000276c
    a760:	0000a72d 	.word	0x0000a72d
    a764:	20000c80 	.word	0x20000c80

0000a768 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    a768:	4802      	ldr	r0, [pc, #8]	; (a774 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    a76a:	4903      	ldr	r1, [pc, #12]	; (a778 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    a76c:	4a03      	ldr	r2, [pc, #12]	; (a77c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    a76e:	f003 b9a1 	b.w	dab4 <__aeabi_atexit>
    a772:	bf00      	nop
    a774:	20002774 	.word	0x20002774
    a778:	0000a72d 	.word	0x0000a72d
    a77c:	20000c80 	.word	0x20000c80

0000a780 <_ZN11AudioMixer46updateEv>:
}

#endif

void AudioMixer4::update(void)
{
    a780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
    a784:	f04f 0a00 	mov.w	sl, #0
{
    a788:	4680      	mov	r8, r0
    a78a:	4607      	mov	r7, r0
	audio_block_t *in, *out=NULL;
    a78c:	46d1      	mov	r9, sl
		if (!out) {
			out = receiveWritable(channel);
    a78e:	4640      	mov	r0, r8
    a790:	4651      	mov	r1, sl
		if (!out) {
    a792:	f1b9 0f00 	cmp.w	r9, #0
    a796:	d04f      	beq.n	a838 <_ZN11AudioMixer46updateEv+0xb8>
			if (out) {
				int32_t mult = multiplier[channel];
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
			}
		} else {
			in = receiveReadOnly(channel);
    a798:	f7ff f8b0 	bl	98fc <_ZN11AudioStream15receiveReadOnlyEj>
			if (in) {
    a79c:	b1f0      	cbz	r0, a7dc <_ZN11AudioMixer46updateEv+0x5c>
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
    a79e:	69bc      	ldr	r4, [r7, #24]
	if (mult == MULTI_UNITYGAIN) {
    a7a0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
    a7a4:	f109 0304 	add.w	r3, r9, #4
    a7a8:	f100 0504 	add.w	r5, r0, #4
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
    a7ac:	f509 7e82 	add.w	lr, r9, #260	; 0x104
	if (mult == MULTI_UNITYGAIN) {
    a7b0:	d028      	beq.n	a804 <_ZN11AudioMixer46updateEv+0x84>
			uint32_t tmp32 = *src++; // read 2 samples from *data
    a7b2:	f855 2b04 	ldr.w	r2, [r5], #4
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    a7b6:	fb34 f102 	smulwb	r1, r4, r2
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    a7ba:	fb34 f212 	smulwt	r2, r4, r2
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    a7be:	f301 010f 	ssat	r1, #16, r1
    a7c2:	f302 020f 	ssat	r2, #16, r2
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    a7c6:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
			uint32_t tmp32b = *dst;
    a7ca:	681e      	ldr	r6, [r3, #0]
// computes (((a[31:16] + b[31:16]) << 16) | (a[15:0 + b[15:0]))  (saturates)
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("qadd16 %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    a7cc:	fa92 f616 	qadd16	r6, r2, r6
			*dst++ = signed_add_16_and_16(tmp32, tmp32b);
    a7d0:	f843 6b04 	str.w	r6, [r3], #4
		do {
    a7d4:	459e      	cmp	lr, r3
    a7d6:	d8ec      	bhi.n	a7b2 <_ZN11AudioMixer46updateEv+0x32>
				release(in);
    a7d8:	f7ff f852 	bl	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
	for (channel=0; channel < 4; channel++) {
    a7dc:	f10a 0a01 	add.w	sl, sl, #1
    a7e0:	f1ba 0f04 	cmp.w	sl, #4
    a7e4:	f107 0704 	add.w	r7, r7, #4
    a7e8:	d1d1      	bne.n	a78e <_ZN11AudioMixer46updateEv+0xe>
			}
		}
	}
	if (out) {
    a7ea:	f1b9 0f00 	cmp.w	r9, #0
    a7ee:	d03f      	beq.n	a870 <_ZN11AudioMixer46updateEv+0xf0>
		transmit(out);
    a7f0:	4640      	mov	r0, r8
    a7f2:	4649      	mov	r1, r9
    a7f4:	2200      	movs	r2, #0
    a7f6:	f7ff f867 	bl	98c8 <_ZN11AudioStream8transmitEP18audio_block_structh>
		release(out);
    a7fa:	4648      	mov	r0, r9
	}
}
    a7fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		release(out);
    a800:	f7ff b83e 	b.w	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
    a804:	f109 050c 	add.w	r5, r9, #12
    a808:	f100 040c 	add.w	r4, r0, #12
    a80c:	f855 2c08 	ldr.w	r2, [r5, #-8]
    a810:	f854 1c08 	ldr.w	r1, [r4, #-8]
    a814:	fa92 f211 	qadd16	r2, r2, r1
			*dst++ = signed_add_16_and_16(tmp32, *src++);
    a818:	f845 2c08 	str.w	r2, [r5, #-8]
    a81c:	685a      	ldr	r2, [r3, #4]
    a81e:	f854 1c04 	ldr.w	r1, [r4, #-4]
    a822:	fa92 f211 	qadd16	r2, r2, r1
			*dst++ = signed_add_16_and_16(tmp32, *src++);
    a826:	605a      	str	r2, [r3, #4]
    a828:	3308      	adds	r3, #8
		do {
    a82a:	459e      	cmp	lr, r3
    a82c:	f105 0508 	add.w	r5, r5, #8
    a830:	f104 0408 	add.w	r4, r4, #8
    a834:	d8ea      	bhi.n	a80c <_ZN11AudioMixer46updateEv+0x8c>
    a836:	e7cf      	b.n	a7d8 <_ZN11AudioMixer46updateEv+0x58>
			out = receiveWritable(channel);
    a838:	f7ff f86c 	bl	9914 <_ZN11AudioStream15receiveWritableEj>
			if (out) {
    a83c:	4681      	mov	r9, r0
    a83e:	2800      	cmp	r0, #0
    a840:	d0cc      	beq.n	a7dc <_ZN11AudioMixer46updateEv+0x5c>
				int32_t mult = multiplier[channel];
    a842:	69b9      	ldr	r1, [r7, #24]
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
    a844:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    a848:	d0c8      	beq.n	a7dc <_ZN11AudioMixer46updateEv+0x5c>
    a84a:	1d03      	adds	r3, r0, #4
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
    a84c:	f500 7482 	add.w	r4, r0, #260	; 0x104
		uint32_t tmp32 = *p; // read 2 samples from *data
    a850:	681a      	ldr	r2, [r3, #0]
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    a852:	fb31 f002 	smulwb	r0, r1, r2
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    a856:	fb31 f212 	smulwt	r2, r1, r2
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    a85a:	f300 000f 	ssat	r0, #16, r0
    a85e:	f302 020f 	ssat	r2, #16, r2
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    a862:	eac0 4202 	pkhbt	r2, r0, r2, lsl #16
		*p++ = pack_16b_16b(val2, val1);
    a866:	f843 2b04 	str.w	r2, [r3], #4
	do {
    a86a:	429c      	cmp	r4, r3
    a86c:	d8f0      	bhi.n	a850 <_ZN11AudioMixer46updateEv+0xd0>
    a86e:	e7b5      	b.n	a7dc <_ZN11AudioMixer46updateEv+0x5c>
    a870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000a874 <_ZN17AudioOutputAnalog6updateEv>:
	}
}


void AudioOutputAnalog::update(void)
{
    a874:	b510      	push	{r4, lr}
	audio_block_t *block;
	block = receiveReadOnly(0); // input 0
    a876:	2100      	movs	r1, #0
    a878:	f7ff f840 	bl	98fc <_ZN11AudioStream15receiveReadOnlyEj>
	if (block) {
    a87c:	b170      	cbz	r0, a89c <_ZN17AudioOutputAnalog6updateEv+0x28>
		__disable_irq();
    a87e:	b672      	cpsid	i
		if (block_left_1st == NULL) {
    a880:	4b0a      	ldr	r3, [pc, #40]	; (a8ac <_ZN17AudioOutputAnalog6updateEv+0x38>)
    a882:	681a      	ldr	r2, [r3, #0]
    a884:	b172      	cbz	r2, a8a4 <_ZN17AudioOutputAnalog6updateEv+0x30>
			block_left_1st = block;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
    a886:	490a      	ldr	r1, [pc, #40]	; (a8b0 <_ZN17AudioOutputAnalog6updateEv+0x3c>)
    a888:	680c      	ldr	r4, [r1, #0]
    a88a:	b144      	cbz	r4, a89e <_ZN17AudioOutputAnalog6updateEv+0x2a>
			block_left_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
    a88c:	601c      	str	r4, [r3, #0]
			block_left_2nd = block;
    a88e:	6008      	str	r0, [r1, #0]
			__enable_irq();
    a890:	b662      	cpsie	i
			release(tmp);
    a892:	4610      	mov	r0, r2
		}
	}
}
    a894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			release(tmp);
    a898:	f7fe bff2 	b.w	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
    a89c:	bd10      	pop	{r4, pc}
			block_left_2nd = block;
    a89e:	6008      	str	r0, [r1, #0]
			__enable_irq();
    a8a0:	b662      	cpsie	i
    a8a2:	bd10      	pop	{r4, pc}
			block_left_1st = block;
    a8a4:	6018      	str	r0, [r3, #0]
			__enable_irq();
    a8a6:	b662      	cpsie	i
    a8a8:	bd10      	pop	{r4, pc}
    a8aa:	bf00      	nop
    a8ac:	2000278c 	.word	0x2000278c
    a8b0:	2000277c 	.word	0x2000277c

0000a8b4 <_ZN17AudioOutputAnalog3isrEv>:

// TODO: the DAC has much higher bandwidth than the datasheet says
// can we output a 2X oversampled output, for easier filtering?

void AudioOutputAnalog::isr(void)
{
    a8b4:	b538      	push	{r3, r4, r5, lr}
	const int16_t *src, *end;
	int16_t *dest;
	audio_block_t *block;
	uint32_t saddr;

	saddr = (uint32_t)(dma.TCD->SADDR);
    a8b6:	4b19      	ldr	r3, [pc, #100]	; (a91c <_ZN17AudioOutputAnalog3isrEv+0x68>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    a8b8:	4919      	ldr	r1, [pc, #100]	; (a920 <_ZN17AudioOutputAnalog3isrEv+0x6c>)
    a8ba:	681a      	ldr	r2, [r3, #0]
	dma.clearInterrupt();
	if (saddr < (uint32_t)dac_buffer + sizeof(dac_buffer) / 2) {
    a8bc:	4c19      	ldr	r4, [pc, #100]	; (a924 <_ZN17AudioOutputAnalog3isrEv+0x70>)
	saddr = (uint32_t)(dma.TCD->SADDR);
    a8be:	6812      	ldr	r2, [r2, #0]
	dma.clearInterrupt();
    a8c0:	791b      	ldrb	r3, [r3, #4]
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)dac_buffer;
		end = (int16_t *)&dac_buffer[AUDIO_BLOCK_SAMPLES];
	}
	block = AudioOutputAnalog::block_left_1st;
    a8c2:	4d19      	ldr	r5, [pc, #100]	; (a928 <_ZN17AudioOutputAnalog3isrEv+0x74>)
    a8c4:	700b      	strb	r3, [r1, #0]
	if (saddr < (uint32_t)dac_buffer + sizeof(dac_buffer) / 2) {
    a8c6:	42a2      	cmp	r2, r4
	block = AudioOutputAnalog::block_left_1st;
    a8c8:	6828      	ldr	r0, [r5, #0]
		dest = (int16_t *)&dac_buffer[AUDIO_BLOCK_SAMPLES];
    a8ca:	bf3a      	itte	cc
    a8cc:	4622      	movcc	r2, r4
		end = (int16_t *)&dac_buffer[AUDIO_BLOCK_SAMPLES*2];
    a8ce:	f502 7480 	addcc.w	r4, r2, #256	; 0x100
		dest = (int16_t *)dac_buffer;
    a8d2:	f5a4 7280 	subcs.w	r2, r4, #256	; 0x100
	if (block) {
    a8d6:	b1c8      	cbz	r0, a90c <_ZN17AudioOutputAnalog3isrEv+0x58>
		src = block->data;
    a8d8:	1d01      	adds	r1, r0, #4
		do {
			// TODO: this should probably dither
			*dest++ = ((*src++) + 32767) >> 4;
    a8da:	f931 3b02 	ldrsh.w	r3, [r1], #2
    a8de:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    a8e2:	337f      	adds	r3, #127	; 0x7f
    a8e4:	111b      	asrs	r3, r3, #4
    a8e6:	f822 3b02 	strh.w	r3, [r2], #2
		do {
    a8ea:	4294      	cmp	r4, r2
    a8ec:	d8f5      	bhi.n	a8da <_ZN17AudioOutputAnalog3isrEv+0x26>
		} while (dest < end);
		AudioStream::release(block);
    a8ee:	f7fe ffc7 	bl	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
		AudioOutputAnalog::block_left_1st = AudioOutputAnalog::block_left_2nd;
    a8f2:	4b0e      	ldr	r3, [pc, #56]	; (a92c <_ZN17AudioOutputAnalog3isrEv+0x78>)
		AudioOutputAnalog::block_left_2nd = NULL;
    a8f4:	2100      	movs	r1, #0
		AudioOutputAnalog::block_left_1st = AudioOutputAnalog::block_left_2nd;
    a8f6:	681a      	ldr	r2, [r3, #0]
    a8f8:	602a      	str	r2, [r5, #0]
		AudioOutputAnalog::block_left_2nd = NULL;
    a8fa:	6019      	str	r1, [r3, #0]
	} else {
		do {
			*dest++ = 2047;
		} while (dest < end);
	}
	if (AudioOutputAnalog::update_responsibility) AudioStream::update_all();
    a8fc:	4b0c      	ldr	r3, [pc, #48]	; (a930 <_ZN17AudioOutputAnalog3isrEv+0x7c>)
    a8fe:	781b      	ldrb	r3, [r3, #0]
    a900:	b11b      	cbz	r3, a90a <_ZN17AudioOutputAnalog3isrEv+0x56>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    a902:	4b0c      	ldr	r3, [pc, #48]	; (a934 <_ZN17AudioOutputAnalog3isrEv+0x80>)
    a904:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    a908:	601a      	str	r2, [r3, #0]
    a90a:	bd38      	pop	{r3, r4, r5, pc}
			*dest++ = 2047;
    a90c:	f240 73ff 	movw	r3, #2047	; 0x7ff
    a910:	f822 3b02 	strh.w	r3, [r2], #2
		do {
    a914:	4294      	cmp	r4, r2
    a916:	d8fb      	bhi.n	a910 <_ZN17AudioOutputAnalog3isrEv+0x5c>
    a918:	e7f0      	b.n	a8fc <_ZN17AudioOutputAnalog3isrEv+0x48>
    a91a:	bf00      	nop
    a91c:	20002780 	.word	0x20002780
    a920:	4000801f 	.word	0x4000801f
    a924:	20000700 	.word	0x20000700
    a928:	2000278c 	.word	0x2000278c
    a92c:	2000277c 	.word	0x2000277c
    a930:	20002788 	.word	0x20002788
    a934:	e000e208 	.word	0xe000e208

0000a938 <_ZN17AudioOutputAnalog5beginEv>:
{
    a938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	dma.begin(true); // Allocate the DMA channel first
    a93c:	484e      	ldr	r0, [pc, #312]	; (aa78 <_ZN17AudioOutputAnalog5beginEv+0x140>)
		*(int16_t *)&(DAC0_DAT0L) = i;
    a93e:	4d4f      	ldr	r5, [pc, #316]	; (aa7c <_ZN17AudioOutputAnalog5beginEv+0x144>)
	dma.begin(true); // Allocate the DMA channel first
    a940:	2101      	movs	r1, #1
    a942:	f7ff f87d 	bl	9a40 <_ZN10DMAChannel5beginEb>
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    a946:	4b4e      	ldr	r3, [pc, #312]	; (aa80 <_ZN17AudioOutputAnalog5beginEv+0x148>)
	DAC0_C0 = DAC_C0_DACEN;                   // 1.2V VDDA is DACREF_2
    a948:	4a4e      	ldr	r2, [pc, #312]	; (aa84 <_ZN17AudioOutputAnalog5beginEv+0x14c>)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    a94a:	6818      	ldr	r0, [r3, #0]
	DAC0_C0 = DAC_C0_DACEN;                   // 1.2V VDDA is DACREF_2
    a94c:	2180      	movs	r1, #128	; 0x80
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    a94e:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    a952:	6018      	str	r0, [r3, #0]
	for (int16_t i=0; i<2048; i+=8) {
    a954:	2400      	movs	r4, #0
	DAC0_C0 = DAC_C0_DACEN;                   // 1.2V VDDA is DACREF_2
    a956:	7011      	strb	r1, [r2, #0]
		*(int16_t *)&(DAC0_DAT0L) = i;
    a958:	802c      	strh	r4, [r5, #0]
    a95a:	3408      	adds	r4, #8
		delay(1);
    a95c:	2001      	movs	r0, #1
    a95e:	b2a4      	uxth	r4, r4
    a960:	f7fc fb48 	bl	6ff4 <delay>
	for (int16_t i=0; i<2048; i+=8) {
    a964:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    a968:	d1f6      	bne.n	a958 <_ZN17AudioOutputAnalog5beginEv+0x20>
	if (!(SIM_SCGC6 & SIM_SCGC6_PDB)
    a96a:	4b47      	ldr	r3, [pc, #284]	; (aa88 <_ZN17AudioOutputAnalog5beginEv+0x150>)
    a96c:	681b      	ldr	r3, [r3, #0]
	  || PDB0_CH0C1 != 0x0101) {
    a96e:	025b      	lsls	r3, r3, #9
    a970:	d508      	bpl.n	a984 <_ZN17AudioOutputAnalog5beginEv+0x4c>
	  || (PDB0_SC & PDB_CONFIG) != PDB_CONFIG
    a972:	4b46      	ldr	r3, [pc, #280]	; (aa8c <_ZN17AudioOutputAnalog5beginEv+0x154>)
    a974:	681a      	ldr	r2, [r3, #0]
    a976:	f648 73a2 	movw	r3, #36770	; 0x8fa2
    a97a:	4013      	ands	r3, r2
    a97c:	f648 72a2 	movw	r2, #36770	; 0x8fa2
    a980:	4293      	cmp	r3, r2
    a982:	d068      	beq.n	aa56 <_ZN17AudioOutputAnalog5beginEv+0x11e>
		SIM_SCGC6 |= SIM_SCGC6_PDB;
    a984:	4a40      	ldr	r2, [pc, #256]	; (aa88 <_ZN17AudioOutputAnalog5beginEv+0x150>)
		PDB0_SC = PDB_CONFIG | PDB_SC_LDOK;
    a986:	4b41      	ldr	r3, [pc, #260]	; (aa8c <_ZN17AudioOutputAnalog5beginEv+0x154>)
		SIM_SCGC6 |= SIM_SCGC6_PDB;
    a988:	6810      	ldr	r0, [r2, #0]
		PDB0_IDLY = 1;
    a98a:	f8df e124 	ldr.w	lr, [pc, #292]	; aab0 <_ZN17AudioOutputAnalog5beginEv+0x178>
		PDB0_MOD = PDB_PERIOD;
    a98e:	4e40      	ldr	r6, [pc, #256]	; (aa90 <_ZN17AudioOutputAnalog5beginEv+0x158>)
		PDB0_CH0C1 = 0x0101;
    a990:	4940      	ldr	r1, [pc, #256]	; (aa94 <_ZN17AudioOutputAnalog5beginEv+0x15c>)
		PDB0_SC = PDB_CONFIG | PDB_SC_SWTRIG;
    a992:	4c41      	ldr	r4, [pc, #260]	; (aa98 <_ZN17AudioOutputAnalog5beginEv+0x160>)
		SIM_SCGC6 |= SIM_SCGC6_PDB;
    a994:	f440 0880 	orr.w	r8, r0, #4194304	; 0x400000
		PDB0_IDLY = 1;
    a998:	f04f 0c01 	mov.w	ip, #1
		PDB0_MOD = PDB_PERIOD;
    a99c:	f240 372f 	movw	r7, #815	; 0x32f
		PDB0_SC = PDB_CONFIG | PDB_SC_LDOK;
    a9a0:	f648 75a3 	movw	r5, #36771	; 0x8fa3
		PDB0_CH0C1 = 0x0101;
    a9a4:	f240 1001 	movw	r0, #257	; 0x101
		SIM_SCGC6 |= SIM_SCGC6_PDB;
    a9a8:	f8c2 8000 	str.w	r8, [r2]
		PDB0_IDLY = 1;
    a9ac:	f8ce c000 	str.w	ip, [lr]
		PDB0_MOD = PDB_PERIOD;
    a9b0:	6037      	str	r7, [r6, #0]
		PDB0_SC = PDB_CONFIG | PDB_SC_LDOK;
    a9b2:	601d      	str	r5, [r3, #0]
		PDB0_SC = PDB_CONFIG | PDB_SC_SWTRIG;
    a9b4:	601c      	str	r4, [r3, #0]
		PDB0_CH0C1 = 0x0101;
    a9b6:	6008      	str	r0, [r1, #0]
	dma.TCD->SADDR = dac_buffer;
    a9b8:	4d2f      	ldr	r5, [pc, #188]	; (aa78 <_ZN17AudioOutputAnalog5beginEv+0x140>)
    a9ba:	4838      	ldr	r0, [pc, #224]	; (aa9c <_ZN17AudioOutputAnalog5beginEv+0x164>)
    a9bc:	682b      	ldr	r3, [r5, #0]
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    a9be:	7929      	ldrb	r1, [r5, #4]
    a9c0:	681a      	ldr	r2, [r3, #0]
    a9c2:	6018      	str	r0, [r3, #0]
	dma.TCD->DADDR = &DAC0_DAT0L;
    a9c4:	4a2d      	ldr	r2, [pc, #180]	; (aa7c <_ZN17AudioOutputAnalog5beginEv+0x144>)
    a9c6:	6918      	ldr	r0, [r3, #16]
    a9c8:	611a      	str	r2, [r3, #16]
    a9ca:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
	dma.TCD->CITER_ELINKNO = sizeof(dac_buffer) / 2;
    a9ce:	f44f 7280 	mov.w	r2, #256	; 0x100
    a9d2:	8ad8      	ldrh	r0, [r3, #22]
    a9d4:	82da      	strh	r2, [r3, #22]
    a9d6:	f501 3104 	add.w	r1, r1, #135168	; 0x21000
	dma.TCD->BITER_ELINKNO = sizeof(dac_buffer) / 2;
    a9da:	8bd8      	ldrh	r0, [r3, #30]
    a9dc:	83da      	strh	r2, [r3, #30]
	dma.TCD->SOFF = 2;
    a9de:	2602      	movs	r6, #2
	dma.TCD->SADDR = dac_buffer;
    a9e0:	2200      	movs	r2, #0
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    a9e2:	2401      	movs	r4, #1
	dma.TCD->SLAST = -sizeof(dac_buffer);
    a9e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a9e8:	f06f 0c01 	mvn.w	ip, #1
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    a9ec:	f04f 0e06 	mov.w	lr, #6
		*mux = (source & 63) | DMAMUX_ENABLE;
    a9f0:	27b0      	movs	r7, #176	; 0xb0
	dma.TCD->SLAST = -sizeof(dac_buffer);
    a9f2:	f883 c00d 	strb.w	ip, [r3, #13]
	dma.TCD->SOFF = 2;
    a9f6:	711e      	strb	r6, [r3, #4]
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    a9f8:	f8b3 c01c 	ldrh.w	ip, [r3, #28]
	dma.TCD->NBYTES_MLNO = 2;
    a9fc:	721e      	strb	r6, [r3, #8]
	dma.TCD->SOFF = 2;
    a9fe:	715a      	strb	r2, [r3, #5]
	dma.TCD->NBYTES_MLNO = 2;
    aa00:	725a      	strb	r2, [r3, #9]
    aa02:	729a      	strb	r2, [r3, #10]
    aa04:	72da      	strb	r2, [r3, #11]
	dma.TCD->SLAST = -sizeof(dac_buffer);
    aa06:	731a      	strb	r2, [r3, #12]
	dma.TCD->DOFF = 0;
    aa08:	751a      	strb	r2, [r3, #20]
    aa0a:	755a      	strb	r2, [r3, #21]
	dma.TCD->DLASTSGA = 0;
    aa0c:	761a      	strb	r2, [r3, #24]
    aa0e:	765a      	strb	r2, [r3, #25]
    aa10:	769a      	strb	r2, [r3, #26]
    aa12:	76da      	strb	r2, [r3, #27]
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    aa14:	719c      	strb	r4, [r3, #6]
    aa16:	71dc      	strb	r4, [r3, #7]
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    aa18:	f8a3 e01c 	strh.w	lr, [r3, #28]
	dma.TCD->SLAST = -sizeof(dac_buffer);
    aa1c:	7398      	strb	r0, [r3, #14]
    aa1e:	73d8      	strb	r0, [r3, #15]
		*mux = 0;
    aa20:	700a      	strb	r2, [r1, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    aa22:	700f      	strb	r7, [r1, #0]
	update_responsibility = update_setup();
    aa24:	f7fe ffb0 	bl	9988 <_ZN11AudioStream12update_setupEv>
	dma.enable();
    aa28:	792b      	ldrb	r3, [r5, #4]
	update_responsibility = update_setup();
    aa2a:	4a1d      	ldr	r2, [pc, #116]	; (aaa0 <_ZN17AudioOutputAnalog5beginEv+0x168>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    aa2c:	4e1d      	ldr	r6, [pc, #116]	; (aaa4 <_ZN17AudioOutputAnalog5beginEv+0x16c>)
    aa2e:	7010      	strb	r0, [r2, #0]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    aa30:	115a      	asrs	r2, r3, #5
    aa32:	0092      	lsls	r2, r2, #2
    aa34:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    aa38:	491b      	ldr	r1, [pc, #108]	; (aaa8 <_ZN17AudioOutputAnalog5beginEv+0x170>)
		DMA_SERQ = channel;
    aa3a:	7033      	strb	r3, [r6, #0]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    aa3c:	f003 071f 	and.w	r7, r3, #31
    aa40:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    aa44:	f103 0010 	add.w	r0, r3, #16
    aa48:	4d18      	ldr	r5, [pc, #96]	; (aaac <_ZN17AudioOutputAnalog5beginEv+0x174>)
    aa4a:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    aa4e:	40bc      	lsls	r4, r7
    aa50:	6014      	str	r4, [r2, #0]
    aa52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  || PDB0_MOD != PDB_PERIOD
    aa56:	4b0e      	ldr	r3, [pc, #56]	; (aa90 <_ZN17AudioOutputAnalog5beginEv+0x158>)
    aa58:	681a      	ldr	r2, [r3, #0]
    aa5a:	f240 332f 	movw	r3, #815	; 0x32f
    aa5e:	429a      	cmp	r2, r3
    aa60:	d190      	bne.n	a984 <_ZN17AudioOutputAnalog5beginEv+0x4c>
	  || PDB0_IDLY != 1
    aa62:	4b13      	ldr	r3, [pc, #76]	; (aab0 <_ZN17AudioOutputAnalog5beginEv+0x178>)
    aa64:	681b      	ldr	r3, [r3, #0]
    aa66:	2b01      	cmp	r3, #1
    aa68:	d18c      	bne.n	a984 <_ZN17AudioOutputAnalog5beginEv+0x4c>
	  || PDB0_CH0C1 != 0x0101) {
    aa6a:	4b0a      	ldr	r3, [pc, #40]	; (aa94 <_ZN17AudioOutputAnalog5beginEv+0x15c>)
    aa6c:	681a      	ldr	r2, [r3, #0]
    aa6e:	f240 1301 	movw	r3, #257	; 0x101
    aa72:	429a      	cmp	r2, r3
    aa74:	d186      	bne.n	a984 <_ZN17AudioOutputAnalog5beginEv+0x4c>
    aa76:	e79f      	b.n	a9b8 <_ZN17AudioOutputAnalog5beginEv+0x80>
    aa78:	20002780 	.word	0x20002780
    aa7c:	400cc000 	.word	0x400cc000
    aa80:	4004802c 	.word	0x4004802c
    aa84:	400cc021 	.word	0x400cc021
    aa88:	4004803c 	.word	0x4004803c
    aa8c:	40036000 	.word	0x40036000
    aa90:	40036004 	.word	0x40036004
    aa94:	40036010 	.word	0x40036010
    aa98:	00018fa2 	.word	0x00018fa2
    aa9c:	20000600 	.word	0x20000600
    aaa0:	20002788 	.word	0x20002788
    aaa4:	4000801b 	.word	0x4000801b
    aaa8:	20000400 	.word	0x20000400
    aaac:	0000a8b5 	.word	0x0000a8b5
    aab0:	4003600c 	.word	0x4003600c

0000aab4 <_ZN17AudioOutputAnalog15analogReferenceEi>:
		DAC0_C0 &= ~DAC_C0_DACRFS; // 1.2V
    aab4:	4b04      	ldr	r3, [pc, #16]	; (aac8 <_ZN17AudioOutputAnalog15analogReferenceEi+0x14>)
    aab6:	781a      	ldrb	r2, [r3, #0]
	if (ref == INTERNAL) {
    aab8:	2902      	cmp	r1, #2
		DAC0_C0 &= ~DAC_C0_DACRFS; // 1.2V
    aaba:	bf0c      	ite	eq
    aabc:	f002 02bf 	andeq.w	r2, r2, #191	; 0xbf
		DAC0_C0 |= DAC_C0_DACRFS;  // 3.3V
    aac0:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
    aac4:	701a      	strb	r2, [r3, #0]
    aac6:	4770      	bx	lr
    aac8:	400cc021 	.word	0x400cc021

0000aacc <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE>:
DMAChannel AudioOutputAnalog::dma(false);
    aacc:	4802      	ldr	r0, [pc, #8]	; (aad8 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0xc>)
    aace:	4903      	ldr	r1, [pc, #12]	; (aadc <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x10>)
    aad0:	4a03      	ldr	r2, [pc, #12]	; (aae0 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x14>)
    aad2:	f002 bfef 	b.w	dab4 <__aeabi_atexit>
    aad6:	bf00      	nop
    aad8:	20002780 	.word	0x20002780
    aadc:	0000a72d 	.word	0x0000a72d
    aae0:	20000c80 	.word	0x20000c80

0000aae4 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAMEM static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
DMAChannel AudioOutputI2S::dma(false);
    aae4:	4802      	ldr	r0, [pc, #8]	; (aaf0 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    aae6:	4903      	ldr	r1, [pc, #12]	; (aaf4 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    aae8:	4a03      	ldr	r2, [pc, #12]	; (aaf8 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    aaea:	f002 bfe3 	b.w	dab4 <__aeabi_atexit>
    aaee:	bf00      	nop
    aaf0:	20002790 	.word	0x20002790
    aaf4:	0000a72d 	.word	0x0000a72d
    aaf8:	20000c80 	.word	0x20000c80

0000aafc <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
//audio_block_t * AudioOutputI2SQuad::inputQueueArray[4];
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    aafc:	4802      	ldr	r0, [pc, #8]	; (ab08 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    aafe:	4903      	ldr	r1, [pc, #12]	; (ab0c <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    ab00:	4a03      	ldr	r2, [pc, #12]	; (ab10 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    ab02:	f002 bfd7 	b.w	dab4 <__aeabi_atexit>
    ab06:	bf00      	nop
    ab08:	20002798 	.word	0x20002798
    ab0c:	0000a72d 	.word	0x0000a72d
    ab10:	20000c80 	.word	0x20000c80

0000ab14 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
	DMAMEM static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
	DMAMEM static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    ab14:	4802      	ldr	r0, [pc, #8]	; (ab20 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    ab16:	4903      	ldr	r1, [pc, #12]	; (ab24 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    ab18:	4a03      	ldr	r2, [pc, #12]	; (ab28 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    ab1a:	f002 bfcb 	b.w	dab4 <__aeabi_atexit>
    ab1e:	bf00      	nop
    ab20:	200027a0 	.word	0x200027a0
    ab24:	0000a72d 	.word	0x0000a72d
    ab28:	20000c80 	.word	0x20000c80

0000ab2c <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE>:
uint32_t  AudioOutputPWM::block_offset = 0;
bool AudioOutputPWM::update_responsibility = false;
uint8_t AudioOutputPWM::interrupt_count = 0;

DMAMEM uint32_t pwm_dma_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputPWM::dma(false);
    ab2c:	4802      	ldr	r0, [pc, #8]	; (ab38 <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE+0xc>)
    ab2e:	4903      	ldr	r1, [pc, #12]	; (ab3c <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE+0x10>)
    ab30:	4a03      	ldr	r2, [pc, #12]	; (ab40 <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE+0x14>)
    ab32:	f002 bfbf 	b.w	dab4 <__aeabi_atexit>
    ab36:	bf00      	nop
    ab38:	200027a8 	.word	0x200027a8
    ab3c:	0000a72d 	.word	0x0000a72d
    ab40:	20000c80 	.word	0x20000c80

0000ab44 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
bool AudioOutputSPDIF::update_responsibility = false;
uint32_t  AudioOutputSPDIF::vucp = VUCP_VALID;

DMAMEM static uint32_t SPDIF_tx_buffer[AUDIO_BLOCK_SAMPLES * 4]; //2 KB

DMAChannel AudioOutputSPDIF::dma(false);
    ab44:	4802      	ldr	r0, [pc, #8]	; (ab50 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    ab46:	4903      	ldr	r1, [pc, #12]	; (ab54 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    ab48:	4a03      	ldr	r2, [pc, #12]	; (ab58 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    ab4a:	f002 bfb3 	b.w	dab4 <__aeabi_atexit>
    ab4e:	bf00      	nop
    ab50:	200027b0 	.word	0x200027b0
    ab54:	0000a72d 	.word	0x0000a72d
    ab58:	20000c80 	.word	0x20000c80

0000ab5c <_ZN20AudioSynthWaveformDc6updateEv>:
 */

#include "synth_dc.h"

void AudioSynthWaveformDc::update(void)
{
    ab5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab5e:	4604      	mov	r4, r0
	audio_block_t *block;
	uint32_t *p, *end, val;
	int32_t count, t1, t2, t3, t4;

	block = allocate();
    ab60:	f7fe fe44 	bl	97ec <_ZN11AudioStream8allocateEv>
	if (!block) return;
    ab64:	4607      	mov	r7, r0
    ab66:	2800      	cmp	r0, #0
    ab68:	f000 8088 	beq.w	ac7c <_ZN20AudioSynthWaveformDc6updateEv+0x120>
	p = (uint32_t *)(block->data);
	end = p + AUDIO_BLOCK_SAMPLES/2;

	if (state == 0) {
    ab6c:	7e22      	ldrb	r2, [r4, #24]
	p = (uint32_t *)(block->data);
    ab6e:	1d03      	adds	r3, r0, #4
	end = p + AUDIO_BLOCK_SAMPLES/2;
    ab70:	f500 7582 	add.w	r5, r0, #260	; 0x104
	if (state == 0) {
    ab74:	b392      	cbz	r2, abdc <_ZN20AudioSynthWaveformDc6updateEv+0x80>
			*p++ = val;
		} while (p < end);
	} else {
		// transitioning to a new DC level
		//count = (target - magnitude) / increment;
		count = substract_int32_then_divide_int32(target, magnitude, increment);
    ab76:	6a21      	ldr	r1, [r4, #32]
    ab78:	69e6      	ldr	r6, [r4, #28]
    ab7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
// computes (a - b), result saturated to 32 bit integer range
static inline int32_t substract_32_saturate(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t substract_32_saturate(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("qsub %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    ab7c:	fa86 fea1 	qsub	lr, r1, r6
//get Q from PSR
static inline uint32_t get_q_psr(void) __attribute__((always_inline, unused));
static inline uint32_t get_q_psr(void)
{
  uint32_t out;
  asm ("mrs %0, APSR" : "=r" (out));
    ab80:	f3ef 8000 	mrs	r0, CPSR
 	if ( !get_q_psr() ) return (r/c);
    ab84:	0100      	lsls	r0, r0, #4
    ab86:	d438      	bmi.n	abfa <_ZN20AudioSynthWaveformDc6updateEv+0x9e>
    ab88:	fb9e fef2 	sdiv	lr, lr, r2
		if (count >= 128) {
    ab8c:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
    ab90:	dc02      	bgt.n	ab98 <_ZN20AudioSynthWaveformDc6updateEv+0x3c>
    ab92:	e04b      	b.n	ac2c <_ZN20AudioSynthWaveformDc6updateEv+0xd0>
    ab94:	69e6      	ldr	r6, [r4, #28]
    ab96:	6a62      	ldr	r2, [r4, #36]	; 0x24
			// this update will not reach the target
			do {
				magnitude += increment;
    ab98:	4416      	add	r6, r2
				t1 = magnitude;
				magnitude += increment;
    ab9a:	1991      	adds	r1, r2, r6
	asm volatile("pkhtb %0, %1, %2, asr #16" : "=r" (out) : "r" (a), "r" (b));
    ab9c:	eac1 4626 	pkhtb	r6, r1, r6, asr #16
				t1 = pack_16t_16t(magnitude, t1);
				magnitude += increment;
    aba0:	4411      	add	r1, r2
				t2 = magnitude;
				magnitude += increment;
    aba2:	1850      	adds	r0, r2, r1
    aba4:	eac0 4e21 	pkhtb	lr, r0, r1, asr #16
				t2 = pack_16t_16t(magnitude, t2);
				magnitude += increment;
    aba8:	4410      	add	r0, r2
				t3 = magnitude;
				magnitude += increment;
    abaa:	1811      	adds	r1, r2, r0
    abac:	eac1 4020 	pkhtb	r0, r1, r0, asr #16
				t3 = pack_16t_16t(magnitude, t3);
				magnitude += increment;
    abb0:	4411      	add	r1, r2
				t4 = magnitude;
				magnitude += increment;
    abb2:	440a      	add	r2, r1
    abb4:	61e2      	str	r2, [r4, #28]
    abb6:	eac2 4221 	pkhtb	r2, r2, r1, asr #16
				t4 = pack_16t_16t(magnitude, t4);
				*p++ = t1;
				*p++ = t2;
				*p++ = t3;
    abba:	6098      	str	r0, [r3, #8]
				*p++ = t4;
    abbc:	60da      	str	r2, [r3, #12]
				*p++ = t2;
    abbe:	e883 4040 	stmia.w	r3, {r6, lr}
    abc2:	3310      	adds	r3, #16
			do {
    abc4:	429d      	cmp	r5, r3
    abc6:	d8e5      	bhi.n	ab94 <_ZN20AudioSynthWaveformDc6updateEv+0x38>
			while (p < end) {
				*p++ = val;
			}
		}
	}
	transmit(block);
    abc8:	4620      	mov	r0, r4
    abca:	4639      	mov	r1, r7
    abcc:	2200      	movs	r2, #0
    abce:	f7fe fe7b 	bl	98c8 <_ZN11AudioStream8transmitEP18audio_block_structh>
	release(block);
    abd2:	4638      	mov	r0, r7
}
    abd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	release(block);
    abd8:	f7fe be52 	b.w	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
		val = pack_16t_16t(magnitude, magnitude);
    abdc:	69e2      	ldr	r2, [r4, #28]
    abde:	eac2 4222 	pkhtb	r2, r2, r2, asr #16
			*p++ = val;
    abe2:	601a      	str	r2, [r3, #0]
			*p++ = val;
    abe4:	605a      	str	r2, [r3, #4]
			*p++ = val;
    abe6:	609a      	str	r2, [r3, #8]
			*p++ = val;
    abe8:	60da      	str	r2, [r3, #12]
			*p++ = val;
    abea:	611a      	str	r2, [r3, #16]
			*p++ = val;
    abec:	615a      	str	r2, [r3, #20]
			*p++ = val;
    abee:	619a      	str	r2, [r3, #24]
			*p++ = val;
    abf0:	61da      	str	r2, [r3, #28]
    abf2:	3320      	adds	r3, #32
		do {
    abf4:	429d      	cmp	r5, r3
    abf6:	d8f4      	bhi.n	abe2 <_ZN20AudioSynthWaveformDc6updateEv+0x86>
    abf8:	e7e6      	b.n	abc8 <_ZN20AudioSynthWaveformDc6updateEv+0x6c>
 	if ( c==0 ) r=0;
    abfa:	b95a      	cbnz	r2, ac14 <_ZN20AudioSynthWaveformDc6updateEv+0xb8>
			state = 0;
    abfc:	2200      	movs	r2, #0
			magnitude = target;
    abfe:	61e1      	str	r1, [r4, #28]
			state = 0;
    ac00:	7622      	strb	r2, [r4, #24]
    ac02:	eac1 4221 	pkhtb	r2, r1, r1, asr #16
			while (p < end) {
    ac06:	42ab      	cmp	r3, r5
    ac08:	d2de      	bcs.n	abc8 <_ZN20AudioSynthWaveformDc6updateEv+0x6c>
				*p++ = val;
    ac0a:	f843 2b04 	str.w	r2, [r3], #4
			while (p < end) {
    ac0e:	429d      	cmp	r5, r3
    ac10:	d8fb      	bhi.n	ac0a <_ZN20AudioSynthWaveformDc6updateEv+0xae>
    ac12:	e7d9      	b.n	abc8 <_ZN20AudioSynthWaveformDc6updateEv+0x6c>
 	if (__builtin_abs(c)<=1) return r;
    ac14:	1c50      	adds	r0, r2, #1
    ac16:	2802      	cmp	r0, #2
    ac18:	d9b8      	bls.n	ab8c <_ZN20AudioSynthWaveformDc6updateEv+0x30>
 	return (a/c)-(b/c);
    ac1a:	fb91 fef2 	sdiv	lr, r1, r2
    ac1e:	fb96 f0f2 	sdiv	r0, r6, r2
    ac22:	ebc0 0e0e 	rsb	lr, r0, lr
		if (count >= 128) {
    ac26:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
    ac2a:	dcb5      	bgt.n	ab98 <_ZN20AudioSynthWaveformDc6updateEv+0x3c>
			while (count >= 2) {
    ac2c:	f1be 0f01 	cmp.w	lr, #1
    ac30:	dd18      	ble.n	ac64 <_ZN20AudioSynthWaveformDc6updateEv+0x108>
    ac32:	4671      	mov	r1, lr
    ac34:	4618      	mov	r0, r3
    ac36:	e001      	b.n	ac3c <_ZN20AudioSynthWaveformDc6updateEv+0xe0>
    ac38:	69e6      	ldr	r6, [r4, #28]
    ac3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
				magnitude += increment;
    ac3c:	4416      	add	r6, r2
				magnitude += increment;
    ac3e:	4432      	add	r2, r6
    ac40:	61e2      	str	r2, [r4, #28]
				count -= 2;
    ac42:	3902      	subs	r1, #2
    ac44:	eac2 4226 	pkhtb	r2, r2, r6, asr #16
			while (count >= 2) {
    ac48:	2901      	cmp	r1, #1
				*p++ = t1;
    ac4a:	f840 2b04 	str.w	r2, [r0], #4
			while (count >= 2) {
    ac4e:	dcf3      	bgt.n	ac38 <_ZN20AudioSynthWaveformDc6updateEv+0xdc>
    ac50:	f1ae 0e02 	sub.w	lr, lr, #2
    ac54:	ea4f 025e 	mov.w	r2, lr, lsr #1
    ac58:	1c50      	adds	r0, r2, #1
    ac5a:	6a21      	ldr	r1, [r4, #32]
    ac5c:	ebae 0e42 	sub.w	lr, lr, r2, lsl #1
    ac60:	eb03 0380 	add.w	r3, r3, r0, lsl #2
			if (count) {
    ac64:	f1be 0f00 	cmp.w	lr, #0
    ac68:	d0c8      	beq.n	abfc <_ZN20AudioSynthWaveformDc6updateEv+0xa0>
				t1 = pack_16t_16t(target, magnitude + increment);
    ac6a:	69e0      	ldr	r0, [r4, #28]
    ac6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    ac6e:	4402      	add	r2, r0
    ac70:	eac1 4122 	pkhtb	r1, r1, r2, asr #16
				*p++ = t1;
    ac74:	6019      	str	r1, [r3, #0]
    ac76:	6a21      	ldr	r1, [r4, #32]
    ac78:	3304      	adds	r3, #4
    ac7a:	e7bf      	b.n	abfc <_ZN20AudioSynthWaveformDc6updateEv+0xa0>
    ac7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac7e:	bf00      	nop

0000ac80 <_ZN20AudioSynthSimpleDrum6updateEv>:
}



void AudioSynthSimpleDrum::update(void)
{
    ac80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac84:	b085      	sub	sp, #20
    ac86:	4604      	mov	r4, r0
  int32_t index, scale;
  bool do_second;

  int32_t env_sqr_current; // the square of the linear value - inexpensive quasi exponential decay.

  block_wav = allocate();
    ac88:	f7fe fdb0 	bl	97ec <_ZN11AudioStream8allocateEv>
  if (!block_wav) return;
    ac8c:	9002      	str	r0, [sp, #8]
    ac8e:	2800      	cmp	r0, #0
    ac90:	f000 8089 	beq.w	ada6 <_ZN20AudioSynthSimpleDrum6updateEv+0x126>
  p_wave = (block_wav->data);
  end = p_wave + AUDIO_BLOCK_SAMPLES;
    ac94:	f500 7c82 	add.w	ip, r0, #260	; 0x104
  p_wave = (block_wav->data);
    ac98:	1d03      	adds	r3, r0, #4
  // 50 is arbitrary threshold...
  // low values of second are inaudible, and we can save CPU cycles
  // by not calculating second when it's really quiet.
  do_second = (wav_amplitude2 > 50);

  while(p_wave < end)
    ac9a:	459c      	cmp	ip, r3
  do_second = (wav_amplitude2 > 50);
    ac9c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
  while(p_wave < end)
    ac9e:	d96a      	bls.n	ad76 <_ZN20AudioSynthSimpleDrum6updateEv+0xf6>
    aca0:	9e02      	ldr	r6, [sp, #8]
        wav_phasor2 &= 0x7fffffff;
      }
    
      // Phase to Sine lookup * interp:
      index = wav_phasor >> 23; // take top valid 8 bits
      sin_l = AudioWaveformSine[index];
    aca2:	4842      	ldr	r0, [pc, #264]	; (adac <_ZN20AudioSynthSimpleDrum6updateEv+0x12c>)
      if(do_second)
    aca4:	b212      	sxth	r2, r2
    aca6:	9203      	str	r2, [sp, #12]
    aca8:	1db3      	adds	r3, r6, #6
    if(env_lin_current < 0x0000ffff)
    acaa:	f64f 78fe 	movw	r8, #65534	; 0xfffe
    acae:	e008      	b.n	acc2 <_ZN20AudioSynthSimpleDrum6updateEv+0x42>
    acb0:	461a      	mov	r2, r3
      *p_wave = 0;
    acb2:	f04f 0700 	mov.w	r7, #0
  while(p_wave < end)
    acb6:	4594      	cmp	ip, r2
      *p_wave = 0;
    acb8:	f823 7c02 	strh.w	r7, [r3, #-2]
    acbc:	f103 0302 	add.w	r3, r3, #2
  while(p_wave < end)
    acc0:	d959      	bls.n	ad76 <_ZN20AudioSynthSimpleDrum6updateEv+0xf6>
    if(env_lin_current < 0x0000ffff)
    acc2:	69e2      	ldr	r2, [r4, #28]
    acc4:	4542      	cmp	r2, r8
    acc6:	ddf3      	ble.n	acb0 <_ZN20AudioSynthSimpleDrum6updateEv+0x30>
      env_lin_current -= env_decrement;
    acc8:	6a25      	ldr	r5, [r4, #32]
    acca:	1b55      	subs	r5, r2, r5
    accc:	61e5      	str	r5, [r4, #28]
	asm volatile("smultt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    acce:	fb15 f535 	smultt	r5, r5, r5
      mod = signed_multiply_32x16b((env_sqr_current), (wav_pitch_mod>>1)) >> 13;      
    acd2:	6b66      	ldr	r6, [r4, #52]	; 0x34
      wav_phasor  += wav_increment;
    acd4:	6b21      	ldr	r1, [r4, #48]	; 0x30
      mod = signed_multiply_32x16b((env_sqr_current), (wav_pitch_mod>>1)) >> 13;      
    acd6:	1076      	asrs	r6, r6, #1
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    acd8:	fb35 f606 	smulwb	r6, r5, r6
      mod2 = signed_multiply_32x16b(wav_increment<<3, mod>>1);
    acdc:	13b6      	asrs	r6, r6, #14
    acde:	00ca      	lsls	r2, r1, #3
    ace0:	fb32 f606 	smulwb	r6, r2, r6
      wav_phasor  += wav_increment;
    ace4:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if(do_second)
    ace6:	9f03      	ldr	r7, [sp, #12]
      wav_phasor  += wav_increment;
    ace8:	440a      	add	r2, r1
      wav_phasor += (mod2);
    acea:	4432      	add	r2, r6
      wav_phasor &= 0x7fffffff;
    acec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
      index = wav_phasor >> 23; // take top valid 8 bits
    acf0:	ea4f 5ed2 	mov.w	lr, r2, lsr #23
      if(do_second)
    acf4:	2f32      	cmp	r7, #50	; 0x32
      sin_r = AudioWaveformSine[index+1];
    acf6:	f10e 0a01 	add.w	sl, lr, #1
      index = wav_phasor >> 23; // take top valid 8 bits
    acfa:	f8cd e004 	str.w	lr, [sp, #4]

      // The fraction of the phasor in time we are between L and R
      // is the same as the fraction of the ampliture of that interval we should add 
      // to L.
      delta = sin_r-sin_l;
      scale = (wav_phasor >> 7) & 0xfFFF;
    acfe:	f3c2 19cf 	ubfx	r9, r2, #7, #16
      wav_phasor &= 0x7fffffff;
    ad02:	6262      	str	r2, [r4, #36]	; 0x24
      if(do_second)
    ad04:	dd42      	ble.n	ad8c <_ZN20AudioSynthSimpleDrum6updateEv+0x10c>
        wav_phasor2 += wav_increment;
    ad06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      sin_l = AudioWaveformSine[index];
    ad08:	f930 701e 	ldrsh.w	r7, [r0, lr, lsl #1]
      sin_r = AudioWaveformSine[index+1];
    ad0c:	f930 e01a 	ldrsh.w	lr, [r0, sl, lsl #1]
        scale = (wav_phasor2 >> 7) & 0xFFFF;
        delta = (delta * scale)>> 16;
        interp2 = sin_l + delta;

        // Then scale and add the two waves
        interp2 = (interp2 * wav_amplitude2 ) >> 15;
    ad10:	f9b4 b02e 	ldrsh.w	fp, [r4, #46]	; 0x2e
        wav_phasor2 += wav_increment;
    ad14:	440a      	add	r2, r1
        wav_phasor2 += (wav_increment >> 1);
    ad16:	eb02 0151 	add.w	r1, r2, r1, lsr #1
        wav_phasor2 += mod2;
    ad1a:	4431      	add	r1, r6
        wav_phasor2 += (mod2 >> 1);
    ad1c:	eb01 0666 	add.w	r6, r1, r6, asr #1
        wav_phasor2 &= 0x7fffffff;
    ad20:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
        index = wav_phasor2 >> 23; // take top valid 8 bits
    ad24:	0df2      	lsrs	r2, r6, #23
        sin_r = AudioWaveformSine[index+1];
    ad26:	f102 0a01 	add.w	sl, r2, #1
        sin_l = AudioWaveformSine[index];
    ad2a:	f930 1012 	ldrsh.w	r1, [r0, r2, lsl #1]
        sin_r = AudioWaveformSine[index+1];
    ad2e:	f930 a01a 	ldrsh.w	sl, [r0, sl, lsl #1]
        wav_phasor2 &= 0x7fffffff;
    ad32:	62a6      	str	r6, [r4, #40]	; 0x28
        delta = sin_r-sin_l;
    ad34:	ebc1 0a0a 	rsb	sl, r1, sl
        scale = (wav_phasor2 >> 7) & 0xFFFF;
    ad38:	f3c6 16cf 	ubfx	r6, r6, #7, #16
        delta = (delta * scale)>> 16;
    ad3c:	fb06 f60a 	mul.w	r6, r6, sl
      delta = sin_r-sin_l;
    ad40:	ebc7 020e 	rsb	r2, r7, lr
      delta = (delta * scale)>> 16;
    ad44:	fb09 f202 	mul.w	r2, r9, r2
        interp2 = sin_l + delta;
    ad48:	eb01 4126 	add.w	r1, r1, r6, asr #16
        interp = (interp * wav_amplitude1) >> 15;
    ad4c:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
      interp = sin_l + delta;
    ad50:	eb07 4222 	add.w	r2, r7, r2, asr #16
        interp2 = (interp2 * wav_amplitude2 ) >> 15;
    ad54:	fb01 f10b 	mul.w	r1, r1, fp
        interp = (interp * wav_amplitude1) >> 15;
    ad58:	fb02 f20a 	mul.w	r2, r2, sl
        interp2 = (interp2 * wav_amplitude2 ) >> 15;
    ad5c:	13c9      	asrs	r1, r1, #15
        interp = interp + interp2;
    ad5e:	eb01 32e2 	add.w	r2, r1, r2, asr #15
    ad62:	fb35 f502 	smulwb	r5, r5, r2
    ad66:	461a      	mov	r2, r3
      }

      *p_wave = signed_multiply_32x16b(env_sqr_current, interp ) >> 15 ;
    ad68:	13ed      	asrs	r5, r5, #15
  while(p_wave < end)
    ad6a:	4594      	cmp	ip, r2
      *p_wave = signed_multiply_32x16b(env_sqr_current, interp ) >> 15 ;
    ad6c:	f823 5c02 	strh.w	r5, [r3, #-2]
    ad70:	f103 0302 	add.w	r3, r3, #2
  while(p_wave < end)
    ad74:	d8a5      	bhi.n	acc2 <_ZN20AudioSynthSimpleDrum6updateEv+0x42>
      p_wave++; 
    }
  }

  transmit(block_wav, 0);
    ad76:	4620      	mov	r0, r4
    ad78:	9902      	ldr	r1, [sp, #8]
    ad7a:	2200      	movs	r2, #0
    ad7c:	f7fe fda4 	bl	98c8 <_ZN11AudioStream8transmitEP18audio_block_structh>
  release(block_wav);
    ad80:	9802      	ldr	r0, [sp, #8]

}
    ad82:	b005      	add	sp, #20
    ad84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  release(block_wav);
    ad88:	f7fe bd7a 	b.w	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
      sin_l = AudioWaveformSine[index];
    ad8c:	9e01      	ldr	r6, [sp, #4]
    ad8e:	f930 1016 	ldrsh.w	r1, [r0, r6, lsl #1]
      sin_r = AudioWaveformSine[index+1];
    ad92:	f930 601a 	ldrsh.w	r6, [r0, sl, lsl #1]
      scale = (wav_phasor >> 7) & 0xfFFF;
    ad96:	f3c2 12cf 	ubfx	r2, r2, #7, #16
      delta = sin_r-sin_l;
    ad9a:	1a76      	subs	r6, r6, r1
      delta = (delta * scale)>> 16;
    ad9c:	fb02 f206 	mul.w	r2, r2, r6
      interp = sin_l + delta;
    ada0:	eb01 4222 	add.w	r2, r1, r2, asr #16
    ada4:	e7dd      	b.n	ad62 <_ZN20AudioSynthSimpleDrum6updateEv+0xe2>
}
    ada6:	b005      	add	sp, #20
    ada8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    adac:	00011e10 	.word	0x00011e10

0000adb0 <_ZN20AudioSynthSimpleDrum6noteOnEv>:
  __disable_irq();
    adb0:	b672      	cpsid	i
  env_lin_current = 0x7fff0000;
    adb2:	4b03      	ldr	r3, [pc, #12]	; (adc0 <_ZN20AudioSynthSimpleDrum6noteOnEv+0x10>)
    adb4:	61c3      	str	r3, [r0, #28]
  wav_phasor = 0;
    adb6:	2300      	movs	r3, #0
    adb8:	6243      	str	r3, [r0, #36]	; 0x24
  wav_phasor2 = 0;
    adba:	6283      	str	r3, [r0, #40]	; 0x28
  __enable_irq();
    adbc:	b662      	cpsie	i
    adbe:	4770      	bx	lr
    adc0:	7fff0000 	.word	0x7fff0000

0000adc4 <_ZN20AudioSynthSimpleDrum8pitchModEf>:
{
    adc4:	b538      	push	{r3, r4, r5, lr}
    adc6:	460c      	mov	r4, r1
    adc8:	4605      	mov	r5, r0
  if(depth < 0)
    adca:	2100      	movs	r1, #0
    adcc:	4620      	mov	r0, r4
    adce:	f002 fb43 	bl	d458 <__aeabi_fcmplt>
    add2:	b948      	cbnz	r0, ade8 <_ZN20AudioSynthSimpleDrum8pitchModEf+0x24>
  else if(depth > 1.0)
    add4:	4620      	mov	r0, r4
    add6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    adda:	f002 fb5b 	bl	d494 <__aeabi_fcmpgt>
    adde:	b130      	cbz	r0, adee <_ZN20AudioSynthSimpleDrum8pitchModEf+0x2a>
    ade0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
  wav_pitch_mod = calc;
    ade4:	636b      	str	r3, [r5, #52]	; 0x34
    ade6:	bd38      	pop	{r3, r4, r5, pc}
    ade8:	4b0d      	ldr	r3, [pc, #52]	; (ae20 <_ZN20AudioSynthSimpleDrum8pitchModEf+0x5c>)
    adea:	636b      	str	r3, [r5, #52]	; 0x34
    adec:	bd38      	pop	{r3, r4, r5, pc}
  intdepth = depth * 0x7fff;
    adee:	490d      	ldr	r1, [pc, #52]	; (ae24 <_ZN20AudioSynthSimpleDrum8pitchModEf+0x60>)
    adf0:	4620      	mov	r0, r4
    adf2:	f002 f993 	bl	d11c <__aeabi_fmul>
    adf6:	f002 fb57 	bl	d4a8 <__aeabi_f2iz>
  if(intdepth < 0x4000)
    adfa:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    adfe:	da08      	bge.n	ae12 <_ZN20AudioSynthSimpleDrum8pitchModEf+0x4e>
    ae00:	f5c0 4080 	rsb	r0, r0, #16384	; 0x4000
    ae04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ae08:	f340 0391 	sbfx	r3, r0, #2, #18
    ae0c:	425b      	negs	r3, r3
  wav_pitch_mod = calc;
    ae0e:	636b      	str	r3, [r5, #52]	; 0x34
    ae10:	bd38      	pop	{r3, r4, r5, pc}
    ae12:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
    ae16:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ae1a:	f340 0311 	sbfx	r3, r0, #0, #18
    ae1e:	e7e1      	b.n	ade4 <_ZN20AudioSynthSimpleDrum8pitchModEf+0x20>
    ae20:	ffffd000 	.word	0xffffd000
    ae24:	46fffe00 	.word	0x46fffe00

0000ae28 <_ZN18AudioSynthWaveform6updateEv>:
// PAH 140316 - fix calculation of sample (amplitude error)
// PAH 140314 - change t_hi from int to float


void AudioSynthWaveform::update(void)
{
    ae28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  // temporaries for TRIANGLE
  uint32_t mag;
  short tmp_amp;
  
  if(tone_amp == 0) return;
    ae2c:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
{
    ae30:	4604      	mov	r4, r0
  if(tone_amp == 0) return;
    ae32:	b90b      	cbnz	r3, ae38 <_ZN18AudioSynthWaveform6updateEv+0x10>
    ae34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  block = allocate();
    ae38:	f7fe fcd8 	bl	97ec <_ZN11AudioStream8allocateEv>
  if (block) {
    ae3c:	4605      	mov	r5, r0
    ae3e:	2800      	cmp	r0, #0
    ae40:	d0f8      	beq.n	ae34 <_ZN18AudioSynthWaveform6updateEv+0xc>
    bp = block->data;
    switch(tone_type) {
    ae42:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
    bp = block->data;
    ae46:	1d06      	adds	r6, r0, #4
    switch(tone_type) {
    ae48:	2b07      	cmp	r3, #7
    ae4a:	d832      	bhi.n	aeb2 <_ZN18AudioSynthWaveform6updateEv+0x8a>
    ae4c:	e8df f013 	tbh	[pc, r3, lsl #1]
    ae50:	008c0064 	.word	0x008c0064
    ae54:	00ad009d 	.word	0x00ad009d
    ae58:	00ca0008 	.word	0x00ca0008
    ae5c:	004b00db 	.word	0x004b00db
        if(tone_phase & 0x80000000)tone_phase &= 0x7fffffff;
      }
      break;

    case WAVEFORM_ARBITRARY:
      if (!arbdata) {
    ae60:	6b27      	ldr	r7, [r4, #48]	; 0x30
    ae62:	2f00      	cmp	r7, #0
    ae64:	d03a      	beq.n	aedc <_ZN18AudioSynthWaveform6updateEv+0xb4>
    ae66:	69e3      	ldr	r3, [r4, #28]
    ae68:	f500 7c82 	add.w	ip, r0, #260	; 0x104
    ae6c:	4631      	mov	r1, r6
		release(block);
		return;
      }
      // len = 256
      for (int i = 0; i < AUDIO_BLOCK_SAMPLES;i++) {
		index = tone_phase >> 23;
    ae6e:	0dda      	lsrs	r2, r3, #23
		val1 = *(arbdata + index);
		val2 = *(arbdata + ((index + 1) & 255));
    ae70:	f102 0e01 	add.w	lr, r2, #1
		scale = (tone_phase >> 7) & 0xFFFF;
    ae74:	f3c3 10cf 	ubfx	r0, r3, #7, #16
		val2 = *(arbdata + ((index + 1) & 255));
    ae78:	fa5f fe8e 	uxtb.w	lr, lr
		val2 *= scale;
		val1 *= 0xFFFF - scale;
    ae7c:	f937 a012 	ldrsh.w	sl, [r7, r2, lsl #1]
		val2 *= scale;
    ae80:	f937 901e 	ldrsh.w	r9, [r7, lr, lsl #1]
		val3 = (val1 + val2) >> 16;
		*bp++ = (short)((val3 * tone_amp) >> 15);
    ae84:	f9b4 8018 	ldrsh.w	r8, [r4, #24]
		tone_phase += tone_incr;
    ae88:	f8d4 e028 	ldr.w	lr, [r4, #40]	; 0x28
		val1 *= 0xFFFF - scale;
    ae8c:	f5c0 427f 	rsb	r2, r0, #65280	; 0xff00
    ae90:	32ff      	adds	r2, #255	; 0xff
    ae92:	fb02 f20a 	mul.w	r2, r2, sl
		val3 = (val1 + val2) >> 16;
    ae96:	fb00 2009 	mla	r0, r0, r9, r2
    ae9a:	1400      	asrs	r0, r0, #16
		*bp++ = (short)((val3 * tone_amp) >> 15);
    ae9c:	fb08 f000 	mul.w	r0, r8, r0
    aea0:	13c0      	asrs	r0, r0, #15
    aea2:	f821 0b02 	strh.w	r0, [r1], #2
		tone_phase += tone_incr;
    aea6:	4473      	add	r3, lr
      for (int i = 0; i < AUDIO_BLOCK_SAMPLES;i++) {
    aea8:	4561      	cmp	r1, ip
		tone_phase &= 0x7fffffff;
    aeaa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
      for (int i = 0; i < AUDIO_BLOCK_SAMPLES;i++) {
    aeae:	d1de      	bne.n	ae6e <_ZN18AudioSynthWaveform6updateEv+0x46>
    aeb0:	61e3      	str	r3, [r4, #28]
        *bp++ = sample;
        tone_phase += tone_incr;
      }
      break;
    }
    if (tone_offset) {
    aeb2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    aeb4:	b16b      	cbz	r3, aed2 <_ZN18AudioSynthWaveform6updateEv+0xaa>
	bp = block->data;
	end = bp + AUDIO_BLOCK_SAMPLES;
    aeb6:	f505 7182 	add.w	r1, r5, #260	; 0x104
    aeba:	e000      	b.n	aebe <_ZN18AudioSynthWaveform6updateEv+0x96>
    aebc:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
	do {
		val1 = *bp;
    aebe:	f9b6 2000 	ldrsh.w	r2, [r6]
		*bp++ = signed_saturate_rshift(val1 + tone_offset, 16, 0);
    aec2:	fa02 f383 	sxtah	r3, r2, r3
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    aec6:	f303 030f 	ssat	r3, #16, r3
    aeca:	f826 3b02 	strh.w	r3, [r6], #2
	do {
    aece:	42b1      	cmp	r1, r6
    aed0:	d8f4      	bhi.n	aebc <_ZN18AudioSynthWaveform6updateEv+0x94>
	} while (bp < end);
    }
    transmit(block,0);
    aed2:	4620      	mov	r0, r4
    aed4:	4629      	mov	r1, r5
    aed6:	2200      	movs	r2, #0
    aed8:	f7fe fcf6 	bl	98c8 <_ZN11AudioStream8transmitEP18audio_block_structh>
    release(block);
    aedc:	4628      	mov	r0, r5
  }
}
    aede:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    release(block);
    aee2:	f7fe bccd 	b.w	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>
    aee6:	69e3      	ldr	r3, [r4, #28]
    aee8:	f500 7882 	add.w	r8, r0, #260	; 0x104
    switch(tone_type) {
    aeec:	4637      	mov	r7, r6
    aeee:	e007      	b.n	af00 <_ZN18AudioSynthWaveform6updateEv+0xd8>
    aef0:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
        tone_phase += tone_incr;
    aef2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        *bp++ = sample;
    aef4:	f827 0b02 	strh.w	r0, [r7], #2
        tone_phase += tone_incr;
    aef8:	4413      	add	r3, r2
      for(int i = 0;i < AUDIO_BLOCK_SAMPLES;i++) {
    aefa:	4547      	cmp	r7, r8
        tone_phase += tone_incr;
    aefc:	61e3      	str	r3, [r4, #28]
      for(int i = 0;i < AUDIO_BLOCK_SAMPLES;i++) {
    aefe:	d0d8      	beq.n	aeb2 <_ZN18AudioSynthWaveform6updateEv+0x8a>
        if(tone_phase < tone_incr) {
    af00:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    af02:	429a      	cmp	r2, r3
    af04:	d9f4      	bls.n	aef0 <_ZN18AudioSynthWaveform6updateEv+0xc8>
          sample = random(-tone_amp, tone_amp);
    af06:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
    af0a:	4248      	negs	r0, r1
    af0c:	f7ff f8e8 	bl	a0e0 <_Z6randomll>
    af10:	b280      	uxth	r0, r0
    af12:	69e3      	ldr	r3, [r4, #28]
    af14:	84a0      	strh	r0, [r4, #36]	; 0x24
    af16:	e7ec      	b.n	aef2 <_ZN18AudioSynthWaveform6updateEv+0xca>
    af18:	f8df c110 	ldr.w	ip, [pc, #272]	; b02c <_ZN18AudioSynthWaveform6updateEv+0x204>
    af1c:	f500 7882 	add.w	r8, r0, #260	; 0x104
    switch(tone_type) {
    af20:	4631      	mov	r1, r6
		index = tone_phase >> 23;
    af22:	69e3      	ldr	r3, [r4, #28]
		*bp++ = (short)((val3 * tone_amp) >> 15);
    af24:	f9b4 9018 	ldrsh.w	r9, [r4, #24]
        tone_phase += tone_incr;
    af28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		index = tone_phase >> 23;
    af2a:	ea4f 5ed3 	mov.w	lr, r3, lsr #23
		scale = (tone_phase >> 7) & 0xFFFF;
    af2e:	f3c3 17cf 	ubfx	r7, r3, #7, #16
		val2 = AudioWaveformSine[index+1];
    af32:	f10e 0b01 	add.w	fp, lr, #1
		val1 *= 0xFFFF - scale;
    af36:	f5c7 427f 	rsb	r2, r7, #65280	; 0xff00
    af3a:	f93c a01e 	ldrsh.w	sl, [ip, lr, lsl #1]
		val2 *= scale;
    af3e:	f93c e01b 	ldrsh.w	lr, [ip, fp, lsl #1]
		val1 *= 0xFFFF - scale;
    af42:	32ff      	adds	r2, #255	; 0xff
    af44:	fb0a f202 	mul.w	r2, sl, r2
		val3 = (val1 + val2) >> 16;
    af48:	fb07 270e 	mla	r7, r7, lr, r2
    af4c:	143f      	asrs	r7, r7, #16
		*bp++ = (short)((val3 * tone_amp) >> 15);
    af4e:	fb09 f707 	mul.w	r7, r9, r7
    af52:	13ff      	asrs	r7, r7, #15
    af54:	f821 7b02 	strh.w	r7, [r1], #2
        if(tone_phase & 0x80000000)tone_phase &= 0x7fffffff;
    af58:	18c3      	adds	r3, r0, r3
    af5a:	bf48      	it	mi
    af5c:	f023 4300 	bicmi.w	r3, r3, #2147483648	; 0x80000000
      for(int i = 0;i < AUDIO_BLOCK_SAMPLES;i++) {
    af60:	4541      	cmp	r1, r8
        if(tone_phase & 0x80000000)tone_phase &= 0x7fffffff;
    af62:	61e3      	str	r3, [r4, #28]
      for(int i = 0;i < AUDIO_BLOCK_SAMPLES;i++) {
    af64:	d1dd      	bne.n	af22 <_ZN18AudioSynthWaveform6updateEv+0xfa>
    af66:	e7a4      	b.n	aeb2 <_ZN18AudioSynthWaveform6updateEv+0x8a>
    af68:	69e3      	ldr	r3, [r4, #28]
    af6a:	f500 7e82 	add.w	lr, r0, #260	; 0x104
    switch(tone_type) {
    af6e:	4632      	mov	r2, r6
        *bp++ = ((short)(tone_phase>>15)*tone_amp) >> 15;
    af70:	8b20      	ldrh	r0, [r4, #24]
        tone_phase += tone_incr;    
    af72:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        *bp++ = ((short)(tone_phase>>15)*tone_amp) >> 15;
    af74:	f3c3 37cf 	ubfx	r7, r3, #15, #16
    af78:	fb17 f000 	smulbb	r0, r7, r0
    af7c:	13c0      	asrs	r0, r0, #15
    af7e:	f822 0b02 	strh.w	r0, [r2], #2
      for(int i = 0;i < AUDIO_BLOCK_SAMPLES;i++) {
    af82:	4572      	cmp	r2, lr
        tone_phase += tone_incr;    
    af84:	440b      	add	r3, r1
      for(int i = 0;i < AUDIO_BLOCK_SAMPLES;i++) {
    af86:	d1f3      	bne.n	af70 <_ZN18AudioSynthWaveform6updateEv+0x148>
    af88:	e792      	b.n	aeb0 <_ZN18AudioSynthWaveform6updateEv+0x88>
    af8a:	69e3      	ldr	r3, [r4, #28]
    af8c:	1d81      	adds	r1, r0, #6
    switch(tone_type) {
    af8e:	2280      	movs	r2, #128	; 0x80
        if(tone_phase & 0x40000000)*bp++ = -tone_amp;
    af90:	8b20      	ldrh	r0, [r4, #24]
    af92:	005f      	lsls	r7, r3, #1
    af94:	bf48      	it	mi
    af96:	4240      	negmi	r0, r0
        else *bp++ = tone_amp;
    af98:	f821 0c02 	strh.w	r0, [r1, #-2]
        tone_phase += tone_incr;
    af9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      for(int i = 0;i < AUDIO_BLOCK_SAMPLES;i++) {
    af9e:	3a01      	subs	r2, #1
    afa0:	f101 0102 	add.w	r1, r1, #2
        tone_phase += tone_incr;
    afa4:	4403      	add	r3, r0
      for(int i = 0;i < AUDIO_BLOCK_SAMPLES;i++) {
    afa6:	d1f3      	bne.n	af90 <_ZN18AudioSynthWaveform6updateEv+0x168>
    afa8:	e782      	b.n	aeb0 <_ZN18AudioSynthWaveform6updateEv+0x88>
    afaa:	69e3      	ldr	r3, [r4, #28]
    afac:	f500 7782 	add.w	r7, r0, #260	; 0x104
    switch(tone_type) {
    afb0:	4632      	mov	r2, r6
          tmp_amp = -tone_amp;
    afb2:	8b20      	ldrh	r0, [r4, #24]
        if(tone_phase & 0x80000000) {
    afb4:	2b00      	cmp	r3, #0
          tmp_amp = -tone_amp;
    afb6:	bfb8      	it	lt
    afb8:	4240      	neglt	r0, r0
        mag = tone_phase << 2;
    afba:	ea4f 0183 	mov.w	r1, r3, lsl #2
          tmp_amp = -tone_amp;
    afbe:	bfb8      	it	lt
    afc0:	b280      	uxthlt	r0, r0
        if(tone_phase & 0x40000000) {
    afc2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
          mag = ~mag + 1;
    afc6:	bf18      	it	ne
    afc8:	4249      	negne	r1, r1
        *bp++ = ((short)(mag>>17)*tmp_amp) >> 15;
    afca:	b200      	sxth	r0, r0
    afcc:	0c49      	lsrs	r1, r1, #17
    afce:	fb00 f101 	mul.w	r1, r0, r1
    afd2:	13c9      	asrs	r1, r1, #15
    afd4:	f822 1b02 	strh.w	r1, [r2], #2
        tone_phase += 2*tone_incr;
    afd8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      for(int i = 0;i < AUDIO_BLOCK_SAMPLES;i++) {
    afda:	42ba      	cmp	r2, r7
        tone_phase += 2*tone_incr;
    afdc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
      for(int i = 0;i < AUDIO_BLOCK_SAMPLES;i++) {
    afe0:	d1e7      	bne.n	afb2 <_ZN18AudioSynthWaveform6updateEv+0x18a>
    afe2:	e765      	b.n	aeb0 <_ZN18AudioSynthWaveform6updateEv+0x88>
    afe4:	69e3      	ldr	r3, [r4, #28]
    afe6:	6a27      	ldr	r7, [r4, #32]
    afe8:	1d81      	adds	r1, r0, #6
    switch(tone_type) {
    afea:	2280      	movs	r2, #128	; 0x80
        if(tone_phase < tone_width)*bp++ = -tone_amp;
    afec:	8b20      	ldrh	r0, [r4, #24]
    afee:	42bb      	cmp	r3, r7
    aff0:	bf38      	it	cc
    aff2:	4240      	negcc	r0, r0
        else *bp++ = tone_amp;
    aff4:	f821 0c02 	strh.w	r0, [r1, #-2]
        tone_phase += tone_incr;
    aff8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      for(int i = 0;i < AUDIO_BLOCK_SAMPLES;i++) {
    affa:	3a01      	subs	r2, #1
    affc:	f101 0102 	add.w	r1, r1, #2
        tone_phase += tone_incr;
    b000:	4403      	add	r3, r0
      for(int i = 0;i < AUDIO_BLOCK_SAMPLES;i++) {
    b002:	d1f3      	bne.n	afec <_ZN18AudioSynthWaveform6updateEv+0x1c4>
    b004:	e754      	b.n	aeb0 <_ZN18AudioSynthWaveform6updateEv+0x88>
    b006:	69e3      	ldr	r3, [r4, #28]
    b008:	f500 7e82 	add.w	lr, r0, #260	; 0x104
    switch(tone_type) {
    b00c:	4632      	mov	r2, r6
        *bp++ = ((short)(tone_phase>>15)*tone_amp) >> 15;
    b00e:	8b20      	ldrh	r0, [r4, #24]
         tone_phase -= tone_incr;
    b010:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        *bp++ = ((short)(tone_phase>>15)*tone_amp) >> 15;
    b012:	f3c3 37cf 	ubfx	r7, r3, #15, #16
    b016:	fb17 f000 	smulbb	r0, r7, r0
    b01a:	13c0      	asrs	r0, r0, #15
    b01c:	f822 0b02 	strh.w	r0, [r2], #2
      for(int i = 0;i < AUDIO_BLOCK_SAMPLES;i++) {
    b020:	4572      	cmp	r2, lr
         tone_phase -= tone_incr;
    b022:	ebc1 0303 	rsb	r3, r1, r3
      for(int i = 0;i < AUDIO_BLOCK_SAMPLES;i++) {
    b026:	d1f2      	bne.n	b00e <_ZN18AudioSynthWaveform6updateEv+0x1e6>
    b028:	e742      	b.n	aeb0 <_ZN18AudioSynthWaveform6updateEv+0x88>
    b02a:	bf00      	nop
    b02c:	00011e10 	.word	0x00011e10

0000b030 <_ZN20AudioSynthNoiseWhite6updateEv>:

// Park-Miller-Carta Pseudo-Random Number Generator
// http://www.firstpr.com.au/dsp/rand31/

void AudioSynthNoiseWhite::update(void)
{
    b030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	audio_block_t *block;
	uint32_t *p, *end;
	int32_t n1, n2, gain;
	uint32_t lo, hi, val1, val2;

	gain = level;
    b034:	6984      	ldr	r4, [r0, #24]
{
    b036:	4681      	mov	r9, r0
	if (gain == 0) return;
    b038:	b90c      	cbnz	r4, b03e <_ZN20AudioSynthNoiseWhite6updateEv+0xe>
    b03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	block = allocate();
    b03e:	f7fe fbd5 	bl	97ec <_ZN11AudioStream8allocateEv>
	if (!block) return;
    b042:	4680      	mov	r8, r0
    b044:	2800      	cmp	r0, #0
    b046:	d0f8      	beq.n	b03a <_ZN20AudioSynthNoiseWhite6updateEv+0xa>
	p = (uint32_t *)(block->data);
	end = p + AUDIO_BLOCK_SAMPLES/2;
	lo = seed;
    b048:	f8d9 501c 	ldr.w	r5, [r9, #28]
	end = p + AUDIO_BLOCK_SAMPLES/2;
    b04c:	f500 7082 	add.w	r0, r0, #260	; 0x104
	p = (uint32_t *)(block->data);
    b050:	f108 0204 	add.w	r2, r8, #4
	asm volatile("smulbt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    b054:	f244 13a7 	movw	r3, #16807	; 0x41a7
    b058:	fb13 f115 	smulbt	r1, r3, r5
	do {
#if defined(KINETISK)
		hi = multiply_16bx16t(16807, lo); // 16807 * (lo >> 16)
		lo = 16807 * (lo & 0xFFFF);
		lo += (hi & 0x7FFF) << 16;
		lo += hi >> 15;
    b05c:	0bce      	lsrs	r6, r1, #15
		lo = 16807 * (lo & 0xFFFF);
    b05e:	b2ad      	uxth	r5, r5
		lo += (hi & 0x7FFF) << 16;
    b060:	fb03 6505 	mla	r5, r3, r5, r6
    b064:	f3c1 060e 	ubfx	r6, r1, #0, #15
		lo += hi >> 15;
    b068:	eb05 4606 	add.w	r6, r5, r6, lsl #16
		lo = (lo & 0x7FFFFFFF) + (lo >> 31);
    b06c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
    b070:	eb05 76d6 	add.w	r6, r5, r6, lsr #31
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    b074:	fb34 f706 	smulwb	r7, r4, r6
	asm volatile("smulbt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    b078:	fb13 f116 	smulbt	r1, r3, r6
		n1 = signed_multiply_32x16b(gain, lo);
		hi = multiply_16bx16t(16807, lo); // 16807 * (lo >> 16)
		lo = 16807 * (lo & 0xFFFF);
		lo += (hi & 0x7FFF) << 16;
    b07c:	f3c1 050e 	ubfx	r5, r1, #0, #15
		lo += hi >> 15;
    b080:	0bc9      	lsrs	r1, r1, #15
		lo += (hi & 0x7FFF) << 16;
    b082:	eb01 4105 	add.w	r1, r1, r5, lsl #16
		lo = 16807 * (lo & 0xFFFF);
    b086:	b2b6      	uxth	r6, r6
		lo += hi >> 15;
    b088:	fb03 1606 	mla	r6, r3, r6, r1
		lo = (lo & 0x7FFFFFFF) + (lo >> 31);
    b08c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
    b090:	eb05 75d6 	add.w	r5, r5, r6, lsr #31
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    b094:	fb34 fe05 	smulwb	lr, r4, r5
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    b098:	eac7 4e0e 	pkhbt	lr, r7, lr, lsl #16
	asm volatile("smulbt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    b09c:	fb13 f115 	smulbt	r1, r3, r5
		n2 = signed_multiply_32x16b(gain, lo);
		val1 = pack_16b_16b(n2, n1);
		hi = multiply_16bx16t(16807, lo); // 16807 * (lo >> 16)
		lo = 16807 * (lo & 0xFFFF);
		lo += (hi & 0x7FFF) << 16;
    b0a0:	f3c1 060e 	ubfx	r6, r1, #0, #15
		lo += hi >> 15;
    b0a4:	0bc9      	lsrs	r1, r1, #15
		lo += (hi & 0x7FFF) << 16;
    b0a6:	eb01 4106 	add.w	r1, r1, r6, lsl #16
		lo = 16807 * (lo & 0xFFFF);
    b0aa:	b2ad      	uxth	r5, r5
		lo += hi >> 15;
    b0ac:	fb03 1505 	mla	r5, r3, r5, r1
		lo = (lo & 0x7FFFFFFF) + (lo >> 31);
    b0b0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
    b0b4:	eb06 76d5 	add.w	r6, r6, r5, lsr #31
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    b0b8:	fb34 f106 	smulwb	r1, r4, r6
	asm volatile("smulbt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    b0bc:	fb13 f716 	smulbt	r7, r3, r6
		n1 = signed_multiply_32x16b(gain, lo);
		hi = multiply_16bx16t(16807, lo); // 16807 * (lo >> 16)
		lo = 16807 * (lo & 0xFFFF);
		lo += (hi & 0x7FFF) << 16;
    b0c0:	f3c7 050e 	ubfx	r5, r7, #0, #15
		lo += hi >> 15;
    b0c4:	0bff      	lsrs	r7, r7, #15
		lo += (hi & 0x7FFF) << 16;
    b0c6:	eb07 4705 	add.w	r7, r7, r5, lsl #16
		lo = 16807 * (lo & 0xFFFF);
    b0ca:	b2b6      	uxth	r6, r6
		lo += hi >> 15;
    b0cc:	fb03 7606 	mla	r6, r3, r6, r7
		lo = (lo & 0x7FFFFFFF) + (lo >> 31);
    b0d0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
    b0d4:	eb05 75d6 	add.w	r5, r5, r6, lsr #31
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    b0d8:	fb34 f605 	smulwb	r6, r4, r5
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    b0dc:	eac1 4106 	pkhbt	r1, r1, r6, lsl #16
		n2 = signed_multiply_32x16b(gain, lo);
		val2 = pack_16b_16b(n2, n1);
		*p++ = val1;
    b0e0:	f8c2 e000 	str.w	lr, [r2]
		*p++ = val2;
    b0e4:	6051      	str	r1, [r2, #4]
    b0e6:	3208      	adds	r2, #8
	do {
    b0e8:	4290      	cmp	r0, r2
    b0ea:	d8b5      	bhi.n	b058 <_ZN20AudioSynthNoiseWhite6updateEv+0x28>
		val1 = pack_16b_16b(n2, n1);
		*p++ = val1;
#endif
	} while (p < end);
	seed = lo;
	transmit(block);
    b0ec:	4648      	mov	r0, r9
	seed = lo;
    b0ee:	f8c9 501c 	str.w	r5, [r9, #28]
	transmit(block);
    b0f2:	4641      	mov	r1, r8
    b0f4:	2200      	movs	r2, #0
    b0f6:	f7fe fbe7 	bl	98c8 <_ZN11AudioStream8transmitEP18audio_block_structh>
	release(block);
    b0fa:	4640      	mov	r0, r8
}
    b0fc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	release(block);
    b100:	f7fe bbbe 	b.w	9880 <_ZN11AudioStream7releaseEP18audio_block_struct>

0000b104 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    b104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    b106:	1e1d      	subs	r5, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    b108:	6803      	ldr	r3, [r0, #0]
									   int nLedsOrOffset, int nLedsIfOffset) {
    b10a:	4604      	mov	r4, r0
    b10c:	bfcc      	ite	gt
    b10e:	eb02 0742 	addgt.w	r7, r2, r2, lsl #1
    b112:	2700      	movle	r7, #0
    b114:	460e      	mov	r6, r1
	pLed->init();
    b116:	689b      	ldr	r3, [r3, #8]
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    b118:	bfd8      	it	le
    b11a:	4615      	movle	r5, r2
	pLed->setLeds(data + nOffset, nLeds);
    b11c:	443e      	add	r6, r7
	pLed->init();
    b11e:	4798      	blx	r3
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    b120:	6823      	ldr	r3, [r4, #0]
        m_Data = data;
    b122:	6066      	str	r6, [r4, #4]
        m_nLeds = nLeds;
    b124:	6165      	str	r5, [r4, #20]
    b126:	695b      	ldr	r3, [r3, #20]
    b128:	4620      	mov	r0, r4
    b12a:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    b12c:	b140      	cbz	r0, b140 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x3c>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    b12e:	4b05      	ldr	r3, [pc, #20]	; (b144 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x40>)
    b130:	4905      	ldr	r1, [pc, #20]	; (b148 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x44>)
    b132:	685a      	ldr	r2, [r3, #4]
    b134:	fb91 f0f0 	sdiv	r0, r1, r0
    b138:	4290      	cmp	r0, r2
    b13a:	bf2c      	ite	cs
    b13c:	6058      	strcs	r0, [r3, #4]
    b13e:	605a      	strcc	r2, [r3, #4]
}
    b140:	4620      	mov	r0, r4
    b142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b144:	200027bc 	.word	0x200027bc
    b148:	000f4240 	.word	0x000f4240

0000b14c <_ZN8CFastLED9clearDataEv>:
    static CLEDController *head() { return m_pHead; }
    b14c:	4b08      	ldr	r3, [pc, #32]	; (b170 <_ZN8CFastLED9clearDataEv+0x24>)
void CFastLED::clearData() {
    b14e:	b510      	push	{r4, lr}
    b150:	681c      	ldr	r4, [r3, #0]
	while(pCur) {
    b152:	b15c      	cbz	r4, b16c <_ZN8CFastLED9clearDataEv+0x20>
	CLEDController *pCur = CLEDController::head();
    b154:	6863      	ldr	r3, [r4, #4]
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    b156:	2100      	movs	r1, #0
    b158:	4618      	mov	r0, r3
        if(m_Data) {
    b15a:	b123      	cbz	r3, b166 <_ZN8CFastLED9clearDataEv+0x1a>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    b15c:	6962      	ldr	r2, [r4, #20]
    b15e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    b162:	f003 f883 	bl	e26c <memset>
    b166:	68a4      	ldr	r4, [r4, #8]
	while(pCur) {
    b168:	2c00      	cmp	r4, #0
    b16a:	d1f3      	bne.n	b154 <_ZN8CFastLED9clearDataEv+0x8>
    b16c:	bd10      	pop	{r4, pc}
    b16e:	bf00      	nop
    b170:	200027cc 	.word	0x200027cc

0000b174 <_ZN8CFastLED13setCorrectionERK4CRGB>:
    static CLEDController *head() { return m_pHead; }
    b174:	4b07      	ldr	r3, [pc, #28]	; (b194 <_ZN8CFastLED13setCorrectionERK4CRGB+0x20>)
    b176:	681b      	ldr	r3, [r3, #0]
void CFastLED::setCorrection(const struct CRGB & correction) {
    b178:	b410      	push	{r4}
	while(pCur) {
    b17a:	b143      	cbz	r3, b18e <_ZN8CFastLED13setCorrectionERK4CRGB+0x1a>
        r = rhs.r;
    b17c:	7808      	ldrb	r0, [r1, #0]
        g = rhs.g;
    b17e:	784a      	ldrb	r2, [r1, #1]
        b = rhs.b;
    b180:	788c      	ldrb	r4, [r1, #2]
        b = rhs.b;
    b182:	739c      	strb	r4, [r3, #14]
        r = rhs.r;
    b184:	7318      	strb	r0, [r3, #12]
        g = rhs.g;
    b186:	735a      	strb	r2, [r3, #13]
	CLEDController *pCur = CLEDController::head();
    b188:	689b      	ldr	r3, [r3, #8]
	while(pCur) {
    b18a:	2b00      	cmp	r3, #0
    b18c:	d1f6      	bne.n	b17c <_ZN8CFastLED13setCorrectionERK4CRGB+0x8>
}
    b18e:	f85d 4b04 	ldr.w	r4, [sp], #4
    b192:	4770      	bx	lr
    b194:	200027cc 	.word	0x200027cc

0000b198 <_ZN8CFastLED8countFPSEi>:
void CFastLED::countFPS(int nFrames) {
    b198:	b470      	push	{r4, r5, r6}
  if(br++ >= nFrames) {
    b19a:	4b0f      	ldr	r3, [pc, #60]	; (b1d8 <_ZN8CFastLED8countFPSEi+0x40>)
    b19c:	681a      	ldr	r2, [r3, #0]
    b19e:	1c54      	adds	r4, r2, #1
    b1a0:	428a      	cmp	r2, r1
void CFastLED::countFPS(int nFrames) {
    b1a2:	b083      	sub	sp, #12
  if(br++ >= nFrames) {
    b1a4:	601c      	str	r4, [r3, #0]
    b1a6:	db13      	blt.n	b1d0 <_ZN8CFastLED8countFPSEi+0x38>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b1a8:	490c      	ldr	r1, [pc, #48]	; (b1dc <_ZN8CFastLED8countFPSEi+0x44>)
		now -= lastframe;
    b1aa:	4a0d      	ldr	r2, [pc, #52]	; (b1e0 <_ZN8CFastLED8countFPSEi+0x48>)
    b1ac:	680d      	ldr	r5, [r1, #0]
    b1ae:	9500      	str	r5, [sp, #0]
	return ret;
    b1b0:	9e00      	ldr	r6, [sp, #0]
    b1b2:	6815      	ldr	r5, [r2, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b1b4:	6809      	ldr	r1, [r1, #0]
    b1b6:	9101      	str	r1, [sp, #4]
		m_nFPS = (br * 1000) / now;
    b1b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b1bc:	fb01 f404 	mul.w	r4, r1, r4
		now -= lastframe;
    b1c0:	1b75      	subs	r5, r6, r5
		m_nFPS = (br * 1000) / now;
    b1c2:	fbb4 f4f5 	udiv	r4, r4, r5
	return ret;
    b1c6:	9901      	ldr	r1, [sp, #4]
    b1c8:	8044      	strh	r4, [r0, #2]
    br = 0;
    b1ca:	2000      	movs	r0, #0
    lastframe = millis();
    b1cc:	6011      	str	r1, [r2, #0]
    br = 0;
    b1ce:	6018      	str	r0, [r3, #0]
}
    b1d0:	b003      	add	sp, #12
    b1d2:	bc70      	pop	{r4, r5, r6}
    b1d4:	4770      	bx	lr
    b1d6:	bf00      	nop
    b1d8:	200027d0 	.word	0x200027d0
    b1dc:	20002418 	.word	0x20002418
    b1e0:	200027d8 	.word	0x200027d8

0000b1e4 <_ZN8CFastLED4showEh>:
void CFastLED::show(uint8_t scale) {
    b1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b1e8:	6843      	ldr	r3, [r0, #4]
    b1ea:	4c2f      	ldr	r4, [pc, #188]	; (b2a8 <_ZN8CFastLED4showEh+0xc4>)
    b1ec:	b083      	sub	sp, #12
    b1ee:	4680      	mov	r8, r0
    b1f0:	4689      	mov	r9, r1
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    b1f2:	2b00      	cmp	r3, #0
    b1f4:	d14f      	bne.n	b296 <_ZN8CFastLED4showEh+0xb2>
	lastshow = micros();
    b1f6:	f7fb fedb 	bl	6fb0 <micros>
	if(m_pPowerFunc) {
    b1fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
	lastshow = micros();
    b1fe:	6020      	str	r0, [r4, #0]
	if(m_pPowerFunc) {
    b200:	b123      	cbz	r3, b20c <_ZN8CFastLED4showEh+0x28>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    b202:	4648      	mov	r0, r9
    b204:	f8d8 1008 	ldr.w	r1, [r8, #8]
    b208:	4798      	blx	r3
    b20a:	4681      	mov	r9, r0
    b20c:	4b27      	ldr	r3, [pc, #156]	; (b2ac <_ZN8CFastLED4showEh+0xc8>)
    b20e:	681c      	ldr	r4, [r3, #0]
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    b210:	2700      	movs	r7, #0
	while(pCur) {
    b212:	2c00      	cmp	r4, #0
    b214:	d038      	beq.n	b288 <_ZN8CFastLED4showEh+0xa4>
		if(m_nFPS < 100) { pCur->setDither(0); }
    b216:	f8b8 3002 	ldrh.w	r3, [r8, #2]
	CLEDController *pCur = CLEDController::head();
    b21a:	7ca6      	ldrb	r6, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    b21c:	6861      	ldr	r1, [r4, #4]
    b21e:	6962      	ldr	r2, [r4, #20]
		if(m_nFPS < 100) { pCur->setDither(0); }
    b220:	2b63      	cmp	r3, #99	; 0x63
    b222:	6823      	ldr	r3, [r4, #0]
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    b224:	bf98      	it	ls
    b226:	74a7      	strbls	r7, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    b228:	f8d3 c004 	ldr.w	ip, [r3, #4]
        : r(ir), g(ig), b(ib)
    b22c:	f88d 7004 	strb.w	r7, [sp, #4]
    b230:	f88d 7005 	strb.w	r7, [sp, #5]
    b234:	f88d 7006 	strb.w	r7, [sp, #6]
              if(scale > 0) {
    b238:	f1b9 0f00 	cmp.w	r9, #0
    b23c:	d01d      	beq.n	b27a <_ZN8CFastLED4showEh+0x96>
    b23e:	f104 000b 	add.w	r0, r4, #11
    b242:	2300      	movs	r3, #0
    b244:	f104 0b0c 	add.w	fp, r4, #12
    b248:	f104 0a0f 	add.w	sl, r4, #15
                      uint8_t cc = colorCorrection.raw[i];
    b24c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
    b250:	ebcb 0e00 	rsb	lr, fp, r0
                      uint8_t ct = colorTemperature.raw[i];
    b254:	f81a e00e 	ldrb.w	lr, [sl, lr]
                      if(cc > 0 && ct > 0) {
    b258:	b165      	cbz	r5, b274 <_ZN8CFastLED4showEh+0x90>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    b25a:	3501      	adds	r5, #1
    b25c:	fb0e 5505 	mla	r5, lr, r5, r5
    b260:	fb09 f505 	mul.w	r5, r9, r5
                          work /= 0x10000L;
    b264:	0c2d      	lsrs	r5, r5, #16
                      if(cc > 0 && ct > 0) {
    b266:	f1be 0f00 	cmp.w	lr, #0
    b26a:	d003      	beq.n	b274 <_ZN8CFastLED4showEh+0x90>
                          adj.raw[i] = work & 0xFF;
    b26c:	f10d 0e04 	add.w	lr, sp, #4
    b270:	f80e 5003 	strb.w	r5, [lr, r3]
    b274:	3301      	adds	r3, #1
                  for(uint8_t i = 0; i < 3; i++) {
    b276:	2b03      	cmp	r3, #3
    b278:	d1e8      	bne.n	b24c <_ZN8CFastLED4showEh+0x68>
        show(m_Data, m_nLeds, getAdjustment(brightness));
    b27a:	4620      	mov	r0, r4
    b27c:	ab01      	add	r3, sp, #4
    b27e:	47e0      	blx	ip
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    b280:	74a6      	strb	r6, [r4, #18]
	CLEDController *pCur = CLEDController::head();
    b282:	68a4      	ldr	r4, [r4, #8]
	while(pCur) {
    b284:	2c00      	cmp	r4, #0
    b286:	d1c6      	bne.n	b216 <_ZN8CFastLED4showEh+0x32>
	countFPS();
    b288:	4640      	mov	r0, r8
    b28a:	2119      	movs	r1, #25
    b28c:	f7ff ff84 	bl	b198 <_ZN8CFastLED8countFPSEi>
}
    b290:	b003      	add	sp, #12
    b292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    b296:	f7fb fe8b 	bl	6fb0 <micros>
    b29a:	6822      	ldr	r2, [r4, #0]
    b29c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    b2a0:	1a80      	subs	r0, r0, r2
    b2a2:	4298      	cmp	r0, r3
    b2a4:	d2a7      	bcs.n	b1f6 <_ZN8CFastLED4showEh+0x12>
    b2a6:	e7a4      	b.n	b1f2 <_ZN8CFastLED4showEh+0xe>
    b2a8:	200027d4 	.word	0x200027d4
    b2ac:	200027cc 	.word	0x200027cc

0000b2b0 <_ZN8CFastLED9showColorERK4CRGBh>:
void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
    b2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b2b4:	b085      	sub	sp, #20
    b2b6:	4c2f      	ldr	r4, [pc, #188]	; (b374 <_ZN8CFastLED9showColorERK4CRGBh+0xc4>)
    b2b8:	6843      	ldr	r3, [r0, #4]
    b2ba:	9101      	str	r1, [sp, #4]
    b2bc:	4607      	mov	r7, r0
    b2be:	4690      	mov	r8, r2
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    b2c0:	2b00      	cmp	r3, #0
    b2c2:	d14f      	bne.n	b364 <_ZN8CFastLED9showColorERK4CRGBh+0xb4>
	lastshow = micros();
    b2c4:	f7fb fe74 	bl	6fb0 <micros>
	if(m_pPowerFunc) {
    b2c8:	68fb      	ldr	r3, [r7, #12]
	lastshow = micros();
    b2ca:	6020      	str	r0, [r4, #0]
	if(m_pPowerFunc) {
    b2cc:	b11b      	cbz	r3, b2d6 <_ZN8CFastLED9showColorERK4CRGBh+0x26>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    b2ce:	4640      	mov	r0, r8
    b2d0:	68b9      	ldr	r1, [r7, #8]
    b2d2:	4798      	blx	r3
    b2d4:	4680      	mov	r8, r0
    static CLEDController *head() { return m_pHead; }
    b2d6:	4b28      	ldr	r3, [pc, #160]	; (b378 <_ZN8CFastLED9showColorERK4CRGBh+0xc8>)
    b2d8:	681c      	ldr	r4, [r3, #0]
	while(pCur) {
    b2da:	2c00      	cmp	r4, #0
    b2dc:	d03b      	beq.n	b356 <_ZN8CFastLED9showColorERK4CRGBh+0xa6>
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    b2de:	4643      	mov	r3, r8
    b2e0:	f10d 0a0c 	add.w	sl, sp, #12
    b2e4:	46b8      	mov	r8, r7
    b2e6:	2600      	movs	r6, #0
    b2e8:	461f      	mov	r7, r3
		if(m_nFPS < 100) { pCur->setDither(0); }
    b2ea:	f8b8 3002 	ldrh.w	r3, [r8, #2]
	CLEDController *pCur = CLEDController::head();
    b2ee:	7ca5      	ldrb	r5, [r4, #18]
        showColor(data, m_nLeds, getAdjustment(brightness));
    b2f0:	6962      	ldr	r2, [r4, #20]
		if(m_nFPS < 100) { pCur->setDither(0); }
    b2f2:	2b63      	cmp	r3, #99	; 0x63
    b2f4:	6823      	ldr	r3, [r4, #0]
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    b2f6:	bf98      	it	ls
    b2f8:	74a6      	strbls	r6, [r4, #18]
        showColor(data, m_nLeds, getAdjustment(brightness));
    b2fa:	f8d3 c000 	ldr.w	ip, [r3]
    b2fe:	f88d 600c 	strb.w	r6, [sp, #12]
    b302:	f88d 600d 	strb.w	r6, [sp, #13]
    b306:	f88d 600e 	strb.w	r6, [sp, #14]
              if(scale > 0) {
    b30a:	b1df      	cbz	r7, b344 <_ZN8CFastLED9showColorERK4CRGBh+0x94>
    b30c:	f104 010b 	add.w	r1, r4, #11
    b310:	2300      	movs	r3, #0
    b312:	f104 0b0c 	add.w	fp, r4, #12
    b316:	f104 090f 	add.w	r9, r4, #15
                      uint8_t cc = colorCorrection.raw[i];
    b31a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    b31e:	ebcb 0e01 	rsb	lr, fp, r1
                      uint8_t ct = colorTemperature.raw[i];
    b322:	f819 e00e 	ldrb.w	lr, [r9, lr]
                      if(cc > 0 && ct > 0) {
    b326:	b150      	cbz	r0, b33e <_ZN8CFastLED9showColorERK4CRGBh+0x8e>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    b328:	3001      	adds	r0, #1
    b32a:	fb0e 0000 	mla	r0, lr, r0, r0
    b32e:	fb07 f000 	mul.w	r0, r7, r0
                          work /= 0x10000L;
    b332:	0c00      	lsrs	r0, r0, #16
                      if(cc > 0 && ct > 0) {
    b334:	f1be 0f00 	cmp.w	lr, #0
    b338:	d001      	beq.n	b33e <_ZN8CFastLED9showColorERK4CRGBh+0x8e>
                          adj.raw[i] = work & 0xFF;
    b33a:	f80a 0003 	strb.w	r0, [sl, r3]
    b33e:	3301      	adds	r3, #1
                  for(uint8_t i = 0; i < 3; i++) {
    b340:	2b03      	cmp	r3, #3
    b342:	d1ea      	bne.n	b31a <_ZN8CFastLED9showColorERK4CRGBh+0x6a>
        showColor(data, m_nLeds, getAdjustment(brightness));
    b344:	4620      	mov	r0, r4
    b346:	9901      	ldr	r1, [sp, #4]
    b348:	4653      	mov	r3, sl
    b34a:	47e0      	blx	ip
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    b34c:	74a5      	strb	r5, [r4, #18]
	CLEDController *pCur = CLEDController::head();
    b34e:	68a4      	ldr	r4, [r4, #8]
	while(pCur) {
    b350:	2c00      	cmp	r4, #0
    b352:	d1ca      	bne.n	b2ea <_ZN8CFastLED9showColorERK4CRGBh+0x3a>
    b354:	4647      	mov	r7, r8
	countFPS();
    b356:	4638      	mov	r0, r7
    b358:	2119      	movs	r1, #25
    b35a:	f7ff ff1d 	bl	b198 <_ZN8CFastLED8countFPSEi>
}
    b35e:	b005      	add	sp, #20
    b360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    b364:	f7fb fe24 	bl	6fb0 <micros>
    b368:	6822      	ldr	r2, [r4, #0]
    b36a:	687b      	ldr	r3, [r7, #4]
    b36c:	1a80      	subs	r0, r0, r2
    b36e:	4298      	cmp	r0, r3
    b370:	d2a8      	bcs.n	b2c4 <_ZN8CFastLED9showColorERK4CRGBh+0x14>
    b372:	e7a5      	b.n	b2c0 <_ZN8CFastLED9showColorERK4CRGBh+0x10>
    b374:	200027d4 	.word	0x200027d4
    b378:	200027cc 	.word	0x200027cc

0000b37c <_ZN8CFastLED5clearEb>:
void CFastLED::clear(boolean writeData) {
    b37c:	b510      	push	{r4, lr}
    b37e:	4604      	mov	r4, r0
    b380:	b082      	sub	sp, #8
	if(writeData) {
    b382:	b151      	cbz	r1, b39a <_ZN8CFastLED5clearEb+0x1e>
    b384:	2300      	movs	r3, #0
		showColor(CRGB(0,0,0), 0);
    b386:	461a      	mov	r2, r3
    b388:	a901      	add	r1, sp, #4
    b38a:	f88d 3004 	strb.w	r3, [sp, #4]
    b38e:	f88d 3005 	strb.w	r3, [sp, #5]
    b392:	f88d 3006 	strb.w	r3, [sp, #6]
    b396:	f7ff ff8b 	bl	b2b0 <_ZN8CFastLED9showColorERK4CRGBh>
    clearData();
    b39a:	4620      	mov	r0, r4
    b39c:	f7ff fed6 	bl	b14c <_ZN8CFastLED9clearDataEv>
}
    b3a0:	b002      	add	sp, #8
    b3a2:	bd10      	pop	{r4, pc}

0000b3a4 <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    b3a4:	2000      	movs	r0, #0
    b3a6:	4770      	bx	lr

0000b3a8 <_GLOBAL__sub_I_pSmartMatrix>:
	m_Scale = 255;
    b3a8:	4b04      	ldr	r3, [pc, #16]	; (b3bc <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    b3aa:	2200      	movs	r2, #0
	m_Scale = 255;
    b3ac:	20ff      	movs	r0, #255	; 0xff
	m_nPowerData = 0xFFFFFFFF;
    b3ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	m_Scale = 255;
    b3b2:	7018      	strb	r0, [r3, #0]
	m_nPowerData = 0xFFFFFFFF;
    b3b4:	6099      	str	r1, [r3, #8]
	m_nFPS = 0;
    b3b6:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    b3b8:	60da      	str	r2, [r3, #12]
    b3ba:	4770      	bx	lr
    b3bc:	200027bc 	.word	0x200027bc

0000b3c0 <_ZN3KeyC1Ev>:
#include <Key.h>


// default constructor
Key::Key() {
	kchar = NO_KEY;
    b3c0:	2200      	movs	r2, #0
    b3c2:	7002      	strb	r2, [r0, #0]
	kstate = IDLE;
    b3c4:	7202      	strb	r2, [r0, #8]
	stateChanged = false;
    b3c6:	7242      	strb	r2, [r0, #9]
}
    b3c8:	4770      	bx	lr
    b3ca:	bf00      	nop

0000b3cc <_ZN6Keypad8pin_modeEhh>:
class Keypad : public Key {
public:

	Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols);

	virtual void pin_mode(byte pinNum, byte mode) { pinMode(pinNum, mode); }
    b3cc:	4608      	mov	r0, r1
    b3ce:	4611      	mov	r1, r2
    b3d0:	f7fb bde8 	b.w	6fa4 <pinMode>

0000b3d4 <_ZN6Keypad9pin_writeEhb>:
			*portSetRegister(pin) = digitalPinToBitMask(pin);
    b3d4:	4b05      	ldr	r3, [pc, #20]	; (b3ec <_ZN6Keypad9pin_writeEhb+0x18>)
    b3d6:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
		if (val) {
    b3da:	b91a      	cbnz	r2, b3e4 <_ZN6Keypad9pin_writeEhb+0x10>
			*portClearRegister(pin) = digitalPinToBitMask(pin);
    b3dc:	2201      	movs	r2, #1
    b3de:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    b3e2:	4770      	bx	lr
			*portSetRegister(pin) = digitalPinToBitMask(pin);
    b3e4:	2201      	movs	r2, #1
    b3e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    b3ea:	4770      	bx	lr
    b3ec:	00011b14 	.word	0x00011b14

0000b3f0 <_ZN6Keypad8pin_readEh>:
		return *portInputRegister(pin);
    b3f0:	4b02      	ldr	r3, [pc, #8]	; (b3fc <_ZN6Keypad8pin_readEh+0xc>)
    b3f2:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    b3f6:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
	virtual void pin_write(byte pinNum, boolean level) { digitalWriteFast(pinNum, level); }
	virtual int  pin_read(byte pinNum) { return digitalReadFast(pinNum); }
    b3fa:	4770      	bx	lr
    b3fc:	00011b14 	.word	0x00011b14

0000b400 <_ZN6KeypadC1EPcPhS1_hh>:
||
*/
#include <Keypad.h>

// <<constructor>> Allows custom keymap, pin configuration, and keypad sizes.
Keypad::Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols) {
    b400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b404:	4606      	mov	r6, r0
    b406:	4634      	mov	r4, r6
    b408:	3004      	adds	r0, #4
    b40a:	469a      	mov	sl, r3
    b40c:	460f      	mov	r7, r1
    b40e:	4693      	mov	fp, r2
    b410:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
    b414:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
    b418:	f7ff ffd2 	bl	b3c0 <_ZN3KeyC1Ev>
    b41c:	4b12      	ldr	r3, [pc, #72]	; (b468 <_ZN6KeypadC1EPcPhS1_hh+0x68>)
    b41e:	f844 3b38 	str.w	r3, [r4], #56
    b422:	f506 75dc 	add.w	r5, r6, #440	; 0x1b8
    b426:	4620      	mov	r0, r4
    b428:	340c      	adds	r4, #12
    b42a:	f7ff ffc9 	bl	b3c0 <_ZN3KeyC1Ev>
    b42e:	42ac      	cmp	r4, r5
    b430:	d1f9      	bne.n	b426 <_ZN6KeypadC1EPcPhS1_hh+0x26>

	begin(userKeymap);

	setDebounceTime(10);
	setHoldTime(500);
	keypadEventListener = 0;
    b432:	2300      	movs	r3, #0
	return sizeof(key)/sizeof(Key);
}

// Minimum debounceTime is 1 mS. Any lower *will* slow down the loop().
void Keypad::setDebounceTime(uint debounce) {
	debounce<1 ? debounceTime=1 : debounceTime=debounce;
    b434:	210a      	movs	r1, #10
}

void Keypad::setHoldTime(uint hold) {
    holdTime = hold;
    b436:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
	sizeKpd.rows = numRows;
    b43a:	f886 91cc 	strb.w	r9, [r6, #460]	; 0x1cc
	sizeKpd.columns = numCols;
    b43e:	f886 81cd 	strb.w	r8, [r6, #461]	; 0x1cd
	rowPins = row;
    b442:	f8c6 b1c4 	str.w	fp, [r6, #452]	; 0x1c4
	columnPins = col;
    b446:	f8c6 a1c8 	str.w	sl, [r6, #456]	; 0x1c8
    keymap = userKeymap;
    b44a:	f8c6 71c0 	str.w	r7, [r6, #448]	; 0x1c0
	debounce<1 ? debounceTime=1 : debounceTime=debounce;
    b44e:	f8c6 11d0 	str.w	r1, [r6, #464]	; 0x1d0
    holdTime = hold;
    b452:	f8c6 21d4 	str.w	r2, [r6, #468]	; 0x1d4
	keypadEventListener = 0;
    b456:	f8c6 31dc 	str.w	r3, [r6, #476]	; 0x1dc
	startTime = 0;
    b45a:	f8c6 31bc 	str.w	r3, [r6, #444]	; 0x1bc
	single_key = false;
    b45e:	f886 31d8 	strb.w	r3, [r6, #472]	; 0x1d8
}
    b462:	4630      	mov	r0, r6
    b464:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b468:	000120c0 	.word	0x000120c0

0000b46c <_ZN6Keypad8scanKeysEv>:
void Keypad::scanKeys() {
    b46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (byte r=0; r<sizeKpd.rows; r++) {
    b470:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
void Keypad::scanKeys() {
    b474:	4604      	mov	r4, r0
	for (byte r=0; r<sizeKpd.rows; r++) {
    b476:	2500      	movs	r5, #0
    b478:	b16b      	cbz	r3, b496 <_ZN6Keypad8scanKeysEv+0x2a>
		pin_mode(rowPins[r],INPUT_PULLUP);
    b47a:	6822      	ldr	r2, [r4, #0]
    b47c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
    b480:	6816      	ldr	r6, [r2, #0]
    b482:	5d59      	ldrb	r1, [r3, r5]
    b484:	4620      	mov	r0, r4
    b486:	2202      	movs	r2, #2
    b488:	47b0      	blx	r6
	for (byte r=0; r<sizeKpd.rows; r++) {
    b48a:	3501      	adds	r5, #1
    b48c:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
    b490:	b2ed      	uxtb	r5, r5
    b492:	42ab      	cmp	r3, r5
    b494:	d8f1      	bhi.n	b47a <_ZN6Keypad8scanKeysEv+0xe>
	for (byte c=0; c<sizeKpd.columns; c++) {
    b496:	f894 31cd 	ldrb.w	r3, [r4, #461]	; 0x1cd
    b49a:	2b00      	cmp	r3, #0
    b49c:	d052      	beq.n	b544 <_ZN6Keypad8scanKeysEv+0xd8>
    b49e:	2600      	movs	r6, #0
		pin_mode(columnPins[c],OUTPUT);
    b4a0:	f04f 0901 	mov.w	r9, #1
    b4a4:	6822      	ldr	r2, [r4, #0]
    b4a6:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
    b4aa:	6815      	ldr	r5, [r2, #0]
    b4ac:	5d99      	ldrb	r1, [r3, r6]
    b4ae:	4620      	mov	r0, r4
    b4b0:	2201      	movs	r2, #1
    b4b2:	47a8      	blx	r5
		pin_write(columnPins[c], LOW);	// Begin column pulse output.
    b4b4:	6822      	ldr	r2, [r4, #0]
    b4b6:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
    b4ba:	6855      	ldr	r5, [r2, #4]
    b4bc:	5d99      	ldrb	r1, [r3, r6]
    b4be:	4620      	mov	r0, r4
    b4c0:	2200      	movs	r2, #0
    b4c2:	47a8      	blx	r5
		for (byte r=0; r<sizeKpd.rows; r++) {
    b4c4:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
    b4c8:	b323      	cbz	r3, b514 <_ZN6Keypad8scanKeysEv+0xa8>
			bitWrite(bitMap[r], c, !pin_read(rowPins[r]));  // keypress is active low so invert to high.
    b4ca:	fa09 f706 	lsl.w	r7, r9, r6
    b4ce:	ea6f 0807 	mvn.w	r8, r7
		for (byte r=0; r<sizeKpd.rows; r++) {
    b4d2:	2500      	movs	r5, #0
    b4d4:	e008      	b.n	b4e8 <_ZN6Keypad8scanKeysEv+0x7c>
			bitWrite(bitMap[r], c, !pin_read(rowPins[r]));  // keypress is active low so invert to high.
    b4d6:	6913      	ldr	r3, [r2, #16]
    b4d8:	433b      	orrs	r3, r7
    b4da:	6113      	str	r3, [r2, #16]
		for (byte r=0; r<sizeKpd.rows; r++) {
    b4dc:	3501      	adds	r5, #1
    b4de:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
    b4e2:	b2ed      	uxtb	r5, r5
    b4e4:	42ab      	cmp	r3, r5
    b4e6:	d915      	bls.n	b514 <_ZN6Keypad8scanKeysEv+0xa8>
			bitWrite(bitMap[r], c, !pin_read(rowPins[r]));  // keypress is active low so invert to high.
    b4e8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
    b4ec:	6822      	ldr	r2, [r4, #0]
    b4ee:	5d59      	ldrb	r1, [r3, r5]
    b4f0:	6892      	ldr	r2, [r2, #8]
    b4f2:	4620      	mov	r0, r4
    b4f4:	4790      	blx	r2
    b4f6:	eb04 0285 	add.w	r2, r4, r5, lsl #2
    b4fa:	4613      	mov	r3, r2
    b4fc:	2800      	cmp	r0, #0
    b4fe:	d0ea      	beq.n	b4d6 <_ZN6Keypad8scanKeysEv+0x6a>
    b500:	6912      	ldr	r2, [r2, #16]
    b502:	ea02 0208 	and.w	r2, r2, r8
    b506:	611a      	str	r2, [r3, #16]
		for (byte r=0; r<sizeKpd.rows; r++) {
    b508:	3501      	adds	r5, #1
    b50a:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
    b50e:	b2ed      	uxtb	r5, r5
    b510:	42ab      	cmp	r3, r5
    b512:	d8e9      	bhi.n	b4e8 <_ZN6Keypad8scanKeysEv+0x7c>
		pin_write(columnPins[c],HIGH);
    b514:	6822      	ldr	r2, [r4, #0]
    b516:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
    b51a:	6855      	ldr	r5, [r2, #4]
    b51c:	5d99      	ldrb	r1, [r3, r6]
    b51e:	4620      	mov	r0, r4
    b520:	2201      	movs	r2, #1
    b522:	47a8      	blx	r5
		pin_mode(columnPins[c],INPUT);
    b524:	6822      	ldr	r2, [r4, #0]
    b526:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
    b52a:	6815      	ldr	r5, [r2, #0]
    b52c:	5d99      	ldrb	r1, [r3, r6]
    b52e:	4620      	mov	r0, r4
    b530:	2200      	movs	r2, #0
    b532:	47a8      	blx	r5
	for (byte c=0; c<sizeKpd.columns; c++) {
    b534:	3601      	adds	r6, #1
    b536:	f894 31cd 	ldrb.w	r3, [r4, #461]	; 0x1cd
    b53a:	b2f6      	uxtb	r6, r6
    b53c:	42b3      	cmp	r3, r6
    b53e:	d8b1      	bhi.n	b4a4 <_ZN6Keypad8scanKeysEv+0x38>
    b540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000b548 <_ZN6Keypad15setDebounceTimeEj>:
	debounce<1 ? debounceTime=1 : debounceTime=debounce;
    b548:	b111      	cbz	r1, b550 <_ZN6Keypad15setDebounceTimeEj+0x8>
    b54a:	f8c0 11d0 	str.w	r1, [r0, #464]	; 0x1d0
    b54e:	4770      	bx	lr
    b550:	2301      	movs	r3, #1
    b552:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
    b556:	4770      	bx	lr

0000b558 <_ZN6Keypad11setHoldTimeEj>:
    holdTime = hold;
    b558:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
    b55c:	4770      	bx	lr
    b55e:	bf00      	nop

0000b560 <_ZN6Keypad12transitionToEh8KeyState>:
void Keypad::addEventListener(void (*listener)(char)){
	keypadEventListener = listener;
}

void Keypad::transitionTo(byte idx, KeyState nextState) {
	key[idx].kstate = nextState;
    b560:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    b564:	eb00 0383 	add.w	r3, r0, r3, lsl #2
void Keypad::transitionTo(byte idx, KeyState nextState) {
    b568:	b510      	push	{r4, lr}
	key[idx].stateChanged = true;

	// Sketch used the getKey() function.
	// Calls keypadEventListener only when the first key in slot 0 changes state.
	if (single_key)  {
    b56a:	f890 41d8 	ldrb.w	r4, [r0, #472]	; 0x1d8
	key[idx].kstate = nextState;
    b56e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	key[idx].stateChanged = true;
    b572:	2201      	movs	r2, #1
    b574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	if (single_key)  {
    b578:	b124      	cbz	r4, b584 <_ZN6Keypad12transitionToEh8KeyState+0x24>
	  	if ( (keypadEventListener!=NULL) && (idx==0) )  {
    b57a:	f8d0 31dc 	ldr.w	r3, [r0, #476]	; 0x1dc
    b57e:	b103      	cbz	r3, b582 <_ZN6Keypad12transitionToEh8KeyState+0x22>
    b580:	b141      	cbz	r1, b594 <_ZN6Keypad12transitionToEh8KeyState+0x34>
    b582:	bd10      	pop	{r4, pc}
		}
	}
	// Sketch used the getKeys() function.
	// Calls keypadEventListener on any key that changes state.
	else {
	  	if (keypadEventListener!=NULL)  {
    b584:	f8d0 21dc 	ldr.w	r2, [r0, #476]	; 0x1dc
    b588:	2a00      	cmp	r2, #0
    b58a:	d0fa      	beq.n	b582 <_ZN6Keypad12transitionToEh8KeyState+0x22>
			keypadEventListener(key[idx].kchar);
    b58c:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    b590:	4790      	blx	r2
    b592:	bd10      	pop	{r4, pc}
			keypadEventListener(key[0].kchar);
    b594:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
    b598:	4798      	blx	r3
    b59a:	bd10      	pop	{r4, pc}

0000b59c <_ZN6Keypad12nextKeyStateEhb>:
void Keypad::nextKeyState(byte idx, boolean button) {
    b59c:	b530      	push	{r4, r5, lr}
	key[idx].stateChanged = false;
    b59e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    b5a2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
void Keypad::nextKeyState(byte idx, boolean button) {
    b5a6:	4604      	mov	r4, r0
	key[idx].stateChanged = false;
    b5a8:	f103 0040 	add.w	r0, r3, #64	; 0x40
	switch (key[idx].kstate) {
    b5ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
	key[idx].stateChanged = false;
    b5b0:	2500      	movs	r5, #0
void Keypad::nextKeyState(byte idx, boolean button) {
    b5b2:	b083      	sub	sp, #12
	key[idx].stateChanged = false;
    b5b4:	7045      	strb	r5, [r0, #1]
	switch (key[idx].kstate) {
    b5b6:	2b03      	cmp	r3, #3
    b5b8:	d807      	bhi.n	b5ca <_ZN6Keypad12nextKeyStateEhb+0x2e>
    b5ba:	e8df f003 	tbb	[pc, r3]
    b5be:	081b      	.short	0x081b
    b5c0:	0213      	.short	0x0213
			transitionTo (idx, IDLE);
    b5c2:	4620      	mov	r0, r4
    b5c4:	2200      	movs	r2, #0
    b5c6:	f7ff ffcb 	bl	b560 <_ZN6Keypad12transitionToEh8KeyState>
}
    b5ca:	b003      	add	sp, #12
    b5cc:	bd30      	pop	{r4, r5, pc}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b5ce:	4b12      	ldr	r3, [pc, #72]	; (b618 <_ZN6Keypad12nextKeyStateEhb+0x7c>)
			if ((millis()-holdTimer)>holdTime)	// Waiting for a key HOLD...
    b5d0:	f8d4 01b8 	ldr.w	r0, [r4, #440]	; 0x1b8
    b5d4:	681b      	ldr	r3, [r3, #0]
    b5d6:	9301      	str	r3, [sp, #4]
	return ret;
    b5d8:	9d01      	ldr	r5, [sp, #4]
    b5da:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
    b5de:	1a28      	subs	r0, r5, r0
    b5e0:	4298      	cmp	r0, r3
    b5e2:	d814      	bhi.n	b60e <_ZN6Keypad12nextKeyStateEhb+0x72>
			else if (button==OPEN)				// or for a key to be RELEASED.
    b5e4:	2a00      	cmp	r2, #0
    b5e6:	d1f0      	bne.n	b5ca <_ZN6Keypad12nextKeyStateEhb+0x2e>
				transitionTo (idx, RELEASED);
    b5e8:	4620      	mov	r0, r4
    b5ea:	2203      	movs	r2, #3
    b5ec:	f7ff ffb8 	bl	b560 <_ZN6Keypad12transitionToEh8KeyState>
}
    b5f0:	b003      	add	sp, #12
    b5f2:	bd30      	pop	{r4, r5, pc}
			if (button==CLOSED) {
    b5f4:	2a00      	cmp	r2, #0
    b5f6:	d0e8      	beq.n	b5ca <_ZN6Keypad12nextKeyStateEhb+0x2e>
				transitionTo (idx, PRESSED);
    b5f8:	4620      	mov	r0, r4
    b5fa:	2201      	movs	r2, #1
    b5fc:	f7ff ffb0 	bl	b560 <_ZN6Keypad12transitionToEh8KeyState>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b600:	4b05      	ldr	r3, [pc, #20]	; (b618 <_ZN6Keypad12nextKeyStateEhb+0x7c>)
    b602:	681b      	ldr	r3, [r3, #0]
    b604:	9300      	str	r3, [sp, #0]
	return ret;
    b606:	9b00      	ldr	r3, [sp, #0]
				holdTimer = millis(); }		// Get ready for next HOLD state.
    b608:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
    b60c:	e7dd      	b.n	b5ca <_ZN6Keypad12nextKeyStateEhb+0x2e>
				transitionTo (idx, HOLD);
    b60e:	4620      	mov	r0, r4
    b610:	2202      	movs	r2, #2
    b612:	f7ff ffa5 	bl	b560 <_ZN6Keypad12transitionToEh8KeyState>
    b616:	e7d8      	b.n	b5ca <_ZN6Keypad12nextKeyStateEhb+0x2e>
    b618:	20002418 	.word	0x20002418

0000b61c <_ZN6Keypad10updateListEv>:
bool Keypad::updateList() {
    b61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b620:	4603      	mov	r3, r0
    b622:	4607      	mov	r7, r0
    b624:	2200      	movs	r2, #0
			key[i].kcode = -1;
    b626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		if (key[i].kstate==IDLE) {
    b62a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    b62e:	320c      	adds	r2, #12
    b630:	b921      	cbnz	r1, b63c <_ZN6Keypad10updateListEv+0x20>
			key[i].kchar = NO_KEY;
    b632:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
			key[i].kcode = -1;
    b636:	63d8      	str	r0, [r3, #60]	; 0x3c
			key[i].stateChanged = false;
    b638:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
	for (byte i=0; i<LIST_MAX; i++) {
    b63c:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
    b640:	f103 030c 	add.w	r3, r3, #12
    b644:	d1f1      	bne.n	b62a <_ZN6Keypad10updateListEv+0xe>
	for (byte r=0; r<sizeKpd.rows; r++) {
    b646:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
    b64a:	b3a3      	cbz	r3, b6b6 <_ZN6Keypad10updateListEv+0x9a>
    b64c:	f897 51cd 	ldrb.w	r5, [r7, #461]	; 0x1cd
    b650:	f04f 0900 	mov.w	r9, #0
		for (byte c=0; c<sizeKpd.columns; c++) {
    b654:	b34d      	cbz	r5, b6aa <_ZN6Keypad10updateListEv+0x8e>
    b656:	f04f 0800 	mov.w	r8, #0
    b65a:	f109 0a04 	add.w	sl, r9, #4
			boolean button = bitRead(bitMap[r],c);
    b65e:	f857 202a 	ldr.w	r2, [r7, sl, lsl #2]
			char keyChar = keymap[r * sizeKpd.columns + c];
    b662:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
    b666:	fb05 8609 	mla	r6, r5, r9, r8
			boolean button = bitRead(bitMap[r],c);
    b66a:	fa22 f208 	lsr.w	r2, r2, r8
			char keyChar = keymap[r * sizeKpd.columns + c];
    b66e:	f813 c006 	ldrb.w	ip, [r3, r6]
			boolean button = bitRead(bitMap[r],c);
    b672:	f002 0201 	and.w	r2, r2, #1
			char keyChar = keymap[r * sizeKpd.columns + c];
    b676:	463c      	mov	r4, r7
    b678:	2300      	movs	r3, #0
    b67a:	e001      	b.n	b680 <_ZN6Keypad10updateListEv+0x64>
	for (byte i=0; i<LIST_MAX; i++) {
    b67c:	2b20      	cmp	r3, #32
    b67e:	d028      	beq.n	b6d2 <_ZN6Keypad10updateListEv+0xb6>
		if (key[i].kcode == keyCode) {
    b680:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    b682:	4286      	cmp	r6, r0
    b684:	b2d9      	uxtb	r1, r3
    b686:	f104 040c 	add.w	r4, r4, #12
    b68a:	f103 0301 	add.w	r3, r3, #1
    b68e:	d1f5      	bne.n	b67c <_ZN6Keypad10updateListEv+0x60>
				nextKeyState(idx, button);
    b690:	4638      	mov	r0, r7
    b692:	f7ff ff83 	bl	b59c <_ZN6Keypad12nextKeyStateEhb>
    b696:	f897 51cd 	ldrb.w	r5, [r7, #461]	; 0x1cd
		for (byte c=0; c<sizeKpd.columns; c++) {
    b69a:	f108 0801 	add.w	r8, r8, #1
    b69e:	fa5f f888 	uxtb.w	r8, r8
    b6a2:	4545      	cmp	r5, r8
    b6a4:	d8db      	bhi.n	b65e <_ZN6Keypad10updateListEv+0x42>
    b6a6:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
	for (byte r=0; r<sizeKpd.rows; r++) {
    b6aa:	f109 0901 	add.w	r9, r9, #1
    b6ae:	fa5f f989 	uxtb.w	r9, r9
    b6b2:	454b      	cmp	r3, r9
    b6b4:	d8ce      	bhi.n	b654 <_ZN6Keypad10updateListEv+0x38>
    b6b6:	2300      	movs	r3, #0
    b6b8:	4618      	mov	r0, r3
    b6ba:	18fa      	adds	r2, r7, r3
    b6bc:	330c      	adds	r3, #12
		if (key[i].stateChanged) anyActivity = true;
    b6be:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
    b6c2:	2a00      	cmp	r2, #0
    b6c4:	bf18      	it	ne
    b6c6:	2001      	movne	r0, #1
	for (byte i=0; i<LIST_MAX; i++) {
    b6c8:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
    b6cc:	d1f5      	bne.n	b6ba <_ZN6Keypad10updateListEv+0x9e>
    b6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((idx == -1) && button) {
    b6d2:	2a00      	cmp	r2, #0
    b6d4:	d0e1      	beq.n	b69a <_ZN6Keypad10updateListEv+0x7e>
    b6d6:	463a      	mov	r2, r7
    b6d8:	2300      	movs	r3, #0
    b6da:	e002      	b.n	b6e2 <_ZN6Keypad10updateListEv+0xc6>
    b6dc:	3301      	adds	r3, #1
				for (byte i=0; i<LIST_MAX; i++) {
    b6de:	2b20      	cmp	r3, #32
    b6e0:	d0db      	beq.n	b69a <_ZN6Keypad10updateListEv+0x7e>
					if (key[i].kchar==NO_KEY) {		// Find an empty slot or don't add key to list.
    b6e2:	f892 4038 	ldrb.w	r4, [r2, #56]	; 0x38
    b6e6:	b2d9      	uxtb	r1, r3
    b6e8:	320c      	adds	r2, #12
    b6ea:	2c00      	cmp	r4, #0
    b6ec:	d1f6      	bne.n	b6dc <_ZN6Keypad10updateListEv+0xc0>
						key[i].kchar = keyChar;
    b6ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b6f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
						nextKeyState (i, button);
    b6f6:	4638      	mov	r0, r7
						key[i].kchar = keyChar;
    b6f8:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
						key[i].kcode = keyCode;
    b6fc:	63de      	str	r6, [r3, #60]	; 0x3c
						key[i].kstate = IDLE;		// Keys NOT on the list have an initial state of IDLE.
    b6fe:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
						nextKeyState (i, button);
    b702:	2201      	movs	r2, #1
    b704:	f7ff ff4a 	bl	b59c <_ZN6Keypad12nextKeyStateEhb>
    b708:	f897 51cd 	ldrb.w	r5, [r7, #461]	; 0x1cd
						break;	// Don't fill all the empty slots with the same key.
    b70c:	e7c5      	b.n	b69a <_ZN6Keypad10updateListEv+0x7e>
    b70e:	bf00      	nop

0000b710 <_ZN6Keypad7getKeysEv>:
bool Keypad::getKeys() {
    b710:	b530      	push	{r4, r5, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b712:	4d0e      	ldr	r5, [pc, #56]	; (b74c <_ZN6Keypad7getKeysEv+0x3c>)
	if ( (millis()-startTime)>debounceTime ) {
    b714:	f8d0 21bc 	ldr.w	r2, [r0, #444]	; 0x1bc
    b718:	682b      	ldr	r3, [r5, #0]
bool Keypad::getKeys() {
    b71a:	b083      	sub	sp, #12
    b71c:	4604      	mov	r4, r0
    b71e:	9300      	str	r3, [sp, #0]
	return ret;
    b720:	9900      	ldr	r1, [sp, #0]
	if ( (millis()-startTime)>debounceTime ) {
    b722:	f8d0 31d0 	ldr.w	r3, [r0, #464]	; 0x1d0
    b726:	1a8a      	subs	r2, r1, r2
    b728:	429a      	cmp	r2, r3
    b72a:	d802      	bhi.n	b732 <_ZN6Keypad7getKeysEv+0x22>
	bool keyActivity = false;
    b72c:	2000      	movs	r0, #0
}
    b72e:	b003      	add	sp, #12
    b730:	bd30      	pop	{r4, r5, pc}
		scanKeys();
    b732:	f7ff fe9b 	bl	b46c <_ZN6Keypad8scanKeysEv>
		keyActivity = updateList();
    b736:	4620      	mov	r0, r4
    b738:	f7ff ff70 	bl	b61c <_ZN6Keypad10updateListEv>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b73c:	682b      	ldr	r3, [r5, #0]
    b73e:	9301      	str	r3, [sp, #4]
	return ret;
    b740:	9b01      	ldr	r3, [sp, #4]
		startTime = millis();
    b742:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
}
    b746:	b003      	add	sp, #12
    b748:	bd30      	pop	{r4, r5, pc}
    b74a:	bf00      	nop
    b74c:	20002418 	.word	0x20002418

0000b750 <__fpclassifyd>:
    b750:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    b754:	b410      	push	{r4}
    b756:	d008      	beq.n	b76a <__fpclassifyd+0x1a>
    b758:	4a0f      	ldr	r2, [pc, #60]	; (b798 <__fpclassifyd+0x48>)
    b75a:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
    b75e:	4294      	cmp	r4, r2
    b760:	d80a      	bhi.n	b778 <__fpclassifyd+0x28>
    b762:	2004      	movs	r0, #4
    b764:	f85d 4b04 	ldr.w	r4, [sp], #4
    b768:	4770      	bx	lr
    b76a:	2800      	cmp	r0, #0
    b76c:	bf0c      	ite	eq
    b76e:	2002      	moveq	r0, #2
    b770:	2003      	movne	r0, #3
    b772:	f85d 4b04 	ldr.w	r4, [sp], #4
    b776:	4770      	bx	lr
    b778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    b77c:	d201      	bcs.n	b782 <__fpclassifyd+0x32>
    b77e:	2003      	movs	r0, #3
    b780:	e7f7      	b.n	b772 <__fpclassifyd+0x22>
    b782:	4a06      	ldr	r2, [pc, #24]	; (b79c <__fpclassifyd+0x4c>)
    b784:	4293      	cmp	r3, r2
    b786:	d001      	beq.n	b78c <__fpclassifyd+0x3c>
    b788:	2000      	movs	r0, #0
    b78a:	e7f2      	b.n	b772 <__fpclassifyd+0x22>
    b78c:	f1d0 0001 	rsbs	r0, r0, #1
    b790:	bf38      	it	cc
    b792:	2000      	movcc	r0, #0
    b794:	e7ed      	b.n	b772 <__fpclassifyd+0x22>
    b796:	bf00      	nop
    b798:	7fdfffff 	.word	0x7fdfffff
    b79c:	7ff00000 	.word	0x7ff00000

0000b7a0 <sinf>:
    b7a0:	b500      	push	{lr}
    b7a2:	4a1d      	ldr	r2, [pc, #116]	; (b818 <sinf+0x78>)
    b7a4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
    b7a8:	4293      	cmp	r3, r2
    b7aa:	b083      	sub	sp, #12
    b7ac:	4601      	mov	r1, r0
    b7ae:	dd18      	ble.n	b7e2 <sinf+0x42>
    b7b0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
    b7b4:	db04      	blt.n	b7c0 <sinf+0x20>
    b7b6:	f001 fba7 	bl	cf08 <__aeabi_fsub>
    b7ba:	b003      	add	sp, #12
    b7bc:	f85d fb04 	ldr.w	pc, [sp], #4
    b7c0:	4669      	mov	r1, sp
    b7c2:	f000 f82b 	bl	b81c <__ieee754_rem_pio2f>
    b7c6:	f000 0003 	and.w	r0, r0, #3
    b7ca:	2801      	cmp	r0, #1
    b7cc:	d018      	beq.n	b800 <sinf+0x60>
    b7ce:	2802      	cmp	r0, #2
    b7d0:	d00e      	beq.n	b7f0 <sinf+0x50>
    b7d2:	b1d0      	cbz	r0, b80a <sinf+0x6a>
    b7d4:	9800      	ldr	r0, [sp, #0]
    b7d6:	9901      	ldr	r1, [sp, #4]
    b7d8:	f000 f994 	bl	bb04 <__kernel_cosf>
    b7dc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    b7e0:	e7eb      	b.n	b7ba <sinf+0x1a>
    b7e2:	2100      	movs	r1, #0
    b7e4:	2200      	movs	r2, #0
    b7e6:	f000 fd81 	bl	c2ec <__kernel_sinf>
    b7ea:	b003      	add	sp, #12
    b7ec:	f85d fb04 	ldr.w	pc, [sp], #4
    b7f0:	9800      	ldr	r0, [sp, #0]
    b7f2:	9901      	ldr	r1, [sp, #4]
    b7f4:	2201      	movs	r2, #1
    b7f6:	f000 fd79 	bl	c2ec <__kernel_sinf>
    b7fa:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    b7fe:	e7dc      	b.n	b7ba <sinf+0x1a>
    b800:	9800      	ldr	r0, [sp, #0]
    b802:	9901      	ldr	r1, [sp, #4]
    b804:	f000 f97e 	bl	bb04 <__kernel_cosf>
    b808:	e7d7      	b.n	b7ba <sinf+0x1a>
    b80a:	9800      	ldr	r0, [sp, #0]
    b80c:	9901      	ldr	r1, [sp, #4]
    b80e:	2201      	movs	r2, #1
    b810:	f000 fd6c 	bl	c2ec <__kernel_sinf>
    b814:	e7d1      	b.n	b7ba <sinf+0x1a>
    b816:	bf00      	nop
    b818:	3f490fd8 	.word	0x3f490fd8

0000b81c <__ieee754_rem_pio2f>:
    b81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b820:	4aab      	ldr	r2, [pc, #684]	; (bad0 <__ieee754_rem_pio2f+0x2b4>)
    b822:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
    b826:	4294      	cmp	r4, r2
    b828:	b089      	sub	sp, #36	; 0x24
    b82a:	4606      	mov	r6, r0
    b82c:	460d      	mov	r5, r1
    b82e:	dd64      	ble.n	b8fa <__ieee754_rem_pio2f+0xde>
    b830:	4aa8      	ldr	r2, [pc, #672]	; (bad4 <__ieee754_rem_pio2f+0x2b8>)
    b832:	4294      	cmp	r4, r2
    b834:	dc1c      	bgt.n	b870 <__ieee754_rem_pio2f+0x54>
    b836:	2800      	cmp	r0, #0
    b838:	49a7      	ldr	r1, [pc, #668]	; (bad8 <__ieee754_rem_pio2f+0x2bc>)
    b83a:	f340 80ed 	ble.w	ba18 <__ieee754_rem_pio2f+0x1fc>
    b83e:	f001 fb63 	bl	cf08 <__aeabi_fsub>
    b842:	4ba6      	ldr	r3, [pc, #664]	; (badc <__ieee754_rem_pio2f+0x2c0>)
    b844:	f024 040f 	bic.w	r4, r4, #15
    b848:	429c      	cmp	r4, r3
    b84a:	4606      	mov	r6, r0
    b84c:	d064      	beq.n	b918 <__ieee754_rem_pio2f+0xfc>
    b84e:	49a4      	ldr	r1, [pc, #656]	; (bae0 <__ieee754_rem_pio2f+0x2c4>)
    b850:	f001 fb5a 	bl	cf08 <__aeabi_fsub>
    b854:	4601      	mov	r1, r0
    b856:	6028      	str	r0, [r5, #0]
    b858:	4630      	mov	r0, r6
    b85a:	f001 fb55 	bl	cf08 <__aeabi_fsub>
    b85e:	49a0      	ldr	r1, [pc, #640]	; (bae0 <__ieee754_rem_pio2f+0x2c4>)
    b860:	f001 fb52 	bl	cf08 <__aeabi_fsub>
    b864:	2301      	movs	r3, #1
    b866:	6068      	str	r0, [r5, #4]
    b868:	4618      	mov	r0, r3
    b86a:	b009      	add	sp, #36	; 0x24
    b86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b870:	4a9c      	ldr	r2, [pc, #624]	; (bae4 <__ieee754_rem_pio2f+0x2c8>)
    b872:	4294      	cmp	r4, r2
    b874:	dd62      	ble.n	b93c <__ieee754_rem_pio2f+0x120>
    b876:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
    b87a:	da46      	bge.n	b90a <__ieee754_rem_pio2f+0xee>
    b87c:	15e7      	asrs	r7, r4, #23
    b87e:	3f86      	subs	r7, #134	; 0x86
    b880:	eba4 54c7 	sub.w	r4, r4, r7, lsl #23
    b884:	4620      	mov	r0, r4
    b886:	f001 fe0f 	bl	d4a8 <__aeabi_f2iz>
    b88a:	f001 fbf3 	bl	d074 <__aeabi_i2f>
    b88e:	4603      	mov	r3, r0
    b890:	4601      	mov	r1, r0
    b892:	4620      	mov	r0, r4
    b894:	9305      	str	r3, [sp, #20]
    b896:	f001 fb37 	bl	cf08 <__aeabi_fsub>
    b89a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
    b89e:	f001 fc3d 	bl	d11c <__aeabi_fmul>
    b8a2:	4680      	mov	r8, r0
    b8a4:	f001 fe00 	bl	d4a8 <__aeabi_f2iz>
    b8a8:	f001 fbe4 	bl	d074 <__aeabi_i2f>
    b8ac:	4601      	mov	r1, r0
    b8ae:	4604      	mov	r4, r0
    b8b0:	4640      	mov	r0, r8
    b8b2:	9406      	str	r4, [sp, #24]
    b8b4:	f001 fb28 	bl	cf08 <__aeabi_fsub>
    b8b8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
    b8bc:	f001 fc2e 	bl	d11c <__aeabi_fmul>
    b8c0:	2100      	movs	r1, #0
    b8c2:	9007      	str	r0, [sp, #28]
    b8c4:	f001 fdbe 	bl	d444 <__aeabi_fcmpeq>
    b8c8:	2800      	cmp	r0, #0
    b8ca:	f000 80c6 	beq.w	ba5a <__ieee754_rem_pio2f+0x23e>
    b8ce:	4620      	mov	r0, r4
    b8d0:	2100      	movs	r1, #0
    b8d2:	f001 fdb7 	bl	d444 <__aeabi_fcmpeq>
    b8d6:	2800      	cmp	r0, #0
    b8d8:	bf14      	ite	ne
    b8da:	2301      	movne	r3, #1
    b8dc:	2302      	moveq	r3, #2
    b8de:	2202      	movs	r2, #2
    b8e0:	4981      	ldr	r1, [pc, #516]	; (bae8 <__ieee754_rem_pio2f+0x2cc>)
    b8e2:	9200      	str	r2, [sp, #0]
    b8e4:	9101      	str	r1, [sp, #4]
    b8e6:	463a      	mov	r2, r7
    b8e8:	a805      	add	r0, sp, #20
    b8ea:	4629      	mov	r1, r5
    b8ec:	f000 f9ce 	bl	bc8c <__kernel_rem_pio2f>
    b8f0:	2e00      	cmp	r6, #0
    b8f2:	f2c0 80a8 	blt.w	ba46 <__ieee754_rem_pio2f+0x22a>
    b8f6:	4603      	mov	r3, r0
    b8f8:	e003      	b.n	b902 <__ieee754_rem_pio2f+0xe6>
    b8fa:	2200      	movs	r2, #0
    b8fc:	6028      	str	r0, [r5, #0]
    b8fe:	2300      	movs	r3, #0
    b900:	604a      	str	r2, [r1, #4]
    b902:	4618      	mov	r0, r3
    b904:	b009      	add	sp, #36	; 0x24
    b906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b90a:	4601      	mov	r1, r0
    b90c:	f001 fafc 	bl	cf08 <__aeabi_fsub>
    b910:	2300      	movs	r3, #0
    b912:	6068      	str	r0, [r5, #4]
    b914:	6028      	str	r0, [r5, #0]
    b916:	e7f4      	b.n	b902 <__ieee754_rem_pio2f+0xe6>
    b918:	4974      	ldr	r1, [pc, #464]	; (baec <__ieee754_rem_pio2f+0x2d0>)
    b91a:	f001 faf5 	bl	cf08 <__aeabi_fsub>
    b91e:	4974      	ldr	r1, [pc, #464]	; (baf0 <__ieee754_rem_pio2f+0x2d4>)
    b920:	4604      	mov	r4, r0
    b922:	f001 faf1 	bl	cf08 <__aeabi_fsub>
    b926:	4601      	mov	r1, r0
    b928:	6028      	str	r0, [r5, #0]
    b92a:	4620      	mov	r0, r4
    b92c:	f001 faec 	bl	cf08 <__aeabi_fsub>
    b930:	496f      	ldr	r1, [pc, #444]	; (baf0 <__ieee754_rem_pio2f+0x2d4>)
    b932:	f001 fae9 	bl	cf08 <__aeabi_fsub>
    b936:	2301      	movs	r3, #1
    b938:	6068      	str	r0, [r5, #4]
    b93a:	e7e2      	b.n	b902 <__ieee754_rem_pio2f+0xe6>
    b93c:	f000 fd4c 	bl	c3d8 <fabsf>
    b940:	496c      	ldr	r1, [pc, #432]	; (baf4 <__ieee754_rem_pio2f+0x2d8>)
    b942:	4607      	mov	r7, r0
    b944:	f001 fbea 	bl	d11c <__aeabi_fmul>
    b948:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    b94c:	f001 fade 	bl	cf0c <__addsf3>
    b950:	f001 fdaa 	bl	d4a8 <__aeabi_f2iz>
    b954:	4682      	mov	sl, r0
    b956:	f001 fb8d 	bl	d074 <__aeabi_i2f>
    b95a:	495f      	ldr	r1, [pc, #380]	; (bad8 <__ieee754_rem_pio2f+0x2bc>)
    b95c:	4683      	mov	fp, r0
    b95e:	f001 fbdd 	bl	d11c <__aeabi_fmul>
    b962:	4601      	mov	r1, r0
    b964:	4638      	mov	r0, r7
    b966:	f001 facf 	bl	cf08 <__aeabi_fsub>
    b96a:	495d      	ldr	r1, [pc, #372]	; (bae0 <__ieee754_rem_pio2f+0x2c4>)
    b96c:	4680      	mov	r8, r0
    b96e:	4658      	mov	r0, fp
    b970:	f001 fbd4 	bl	d11c <__aeabi_fmul>
    b974:	f1ba 0f1f 	cmp.w	sl, #31
    b978:	4681      	mov	r9, r0
    b97a:	4640      	mov	r0, r8
    b97c:	dc19      	bgt.n	b9b2 <__ieee754_rem_pio2f+0x196>
    b97e:	4b5e      	ldr	r3, [pc, #376]	; (baf8 <__ieee754_rem_pio2f+0x2dc>)
    b980:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
    b984:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
    b988:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    b98c:	429a      	cmp	r2, r3
    b98e:	d010      	beq.n	b9b2 <__ieee754_rem_pio2f+0x196>
    b990:	4649      	mov	r1, r9
    b992:	f001 fab9 	bl	cf08 <__aeabi_fsub>
    b996:	4607      	mov	r7, r0
    b998:	602f      	str	r7, [r5, #0]
    b99a:	4639      	mov	r1, r7
    b99c:	4640      	mov	r0, r8
    b99e:	f001 fab3 	bl	cf08 <__aeabi_fsub>
    b9a2:	4649      	mov	r1, r9
    b9a4:	f001 fab0 	bl	cf08 <__aeabi_fsub>
    b9a8:	2e00      	cmp	r6, #0
    b9aa:	6068      	str	r0, [r5, #4]
    b9ac:	db57      	blt.n	ba5e <__ieee754_rem_pio2f+0x242>
    b9ae:	4653      	mov	r3, sl
    b9b0:	e7a7      	b.n	b902 <__ieee754_rem_pio2f+0xe6>
    b9b2:	4649      	mov	r1, r9
    b9b4:	f001 faa8 	bl	cf08 <__aeabi_fsub>
    b9b8:	15e3      	asrs	r3, r4, #23
    b9ba:	f3c0 52c7 	ubfx	r2, r0, #23, #8
    b9be:	1a9a      	subs	r2, r3, r2
    b9c0:	2a08      	cmp	r2, #8
    b9c2:	4607      	mov	r7, r0
    b9c4:	dde8      	ble.n	b998 <__ieee754_rem_pio2f+0x17c>
    b9c6:	4949      	ldr	r1, [pc, #292]	; (baec <__ieee754_rem_pio2f+0x2d0>)
    b9c8:	9303      	str	r3, [sp, #12]
    b9ca:	4658      	mov	r0, fp
    b9cc:	f001 fba6 	bl	d11c <__aeabi_fmul>
    b9d0:	4607      	mov	r7, r0
    b9d2:	4639      	mov	r1, r7
    b9d4:	4640      	mov	r0, r8
    b9d6:	f001 fa97 	bl	cf08 <__aeabi_fsub>
    b9da:	4604      	mov	r4, r0
    b9dc:	4621      	mov	r1, r4
    b9de:	4640      	mov	r0, r8
    b9e0:	f001 fa92 	bl	cf08 <__aeabi_fsub>
    b9e4:	4639      	mov	r1, r7
    b9e6:	f001 fa8f 	bl	cf08 <__aeabi_fsub>
    b9ea:	4941      	ldr	r1, [pc, #260]	; (baf0 <__ieee754_rem_pio2f+0x2d4>)
    b9ec:	4607      	mov	r7, r0
    b9ee:	4658      	mov	r0, fp
    b9f0:	f001 fb94 	bl	d11c <__aeabi_fmul>
    b9f4:	4639      	mov	r1, r7
    b9f6:	f001 fa87 	bl	cf08 <__aeabi_fsub>
    b9fa:	4681      	mov	r9, r0
    b9fc:	4649      	mov	r1, r9
    b9fe:	4620      	mov	r0, r4
    ba00:	f001 fa82 	bl	cf08 <__aeabi_fsub>
    ba04:	9b03      	ldr	r3, [sp, #12]
    ba06:	f3c0 52c7 	ubfx	r2, r0, #23, #8
    ba0a:	1a9b      	subs	r3, r3, r2
    ba0c:	2b19      	cmp	r3, #25
    ba0e:	4607      	mov	r7, r0
    ba10:	dc41      	bgt.n	ba96 <__ieee754_rem_pio2f+0x27a>
    ba12:	6028      	str	r0, [r5, #0]
    ba14:	46a0      	mov	r8, r4
    ba16:	e7c0      	b.n	b99a <__ieee754_rem_pio2f+0x17e>
    ba18:	f001 fa78 	bl	cf0c <__addsf3>
    ba1c:	4b2f      	ldr	r3, [pc, #188]	; (badc <__ieee754_rem_pio2f+0x2c0>)
    ba1e:	f024 040f 	bic.w	r4, r4, #15
    ba22:	429c      	cmp	r4, r3
    ba24:	4606      	mov	r6, r0
    ba26:	d023      	beq.n	ba70 <__ieee754_rem_pio2f+0x254>
    ba28:	492d      	ldr	r1, [pc, #180]	; (bae0 <__ieee754_rem_pio2f+0x2c4>)
    ba2a:	f001 fa6f 	bl	cf0c <__addsf3>
    ba2e:	4601      	mov	r1, r0
    ba30:	6028      	str	r0, [r5, #0]
    ba32:	4630      	mov	r0, r6
    ba34:	f001 fa68 	bl	cf08 <__aeabi_fsub>
    ba38:	4929      	ldr	r1, [pc, #164]	; (bae0 <__ieee754_rem_pio2f+0x2c4>)
    ba3a:	f001 fa67 	bl	cf0c <__addsf3>
    ba3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ba42:	6068      	str	r0, [r5, #4]
    ba44:	e75d      	b.n	b902 <__ieee754_rem_pio2f+0xe6>
    ba46:	e895 000c 	ldmia.w	r5, {r2, r3}
    ba4a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
    ba4e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    ba52:	4243      	negs	r3, r0
    ba54:	602a      	str	r2, [r5, #0]
    ba56:	6069      	str	r1, [r5, #4]
    ba58:	e753      	b.n	b902 <__ieee754_rem_pio2f+0xe6>
    ba5a:	2303      	movs	r3, #3
    ba5c:	e73f      	b.n	b8de <__ieee754_rem_pio2f+0xc2>
    ba5e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
    ba62:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    ba66:	602f      	str	r7, [r5, #0]
    ba68:	6068      	str	r0, [r5, #4]
    ba6a:	f1ca 0300 	rsb	r3, sl, #0
    ba6e:	e748      	b.n	b902 <__ieee754_rem_pio2f+0xe6>
    ba70:	491e      	ldr	r1, [pc, #120]	; (baec <__ieee754_rem_pio2f+0x2d0>)
    ba72:	f001 fa4b 	bl	cf0c <__addsf3>
    ba76:	491e      	ldr	r1, [pc, #120]	; (baf0 <__ieee754_rem_pio2f+0x2d4>)
    ba78:	4604      	mov	r4, r0
    ba7a:	f001 fa47 	bl	cf0c <__addsf3>
    ba7e:	4601      	mov	r1, r0
    ba80:	6028      	str	r0, [r5, #0]
    ba82:	4620      	mov	r0, r4
    ba84:	f001 fa40 	bl	cf08 <__aeabi_fsub>
    ba88:	4919      	ldr	r1, [pc, #100]	; (baf0 <__ieee754_rem_pio2f+0x2d4>)
    ba8a:	f001 fa3f 	bl	cf0c <__addsf3>
    ba8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ba92:	6068      	str	r0, [r5, #4]
    ba94:	e735      	b.n	b902 <__ieee754_rem_pio2f+0xe6>
    ba96:	4919      	ldr	r1, [pc, #100]	; (bafc <__ieee754_rem_pio2f+0x2e0>)
    ba98:	4658      	mov	r0, fp
    ba9a:	f001 fb3f 	bl	d11c <__aeabi_fmul>
    ba9e:	4607      	mov	r7, r0
    baa0:	4639      	mov	r1, r7
    baa2:	4620      	mov	r0, r4
    baa4:	f001 fa30 	bl	cf08 <__aeabi_fsub>
    baa8:	4680      	mov	r8, r0
    baaa:	4641      	mov	r1, r8
    baac:	4620      	mov	r0, r4
    baae:	f001 fa2b 	bl	cf08 <__aeabi_fsub>
    bab2:	4639      	mov	r1, r7
    bab4:	f001 fa28 	bl	cf08 <__aeabi_fsub>
    bab8:	4911      	ldr	r1, [pc, #68]	; (bb00 <__ieee754_rem_pio2f+0x2e4>)
    baba:	4604      	mov	r4, r0
    babc:	4658      	mov	r0, fp
    babe:	f001 fb2d 	bl	d11c <__aeabi_fmul>
    bac2:	4621      	mov	r1, r4
    bac4:	f001 fa20 	bl	cf08 <__aeabi_fsub>
    bac8:	4681      	mov	r9, r0
    baca:	4640      	mov	r0, r8
    bacc:	e760      	b.n	b990 <__ieee754_rem_pio2f+0x174>
    bace:	bf00      	nop
    bad0:	3f490fd8 	.word	0x3f490fd8
    bad4:	4016cbe3 	.word	0x4016cbe3
    bad8:	3fc90f80 	.word	0x3fc90f80
    badc:	3fc90fd0 	.word	0x3fc90fd0
    bae0:	37354443 	.word	0x37354443
    bae4:	43490f80 	.word	0x43490f80
    bae8:	00012150 	.word	0x00012150
    baec:	37354400 	.word	0x37354400
    baf0:	2e85a308 	.word	0x2e85a308
    baf4:	3f22f984 	.word	0x3f22f984
    baf8:	000120d0 	.word	0x000120d0
    bafc:	2e85a300 	.word	0x2e85a300
    bb00:	248d3132 	.word	0x248d3132

0000bb04 <__kernel_cosf>:
    bb04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bb08:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
    bb0c:	f1b6 5f48 	cmp.w	r6, #838860800	; 0x32000000
    bb10:	4605      	mov	r5, r0
    bb12:	460f      	mov	r7, r1
    bb14:	da49      	bge.n	bbaa <__kernel_cosf+0xa6>
    bb16:	f001 fcc7 	bl	d4a8 <__aeabi_f2iz>
    bb1a:	2800      	cmp	r0, #0
    bb1c:	f000 809d 	beq.w	bc5a <__kernel_cosf+0x156>
    bb20:	4629      	mov	r1, r5
    bb22:	4628      	mov	r0, r5
    bb24:	f001 fafa 	bl	d11c <__aeabi_fmul>
    bb28:	494e      	ldr	r1, [pc, #312]	; (bc64 <__kernel_cosf+0x160>)
    bb2a:	4604      	mov	r4, r0
    bb2c:	f001 faf6 	bl	d11c <__aeabi_fmul>
    bb30:	494d      	ldr	r1, [pc, #308]	; (bc68 <__kernel_cosf+0x164>)
    bb32:	f001 f9eb 	bl	cf0c <__addsf3>
    bb36:	4621      	mov	r1, r4
    bb38:	f001 faf0 	bl	d11c <__aeabi_fmul>
    bb3c:	494b      	ldr	r1, [pc, #300]	; (bc6c <__kernel_cosf+0x168>)
    bb3e:	f001 f9e3 	bl	cf08 <__aeabi_fsub>
    bb42:	4621      	mov	r1, r4
    bb44:	f001 faea 	bl	d11c <__aeabi_fmul>
    bb48:	4949      	ldr	r1, [pc, #292]	; (bc70 <__kernel_cosf+0x16c>)
    bb4a:	f001 f9df 	bl	cf0c <__addsf3>
    bb4e:	4621      	mov	r1, r4
    bb50:	f001 fae4 	bl	d11c <__aeabi_fmul>
    bb54:	4947      	ldr	r1, [pc, #284]	; (bc74 <__kernel_cosf+0x170>)
    bb56:	f001 f9d7 	bl	cf08 <__aeabi_fsub>
    bb5a:	4621      	mov	r1, r4
    bb5c:	f001 fade 	bl	d11c <__aeabi_fmul>
    bb60:	4945      	ldr	r1, [pc, #276]	; (bc78 <__kernel_cosf+0x174>)
    bb62:	f001 f9d3 	bl	cf0c <__addsf3>
    bb66:	4621      	mov	r1, r4
    bb68:	f001 fad8 	bl	d11c <__aeabi_fmul>
    bb6c:	4680      	mov	r8, r0
    bb6e:	4620      	mov	r0, r4
    bb70:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    bb74:	f001 fad2 	bl	d11c <__aeabi_fmul>
    bb78:	4641      	mov	r1, r8
    bb7a:	4606      	mov	r6, r0
    bb7c:	4620      	mov	r0, r4
    bb7e:	f001 facd 	bl	d11c <__aeabi_fmul>
    bb82:	4639      	mov	r1, r7
    bb84:	4604      	mov	r4, r0
    bb86:	4628      	mov	r0, r5
    bb88:	f001 fac8 	bl	d11c <__aeabi_fmul>
    bb8c:	4601      	mov	r1, r0
    bb8e:	4620      	mov	r0, r4
    bb90:	f001 f9ba 	bl	cf08 <__aeabi_fsub>
    bb94:	4601      	mov	r1, r0
    bb96:	4630      	mov	r0, r6
    bb98:	f001 f9b6 	bl	cf08 <__aeabi_fsub>
    bb9c:	4601      	mov	r1, r0
    bb9e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    bba2:	f001 f9b1 	bl	cf08 <__aeabi_fsub>
    bba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bbaa:	4601      	mov	r1, r0
    bbac:	f001 fab6 	bl	d11c <__aeabi_fmul>
    bbb0:	492c      	ldr	r1, [pc, #176]	; (bc64 <__kernel_cosf+0x160>)
    bbb2:	4604      	mov	r4, r0
    bbb4:	f001 fab2 	bl	d11c <__aeabi_fmul>
    bbb8:	492b      	ldr	r1, [pc, #172]	; (bc68 <__kernel_cosf+0x164>)
    bbba:	f001 f9a7 	bl	cf0c <__addsf3>
    bbbe:	4621      	mov	r1, r4
    bbc0:	f001 faac 	bl	d11c <__aeabi_fmul>
    bbc4:	4929      	ldr	r1, [pc, #164]	; (bc6c <__kernel_cosf+0x168>)
    bbc6:	f001 f99f 	bl	cf08 <__aeabi_fsub>
    bbca:	4621      	mov	r1, r4
    bbcc:	f001 faa6 	bl	d11c <__aeabi_fmul>
    bbd0:	4927      	ldr	r1, [pc, #156]	; (bc70 <__kernel_cosf+0x16c>)
    bbd2:	f001 f99b 	bl	cf0c <__addsf3>
    bbd6:	4621      	mov	r1, r4
    bbd8:	f001 faa0 	bl	d11c <__aeabi_fmul>
    bbdc:	4925      	ldr	r1, [pc, #148]	; (bc74 <__kernel_cosf+0x170>)
    bbde:	f001 f993 	bl	cf08 <__aeabi_fsub>
    bbe2:	4621      	mov	r1, r4
    bbe4:	f001 fa9a 	bl	d11c <__aeabi_fmul>
    bbe8:	4923      	ldr	r1, [pc, #140]	; (bc78 <__kernel_cosf+0x174>)
    bbea:	f001 f98f 	bl	cf0c <__addsf3>
    bbee:	4621      	mov	r1, r4
    bbf0:	f001 fa94 	bl	d11c <__aeabi_fmul>
    bbf4:	4b21      	ldr	r3, [pc, #132]	; (bc7c <__kernel_cosf+0x178>)
    bbf6:	429e      	cmp	r6, r3
    bbf8:	4680      	mov	r8, r0
    bbfa:	ddb8      	ble.n	bb6e <__kernel_cosf+0x6a>
    bbfc:	4b20      	ldr	r3, [pc, #128]	; (bc80 <__kernel_cosf+0x17c>)
    bbfe:	429e      	cmp	r6, r3
    bc00:	dc27      	bgt.n	bc52 <__kernel_cosf+0x14e>
    bc02:	f106 467f 	add.w	r6, r6, #4278190080	; 0xff000000
    bc06:	4631      	mov	r1, r6
    bc08:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    bc0c:	f001 f97c 	bl	cf08 <__aeabi_fsub>
    bc10:	4681      	mov	r9, r0
    bc12:	4620      	mov	r0, r4
    bc14:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    bc18:	f001 fa80 	bl	d11c <__aeabi_fmul>
    bc1c:	4631      	mov	r1, r6
    bc1e:	f001 f973 	bl	cf08 <__aeabi_fsub>
    bc22:	4641      	mov	r1, r8
    bc24:	4606      	mov	r6, r0
    bc26:	4620      	mov	r0, r4
    bc28:	f001 fa78 	bl	d11c <__aeabi_fmul>
    bc2c:	4639      	mov	r1, r7
    bc2e:	4604      	mov	r4, r0
    bc30:	4628      	mov	r0, r5
    bc32:	f001 fa73 	bl	d11c <__aeabi_fmul>
    bc36:	4601      	mov	r1, r0
    bc38:	4620      	mov	r0, r4
    bc3a:	f001 f965 	bl	cf08 <__aeabi_fsub>
    bc3e:	4601      	mov	r1, r0
    bc40:	4630      	mov	r0, r6
    bc42:	f001 f961 	bl	cf08 <__aeabi_fsub>
    bc46:	4601      	mov	r1, r0
    bc48:	4648      	mov	r0, r9
    bc4a:	f001 f95d 	bl	cf08 <__aeabi_fsub>
    bc4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bc52:	f8df 9034 	ldr.w	r9, [pc, #52]	; bc88 <__kernel_cosf+0x184>
    bc56:	4e0b      	ldr	r6, [pc, #44]	; (bc84 <__kernel_cosf+0x180>)
    bc58:	e7db      	b.n	bc12 <__kernel_cosf+0x10e>
    bc5a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    bc5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bc62:	bf00      	nop
    bc64:	ad47d74e 	.word	0xad47d74e
    bc68:	310f74f6 	.word	0x310f74f6
    bc6c:	3493f27c 	.word	0x3493f27c
    bc70:	37d00d01 	.word	0x37d00d01
    bc74:	3ab60b61 	.word	0x3ab60b61
    bc78:	3d2aaaab 	.word	0x3d2aaaab
    bc7c:	3e999999 	.word	0x3e999999
    bc80:	3f480000 	.word	0x3f480000
    bc84:	3e900000 	.word	0x3e900000
    bc88:	3f380000 	.word	0x3f380000

0000bc8c <__kernel_rem_pio2f>:
    bc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc90:	b0df      	sub	sp, #380	; 0x17c
    bc92:	4cbb      	ldr	r4, [pc, #748]	; (bf80 <__kernel_rem_pio2f+0x2f4>)
    bc94:	930b      	str	r3, [sp, #44]	; 0x2c
    bc96:	3b01      	subs	r3, #1
    bc98:	9302      	str	r3, [sp, #8]
    bc9a:	1ed3      	subs	r3, r2, #3
    bc9c:	bf48      	it	mi
    bc9e:	1d13      	addmi	r3, r2, #4
    bca0:	9d68      	ldr	r5, [sp, #416]	; 0x1a0
    bca2:	9109      	str	r1, [sp, #36]	; 0x24
    bca4:	10db      	asrs	r3, r3, #3
    bca6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    bcaa:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
    bcae:	930c      	str	r3, [sp, #48]	; 0x30
    bcb0:	9408      	str	r4, [sp, #32]
    bcb2:	9d02      	ldr	r5, [sp, #8]
    bcb4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    bcb6:	1b67      	subs	r7, r4, r5
    bcb8:	9c08      	ldr	r4, [sp, #32]
    bcba:	43db      	mvns	r3, r3
    bcbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    bcc0:	192d      	adds	r5, r5, r4
    bcc2:	4606      	mov	r6, r0
    bcc4:	9306      	str	r3, [sp, #24]
    bcc6:	d41d      	bmi.n	bd04 <__kernel_rem_pio2f+0x78>
    bcc8:	9c69      	ldr	r4, [sp, #420]	; 0x1a4
    bcca:	443d      	add	r5, r7
    bccc:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    bcd0:	3501      	adds	r5, #1
    bcd2:	f04f 0800 	mov.w	r8, #0
    bcd6:	ac22      	add	r4, sp, #136	; 0x88
    bcd8:	e00a      	b.n	bcf0 <__kernel_rem_pio2f+0x64>
    bcda:	f859 0008 	ldr.w	r0, [r9, r8]
    bcde:	f001 f9c9 	bl	d074 <__aeabi_i2f>
    bce2:	3701      	adds	r7, #1
    bce4:	42af      	cmp	r7, r5
    bce6:	f844 0008 	str.w	r0, [r4, r8]
    bcea:	f108 0804 	add.w	r8, r8, #4
    bcee:	d009      	beq.n	bd04 <__kernel_rem_pio2f+0x78>
    bcf0:	2f00      	cmp	r7, #0
    bcf2:	daf2      	bge.n	bcda <__kernel_rem_pio2f+0x4e>
    bcf4:	3701      	adds	r7, #1
    bcf6:	2000      	movs	r0, #0
    bcf8:	42af      	cmp	r7, r5
    bcfa:	f844 0008 	str.w	r0, [r4, r8]
    bcfe:	f108 0804 	add.w	r8, r8, #4
    bd02:	d1f5      	bne.n	bcf0 <__kernel_rem_pio2f+0x64>
    bd04:	9d08      	ldr	r5, [sp, #32]
    bd06:	2d00      	cmp	r5, #0
    bd08:	f2c0 82d7 	blt.w	c2ba <__kernel_rem_pio2f+0x62e>
    bd0c:	9c08      	ldr	r4, [sp, #32]
    bd0e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    bd10:	f104 0801 	add.w	r8, r4, #1
    bd14:	af22      	add	r7, sp, #136	; 0x88
    bd16:	00ac      	lsls	r4, r5, #2
    bd18:	ea4f 0888 	mov.w	r8, r8, lsl #2
    bd1c:	4427      	add	r7, r4
    bd1e:	2500      	movs	r5, #0
    bd20:	9a02      	ldr	r2, [sp, #8]
    bd22:	2a00      	cmp	r2, #0
    bd24:	f2c0 81ea 	blt.w	c0fc <__kernel_rem_pio2f+0x470>
    bd28:	eb05 0b07 	add.w	fp, r5, r7
    bd2c:	f04f 0900 	mov.w	r9, #0
    bd30:	f04f 0a00 	mov.w	sl, #0
    bd34:	f856 0009 	ldr.w	r0, [r6, r9]
    bd38:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
    bd3c:	f001 f9ee 	bl	d11c <__aeabi_fmul>
    bd40:	4601      	mov	r1, r0
    bd42:	4650      	mov	r0, sl
    bd44:	f001 f8e2 	bl	cf0c <__addsf3>
    bd48:	f109 0904 	add.w	r9, r9, #4
    bd4c:	45a1      	cmp	r9, r4
    bd4e:	4682      	mov	sl, r0
    bd50:	d1f0      	bne.n	bd34 <__kernel_rem_pio2f+0xa8>
    bd52:	ab4a      	add	r3, sp, #296	; 0x128
    bd54:	f843 a005 	str.w	sl, [r3, r5]
    bd58:	3504      	adds	r5, #4
    bd5a:	4545      	cmp	r5, r8
    bd5c:	d1e0      	bne.n	bd20 <__kernel_rem_pio2f+0x94>
    bd5e:	9d08      	ldr	r5, [sp, #32]
    bd60:	aa0e      	add	r2, sp, #56	; 0x38
    bd62:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    bd66:	920d      	str	r2, [sp, #52]	; 0x34
    bd68:	46a9      	mov	r9, r5
    bd6a:	ea4f 0389 	mov.w	r3, r9, lsl #2
    bd6e:	9307      	str	r3, [sp, #28]
    bd70:	9d07      	ldr	r5, [sp, #28]
    bd72:	ab5e      	add	r3, sp, #376	; 0x178
    bd74:	442b      	add	r3, r5
    bd76:	f1b9 0f00 	cmp.w	r9, #0
    bd7a:	f853 ac50 	ldr.w	sl, [r3, #-80]
    bd7e:	dd23      	ble.n	bdc8 <__kernel_rem_pio2f+0x13c>
    bd80:	f10d 0834 	add.w	r8, sp, #52	; 0x34
    bd84:	af4a      	add	r7, sp, #296	; 0x128
    bd86:	442f      	add	r7, r5
    bd88:	44a8      	add	r8, r5
    bd8a:	ad0d      	add	r5, sp, #52	; 0x34
    bd8c:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    bd90:	4650      	mov	r0, sl
    bd92:	f001 f9c3 	bl	d11c <__aeabi_fmul>
    bd96:	f001 fb87 	bl	d4a8 <__aeabi_f2iz>
    bd9a:	f001 f96b 	bl	d074 <__aeabi_i2f>
    bd9e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
    bda2:	4683      	mov	fp, r0
    bda4:	f001 f9ba 	bl	d11c <__aeabi_fmul>
    bda8:	4601      	mov	r1, r0
    bdaa:	4650      	mov	r0, sl
    bdac:	f001 f8ac 	bl	cf08 <__aeabi_fsub>
    bdb0:	f001 fb7a 	bl	d4a8 <__aeabi_f2iz>
    bdb4:	4659      	mov	r1, fp
    bdb6:	f845 0f04 	str.w	r0, [r5, #4]!
    bdba:	f857 0d04 	ldr.w	r0, [r7, #-4]!
    bdbe:	f001 f8a5 	bl	cf0c <__addsf3>
    bdc2:	4545      	cmp	r5, r8
    bdc4:	4682      	mov	sl, r0
    bdc6:	d1e1      	bne.n	bd8c <__kernel_rem_pio2f+0x100>
    bdc8:	4650      	mov	r0, sl
    bdca:	9906      	ldr	r1, [sp, #24]
    bdcc:	f000 fb4e 	bl	c46c <scalbnf>
    bdd0:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
    bdd4:	4605      	mov	r5, r0
    bdd6:	f001 f9a1 	bl	d11c <__aeabi_fmul>
    bdda:	f000 fb01 	bl	c3e0 <floorf>
    bdde:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
    bde2:	f001 f99b 	bl	d11c <__aeabi_fmul>
    bde6:	4601      	mov	r1, r0
    bde8:	4628      	mov	r0, r5
    bdea:	f001 f88d 	bl	cf08 <__aeabi_fsub>
    bdee:	4605      	mov	r5, r0
    bdf0:	f001 fb5a 	bl	d4a8 <__aeabi_f2iz>
    bdf4:	4682      	mov	sl, r0
    bdf6:	f001 f93d 	bl	d074 <__aeabi_i2f>
    bdfa:	4601      	mov	r1, r0
    bdfc:	4628      	mov	r0, r5
    bdfe:	f001 f883 	bl	cf08 <__aeabi_fsub>
    be02:	9a06      	ldr	r2, [sp, #24]
    be04:	2a00      	cmp	r2, #0
    be06:	4680      	mov	r8, r0
    be08:	f340 80b1 	ble.w	bf6e <__kernel_rem_pio2f+0x2e2>
    be0c:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
    be10:	ad0e      	add	r5, sp, #56	; 0x38
    be12:	f1c2 0008 	rsb	r0, r2, #8
    be16:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
    be1a:	9d06      	ldr	r5, [sp, #24]
    be1c:	fa43 f200 	asr.w	r2, r3, r0
    be20:	fa02 f000 	lsl.w	r0, r2, r0
    be24:	1a1b      	subs	r3, r3, r0
    be26:	a80e      	add	r0, sp, #56	; 0x38
    be28:	f1c5 0707 	rsb	r7, r5, #7
    be2c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
    be30:	4492      	add	sl, r2
    be32:	fa43 f707 	asr.w	r7, r3, r7
    be36:	2f00      	cmp	r7, #0
    be38:	dd2a      	ble.n	be90 <__kernel_rem_pio2f+0x204>
    be3a:	f1b9 0f00 	cmp.w	r9, #0
    be3e:	f10a 0a01 	add.w	sl, sl, #1
    be42:	f340 816d 	ble.w	c120 <__kernel_rem_pio2f+0x494>
    be46:	ab0e      	add	r3, sp, #56	; 0x38
    be48:	9a07      	ldr	r2, [sp, #28]
    be4a:	4618      	mov	r0, r3
    be4c:	4410      	add	r0, r2
    be4e:	2500      	movs	r5, #0
    be50:	f853 2b04 	ldr.w	r2, [r3], #4
    be54:	f1c2 01ff 	rsb	r1, r2, #255	; 0xff
    be58:	b915      	cbnz	r5, be60 <__kernel_rem_pio2f+0x1d4>
    be5a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
    be5e:	b112      	cbz	r2, be66 <__kernel_rem_pio2f+0x1da>
    be60:	f843 1c04 	str.w	r1, [r3, #-4]
    be64:	2501      	movs	r5, #1
    be66:	4283      	cmp	r3, r0
    be68:	d1f2      	bne.n	be50 <__kernel_rem_pio2f+0x1c4>
    be6a:	9b06      	ldr	r3, [sp, #24]
    be6c:	2b00      	cmp	r3, #0
    be6e:	dd0d      	ble.n	be8c <__kernel_rem_pio2f+0x200>
    be70:	2b01      	cmp	r3, #1
    be72:	f000 8132 	beq.w	c0da <__kernel_rem_pio2f+0x44e>
    be76:	2b02      	cmp	r3, #2
    be78:	d108      	bne.n	be8c <__kernel_rem_pio2f+0x200>
    be7a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    be7e:	a90e      	add	r1, sp, #56	; 0x38
    be80:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    be84:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    be88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    be8c:	2f02      	cmp	r7, #2
    be8e:	d079      	beq.n	bf84 <__kernel_rem_pio2f+0x2f8>
    be90:	4640      	mov	r0, r8
    be92:	2100      	movs	r1, #0
    be94:	f001 fad6 	bl	d444 <__aeabi_fcmpeq>
    be98:	2800      	cmp	r0, #0
    be9a:	f000 808d 	beq.w	bfb8 <__kernel_rem_pio2f+0x32c>
    be9e:	9a08      	ldr	r2, [sp, #32]
    bea0:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
    bea4:	42aa      	cmp	r2, r5
    bea6:	dc0d      	bgt.n	bec4 <__kernel_rem_pio2f+0x238>
    bea8:	9a07      	ldr	r2, [sp, #28]
    beaa:	980d      	ldr	r0, [sp, #52]	; 0x34
    beac:	ab0e      	add	r3, sp, #56	; 0x38
    beae:	4413      	add	r3, r2
    beb0:	2200      	movs	r2, #0
    beb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    beb6:	4283      	cmp	r3, r0
    beb8:	ea42 0201 	orr.w	r2, r2, r1
    bebc:	d1f9      	bne.n	beb2 <__kernel_rem_pio2f+0x226>
    bebe:	2a00      	cmp	r2, #0
    bec0:	f040 81e6 	bne.w	c290 <__kernel_rem_pio2f+0x604>
    bec4:	9d08      	ldr	r5, [sp, #32]
    bec6:	a80e      	add	r0, sp, #56	; 0x38
    bec8:	1e6a      	subs	r2, r5, #1
    beca:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
    bece:	2b00      	cmp	r3, #0
    bed0:	f040 81dc 	bne.w	c28c <__kernel_rem_pio2f+0x600>
    bed4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    bed8:	2301      	movs	r3, #1
    beda:	f852 1d04 	ldr.w	r1, [r2, #-4]!
    bede:	3301      	adds	r3, #1
    bee0:	2900      	cmp	r1, #0
    bee2:	d0fa      	beq.n	beda <__kernel_rem_pio2f+0x24e>
    bee4:	444b      	add	r3, r9
    bee6:	4599      	cmp	r9, r3
    bee8:	930a      	str	r3, [sp, #40]	; 0x28
    beea:	da3d      	bge.n	bf68 <__kernel_rem_pio2f+0x2dc>
    beec:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    bef0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    bef4:	9d69      	ldr	r5, [sp, #420]	; 0x1a4
    bef6:	44ca      	add	sl, r9
    bef8:	aa22      	add	r2, sp, #136	; 0x88
    befa:	eb02 028a 	add.w	r2, r2, sl, lsl #2
    befe:	44c8      	add	r8, r9
    bf00:	9203      	str	r2, [sp, #12]
    bf02:	ebc9 0903 	rsb	r9, r9, r3
    bf06:	1d13      	adds	r3, r2, #4
    bf08:	9a07      	ldr	r2, [sp, #28]
    bf0a:	9305      	str	r3, [sp, #20]
    bf0c:	ea4f 0989 	mov.w	r9, r9, lsl #2
    bf10:	af4a      	add	r7, sp, #296	; 0x128
    bf12:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    bf16:	f8cd 9010 	str.w	r9, [sp, #16]
    bf1a:	4417      	add	r7, r2
    bf1c:	2500      	movs	r5, #0
    bf1e:	f858 0f04 	ldr.w	r0, [r8, #4]!
    bf22:	f001 f8a7 	bl	d074 <__aeabi_i2f>
    bf26:	9a02      	ldr	r2, [sp, #8]
    bf28:	9b03      	ldr	r3, [sp, #12]
    bf2a:	2a00      	cmp	r2, #0
    bf2c:	5158      	str	r0, [r3, r5]
    bf2e:	f04f 0b00 	mov.w	fp, #0
    bf32:	db13      	blt.n	bf5c <__kernel_rem_pio2f+0x2d0>
    bf34:	f8dd a014 	ldr.w	sl, [sp, #20]
    bf38:	f04f 0900 	mov.w	r9, #0
    bf3c:	44aa      	add	sl, r5
    bf3e:	f856 0009 	ldr.w	r0, [r6, r9]
    bf42:	f85a 1d04 	ldr.w	r1, [sl, #-4]!
    bf46:	f001 f8e9 	bl	d11c <__aeabi_fmul>
    bf4a:	4601      	mov	r1, r0
    bf4c:	4658      	mov	r0, fp
    bf4e:	f000 ffdd 	bl	cf0c <__addsf3>
    bf52:	f109 0904 	add.w	r9, r9, #4
    bf56:	45a1      	cmp	r9, r4
    bf58:	4683      	mov	fp, r0
    bf5a:	d1f0      	bne.n	bf3e <__kernel_rem_pio2f+0x2b2>
    bf5c:	9b04      	ldr	r3, [sp, #16]
    bf5e:	f847 bf04 	str.w	fp, [r7, #4]!
    bf62:	3504      	adds	r5, #4
    bf64:	429d      	cmp	r5, r3
    bf66:	d1da      	bne.n	bf1e <__kernel_rem_pio2f+0x292>
    bf68:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    bf6c:	e6fd      	b.n	bd6a <__kernel_rem_pio2f+0xde>
    bf6e:	f040 80be 	bne.w	c0ee <__kernel_rem_pio2f+0x462>
    bf72:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    bf76:	a90e      	add	r1, sp, #56	; 0x38
    bf78:	f851 7023 	ldr.w	r7, [r1, r3, lsl #2]
    bf7c:	123f      	asrs	r7, r7, #8
    bf7e:	e75a      	b.n	be36 <__kernel_rem_pio2f+0x1aa>
    bf80:	00012468 	.word	0x00012468
    bf84:	4641      	mov	r1, r8
    bf86:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    bf8a:	f000 ffbd 	bl	cf08 <__aeabi_fsub>
    bf8e:	4680      	mov	r8, r0
    bf90:	2d00      	cmp	r5, #0
    bf92:	f43f af7d 	beq.w	be90 <__kernel_rem_pio2f+0x204>
    bf96:	9906      	ldr	r1, [sp, #24]
    bf98:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    bf9c:	f000 fa66 	bl	c46c <scalbnf>
    bfa0:	4601      	mov	r1, r0
    bfa2:	4640      	mov	r0, r8
    bfa4:	f000 ffb0 	bl	cf08 <__aeabi_fsub>
    bfa8:	4680      	mov	r8, r0
    bfaa:	4640      	mov	r0, r8
    bfac:	2100      	movs	r1, #0
    bfae:	f001 fa49 	bl	d444 <__aeabi_fcmpeq>
    bfb2:	2800      	cmp	r0, #0
    bfb4:	f47f af73 	bne.w	be9e <__kernel_rem_pio2f+0x212>
    bfb8:	9b06      	ldr	r3, [sp, #24]
    bfba:	f8cd a008 	str.w	sl, [sp, #8]
    bfbe:	4259      	negs	r1, r3
    bfc0:	4640      	mov	r0, r8
    bfc2:	f000 fa53 	bl	c46c <scalbnf>
    bfc6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
    bfca:	4604      	mov	r4, r0
    bfcc:	f001 fa58 	bl	d480 <__aeabi_fcmpge>
    bfd0:	2800      	cmp	r0, #0
    bfd2:	f000 8175 	beq.w	c2c0 <__kernel_rem_pio2f+0x634>
    bfd6:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    bfda:	4620      	mov	r0, r4
    bfdc:	f001 f89e 	bl	d11c <__aeabi_fmul>
    bfe0:	f001 fa62 	bl	d4a8 <__aeabi_f2iz>
    bfe4:	f001 f846 	bl	d074 <__aeabi_i2f>
    bfe8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
    bfec:	4605      	mov	r5, r0
    bfee:	f001 f895 	bl	d11c <__aeabi_fmul>
    bff2:	4601      	mov	r1, r0
    bff4:	4620      	mov	r0, r4
    bff6:	f000 ff87 	bl	cf08 <__aeabi_fsub>
    bffa:	f001 fa55 	bl	d4a8 <__aeabi_f2iz>
    bffe:	ac0e      	add	r4, sp, #56	; 0x38
    c000:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
    c004:	4628      	mov	r0, r5
    c006:	f001 fa4f 	bl	d4a8 <__aeabi_f2iz>
    c00a:	f109 0501 	add.w	r5, r9, #1
    c00e:	9a06      	ldr	r2, [sp, #24]
    c010:	ab0e      	add	r3, sp, #56	; 0x38
    c012:	3208      	adds	r2, #8
    c014:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
    c018:	9206      	str	r2, [sp, #24]
    c01a:	9906      	ldr	r1, [sp, #24]
    c01c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    c020:	f000 fa24 	bl	c46c <scalbnf>
    c024:	2d00      	cmp	r5, #0
    c026:	4604      	mov	r4, r0
    c028:	db4f      	blt.n	c0ca <__kernel_rem_pio2f+0x43e>
    c02a:	1c6e      	adds	r6, r5, #1
    c02c:	ea4f 0885 	mov.w	r8, r5, lsl #2
    c030:	ebc6 7a86 	rsb	sl, r6, r6, lsl #30
    c034:	f10d 0938 	add.w	r9, sp, #56	; 0x38
    c038:	a84a      	add	r0, sp, #296	; 0x128
    c03a:	44c1      	add	r9, r8
    c03c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    c040:	4480      	add	r8, r0
    c042:	f04f 0b00 	mov.w	fp, #0
    c046:	f859 000b 	ldr.w	r0, [r9, fp]
    c04a:	f001 f813 	bl	d074 <__aeabi_i2f>
    c04e:	4621      	mov	r1, r4
    c050:	f001 f864 	bl	d11c <__aeabi_fmul>
    c054:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    c058:	f848 000b 	str.w	r0, [r8, fp]
    c05c:	4620      	mov	r0, r4
    c05e:	f001 f85d 	bl	d11c <__aeabi_fmul>
    c062:	f1ab 0b04 	sub.w	fp, fp, #4
    c066:	45d3      	cmp	fp, sl
    c068:	4604      	mov	r4, r0
    c06a:	d1ec      	bne.n	c046 <__kernel_rem_pio2f+0x3ba>
    c06c:	f8df 9278 	ldr.w	r9, [pc, #632]	; c2e8 <__kernel_rem_pio2f+0x65c>
    c070:	f8dd a020 	ldr.w	sl, [sp, #32]
    c074:	9503      	str	r5, [sp, #12]
    c076:	2400      	movs	r4, #0
    c078:	46b3      	mov	fp, r6
    c07a:	9704      	str	r7, [sp, #16]
    c07c:	f1ba 0f00 	cmp.w	sl, #0
    c080:	bfb8      	it	lt
    c082:	2500      	movlt	r5, #0
    c084:	db15      	blt.n	c0b2 <__kernel_rem_pio2f+0x426>
    c086:	2600      	movs	r6, #0
    c088:	4637      	mov	r7, r6
    c08a:	2500      	movs	r5, #0
    c08c:	e001      	b.n	c092 <__kernel_rem_pio2f+0x406>
    c08e:	42a7      	cmp	r7, r4
    c090:	dc0f      	bgt.n	c0b2 <__kernel_rem_pio2f+0x426>
    c092:	f858 1006 	ldr.w	r1, [r8, r6]
    c096:	f859 0006 	ldr.w	r0, [r9, r6]
    c09a:	f001 f83f 	bl	d11c <__aeabi_fmul>
    c09e:	4601      	mov	r1, r0
    c0a0:	4628      	mov	r0, r5
    c0a2:	f000 ff33 	bl	cf0c <__addsf3>
    c0a6:	3701      	adds	r7, #1
    c0a8:	45ba      	cmp	sl, r7
    c0aa:	4605      	mov	r5, r0
    c0ac:	f106 0604 	add.w	r6, r6, #4
    c0b0:	daed      	bge.n	c08e <__kernel_rem_pio2f+0x402>
    c0b2:	a95e      	add	r1, sp, #376	; 0x178
    c0b4:	eb01 0384 	add.w	r3, r1, r4, lsl #2
    c0b8:	3401      	adds	r4, #1
    c0ba:	45a3      	cmp	fp, r4
    c0bc:	f1a8 0804 	sub.w	r8, r8, #4
    c0c0:	f843 5ca0 	str.w	r5, [r3, #-160]
    c0c4:	d1da      	bne.n	c07c <__kernel_rem_pio2f+0x3f0>
    c0c6:	9d03      	ldr	r5, [sp, #12]
    c0c8:	9f04      	ldr	r7, [sp, #16]
    c0ca:	9c68      	ldr	r4, [sp, #416]	; 0x1a0
    c0cc:	2c03      	cmp	r4, #3
    c0ce:	f200 808e 	bhi.w	c1ee <__kernel_rem_pio2f+0x562>
    c0d2:	e8df f004 	tbb	[pc, r4]
    c0d6:	92c1      	.short	0x92c1
    c0d8:	2792      	.short	0x2792
    c0da:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    c0de:	a80e      	add	r0, sp, #56	; 0x38
    c0e0:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    c0e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    c0e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    c0ec:	e6ce      	b.n	be8c <__kernel_rem_pio2f+0x200>
    c0ee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c0f2:	f001 f9c5 	bl	d480 <__aeabi_fcmpge>
    c0f6:	b958      	cbnz	r0, c110 <__kernel_rem_pio2f+0x484>
    c0f8:	4607      	mov	r7, r0
    c0fa:	e6c9      	b.n	be90 <__kernel_rem_pio2f+0x204>
    c0fc:	ab4a      	add	r3, sp, #296	; 0x128
    c0fe:	f04f 0a00 	mov.w	sl, #0
    c102:	f843 a005 	str.w	sl, [r3, r5]
    c106:	3504      	adds	r5, #4
    c108:	4545      	cmp	r5, r8
    c10a:	f47f ae09 	bne.w	bd20 <__kernel_rem_pio2f+0x94>
    c10e:	e626      	b.n	bd5e <__kernel_rem_pio2f+0xd2>
    c110:	f1b9 0f00 	cmp.w	r9, #0
    c114:	f04f 0702 	mov.w	r7, #2
    c118:	f10a 0a01 	add.w	sl, sl, #1
    c11c:	f73f ae93 	bgt.w	be46 <__kernel_rem_pio2f+0x1ba>
    c120:	2500      	movs	r5, #0
    c122:	e6a2      	b.n	be6a <__kernel_rem_pio2f+0x1de>
    c124:	2d00      	cmp	r5, #0
    c126:	f340 80dc 	ble.w	c2e2 <__kernel_rem_pio2f+0x656>
    c12a:	ea4f 0b85 	mov.w	fp, r5, lsl #2
    c12e:	ab5e      	add	r3, sp, #376	; 0x178
    c130:	445b      	add	r3, fp
    c132:	ae36      	add	r6, sp, #216	; 0xd8
    c134:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
    c138:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
    c13c:	f853 8ca0 	ldr.w	r8, [r3, #-160]
    c140:	4654      	mov	r4, sl
    c142:	465b      	mov	r3, fp
    c144:	aa35      	add	r2, sp, #212	; 0xd4
    c146:	46bb      	mov	fp, r7
    c148:	462f      	mov	r7, r5
    c14a:	e000      	b.n	c14e <__kernel_rem_pio2f+0x4c2>
    c14c:	46c8      	mov	r8, r9
    c14e:	f854 5904 	ldr.w	r5, [r4], #-4
    c152:	9201      	str	r2, [sp, #4]
    c154:	4641      	mov	r1, r8
    c156:	4628      	mov	r0, r5
    c158:	9300      	str	r3, [sp, #0]
    c15a:	f000 fed7 	bl	cf0c <__addsf3>
    c15e:	4681      	mov	r9, r0
    c160:	4649      	mov	r1, r9
    c162:	4628      	mov	r0, r5
    c164:	f000 fed0 	bl	cf08 <__aeabi_fsub>
    c168:	4641      	mov	r1, r8
    c16a:	f000 fecf 	bl	cf0c <__addsf3>
    c16e:	9a01      	ldr	r2, [sp, #4]
    c170:	f8c4 9004 	str.w	r9, [r4, #4]
    c174:	4294      	cmp	r4, r2
    c176:	60a0      	str	r0, [r4, #8]
    c178:	9b00      	ldr	r3, [sp, #0]
    c17a:	d1e7      	bne.n	c14c <__kernel_rem_pio2f+0x4c0>
    c17c:	463d      	mov	r5, r7
    c17e:	2d01      	cmp	r5, #1
    c180:	465f      	mov	r7, fp
    c182:	469b      	mov	fp, r3
    c184:	f340 80ad 	ble.w	c2e2 <__kernel_rem_pio2f+0x656>
    c188:	a85e      	add	r0, sp, #376	; 0x178
    c18a:	4483      	add	fp, r0
    c18c:	f85b 4ca0 	ldr.w	r4, [fp, #-160]
    c190:	e000      	b.n	c194 <__kernel_rem_pio2f+0x508>
    c192:	4644      	mov	r4, r8
    c194:	f85a 9904 	ldr.w	r9, [sl], #-4
    c198:	4621      	mov	r1, r4
    c19a:	4648      	mov	r0, r9
    c19c:	f000 feb6 	bl	cf0c <__addsf3>
    c1a0:	4680      	mov	r8, r0
    c1a2:	4641      	mov	r1, r8
    c1a4:	4648      	mov	r0, r9
    c1a6:	f000 feaf 	bl	cf08 <__aeabi_fsub>
    c1aa:	4621      	mov	r1, r4
    c1ac:	f000 feae 	bl	cf0c <__addsf3>
    c1b0:	4556      	cmp	r6, sl
    c1b2:	f8ca 8004 	str.w	r8, [sl, #4]
    c1b6:	f8ca 0008 	str.w	r0, [sl, #8]
    c1ba:	d1ea      	bne.n	c192 <__kernel_rem_pio2f+0x506>
    c1bc:	1c6c      	adds	r4, r5, #1
    c1be:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    c1c2:	2000      	movs	r0, #0
    c1c4:	3608      	adds	r6, #8
    c1c6:	f854 1d04 	ldr.w	r1, [r4, #-4]!
    c1ca:	f000 fe9f 	bl	cf0c <__addsf3>
    c1ce:	42b4      	cmp	r4, r6
    c1d0:	d1f9      	bne.n	c1c6 <__kernel_rem_pio2f+0x53a>
    c1d2:	2f00      	cmp	r7, #0
    c1d4:	d07e      	beq.n	c2d4 <__kernel_rem_pio2f+0x648>
    c1d6:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    c1d8:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    c1da:	9d09      	ldr	r5, [sp, #36]	; 0x24
    c1dc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    c1e0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    c1e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    c1e8:	60a8      	str	r0, [r5, #8]
    c1ea:	602a      	str	r2, [r5, #0]
    c1ec:	606b      	str	r3, [r5, #4]
    c1ee:	9a02      	ldr	r2, [sp, #8]
    c1f0:	f002 0007 	and.w	r0, r2, #7
    c1f4:	b05f      	add	sp, #380	; 0x17c
    c1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c1fa:	2d00      	cmp	r5, #0
    c1fc:	bfb8      	it	lt
    c1fe:	2000      	movlt	r0, #0
    c200:	db0a      	blt.n	c218 <__kernel_rem_pio2f+0x58c>
    c202:	ae36      	add	r6, sp, #216	; 0xd8
    c204:	1c6c      	adds	r4, r5, #1
    c206:	2000      	movs	r0, #0
    c208:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    c20c:	f854 1d04 	ldr.w	r1, [r4, #-4]!
    c210:	f000 fe7c 	bl	cf0c <__addsf3>
    c214:	42b4      	cmp	r4, r6
    c216:	d1f9      	bne.n	c20c <__kernel_rem_pio2f+0x580>
    c218:	2f00      	cmp	r7, #0
    c21a:	d035      	beq.n	c288 <__kernel_rem_pio2f+0x5fc>
    c21c:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
    c220:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c222:	4601      	mov	r1, r0
    c224:	6023      	str	r3, [r4, #0]
    c226:	9836      	ldr	r0, [sp, #216]	; 0xd8
    c228:	f000 fe6e 	bl	cf08 <__aeabi_fsub>
    c22c:	2d00      	cmp	r5, #0
    c22e:	dd08      	ble.n	c242 <__kernel_rem_pio2f+0x5b6>
    c230:	ac36      	add	r4, sp, #216	; 0xd8
    c232:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    c236:	f854 1f04 	ldr.w	r1, [r4, #4]!
    c23a:	f000 fe67 	bl	cf0c <__addsf3>
    c23e:	42ac      	cmp	r4, r5
    c240:	d1f9      	bne.n	c236 <__kernel_rem_pio2f+0x5aa>
    c242:	b10f      	cbz	r7, c248 <__kernel_rem_pio2f+0x5bc>
    c244:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    c248:	9d09      	ldr	r5, [sp, #36]	; 0x24
    c24a:	9a02      	ldr	r2, [sp, #8]
    c24c:	6068      	str	r0, [r5, #4]
    c24e:	f002 0007 	and.w	r0, r2, #7
    c252:	b05f      	add	sp, #380	; 0x17c
    c254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c258:	2d00      	cmp	r5, #0
    c25a:	db39      	blt.n	c2d0 <__kernel_rem_pio2f+0x644>
    c25c:	1c6c      	adds	r4, r5, #1
    c25e:	ae36      	add	r6, sp, #216	; 0xd8
    c260:	2000      	movs	r0, #0
    c262:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    c266:	f854 1d04 	ldr.w	r1, [r4, #-4]!
    c26a:	f000 fe4f 	bl	cf0c <__addsf3>
    c26e:	42b4      	cmp	r4, r6
    c270:	d1f9      	bne.n	c266 <__kernel_rem_pio2f+0x5da>
    c272:	b10f      	cbz	r7, c278 <__kernel_rem_pio2f+0x5ec>
    c274:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    c278:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c27a:	6010      	str	r0, [r2, #0]
    c27c:	9a02      	ldr	r2, [sp, #8]
    c27e:	f002 0007 	and.w	r0, r2, #7
    c282:	b05f      	add	sp, #380	; 0x17c
    c284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c288:	4603      	mov	r3, r0
    c28a:	e7c9      	b.n	c220 <__kernel_rem_pio2f+0x594>
    c28c:	2301      	movs	r3, #1
    c28e:	e629      	b.n	bee4 <__kernel_rem_pio2f+0x258>
    c290:	ac0e      	add	r4, sp, #56	; 0x38
    c292:	9a06      	ldr	r2, [sp, #24]
    c294:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    c298:	f8cd a008 	str.w	sl, [sp, #8]
    c29c:	3a08      	subs	r2, #8
    c29e:	9206      	str	r2, [sp, #24]
    c2a0:	2b00      	cmp	r3, #0
    c2a2:	f47f aeba 	bne.w	c01a <__kernel_rem_pio2f+0x38e>
    c2a6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    c2aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    c2ae:	3d01      	subs	r5, #1
    c2b0:	3a08      	subs	r2, #8
    c2b2:	2900      	cmp	r1, #0
    c2b4:	d0f9      	beq.n	c2aa <__kernel_rem_pio2f+0x61e>
    c2b6:	9206      	str	r2, [sp, #24]
    c2b8:	e6af      	b.n	c01a <__kernel_rem_pio2f+0x38e>
    c2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c2bc:	009c      	lsls	r4, r3, #2
    c2be:	e54e      	b.n	bd5e <__kernel_rem_pio2f+0xd2>
    c2c0:	4620      	mov	r0, r4
    c2c2:	f001 f8f1 	bl	d4a8 <__aeabi_f2iz>
    c2c6:	ac0e      	add	r4, sp, #56	; 0x38
    c2c8:	464d      	mov	r5, r9
    c2ca:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
    c2ce:	e6a4      	b.n	c01a <__kernel_rem_pio2f+0x38e>
    c2d0:	2000      	movs	r0, #0
    c2d2:	e7ce      	b.n	c272 <__kernel_rem_pio2f+0x5e6>
    c2d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c2d6:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    c2d8:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    c2da:	60a0      	str	r0, [r4, #8]
    c2dc:	6022      	str	r2, [r4, #0]
    c2de:	6063      	str	r3, [r4, #4]
    c2e0:	e785      	b.n	c1ee <__kernel_rem_pio2f+0x562>
    c2e2:	2000      	movs	r0, #0
    c2e4:	e775      	b.n	c1d2 <__kernel_rem_pio2f+0x546>
    c2e6:	bf00      	nop
    c2e8:	00012474 	.word	0x00012474

0000c2ec <__kernel_sinf>:
    c2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c2f0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
    c2f4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
    c2f8:	4604      	mov	r4, r0
    c2fa:	460f      	mov	r7, r1
    c2fc:	4690      	mov	r8, r2
    c2fe:	da03      	bge.n	c308 <__kernel_sinf+0x1c>
    c300:	f001 f8d2 	bl	d4a8 <__aeabi_f2iz>
    c304:	2800      	cmp	r0, #0
    c306:	d057      	beq.n	c3b8 <__kernel_sinf+0xcc>
    c308:	4621      	mov	r1, r4
    c30a:	4620      	mov	r0, r4
    c30c:	f000 ff06 	bl	d11c <__aeabi_fmul>
    c310:	4621      	mov	r1, r4
    c312:	4605      	mov	r5, r0
    c314:	f000 ff02 	bl	d11c <__aeabi_fmul>
    c318:	4929      	ldr	r1, [pc, #164]	; (c3c0 <__kernel_sinf+0xd4>)
    c31a:	4606      	mov	r6, r0
    c31c:	4628      	mov	r0, r5
    c31e:	f000 fefd 	bl	d11c <__aeabi_fmul>
    c322:	4928      	ldr	r1, [pc, #160]	; (c3c4 <__kernel_sinf+0xd8>)
    c324:	f000 fdf0 	bl	cf08 <__aeabi_fsub>
    c328:	4629      	mov	r1, r5
    c32a:	f000 fef7 	bl	d11c <__aeabi_fmul>
    c32e:	4926      	ldr	r1, [pc, #152]	; (c3c8 <__kernel_sinf+0xdc>)
    c330:	f000 fdec 	bl	cf0c <__addsf3>
    c334:	4629      	mov	r1, r5
    c336:	f000 fef1 	bl	d11c <__aeabi_fmul>
    c33a:	4924      	ldr	r1, [pc, #144]	; (c3cc <__kernel_sinf+0xe0>)
    c33c:	f000 fde4 	bl	cf08 <__aeabi_fsub>
    c340:	4629      	mov	r1, r5
    c342:	f000 feeb 	bl	d11c <__aeabi_fmul>
    c346:	4922      	ldr	r1, [pc, #136]	; (c3d0 <__kernel_sinf+0xe4>)
    c348:	f000 fde0 	bl	cf0c <__addsf3>
    c34c:	4681      	mov	r9, r0
    c34e:	f1b8 0f00 	cmp.w	r8, #0
    c352:	d022      	beq.n	c39a <__kernel_sinf+0xae>
    c354:	4638      	mov	r0, r7
    c356:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c35a:	f000 fedf 	bl	d11c <__aeabi_fmul>
    c35e:	4649      	mov	r1, r9
    c360:	4680      	mov	r8, r0
    c362:	4630      	mov	r0, r6
    c364:	f000 feda 	bl	d11c <__aeabi_fmul>
    c368:	4601      	mov	r1, r0
    c36a:	4640      	mov	r0, r8
    c36c:	f000 fdcc 	bl	cf08 <__aeabi_fsub>
    c370:	4629      	mov	r1, r5
    c372:	f000 fed3 	bl	d11c <__aeabi_fmul>
    c376:	4639      	mov	r1, r7
    c378:	f000 fdc6 	bl	cf08 <__aeabi_fsub>
    c37c:	4915      	ldr	r1, [pc, #84]	; (c3d4 <__kernel_sinf+0xe8>)
    c37e:	4605      	mov	r5, r0
    c380:	4630      	mov	r0, r6
    c382:	f000 fecb 	bl	d11c <__aeabi_fmul>
    c386:	4601      	mov	r1, r0
    c388:	4628      	mov	r0, r5
    c38a:	f000 fdbf 	bl	cf0c <__addsf3>
    c38e:	4601      	mov	r1, r0
    c390:	4620      	mov	r0, r4
    c392:	f000 fdb9 	bl	cf08 <__aeabi_fsub>
    c396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c39a:	4649      	mov	r1, r9
    c39c:	4628      	mov	r0, r5
    c39e:	f000 febd 	bl	d11c <__aeabi_fmul>
    c3a2:	490c      	ldr	r1, [pc, #48]	; (c3d4 <__kernel_sinf+0xe8>)
    c3a4:	f000 fdb0 	bl	cf08 <__aeabi_fsub>
    c3a8:	4631      	mov	r1, r6
    c3aa:	f000 feb7 	bl	d11c <__aeabi_fmul>
    c3ae:	4621      	mov	r1, r4
    c3b0:	f000 fdac 	bl	cf0c <__addsf3>
    c3b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c3b8:	4620      	mov	r0, r4
    c3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c3be:	bf00      	nop
    c3c0:	2f2ec9d3 	.word	0x2f2ec9d3
    c3c4:	32d72f34 	.word	0x32d72f34
    c3c8:	3638ef1b 	.word	0x3638ef1b
    c3cc:	39500d01 	.word	0x39500d01
    c3d0:	3c088889 	.word	0x3c088889
    c3d4:	3e2aaaab 	.word	0x3e2aaaab

0000c3d8 <fabsf>:
    c3d8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    c3dc:	4770      	bx	lr
    c3de:	bf00      	nop

0000c3e0 <floorf>:
    c3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3e4:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
    c3e8:	0dfd      	lsrs	r5, r7, #23
    c3ea:	3d7f      	subs	r5, #127	; 0x7f
    c3ec:	2d16      	cmp	r5, #22
    c3ee:	4606      	mov	r6, r0
    c3f0:	dc13      	bgt.n	c41a <floorf+0x3a>
    c3f2:	2d00      	cmp	r5, #0
    c3f4:	4680      	mov	r8, r0
    c3f6:	db1b      	blt.n	c430 <floorf+0x50>
    c3f8:	4f19      	ldr	r7, [pc, #100]	; (c460 <floorf+0x80>)
    c3fa:	412f      	asrs	r7, r5
    c3fc:	4207      	tst	r7, r0
    c3fe:	d014      	beq.n	c42a <floorf+0x4a>
    c400:	4918      	ldr	r1, [pc, #96]	; (c464 <floorf+0x84>)
    c402:	f000 fd83 	bl	cf0c <__addsf3>
    c406:	2100      	movs	r1, #0
    c408:	f001 f844 	bl	d494 <__aeabi_fcmpgt>
    c40c:	b168      	cbz	r0, c42a <floorf+0x4a>
    c40e:	2e00      	cmp	r6, #0
    c410:	db1b      	blt.n	c44a <floorf+0x6a>
    c412:	ea28 0007 	bic.w	r0, r8, r7
    c416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c41a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
    c41e:	d304      	bcc.n	c42a <floorf+0x4a>
    c420:	4601      	mov	r1, r0
    c422:	f000 fd73 	bl	cf0c <__addsf3>
    c426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c42a:	4630      	mov	r0, r6
    c42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c430:	490c      	ldr	r1, [pc, #48]	; (c464 <floorf+0x84>)
    c432:	f000 fd6b 	bl	cf0c <__addsf3>
    c436:	2100      	movs	r1, #0
    c438:	f001 f82c 	bl	d494 <__aeabi_fcmpgt>
    c43c:	2800      	cmp	r0, #0
    c43e:	d0f4      	beq.n	c42a <floorf+0x4a>
    c440:	2e00      	cmp	r6, #0
    c442:	db08      	blt.n	c456 <floorf+0x76>
    c444:	2000      	movs	r0, #0
    c446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c44a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    c44e:	fa43 f505 	asr.w	r5, r3, r5
    c452:	44a8      	add	r8, r5
    c454:	e7dd      	b.n	c412 <floorf+0x32>
    c456:	2f00      	cmp	r7, #0
    c458:	d0e7      	beq.n	c42a <floorf+0x4a>
    c45a:	4803      	ldr	r0, [pc, #12]	; (c468 <floorf+0x88>)
    c45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c460:	007fffff 	.word	0x007fffff
    c464:	7149f2ca 	.word	0x7149f2ca
    c468:	bf800000 	.word	0xbf800000

0000c46c <scalbnf>:
    c46c:	b538      	push	{r3, r4, r5, lr}
    c46e:	f030 4400 	bics.w	r4, r0, #2147483648	; 0x80000000
    c472:	4602      	mov	r2, r0
    c474:	4603      	mov	r3, r0
    c476:	460d      	mov	r5, r1
    c478:	d014      	beq.n	c4a4 <scalbnf+0x38>
    c47a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
    c47e:	d20d      	bcs.n	c49c <scalbnf+0x30>
    c480:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    c484:	d30f      	bcc.n	c4a6 <scalbnf+0x3a>
    c486:	0de4      	lsrs	r4, r4, #23
    c488:	442c      	add	r4, r5
    c48a:	2cfe      	cmp	r4, #254	; 0xfe
    c48c:	dc2e      	bgt.n	c4ec <scalbnf+0x80>
    c48e:	2c00      	cmp	r4, #0
    c490:	dd1d      	ble.n	c4ce <scalbnf+0x62>
    c492:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    c496:	ea43 50c4 	orr.w	r0, r3, r4, lsl #23
    c49a:	bd38      	pop	{r3, r4, r5, pc}
    c49c:	4601      	mov	r1, r0
    c49e:	f000 fd35 	bl	cf0c <__addsf3>
    c4a2:	bd38      	pop	{r3, r4, r5, pc}
    c4a4:	bd38      	pop	{r3, r4, r5, pc}
    c4a6:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
    c4aa:	f000 fe37 	bl	d11c <__aeabi_fmul>
    c4ae:	4b19      	ldr	r3, [pc, #100]	; (c514 <scalbnf+0xa8>)
    c4b0:	429d      	cmp	r5, r3
    c4b2:	4602      	mov	r2, r0
    c4b4:	db07      	blt.n	c4c6 <scalbnf+0x5a>
    c4b6:	f3c0 54c7 	ubfx	r4, r0, #23, #8
    c4ba:	4603      	mov	r3, r0
    c4bc:	3c19      	subs	r4, #25
    c4be:	e7e3      	b.n	c488 <scalbnf+0x1c>
    c4c0:	4815      	ldr	r0, [pc, #84]	; (c518 <scalbnf+0xac>)
    c4c2:	f000 f82d 	bl	c520 <copysignf>
    c4c6:	4914      	ldr	r1, [pc, #80]	; (c518 <scalbnf+0xac>)
    c4c8:	f000 fe28 	bl	d11c <__aeabi_fmul>
    c4cc:	bd38      	pop	{r3, r4, r5, pc}
    c4ce:	f114 0f16 	cmn.w	r4, #22
    c4d2:	da13      	bge.n	c4fc <scalbnf+0x90>
    c4d4:	f24c 3350 	movw	r3, #50000	; 0xc350
    c4d8:	429d      	cmp	r5, r3
    c4da:	4611      	mov	r1, r2
    c4dc:	ddf0      	ble.n	c4c0 <scalbnf+0x54>
    c4de:	480f      	ldr	r0, [pc, #60]	; (c51c <scalbnf+0xb0>)
    c4e0:	f000 f81e 	bl	c520 <copysignf>
    c4e4:	490d      	ldr	r1, [pc, #52]	; (c51c <scalbnf+0xb0>)
    c4e6:	f000 fe19 	bl	d11c <__aeabi_fmul>
    c4ea:	bd38      	pop	{r3, r4, r5, pc}
    c4ec:	4611      	mov	r1, r2
    c4ee:	480b      	ldr	r0, [pc, #44]	; (c51c <scalbnf+0xb0>)
    c4f0:	f000 f816 	bl	c520 <copysignf>
    c4f4:	4909      	ldr	r1, [pc, #36]	; (c51c <scalbnf+0xb0>)
    c4f6:	f000 fe11 	bl	d11c <__aeabi_fmul>
    c4fa:	bd38      	pop	{r3, r4, r5, pc}
    c4fc:	f104 0019 	add.w	r0, r4, #25
    c500:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    c504:	ea43 50c0 	orr.w	r0, r3, r0, lsl #23
    c508:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
    c50c:	f000 fe06 	bl	d11c <__aeabi_fmul>
    c510:	bd38      	pop	{r3, r4, r5, pc}
    c512:	bf00      	nop
    c514:	ffff3cb0 	.word	0xffff3cb0
    c518:	0da24260 	.word	0x0da24260
    c51c:	7149f2ca 	.word	0x7149f2ca

0000c520 <copysignf>:
    c520:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c524:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    c528:	4308      	orrs	r0, r1
    c52a:	4770      	bx	lr

0000c52c <__aeabi_drsub>:
    c52c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c530:	e002      	b.n	c538 <__adddf3>
    c532:	bf00      	nop

0000c534 <__aeabi_dsub>:
    c534:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c538 <__adddf3>:
    c538:	b530      	push	{r4, r5, lr}
    c53a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c53e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c542:	ea94 0f05 	teq	r4, r5
    c546:	bf08      	it	eq
    c548:	ea90 0f02 	teqeq	r0, r2
    c54c:	bf1f      	itttt	ne
    c54e:	ea54 0c00 	orrsne.w	ip, r4, r0
    c552:	ea55 0c02 	orrsne.w	ip, r5, r2
    c556:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c55a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c55e:	f000 80e2 	beq.w	c726 <__adddf3+0x1ee>
    c562:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c566:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c56a:	bfb8      	it	lt
    c56c:	426d      	neglt	r5, r5
    c56e:	dd0c      	ble.n	c58a <__adddf3+0x52>
    c570:	442c      	add	r4, r5
    c572:	ea80 0202 	eor.w	r2, r0, r2
    c576:	ea81 0303 	eor.w	r3, r1, r3
    c57a:	ea82 0000 	eor.w	r0, r2, r0
    c57e:	ea83 0101 	eor.w	r1, r3, r1
    c582:	ea80 0202 	eor.w	r2, r0, r2
    c586:	ea81 0303 	eor.w	r3, r1, r3
    c58a:	2d36      	cmp	r5, #54	; 0x36
    c58c:	bf88      	it	hi
    c58e:	bd30      	pophi	{r4, r5, pc}
    c590:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c594:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c598:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c59c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c5a0:	d002      	beq.n	c5a8 <__adddf3+0x70>
    c5a2:	4240      	negs	r0, r0
    c5a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c5a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c5ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c5b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c5b4:	d002      	beq.n	c5bc <__adddf3+0x84>
    c5b6:	4252      	negs	r2, r2
    c5b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c5bc:	ea94 0f05 	teq	r4, r5
    c5c0:	f000 80a7 	beq.w	c712 <__adddf3+0x1da>
    c5c4:	f1a4 0401 	sub.w	r4, r4, #1
    c5c8:	f1d5 0e20 	rsbs	lr, r5, #32
    c5cc:	db0d      	blt.n	c5ea <__adddf3+0xb2>
    c5ce:	fa02 fc0e 	lsl.w	ip, r2, lr
    c5d2:	fa22 f205 	lsr.w	r2, r2, r5
    c5d6:	1880      	adds	r0, r0, r2
    c5d8:	f141 0100 	adc.w	r1, r1, #0
    c5dc:	fa03 f20e 	lsl.w	r2, r3, lr
    c5e0:	1880      	adds	r0, r0, r2
    c5e2:	fa43 f305 	asr.w	r3, r3, r5
    c5e6:	4159      	adcs	r1, r3
    c5e8:	e00e      	b.n	c608 <__adddf3+0xd0>
    c5ea:	f1a5 0520 	sub.w	r5, r5, #32
    c5ee:	f10e 0e20 	add.w	lr, lr, #32
    c5f2:	2a01      	cmp	r2, #1
    c5f4:	fa03 fc0e 	lsl.w	ip, r3, lr
    c5f8:	bf28      	it	cs
    c5fa:	f04c 0c02 	orrcs.w	ip, ip, #2
    c5fe:	fa43 f305 	asr.w	r3, r3, r5
    c602:	18c0      	adds	r0, r0, r3
    c604:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c60c:	d507      	bpl.n	c61e <__adddf3+0xe6>
    c60e:	f04f 0e00 	mov.w	lr, #0
    c612:	f1dc 0c00 	rsbs	ip, ip, #0
    c616:	eb7e 0000 	sbcs.w	r0, lr, r0
    c61a:	eb6e 0101 	sbc.w	r1, lr, r1
    c61e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c622:	d31b      	bcc.n	c65c <__adddf3+0x124>
    c624:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c628:	d30c      	bcc.n	c644 <__adddf3+0x10c>
    c62a:	0849      	lsrs	r1, r1, #1
    c62c:	ea5f 0030 	movs.w	r0, r0, rrx
    c630:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c634:	f104 0401 	add.w	r4, r4, #1
    c638:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c63c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c640:	f080 809a 	bcs.w	c778 <__adddf3+0x240>
    c644:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c648:	bf08      	it	eq
    c64a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c64e:	f150 0000 	adcs.w	r0, r0, #0
    c652:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c656:	ea41 0105 	orr.w	r1, r1, r5
    c65a:	bd30      	pop	{r4, r5, pc}
    c65c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c660:	4140      	adcs	r0, r0
    c662:	eb41 0101 	adc.w	r1, r1, r1
    c666:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c66a:	f1a4 0401 	sub.w	r4, r4, #1
    c66e:	d1e9      	bne.n	c644 <__adddf3+0x10c>
    c670:	f091 0f00 	teq	r1, #0
    c674:	bf04      	itt	eq
    c676:	4601      	moveq	r1, r0
    c678:	2000      	moveq	r0, #0
    c67a:	fab1 f381 	clz	r3, r1
    c67e:	bf08      	it	eq
    c680:	3320      	addeq	r3, #32
    c682:	f1a3 030b 	sub.w	r3, r3, #11
    c686:	f1b3 0220 	subs.w	r2, r3, #32
    c68a:	da0c      	bge.n	c6a6 <__adddf3+0x16e>
    c68c:	320c      	adds	r2, #12
    c68e:	dd08      	ble.n	c6a2 <__adddf3+0x16a>
    c690:	f102 0c14 	add.w	ip, r2, #20
    c694:	f1c2 020c 	rsb	r2, r2, #12
    c698:	fa01 f00c 	lsl.w	r0, r1, ip
    c69c:	fa21 f102 	lsr.w	r1, r1, r2
    c6a0:	e00c      	b.n	c6bc <__adddf3+0x184>
    c6a2:	f102 0214 	add.w	r2, r2, #20
    c6a6:	bfd8      	it	le
    c6a8:	f1c2 0c20 	rsble	ip, r2, #32
    c6ac:	fa01 f102 	lsl.w	r1, r1, r2
    c6b0:	fa20 fc0c 	lsr.w	ip, r0, ip
    c6b4:	bfdc      	itt	le
    c6b6:	ea41 010c 	orrle.w	r1, r1, ip
    c6ba:	4090      	lslle	r0, r2
    c6bc:	1ae4      	subs	r4, r4, r3
    c6be:	bfa2      	ittt	ge
    c6c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c6c4:	4329      	orrge	r1, r5
    c6c6:	bd30      	popge	{r4, r5, pc}
    c6c8:	ea6f 0404 	mvn.w	r4, r4
    c6cc:	3c1f      	subs	r4, #31
    c6ce:	da1c      	bge.n	c70a <__adddf3+0x1d2>
    c6d0:	340c      	adds	r4, #12
    c6d2:	dc0e      	bgt.n	c6f2 <__adddf3+0x1ba>
    c6d4:	f104 0414 	add.w	r4, r4, #20
    c6d8:	f1c4 0220 	rsb	r2, r4, #32
    c6dc:	fa20 f004 	lsr.w	r0, r0, r4
    c6e0:	fa01 f302 	lsl.w	r3, r1, r2
    c6e4:	ea40 0003 	orr.w	r0, r0, r3
    c6e8:	fa21 f304 	lsr.w	r3, r1, r4
    c6ec:	ea45 0103 	orr.w	r1, r5, r3
    c6f0:	bd30      	pop	{r4, r5, pc}
    c6f2:	f1c4 040c 	rsb	r4, r4, #12
    c6f6:	f1c4 0220 	rsb	r2, r4, #32
    c6fa:	fa20 f002 	lsr.w	r0, r0, r2
    c6fe:	fa01 f304 	lsl.w	r3, r1, r4
    c702:	ea40 0003 	orr.w	r0, r0, r3
    c706:	4629      	mov	r1, r5
    c708:	bd30      	pop	{r4, r5, pc}
    c70a:	fa21 f004 	lsr.w	r0, r1, r4
    c70e:	4629      	mov	r1, r5
    c710:	bd30      	pop	{r4, r5, pc}
    c712:	f094 0f00 	teq	r4, #0
    c716:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c71a:	bf06      	itte	eq
    c71c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c720:	3401      	addeq	r4, #1
    c722:	3d01      	subne	r5, #1
    c724:	e74e      	b.n	c5c4 <__adddf3+0x8c>
    c726:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c72a:	bf18      	it	ne
    c72c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c730:	d029      	beq.n	c786 <__adddf3+0x24e>
    c732:	ea94 0f05 	teq	r4, r5
    c736:	bf08      	it	eq
    c738:	ea90 0f02 	teqeq	r0, r2
    c73c:	d005      	beq.n	c74a <__adddf3+0x212>
    c73e:	ea54 0c00 	orrs.w	ip, r4, r0
    c742:	bf04      	itt	eq
    c744:	4619      	moveq	r1, r3
    c746:	4610      	moveq	r0, r2
    c748:	bd30      	pop	{r4, r5, pc}
    c74a:	ea91 0f03 	teq	r1, r3
    c74e:	bf1e      	ittt	ne
    c750:	2100      	movne	r1, #0
    c752:	2000      	movne	r0, #0
    c754:	bd30      	popne	{r4, r5, pc}
    c756:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c75a:	d105      	bne.n	c768 <__adddf3+0x230>
    c75c:	0040      	lsls	r0, r0, #1
    c75e:	4149      	adcs	r1, r1
    c760:	bf28      	it	cs
    c762:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c766:	bd30      	pop	{r4, r5, pc}
    c768:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c76c:	bf3c      	itt	cc
    c76e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c772:	bd30      	popcc	{r4, r5, pc}
    c774:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c778:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c77c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c780:	f04f 0000 	mov.w	r0, #0
    c784:	bd30      	pop	{r4, r5, pc}
    c786:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c78a:	bf1a      	itte	ne
    c78c:	4619      	movne	r1, r3
    c78e:	4610      	movne	r0, r2
    c790:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c794:	bf1c      	itt	ne
    c796:	460b      	movne	r3, r1
    c798:	4602      	movne	r2, r0
    c79a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c79e:	bf06      	itte	eq
    c7a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c7a4:	ea91 0f03 	teqeq	r1, r3
    c7a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c7ac:	bd30      	pop	{r4, r5, pc}
    c7ae:	bf00      	nop

0000c7b0 <__aeabi_ui2d>:
    c7b0:	f090 0f00 	teq	r0, #0
    c7b4:	bf04      	itt	eq
    c7b6:	2100      	moveq	r1, #0
    c7b8:	4770      	bxeq	lr
    c7ba:	b530      	push	{r4, r5, lr}
    c7bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c7c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c7c4:	f04f 0500 	mov.w	r5, #0
    c7c8:	f04f 0100 	mov.w	r1, #0
    c7cc:	e750      	b.n	c670 <__adddf3+0x138>
    c7ce:	bf00      	nop

0000c7d0 <__aeabi_i2d>:
    c7d0:	f090 0f00 	teq	r0, #0
    c7d4:	bf04      	itt	eq
    c7d6:	2100      	moveq	r1, #0
    c7d8:	4770      	bxeq	lr
    c7da:	b530      	push	{r4, r5, lr}
    c7dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c7e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c7e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c7e8:	bf48      	it	mi
    c7ea:	4240      	negmi	r0, r0
    c7ec:	f04f 0100 	mov.w	r1, #0
    c7f0:	e73e      	b.n	c670 <__adddf3+0x138>
    c7f2:	bf00      	nop

0000c7f4 <__aeabi_f2d>:
    c7f4:	0042      	lsls	r2, r0, #1
    c7f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c7fa:	ea4f 0131 	mov.w	r1, r1, rrx
    c7fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c802:	bf1f      	itttt	ne
    c804:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c808:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c80c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c810:	4770      	bxne	lr
    c812:	f092 0f00 	teq	r2, #0
    c816:	bf14      	ite	ne
    c818:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c81c:	4770      	bxeq	lr
    c81e:	b530      	push	{r4, r5, lr}
    c820:	f44f 7460 	mov.w	r4, #896	; 0x380
    c824:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c828:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c82c:	e720      	b.n	c670 <__adddf3+0x138>
    c82e:	bf00      	nop

0000c830 <__aeabi_ul2d>:
    c830:	ea50 0201 	orrs.w	r2, r0, r1
    c834:	bf08      	it	eq
    c836:	4770      	bxeq	lr
    c838:	b530      	push	{r4, r5, lr}
    c83a:	f04f 0500 	mov.w	r5, #0
    c83e:	e00a      	b.n	c856 <__aeabi_l2d+0x16>

0000c840 <__aeabi_l2d>:
    c840:	ea50 0201 	orrs.w	r2, r0, r1
    c844:	bf08      	it	eq
    c846:	4770      	bxeq	lr
    c848:	b530      	push	{r4, r5, lr}
    c84a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c84e:	d502      	bpl.n	c856 <__aeabi_l2d+0x16>
    c850:	4240      	negs	r0, r0
    c852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c856:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c85a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c85e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c862:	f43f aedc 	beq.w	c61e <__adddf3+0xe6>
    c866:	f04f 0203 	mov.w	r2, #3
    c86a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c86e:	bf18      	it	ne
    c870:	3203      	addne	r2, #3
    c872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c876:	bf18      	it	ne
    c878:	3203      	addne	r2, #3
    c87a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c87e:	f1c2 0320 	rsb	r3, r2, #32
    c882:	fa00 fc03 	lsl.w	ip, r0, r3
    c886:	fa20 f002 	lsr.w	r0, r0, r2
    c88a:	fa01 fe03 	lsl.w	lr, r1, r3
    c88e:	ea40 000e 	orr.w	r0, r0, lr
    c892:	fa21 f102 	lsr.w	r1, r1, r2
    c896:	4414      	add	r4, r2
    c898:	e6c1      	b.n	c61e <__adddf3+0xe6>
    c89a:	bf00      	nop

0000c89c <__aeabi_dmul>:
    c89c:	b570      	push	{r4, r5, r6, lr}
    c89e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c8a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c8a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c8aa:	bf1d      	ittte	ne
    c8ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c8b0:	ea94 0f0c 	teqne	r4, ip
    c8b4:	ea95 0f0c 	teqne	r5, ip
    c8b8:	f000 f8de 	bleq	ca78 <__aeabi_dmul+0x1dc>
    c8bc:	442c      	add	r4, r5
    c8be:	ea81 0603 	eor.w	r6, r1, r3
    c8c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c8c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c8ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c8ce:	bf18      	it	ne
    c8d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c8d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c8d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c8dc:	d038      	beq.n	c950 <__aeabi_dmul+0xb4>
    c8de:	fba0 ce02 	umull	ip, lr, r0, r2
    c8e2:	f04f 0500 	mov.w	r5, #0
    c8e6:	fbe1 e502 	umlal	lr, r5, r1, r2
    c8ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c8ee:	fbe0 e503 	umlal	lr, r5, r0, r3
    c8f2:	f04f 0600 	mov.w	r6, #0
    c8f6:	fbe1 5603 	umlal	r5, r6, r1, r3
    c8fa:	f09c 0f00 	teq	ip, #0
    c8fe:	bf18      	it	ne
    c900:	f04e 0e01 	orrne.w	lr, lr, #1
    c904:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c908:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c90c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c910:	d204      	bcs.n	c91c <__aeabi_dmul+0x80>
    c912:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c916:	416d      	adcs	r5, r5
    c918:	eb46 0606 	adc.w	r6, r6, r6
    c91c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c920:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c924:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c928:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c92c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c930:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c934:	bf88      	it	hi
    c936:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c93a:	d81e      	bhi.n	c97a <__aeabi_dmul+0xde>
    c93c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c940:	bf08      	it	eq
    c942:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c946:	f150 0000 	adcs.w	r0, r0, #0
    c94a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c94e:	bd70      	pop	{r4, r5, r6, pc}
    c950:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c954:	ea46 0101 	orr.w	r1, r6, r1
    c958:	ea40 0002 	orr.w	r0, r0, r2
    c95c:	ea81 0103 	eor.w	r1, r1, r3
    c960:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c964:	bfc2      	ittt	gt
    c966:	ebd4 050c 	rsbsgt	r5, r4, ip
    c96a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c96e:	bd70      	popgt	{r4, r5, r6, pc}
    c970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c974:	f04f 0e00 	mov.w	lr, #0
    c978:	3c01      	subs	r4, #1
    c97a:	f300 80ab 	bgt.w	cad4 <__aeabi_dmul+0x238>
    c97e:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c982:	bfde      	ittt	le
    c984:	2000      	movle	r0, #0
    c986:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c98a:	bd70      	pople	{r4, r5, r6, pc}
    c98c:	f1c4 0400 	rsb	r4, r4, #0
    c990:	3c20      	subs	r4, #32
    c992:	da35      	bge.n	ca00 <__aeabi_dmul+0x164>
    c994:	340c      	adds	r4, #12
    c996:	dc1b      	bgt.n	c9d0 <__aeabi_dmul+0x134>
    c998:	f104 0414 	add.w	r4, r4, #20
    c99c:	f1c4 0520 	rsb	r5, r4, #32
    c9a0:	fa00 f305 	lsl.w	r3, r0, r5
    c9a4:	fa20 f004 	lsr.w	r0, r0, r4
    c9a8:	fa01 f205 	lsl.w	r2, r1, r5
    c9ac:	ea40 0002 	orr.w	r0, r0, r2
    c9b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c9b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c9b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c9bc:	fa21 f604 	lsr.w	r6, r1, r4
    c9c0:	eb42 0106 	adc.w	r1, r2, r6
    c9c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c9c8:	bf08      	it	eq
    c9ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c9ce:	bd70      	pop	{r4, r5, r6, pc}
    c9d0:	f1c4 040c 	rsb	r4, r4, #12
    c9d4:	f1c4 0520 	rsb	r5, r4, #32
    c9d8:	fa00 f304 	lsl.w	r3, r0, r4
    c9dc:	fa20 f005 	lsr.w	r0, r0, r5
    c9e0:	fa01 f204 	lsl.w	r2, r1, r4
    c9e4:	ea40 0002 	orr.w	r0, r0, r2
    c9e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c9ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c9f0:	f141 0100 	adc.w	r1, r1, #0
    c9f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c9f8:	bf08      	it	eq
    c9fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c9fe:	bd70      	pop	{r4, r5, r6, pc}
    ca00:	f1c4 0520 	rsb	r5, r4, #32
    ca04:	fa00 f205 	lsl.w	r2, r0, r5
    ca08:	ea4e 0e02 	orr.w	lr, lr, r2
    ca0c:	fa20 f304 	lsr.w	r3, r0, r4
    ca10:	fa01 f205 	lsl.w	r2, r1, r5
    ca14:	ea43 0302 	orr.w	r3, r3, r2
    ca18:	fa21 f004 	lsr.w	r0, r1, r4
    ca1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ca20:	fa21 f204 	lsr.w	r2, r1, r4
    ca24:	ea20 0002 	bic.w	r0, r0, r2
    ca28:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    ca2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ca30:	bf08      	it	eq
    ca32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ca36:	bd70      	pop	{r4, r5, r6, pc}
    ca38:	f094 0f00 	teq	r4, #0
    ca3c:	d10f      	bne.n	ca5e <__aeabi_dmul+0x1c2>
    ca3e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    ca42:	0040      	lsls	r0, r0, #1
    ca44:	eb41 0101 	adc.w	r1, r1, r1
    ca48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ca4c:	bf08      	it	eq
    ca4e:	3c01      	subeq	r4, #1
    ca50:	d0f7      	beq.n	ca42 <__aeabi_dmul+0x1a6>
    ca52:	ea41 0106 	orr.w	r1, r1, r6
    ca56:	f095 0f00 	teq	r5, #0
    ca5a:	bf18      	it	ne
    ca5c:	4770      	bxne	lr
    ca5e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    ca62:	0052      	lsls	r2, r2, #1
    ca64:	eb43 0303 	adc.w	r3, r3, r3
    ca68:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    ca6c:	bf08      	it	eq
    ca6e:	3d01      	subeq	r5, #1
    ca70:	d0f7      	beq.n	ca62 <__aeabi_dmul+0x1c6>
    ca72:	ea43 0306 	orr.w	r3, r3, r6
    ca76:	4770      	bx	lr
    ca78:	ea94 0f0c 	teq	r4, ip
    ca7c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    ca80:	bf18      	it	ne
    ca82:	ea95 0f0c 	teqne	r5, ip
    ca86:	d00c      	beq.n	caa2 <__aeabi_dmul+0x206>
    ca88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ca8c:	bf18      	it	ne
    ca8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ca92:	d1d1      	bne.n	ca38 <__aeabi_dmul+0x19c>
    ca94:	ea81 0103 	eor.w	r1, r1, r3
    ca98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ca9c:	f04f 0000 	mov.w	r0, #0
    caa0:	bd70      	pop	{r4, r5, r6, pc}
    caa2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    caa6:	bf06      	itte	eq
    caa8:	4610      	moveq	r0, r2
    caaa:	4619      	moveq	r1, r3
    caac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cab0:	d019      	beq.n	cae6 <__aeabi_dmul+0x24a>
    cab2:	ea94 0f0c 	teq	r4, ip
    cab6:	d102      	bne.n	cabe <__aeabi_dmul+0x222>
    cab8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    cabc:	d113      	bne.n	cae6 <__aeabi_dmul+0x24a>
    cabe:	ea95 0f0c 	teq	r5, ip
    cac2:	d105      	bne.n	cad0 <__aeabi_dmul+0x234>
    cac4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    cac8:	bf1c      	itt	ne
    caca:	4610      	movne	r0, r2
    cacc:	4619      	movne	r1, r3
    cace:	d10a      	bne.n	cae6 <__aeabi_dmul+0x24a>
    cad0:	ea81 0103 	eor.w	r1, r1, r3
    cad4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cad8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    cadc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    cae0:	f04f 0000 	mov.w	r0, #0
    cae4:	bd70      	pop	{r4, r5, r6, pc}
    cae6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    caea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    caee:	bd70      	pop	{r4, r5, r6, pc}

0000caf0 <__aeabi_ddiv>:
    caf0:	b570      	push	{r4, r5, r6, lr}
    caf2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    caf6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    cafa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    cafe:	bf1d      	ittte	ne
    cb00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    cb04:	ea94 0f0c 	teqne	r4, ip
    cb08:	ea95 0f0c 	teqne	r5, ip
    cb0c:	f000 f8a7 	bleq	cc5e <__aeabi_ddiv+0x16e>
    cb10:	eba4 0405 	sub.w	r4, r4, r5
    cb14:	ea81 0e03 	eor.w	lr, r1, r3
    cb18:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    cb1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    cb20:	f000 8088 	beq.w	cc34 <__aeabi_ddiv+0x144>
    cb24:	ea4f 3303 	mov.w	r3, r3, lsl #12
    cb28:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    cb2c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    cb30:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    cb34:	ea4f 2202 	mov.w	r2, r2, lsl #8
    cb38:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    cb3c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    cb40:	ea4f 2600 	mov.w	r6, r0, lsl #8
    cb44:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    cb48:	429d      	cmp	r5, r3
    cb4a:	bf08      	it	eq
    cb4c:	4296      	cmpeq	r6, r2
    cb4e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    cb52:	f504 7440 	add.w	r4, r4, #768	; 0x300
    cb56:	d202      	bcs.n	cb5e <__aeabi_ddiv+0x6e>
    cb58:	085b      	lsrs	r3, r3, #1
    cb5a:	ea4f 0232 	mov.w	r2, r2, rrx
    cb5e:	1ab6      	subs	r6, r6, r2
    cb60:	eb65 0503 	sbc.w	r5, r5, r3
    cb64:	085b      	lsrs	r3, r3, #1
    cb66:	ea4f 0232 	mov.w	r2, r2, rrx
    cb6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    cb6e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    cb72:	ebb6 0e02 	subs.w	lr, r6, r2
    cb76:	eb75 0e03 	sbcs.w	lr, r5, r3
    cb7a:	bf22      	ittt	cs
    cb7c:	1ab6      	subcs	r6, r6, r2
    cb7e:	4675      	movcs	r5, lr
    cb80:	ea40 000c 	orrcs.w	r0, r0, ip
    cb84:	085b      	lsrs	r3, r3, #1
    cb86:	ea4f 0232 	mov.w	r2, r2, rrx
    cb8a:	ebb6 0e02 	subs.w	lr, r6, r2
    cb8e:	eb75 0e03 	sbcs.w	lr, r5, r3
    cb92:	bf22      	ittt	cs
    cb94:	1ab6      	subcs	r6, r6, r2
    cb96:	4675      	movcs	r5, lr
    cb98:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    cb9c:	085b      	lsrs	r3, r3, #1
    cb9e:	ea4f 0232 	mov.w	r2, r2, rrx
    cba2:	ebb6 0e02 	subs.w	lr, r6, r2
    cba6:	eb75 0e03 	sbcs.w	lr, r5, r3
    cbaa:	bf22      	ittt	cs
    cbac:	1ab6      	subcs	r6, r6, r2
    cbae:	4675      	movcs	r5, lr
    cbb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    cbb4:	085b      	lsrs	r3, r3, #1
    cbb6:	ea4f 0232 	mov.w	r2, r2, rrx
    cbba:	ebb6 0e02 	subs.w	lr, r6, r2
    cbbe:	eb75 0e03 	sbcs.w	lr, r5, r3
    cbc2:	bf22      	ittt	cs
    cbc4:	1ab6      	subcs	r6, r6, r2
    cbc6:	4675      	movcs	r5, lr
    cbc8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    cbcc:	ea55 0e06 	orrs.w	lr, r5, r6
    cbd0:	d018      	beq.n	cc04 <__aeabi_ddiv+0x114>
    cbd2:	ea4f 1505 	mov.w	r5, r5, lsl #4
    cbd6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    cbda:	ea4f 1606 	mov.w	r6, r6, lsl #4
    cbde:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    cbe2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    cbe6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    cbea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    cbee:	d1c0      	bne.n	cb72 <__aeabi_ddiv+0x82>
    cbf0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cbf4:	d10b      	bne.n	cc0e <__aeabi_ddiv+0x11e>
    cbf6:	ea41 0100 	orr.w	r1, r1, r0
    cbfa:	f04f 0000 	mov.w	r0, #0
    cbfe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    cc02:	e7b6      	b.n	cb72 <__aeabi_ddiv+0x82>
    cc04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cc08:	bf04      	itt	eq
    cc0a:	4301      	orreq	r1, r0
    cc0c:	2000      	moveq	r0, #0
    cc0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    cc12:	bf88      	it	hi
    cc14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    cc18:	f63f aeaf 	bhi.w	c97a <__aeabi_dmul+0xde>
    cc1c:	ebb5 0c03 	subs.w	ip, r5, r3
    cc20:	bf04      	itt	eq
    cc22:	ebb6 0c02 	subseq.w	ip, r6, r2
    cc26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    cc2a:	f150 0000 	adcs.w	r0, r0, #0
    cc2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    cc32:	bd70      	pop	{r4, r5, r6, pc}
    cc34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    cc38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    cc3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    cc40:	bfc2      	ittt	gt
    cc42:	ebd4 050c 	rsbsgt	r5, r4, ip
    cc46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    cc4a:	bd70      	popgt	{r4, r5, r6, pc}
    cc4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cc50:	f04f 0e00 	mov.w	lr, #0
    cc54:	3c01      	subs	r4, #1
    cc56:	e690      	b.n	c97a <__aeabi_dmul+0xde>
    cc58:	ea45 0e06 	orr.w	lr, r5, r6
    cc5c:	e68d      	b.n	c97a <__aeabi_dmul+0xde>
    cc5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    cc62:	ea94 0f0c 	teq	r4, ip
    cc66:	bf08      	it	eq
    cc68:	ea95 0f0c 	teqeq	r5, ip
    cc6c:	f43f af3b 	beq.w	cae6 <__aeabi_dmul+0x24a>
    cc70:	ea94 0f0c 	teq	r4, ip
    cc74:	d10a      	bne.n	cc8c <__aeabi_ddiv+0x19c>
    cc76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    cc7a:	f47f af34 	bne.w	cae6 <__aeabi_dmul+0x24a>
    cc7e:	ea95 0f0c 	teq	r5, ip
    cc82:	f47f af25 	bne.w	cad0 <__aeabi_dmul+0x234>
    cc86:	4610      	mov	r0, r2
    cc88:	4619      	mov	r1, r3
    cc8a:	e72c      	b.n	cae6 <__aeabi_dmul+0x24a>
    cc8c:	ea95 0f0c 	teq	r5, ip
    cc90:	d106      	bne.n	cca0 <__aeabi_ddiv+0x1b0>
    cc92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    cc96:	f43f aefd 	beq.w	ca94 <__aeabi_dmul+0x1f8>
    cc9a:	4610      	mov	r0, r2
    cc9c:	4619      	mov	r1, r3
    cc9e:	e722      	b.n	cae6 <__aeabi_dmul+0x24a>
    cca0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cca4:	bf18      	it	ne
    cca6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ccaa:	f47f aec5 	bne.w	ca38 <__aeabi_dmul+0x19c>
    ccae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    ccb2:	f47f af0d 	bne.w	cad0 <__aeabi_dmul+0x234>
    ccb6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    ccba:	f47f aeeb 	bne.w	ca94 <__aeabi_dmul+0x1f8>
    ccbe:	e712      	b.n	cae6 <__aeabi_dmul+0x24a>

0000ccc0 <__gedf2>:
    ccc0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    ccc4:	e006      	b.n	ccd4 <__cmpdf2+0x4>
    ccc6:	bf00      	nop

0000ccc8 <__ledf2>:
    ccc8:	f04f 0c01 	mov.w	ip, #1
    cccc:	e002      	b.n	ccd4 <__cmpdf2+0x4>
    ccce:	bf00      	nop

0000ccd0 <__cmpdf2>:
    ccd0:	f04f 0c01 	mov.w	ip, #1
    ccd4:	f84d cd04 	str.w	ip, [sp, #-4]!
    ccd8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    ccdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cce0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cce4:	bf18      	it	ne
    cce6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    ccea:	d01b      	beq.n	cd24 <__cmpdf2+0x54>
    ccec:	b001      	add	sp, #4
    ccee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    ccf2:	bf0c      	ite	eq
    ccf4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    ccf8:	ea91 0f03 	teqne	r1, r3
    ccfc:	bf02      	ittt	eq
    ccfe:	ea90 0f02 	teqeq	r0, r2
    cd02:	2000      	moveq	r0, #0
    cd04:	4770      	bxeq	lr
    cd06:	f110 0f00 	cmn.w	r0, #0
    cd0a:	ea91 0f03 	teq	r1, r3
    cd0e:	bf58      	it	pl
    cd10:	4299      	cmppl	r1, r3
    cd12:	bf08      	it	eq
    cd14:	4290      	cmpeq	r0, r2
    cd16:	bf2c      	ite	cs
    cd18:	17d8      	asrcs	r0, r3, #31
    cd1a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    cd1e:	f040 0001 	orr.w	r0, r0, #1
    cd22:	4770      	bx	lr
    cd24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cd28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cd2c:	d102      	bne.n	cd34 <__cmpdf2+0x64>
    cd2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cd32:	d107      	bne.n	cd44 <__cmpdf2+0x74>
    cd34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cd38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cd3c:	d1d6      	bne.n	ccec <__cmpdf2+0x1c>
    cd3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    cd42:	d0d3      	beq.n	ccec <__cmpdf2+0x1c>
    cd44:	f85d 0b04 	ldr.w	r0, [sp], #4
    cd48:	4770      	bx	lr
    cd4a:	bf00      	nop

0000cd4c <__aeabi_cdrcmple>:
    cd4c:	4684      	mov	ip, r0
    cd4e:	4610      	mov	r0, r2
    cd50:	4662      	mov	r2, ip
    cd52:	468c      	mov	ip, r1
    cd54:	4619      	mov	r1, r3
    cd56:	4663      	mov	r3, ip
    cd58:	e000      	b.n	cd5c <__aeabi_cdcmpeq>
    cd5a:	bf00      	nop

0000cd5c <__aeabi_cdcmpeq>:
    cd5c:	b501      	push	{r0, lr}
    cd5e:	f7ff ffb7 	bl	ccd0 <__cmpdf2>
    cd62:	2800      	cmp	r0, #0
    cd64:	bf48      	it	mi
    cd66:	f110 0f00 	cmnmi.w	r0, #0
    cd6a:	bd01      	pop	{r0, pc}

0000cd6c <__aeabi_dcmpeq>:
    cd6c:	f84d ed08 	str.w	lr, [sp, #-8]!
    cd70:	f7ff fff4 	bl	cd5c <__aeabi_cdcmpeq>
    cd74:	bf0c      	ite	eq
    cd76:	2001      	moveq	r0, #1
    cd78:	2000      	movne	r0, #0
    cd7a:	f85d fb08 	ldr.w	pc, [sp], #8
    cd7e:	bf00      	nop

0000cd80 <__aeabi_dcmplt>:
    cd80:	f84d ed08 	str.w	lr, [sp, #-8]!
    cd84:	f7ff ffea 	bl	cd5c <__aeabi_cdcmpeq>
    cd88:	bf34      	ite	cc
    cd8a:	2001      	movcc	r0, #1
    cd8c:	2000      	movcs	r0, #0
    cd8e:	f85d fb08 	ldr.w	pc, [sp], #8
    cd92:	bf00      	nop

0000cd94 <__aeabi_dcmple>:
    cd94:	f84d ed08 	str.w	lr, [sp, #-8]!
    cd98:	f7ff ffe0 	bl	cd5c <__aeabi_cdcmpeq>
    cd9c:	bf94      	ite	ls
    cd9e:	2001      	movls	r0, #1
    cda0:	2000      	movhi	r0, #0
    cda2:	f85d fb08 	ldr.w	pc, [sp], #8
    cda6:	bf00      	nop

0000cda8 <__aeabi_dcmpge>:
    cda8:	f84d ed08 	str.w	lr, [sp, #-8]!
    cdac:	f7ff ffce 	bl	cd4c <__aeabi_cdrcmple>
    cdb0:	bf94      	ite	ls
    cdb2:	2001      	movls	r0, #1
    cdb4:	2000      	movhi	r0, #0
    cdb6:	f85d fb08 	ldr.w	pc, [sp], #8
    cdba:	bf00      	nop

0000cdbc <__aeabi_dcmpgt>:
    cdbc:	f84d ed08 	str.w	lr, [sp, #-8]!
    cdc0:	f7ff ffc4 	bl	cd4c <__aeabi_cdrcmple>
    cdc4:	bf34      	ite	cc
    cdc6:	2001      	movcc	r0, #1
    cdc8:	2000      	movcs	r0, #0
    cdca:	f85d fb08 	ldr.w	pc, [sp], #8
    cdce:	bf00      	nop

0000cdd0 <__aeabi_d2iz>:
    cdd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
    cdd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    cdd8:	d215      	bcs.n	ce06 <__aeabi_d2iz+0x36>
    cdda:	d511      	bpl.n	ce00 <__aeabi_d2iz+0x30>
    cddc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    cde0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    cde4:	d912      	bls.n	ce0c <__aeabi_d2iz+0x3c>
    cde6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    cdea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    cdee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    cdf2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    cdf6:	fa23 f002 	lsr.w	r0, r3, r2
    cdfa:	bf18      	it	ne
    cdfc:	4240      	negne	r0, r0
    cdfe:	4770      	bx	lr
    ce00:	f04f 0000 	mov.w	r0, #0
    ce04:	4770      	bx	lr
    ce06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    ce0a:	d105      	bne.n	ce18 <__aeabi_d2iz+0x48>
    ce0c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    ce10:	bf08      	it	eq
    ce12:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    ce16:	4770      	bx	lr
    ce18:	f04f 0000 	mov.w	r0, #0
    ce1c:	4770      	bx	lr
    ce1e:	bf00      	nop

0000ce20 <__aeabi_d2uiz>:
    ce20:	004a      	lsls	r2, r1, #1
    ce22:	d211      	bcs.n	ce48 <__aeabi_d2uiz+0x28>
    ce24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    ce28:	d211      	bcs.n	ce4e <__aeabi_d2uiz+0x2e>
    ce2a:	d50d      	bpl.n	ce48 <__aeabi_d2uiz+0x28>
    ce2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    ce30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    ce34:	d40e      	bmi.n	ce54 <__aeabi_d2uiz+0x34>
    ce36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    ce3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ce3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    ce42:	fa23 f002 	lsr.w	r0, r3, r2
    ce46:	4770      	bx	lr
    ce48:	f04f 0000 	mov.w	r0, #0
    ce4c:	4770      	bx	lr
    ce4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    ce52:	d102      	bne.n	ce5a <__aeabi_d2uiz+0x3a>
    ce54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ce58:	4770      	bx	lr
    ce5a:	f04f 0000 	mov.w	r0, #0
    ce5e:	4770      	bx	lr

0000ce60 <__aeabi_d2f>:
    ce60:	ea4f 0241 	mov.w	r2, r1, lsl #1
    ce64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    ce68:	bf24      	itt	cs
    ce6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    ce6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    ce72:	d90d      	bls.n	ce90 <__aeabi_d2f+0x30>
    ce74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    ce78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    ce7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    ce80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ce84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    ce88:	bf08      	it	eq
    ce8a:	f020 0001 	biceq.w	r0, r0, #1
    ce8e:	4770      	bx	lr
    ce90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    ce94:	d121      	bne.n	ceda <__aeabi_d2f+0x7a>
    ce96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    ce9a:	bfbc      	itt	lt
    ce9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    cea0:	4770      	bxlt	lr
    cea2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cea6:	ea4f 5252 	mov.w	r2, r2, lsr #21
    ceaa:	f1c2 0218 	rsb	r2, r2, #24
    ceae:	f1c2 0c20 	rsb	ip, r2, #32
    ceb2:	fa10 f30c 	lsls.w	r3, r0, ip
    ceb6:	fa20 f002 	lsr.w	r0, r0, r2
    ceba:	bf18      	it	ne
    cebc:	f040 0001 	orrne.w	r0, r0, #1
    cec0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    cec4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    cec8:	fa03 fc0c 	lsl.w	ip, r3, ip
    cecc:	ea40 000c 	orr.w	r0, r0, ip
    ced0:	fa23 f302 	lsr.w	r3, r3, r2
    ced4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    ced8:	e7cc      	b.n	ce74 <__aeabi_d2f+0x14>
    ceda:	ea7f 5362 	mvns.w	r3, r2, asr #21
    cede:	d107      	bne.n	cef0 <__aeabi_d2f+0x90>
    cee0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    cee4:	bf1e      	ittt	ne
    cee6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    ceea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    ceee:	4770      	bxne	lr
    cef0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    cef4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    cef8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cefc:	4770      	bx	lr
    cefe:	bf00      	nop

0000cf00 <__aeabi_frsub>:
    cf00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    cf04:	e002      	b.n	cf0c <__addsf3>
    cf06:	bf00      	nop

0000cf08 <__aeabi_fsub>:
    cf08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000cf0c <__addsf3>:
    cf0c:	0042      	lsls	r2, r0, #1
    cf0e:	bf1f      	itttt	ne
    cf10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    cf14:	ea92 0f03 	teqne	r2, r3
    cf18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    cf1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    cf20:	d06a      	beq.n	cff8 <__addsf3+0xec>
    cf22:	ea4f 6212 	mov.w	r2, r2, lsr #24
    cf26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    cf2a:	bfc1      	itttt	gt
    cf2c:	18d2      	addgt	r2, r2, r3
    cf2e:	4041      	eorgt	r1, r0
    cf30:	4048      	eorgt	r0, r1
    cf32:	4041      	eorgt	r1, r0
    cf34:	bfb8      	it	lt
    cf36:	425b      	neglt	r3, r3
    cf38:	2b19      	cmp	r3, #25
    cf3a:	bf88      	it	hi
    cf3c:	4770      	bxhi	lr
    cf3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    cf42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cf46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cf4a:	bf18      	it	ne
    cf4c:	4240      	negne	r0, r0
    cf4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    cf52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    cf56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    cf5a:	bf18      	it	ne
    cf5c:	4249      	negne	r1, r1
    cf5e:	ea92 0f03 	teq	r2, r3
    cf62:	d03f      	beq.n	cfe4 <__addsf3+0xd8>
    cf64:	f1a2 0201 	sub.w	r2, r2, #1
    cf68:	fa41 fc03 	asr.w	ip, r1, r3
    cf6c:	eb10 000c 	adds.w	r0, r0, ip
    cf70:	f1c3 0320 	rsb	r3, r3, #32
    cf74:	fa01 f103 	lsl.w	r1, r1, r3
    cf78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    cf7c:	d502      	bpl.n	cf84 <__addsf3+0x78>
    cf7e:	4249      	negs	r1, r1
    cf80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    cf84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    cf88:	d313      	bcc.n	cfb2 <__addsf3+0xa6>
    cf8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    cf8e:	d306      	bcc.n	cf9e <__addsf3+0x92>
    cf90:	0840      	lsrs	r0, r0, #1
    cf92:	ea4f 0131 	mov.w	r1, r1, rrx
    cf96:	f102 0201 	add.w	r2, r2, #1
    cf9a:	2afe      	cmp	r2, #254	; 0xfe
    cf9c:	d251      	bcs.n	d042 <__addsf3+0x136>
    cf9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    cfa2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    cfa6:	bf08      	it	eq
    cfa8:	f020 0001 	biceq.w	r0, r0, #1
    cfac:	ea40 0003 	orr.w	r0, r0, r3
    cfb0:	4770      	bx	lr
    cfb2:	0049      	lsls	r1, r1, #1
    cfb4:	eb40 0000 	adc.w	r0, r0, r0
    cfb8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    cfbc:	f1a2 0201 	sub.w	r2, r2, #1
    cfc0:	d1ed      	bne.n	cf9e <__addsf3+0x92>
    cfc2:	fab0 fc80 	clz	ip, r0
    cfc6:	f1ac 0c08 	sub.w	ip, ip, #8
    cfca:	ebb2 020c 	subs.w	r2, r2, ip
    cfce:	fa00 f00c 	lsl.w	r0, r0, ip
    cfd2:	bfaa      	itet	ge
    cfd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    cfd8:	4252      	neglt	r2, r2
    cfda:	4318      	orrge	r0, r3
    cfdc:	bfbc      	itt	lt
    cfde:	40d0      	lsrlt	r0, r2
    cfe0:	4318      	orrlt	r0, r3
    cfe2:	4770      	bx	lr
    cfe4:	f092 0f00 	teq	r2, #0
    cfe8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    cfec:	bf06      	itte	eq
    cfee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    cff2:	3201      	addeq	r2, #1
    cff4:	3b01      	subne	r3, #1
    cff6:	e7b5      	b.n	cf64 <__addsf3+0x58>
    cff8:	ea4f 0341 	mov.w	r3, r1, lsl #1
    cffc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    d000:	bf18      	it	ne
    d002:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    d006:	d021      	beq.n	d04c <__addsf3+0x140>
    d008:	ea92 0f03 	teq	r2, r3
    d00c:	d004      	beq.n	d018 <__addsf3+0x10c>
    d00e:	f092 0f00 	teq	r2, #0
    d012:	bf08      	it	eq
    d014:	4608      	moveq	r0, r1
    d016:	4770      	bx	lr
    d018:	ea90 0f01 	teq	r0, r1
    d01c:	bf1c      	itt	ne
    d01e:	2000      	movne	r0, #0
    d020:	4770      	bxne	lr
    d022:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    d026:	d104      	bne.n	d032 <__addsf3+0x126>
    d028:	0040      	lsls	r0, r0, #1
    d02a:	bf28      	it	cs
    d02c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    d030:	4770      	bx	lr
    d032:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    d036:	bf3c      	itt	cc
    d038:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    d03c:	4770      	bxcc	lr
    d03e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    d042:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    d046:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d04a:	4770      	bx	lr
    d04c:	ea7f 6222 	mvns.w	r2, r2, asr #24
    d050:	bf16      	itet	ne
    d052:	4608      	movne	r0, r1
    d054:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    d058:	4601      	movne	r1, r0
    d05a:	0242      	lsls	r2, r0, #9
    d05c:	bf06      	itte	eq
    d05e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    d062:	ea90 0f01 	teqeq	r0, r1
    d066:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    d06a:	4770      	bx	lr

0000d06c <__aeabi_ui2f>:
    d06c:	f04f 0300 	mov.w	r3, #0
    d070:	e004      	b.n	d07c <__aeabi_i2f+0x8>
    d072:	bf00      	nop

0000d074 <__aeabi_i2f>:
    d074:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    d078:	bf48      	it	mi
    d07a:	4240      	negmi	r0, r0
    d07c:	ea5f 0c00 	movs.w	ip, r0
    d080:	bf08      	it	eq
    d082:	4770      	bxeq	lr
    d084:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    d088:	4601      	mov	r1, r0
    d08a:	f04f 0000 	mov.w	r0, #0
    d08e:	e01c      	b.n	d0ca <__aeabi_l2f+0x2a>

0000d090 <__aeabi_ul2f>:
    d090:	ea50 0201 	orrs.w	r2, r0, r1
    d094:	bf08      	it	eq
    d096:	4770      	bxeq	lr
    d098:	f04f 0300 	mov.w	r3, #0
    d09c:	e00a      	b.n	d0b4 <__aeabi_l2f+0x14>
    d09e:	bf00      	nop

0000d0a0 <__aeabi_l2f>:
    d0a0:	ea50 0201 	orrs.w	r2, r0, r1
    d0a4:	bf08      	it	eq
    d0a6:	4770      	bxeq	lr
    d0a8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    d0ac:	d502      	bpl.n	d0b4 <__aeabi_l2f+0x14>
    d0ae:	4240      	negs	r0, r0
    d0b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d0b4:	ea5f 0c01 	movs.w	ip, r1
    d0b8:	bf02      	ittt	eq
    d0ba:	4684      	moveq	ip, r0
    d0bc:	4601      	moveq	r1, r0
    d0be:	2000      	moveq	r0, #0
    d0c0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    d0c4:	bf08      	it	eq
    d0c6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    d0ca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    d0ce:	fabc f28c 	clz	r2, ip
    d0d2:	3a08      	subs	r2, #8
    d0d4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    d0d8:	db10      	blt.n	d0fc <__aeabi_l2f+0x5c>
    d0da:	fa01 fc02 	lsl.w	ip, r1, r2
    d0de:	4463      	add	r3, ip
    d0e0:	fa00 fc02 	lsl.w	ip, r0, r2
    d0e4:	f1c2 0220 	rsb	r2, r2, #32
    d0e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    d0ec:	fa20 f202 	lsr.w	r2, r0, r2
    d0f0:	eb43 0002 	adc.w	r0, r3, r2
    d0f4:	bf08      	it	eq
    d0f6:	f020 0001 	biceq.w	r0, r0, #1
    d0fa:	4770      	bx	lr
    d0fc:	f102 0220 	add.w	r2, r2, #32
    d100:	fa01 fc02 	lsl.w	ip, r1, r2
    d104:	f1c2 0220 	rsb	r2, r2, #32
    d108:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    d10c:	fa21 f202 	lsr.w	r2, r1, r2
    d110:	eb43 0002 	adc.w	r0, r3, r2
    d114:	bf08      	it	eq
    d116:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    d11a:	4770      	bx	lr

0000d11c <__aeabi_fmul>:
    d11c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d120:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    d124:	bf1e      	ittt	ne
    d126:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    d12a:	ea92 0f0c 	teqne	r2, ip
    d12e:	ea93 0f0c 	teqne	r3, ip
    d132:	d06f      	beq.n	d214 <__aeabi_fmul+0xf8>
    d134:	441a      	add	r2, r3
    d136:	ea80 0c01 	eor.w	ip, r0, r1
    d13a:	0240      	lsls	r0, r0, #9
    d13c:	bf18      	it	ne
    d13e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    d142:	d01e      	beq.n	d182 <__aeabi_fmul+0x66>
    d144:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    d148:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    d14c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    d150:	fba0 3101 	umull	r3, r1, r0, r1
    d154:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    d158:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    d15c:	bf3e      	ittt	cc
    d15e:	0049      	lslcc	r1, r1, #1
    d160:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    d164:	005b      	lslcc	r3, r3, #1
    d166:	ea40 0001 	orr.w	r0, r0, r1
    d16a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    d16e:	2afd      	cmp	r2, #253	; 0xfd
    d170:	d81d      	bhi.n	d1ae <__aeabi_fmul+0x92>
    d172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    d176:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    d17a:	bf08      	it	eq
    d17c:	f020 0001 	biceq.w	r0, r0, #1
    d180:	4770      	bx	lr
    d182:	f090 0f00 	teq	r0, #0
    d186:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    d18a:	bf08      	it	eq
    d18c:	0249      	lsleq	r1, r1, #9
    d18e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    d192:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    d196:	3a7f      	subs	r2, #127	; 0x7f
    d198:	bfc2      	ittt	gt
    d19a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    d19e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    d1a2:	4770      	bxgt	lr
    d1a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d1a8:	f04f 0300 	mov.w	r3, #0
    d1ac:	3a01      	subs	r2, #1
    d1ae:	dc5d      	bgt.n	d26c <__aeabi_fmul+0x150>
    d1b0:	f112 0f19 	cmn.w	r2, #25
    d1b4:	bfdc      	itt	le
    d1b6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    d1ba:	4770      	bxle	lr
    d1bc:	f1c2 0200 	rsb	r2, r2, #0
    d1c0:	0041      	lsls	r1, r0, #1
    d1c2:	fa21 f102 	lsr.w	r1, r1, r2
    d1c6:	f1c2 0220 	rsb	r2, r2, #32
    d1ca:	fa00 fc02 	lsl.w	ip, r0, r2
    d1ce:	ea5f 0031 	movs.w	r0, r1, rrx
    d1d2:	f140 0000 	adc.w	r0, r0, #0
    d1d6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    d1da:	bf08      	it	eq
    d1dc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    d1e0:	4770      	bx	lr
    d1e2:	f092 0f00 	teq	r2, #0
    d1e6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    d1ea:	bf02      	ittt	eq
    d1ec:	0040      	lsleq	r0, r0, #1
    d1ee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    d1f2:	3a01      	subeq	r2, #1
    d1f4:	d0f9      	beq.n	d1ea <__aeabi_fmul+0xce>
    d1f6:	ea40 000c 	orr.w	r0, r0, ip
    d1fa:	f093 0f00 	teq	r3, #0
    d1fe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    d202:	bf02      	ittt	eq
    d204:	0049      	lsleq	r1, r1, #1
    d206:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    d20a:	3b01      	subeq	r3, #1
    d20c:	d0f9      	beq.n	d202 <__aeabi_fmul+0xe6>
    d20e:	ea41 010c 	orr.w	r1, r1, ip
    d212:	e78f      	b.n	d134 <__aeabi_fmul+0x18>
    d214:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    d218:	ea92 0f0c 	teq	r2, ip
    d21c:	bf18      	it	ne
    d21e:	ea93 0f0c 	teqne	r3, ip
    d222:	d00a      	beq.n	d23a <__aeabi_fmul+0x11e>
    d224:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    d228:	bf18      	it	ne
    d22a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    d22e:	d1d8      	bne.n	d1e2 <__aeabi_fmul+0xc6>
    d230:	ea80 0001 	eor.w	r0, r0, r1
    d234:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    d238:	4770      	bx	lr
    d23a:	f090 0f00 	teq	r0, #0
    d23e:	bf17      	itett	ne
    d240:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    d244:	4608      	moveq	r0, r1
    d246:	f091 0f00 	teqne	r1, #0
    d24a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    d24e:	d014      	beq.n	d27a <__aeabi_fmul+0x15e>
    d250:	ea92 0f0c 	teq	r2, ip
    d254:	d101      	bne.n	d25a <__aeabi_fmul+0x13e>
    d256:	0242      	lsls	r2, r0, #9
    d258:	d10f      	bne.n	d27a <__aeabi_fmul+0x15e>
    d25a:	ea93 0f0c 	teq	r3, ip
    d25e:	d103      	bne.n	d268 <__aeabi_fmul+0x14c>
    d260:	024b      	lsls	r3, r1, #9
    d262:	bf18      	it	ne
    d264:	4608      	movne	r0, r1
    d266:	d108      	bne.n	d27a <__aeabi_fmul+0x15e>
    d268:	ea80 0001 	eor.w	r0, r0, r1
    d26c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    d270:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    d274:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d278:	4770      	bx	lr
    d27a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    d27e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    d282:	4770      	bx	lr

0000d284 <__aeabi_fdiv>:
    d284:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d288:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    d28c:	bf1e      	ittt	ne
    d28e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    d292:	ea92 0f0c 	teqne	r2, ip
    d296:	ea93 0f0c 	teqne	r3, ip
    d29a:	d069      	beq.n	d370 <__aeabi_fdiv+0xec>
    d29c:	eba2 0203 	sub.w	r2, r2, r3
    d2a0:	ea80 0c01 	eor.w	ip, r0, r1
    d2a4:	0249      	lsls	r1, r1, #9
    d2a6:	ea4f 2040 	mov.w	r0, r0, lsl #9
    d2aa:	d037      	beq.n	d31c <__aeabi_fdiv+0x98>
    d2ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d2b0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    d2b4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    d2b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    d2bc:	428b      	cmp	r3, r1
    d2be:	bf38      	it	cc
    d2c0:	005b      	lslcc	r3, r3, #1
    d2c2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    d2c6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    d2ca:	428b      	cmp	r3, r1
    d2cc:	bf24      	itt	cs
    d2ce:	1a5b      	subcs	r3, r3, r1
    d2d0:	ea40 000c 	orrcs.w	r0, r0, ip
    d2d4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    d2d8:	bf24      	itt	cs
    d2da:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    d2de:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    d2e2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    d2e6:	bf24      	itt	cs
    d2e8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    d2ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    d2f0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    d2f4:	bf24      	itt	cs
    d2f6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    d2fa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    d2fe:	011b      	lsls	r3, r3, #4
    d300:	bf18      	it	ne
    d302:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    d306:	d1e0      	bne.n	d2ca <__aeabi_fdiv+0x46>
    d308:	2afd      	cmp	r2, #253	; 0xfd
    d30a:	f63f af50 	bhi.w	d1ae <__aeabi_fmul+0x92>
    d30e:	428b      	cmp	r3, r1
    d310:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    d314:	bf08      	it	eq
    d316:	f020 0001 	biceq.w	r0, r0, #1
    d31a:	4770      	bx	lr
    d31c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    d320:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    d324:	327f      	adds	r2, #127	; 0x7f
    d326:	bfc2      	ittt	gt
    d328:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    d32c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    d330:	4770      	bxgt	lr
    d332:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d336:	f04f 0300 	mov.w	r3, #0
    d33a:	3a01      	subs	r2, #1
    d33c:	e737      	b.n	d1ae <__aeabi_fmul+0x92>
    d33e:	f092 0f00 	teq	r2, #0
    d342:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    d346:	bf02      	ittt	eq
    d348:	0040      	lsleq	r0, r0, #1
    d34a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    d34e:	3a01      	subeq	r2, #1
    d350:	d0f9      	beq.n	d346 <__aeabi_fdiv+0xc2>
    d352:	ea40 000c 	orr.w	r0, r0, ip
    d356:	f093 0f00 	teq	r3, #0
    d35a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    d35e:	bf02      	ittt	eq
    d360:	0049      	lsleq	r1, r1, #1
    d362:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    d366:	3b01      	subeq	r3, #1
    d368:	d0f9      	beq.n	d35e <__aeabi_fdiv+0xda>
    d36a:	ea41 010c 	orr.w	r1, r1, ip
    d36e:	e795      	b.n	d29c <__aeabi_fdiv+0x18>
    d370:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    d374:	ea92 0f0c 	teq	r2, ip
    d378:	d108      	bne.n	d38c <__aeabi_fdiv+0x108>
    d37a:	0242      	lsls	r2, r0, #9
    d37c:	f47f af7d 	bne.w	d27a <__aeabi_fmul+0x15e>
    d380:	ea93 0f0c 	teq	r3, ip
    d384:	f47f af70 	bne.w	d268 <__aeabi_fmul+0x14c>
    d388:	4608      	mov	r0, r1
    d38a:	e776      	b.n	d27a <__aeabi_fmul+0x15e>
    d38c:	ea93 0f0c 	teq	r3, ip
    d390:	d104      	bne.n	d39c <__aeabi_fdiv+0x118>
    d392:	024b      	lsls	r3, r1, #9
    d394:	f43f af4c 	beq.w	d230 <__aeabi_fmul+0x114>
    d398:	4608      	mov	r0, r1
    d39a:	e76e      	b.n	d27a <__aeabi_fmul+0x15e>
    d39c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    d3a0:	bf18      	it	ne
    d3a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    d3a6:	d1ca      	bne.n	d33e <__aeabi_fdiv+0xba>
    d3a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    d3ac:	f47f af5c 	bne.w	d268 <__aeabi_fmul+0x14c>
    d3b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    d3b4:	f47f af3c 	bne.w	d230 <__aeabi_fmul+0x114>
    d3b8:	e75f      	b.n	d27a <__aeabi_fmul+0x15e>
    d3ba:	bf00      	nop

0000d3bc <__gesf2>:
    d3bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    d3c0:	e006      	b.n	d3d0 <__cmpsf2+0x4>
    d3c2:	bf00      	nop

0000d3c4 <__lesf2>:
    d3c4:	f04f 0c01 	mov.w	ip, #1
    d3c8:	e002      	b.n	d3d0 <__cmpsf2+0x4>
    d3ca:	bf00      	nop

0000d3cc <__cmpsf2>:
    d3cc:	f04f 0c01 	mov.w	ip, #1
    d3d0:	f84d cd04 	str.w	ip, [sp, #-4]!
    d3d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
    d3d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
    d3dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    d3e0:	bf18      	it	ne
    d3e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    d3e6:	d011      	beq.n	d40c <__cmpsf2+0x40>
    d3e8:	b001      	add	sp, #4
    d3ea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    d3ee:	bf18      	it	ne
    d3f0:	ea90 0f01 	teqne	r0, r1
    d3f4:	bf58      	it	pl
    d3f6:	ebb2 0003 	subspl.w	r0, r2, r3
    d3fa:	bf88      	it	hi
    d3fc:	17c8      	asrhi	r0, r1, #31
    d3fe:	bf38      	it	cc
    d400:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    d404:	bf18      	it	ne
    d406:	f040 0001 	orrne.w	r0, r0, #1
    d40a:	4770      	bx	lr
    d40c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    d410:	d102      	bne.n	d418 <__cmpsf2+0x4c>
    d412:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    d416:	d105      	bne.n	d424 <__cmpsf2+0x58>
    d418:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    d41c:	d1e4      	bne.n	d3e8 <__cmpsf2+0x1c>
    d41e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    d422:	d0e1      	beq.n	d3e8 <__cmpsf2+0x1c>
    d424:	f85d 0b04 	ldr.w	r0, [sp], #4
    d428:	4770      	bx	lr
    d42a:	bf00      	nop

0000d42c <__aeabi_cfrcmple>:
    d42c:	4684      	mov	ip, r0
    d42e:	4608      	mov	r0, r1
    d430:	4661      	mov	r1, ip
    d432:	e7ff      	b.n	d434 <__aeabi_cfcmpeq>

0000d434 <__aeabi_cfcmpeq>:
    d434:	b50f      	push	{r0, r1, r2, r3, lr}
    d436:	f7ff ffc9 	bl	d3cc <__cmpsf2>
    d43a:	2800      	cmp	r0, #0
    d43c:	bf48      	it	mi
    d43e:	f110 0f00 	cmnmi.w	r0, #0
    d442:	bd0f      	pop	{r0, r1, r2, r3, pc}

0000d444 <__aeabi_fcmpeq>:
    d444:	f84d ed08 	str.w	lr, [sp, #-8]!
    d448:	f7ff fff4 	bl	d434 <__aeabi_cfcmpeq>
    d44c:	bf0c      	ite	eq
    d44e:	2001      	moveq	r0, #1
    d450:	2000      	movne	r0, #0
    d452:	f85d fb08 	ldr.w	pc, [sp], #8
    d456:	bf00      	nop

0000d458 <__aeabi_fcmplt>:
    d458:	f84d ed08 	str.w	lr, [sp, #-8]!
    d45c:	f7ff ffea 	bl	d434 <__aeabi_cfcmpeq>
    d460:	bf34      	ite	cc
    d462:	2001      	movcc	r0, #1
    d464:	2000      	movcs	r0, #0
    d466:	f85d fb08 	ldr.w	pc, [sp], #8
    d46a:	bf00      	nop

0000d46c <__aeabi_fcmple>:
    d46c:	f84d ed08 	str.w	lr, [sp, #-8]!
    d470:	f7ff ffe0 	bl	d434 <__aeabi_cfcmpeq>
    d474:	bf94      	ite	ls
    d476:	2001      	movls	r0, #1
    d478:	2000      	movhi	r0, #0
    d47a:	f85d fb08 	ldr.w	pc, [sp], #8
    d47e:	bf00      	nop

0000d480 <__aeabi_fcmpge>:
    d480:	f84d ed08 	str.w	lr, [sp, #-8]!
    d484:	f7ff ffd2 	bl	d42c <__aeabi_cfrcmple>
    d488:	bf94      	ite	ls
    d48a:	2001      	movls	r0, #1
    d48c:	2000      	movhi	r0, #0
    d48e:	f85d fb08 	ldr.w	pc, [sp], #8
    d492:	bf00      	nop

0000d494 <__aeabi_fcmpgt>:
    d494:	f84d ed08 	str.w	lr, [sp, #-8]!
    d498:	f7ff ffc8 	bl	d42c <__aeabi_cfrcmple>
    d49c:	bf34      	ite	cc
    d49e:	2001      	movcc	r0, #1
    d4a0:	2000      	movcs	r0, #0
    d4a2:	f85d fb08 	ldr.w	pc, [sp], #8
    d4a6:	bf00      	nop

0000d4a8 <__aeabi_f2iz>:
    d4a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
    d4ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    d4b0:	d30f      	bcc.n	d4d2 <__aeabi_f2iz+0x2a>
    d4b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
    d4b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    d4ba:	d90d      	bls.n	d4d8 <__aeabi_f2iz+0x30>
    d4bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
    d4c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d4c4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    d4c8:	fa23 f002 	lsr.w	r0, r3, r2
    d4cc:	bf18      	it	ne
    d4ce:	4240      	negne	r0, r0
    d4d0:	4770      	bx	lr
    d4d2:	f04f 0000 	mov.w	r0, #0
    d4d6:	4770      	bx	lr
    d4d8:	f112 0f61 	cmn.w	r2, #97	; 0x61
    d4dc:	d101      	bne.n	d4e2 <__aeabi_f2iz+0x3a>
    d4de:	0242      	lsls	r2, r0, #9
    d4e0:	d105      	bne.n	d4ee <__aeabi_f2iz+0x46>
    d4e2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    d4e6:	bf08      	it	eq
    d4e8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    d4ec:	4770      	bx	lr
    d4ee:	f04f 0000 	mov.w	r0, #0
    d4f2:	4770      	bx	lr

0000d4f4 <__aeabi_f2uiz>:
    d4f4:	0042      	lsls	r2, r0, #1
    d4f6:	d20e      	bcs.n	d516 <__aeabi_f2uiz+0x22>
    d4f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    d4fc:	d30b      	bcc.n	d516 <__aeabi_f2uiz+0x22>
    d4fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
    d502:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    d506:	d409      	bmi.n	d51c <__aeabi_f2uiz+0x28>
    d508:	ea4f 2300 	mov.w	r3, r0, lsl #8
    d50c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d510:	fa23 f002 	lsr.w	r0, r3, r2
    d514:	4770      	bx	lr
    d516:	f04f 0000 	mov.w	r0, #0
    d51a:	4770      	bx	lr
    d51c:	f112 0f61 	cmn.w	r2, #97	; 0x61
    d520:	d101      	bne.n	d526 <__aeabi_f2uiz+0x32>
    d522:	0242      	lsls	r2, r0, #9
    d524:	d102      	bne.n	d52c <__aeabi_f2uiz+0x38>
    d526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d52a:	4770      	bx	lr
    d52c:	f04f 0000 	mov.w	r0, #0
    d530:	4770      	bx	lr
    d532:	bf00      	nop

0000d534 <__gnu_ldivmod_helper>:
    d534:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    d538:	9e06      	ldr	r6, [sp, #24]
    d53a:	4614      	mov	r4, r2
    d53c:	461d      	mov	r5, r3
    d53e:	4680      	mov	r8, r0
    d540:	4689      	mov	r9, r1
    d542:	f000 f829 	bl	d598 <__divdi3>
    d546:	fb04 f301 	mul.w	r3, r4, r1
    d54a:	fb00 3305 	mla	r3, r0, r5, r3
    d54e:	fba4 4500 	umull	r4, r5, r4, r0
    d552:	441d      	add	r5, r3
    d554:	ebb8 0404 	subs.w	r4, r8, r4
    d558:	eb69 0505 	sbc.w	r5, r9, r5
    d55c:	e9c6 4500 	strd	r4, r5, [r6]
    d560:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0000d564 <__gnu_uldivmod_helper>:
    d564:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    d568:	9e06      	ldr	r6, [sp, #24]
    d56a:	4614      	mov	r4, r2
    d56c:	4680      	mov	r8, r0
    d56e:	4689      	mov	r9, r1
    d570:	461d      	mov	r5, r3
    d572:	f000 f95d 	bl	d830 <__udivdi3>
    d576:	fb00 f505 	mul.w	r5, r0, r5
    d57a:	fb04 5301 	mla	r3, r4, r1, r5
    d57e:	fba0 4504 	umull	r4, r5, r0, r4
    d582:	441d      	add	r5, r3
    d584:	ebb8 0404 	subs.w	r4, r8, r4
    d588:	eb69 0505 	sbc.w	r5, r9, r5
    d58c:	e9c6 4500 	strd	r4, r5, [r6]
    d590:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0000d594 <__aeabi_idiv0>:
    d594:	4770      	bx	lr
    d596:	bf00      	nop

0000d598 <__divdi3>:
    d598:	2900      	cmp	r1, #0
    d59a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    d59e:	f2c0 809f 	blt.w	d6e0 <__divdi3+0x148>
    d5a2:	2400      	movs	r4, #0
    d5a4:	2b00      	cmp	r3, #0
    d5a6:	f2c0 8096 	blt.w	d6d6 <__divdi3+0x13e>
    d5aa:	4615      	mov	r5, r2
    d5ac:	4606      	mov	r6, r0
    d5ae:	460f      	mov	r7, r1
    d5b0:	2b00      	cmp	r3, #0
    d5b2:	d13e      	bne.n	d632 <__divdi3+0x9a>
    d5b4:	428a      	cmp	r2, r1
    d5b6:	d957      	bls.n	d668 <__divdi3+0xd0>
    d5b8:	fab2 f382 	clz	r3, r2
    d5bc:	b14b      	cbz	r3, d5d2 <__divdi3+0x3a>
    d5be:	f1c3 0220 	rsb	r2, r3, #32
    d5c2:	fa01 f703 	lsl.w	r7, r1, r3
    d5c6:	fa20 f202 	lsr.w	r2, r0, r2
    d5ca:	409d      	lsls	r5, r3
    d5cc:	4317      	orrs	r7, r2
    d5ce:	fa00 f603 	lsl.w	r6, r0, r3
    d5d2:	0c29      	lsrs	r1, r5, #16
    d5d4:	fbb7 f2f1 	udiv	r2, r7, r1
    d5d8:	0c33      	lsrs	r3, r6, #16
    d5da:	fb01 7c12 	mls	ip, r1, r2, r7
    d5de:	b2a8      	uxth	r0, r5
    d5e0:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
    d5e4:	fb00 f302 	mul.w	r3, r0, r2
    d5e8:	42bb      	cmp	r3, r7
    d5ea:	d909      	bls.n	d600 <__divdi3+0x68>
    d5ec:	197f      	adds	r7, r7, r5
    d5ee:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    d5f2:	f080 8101 	bcs.w	d7f8 <__divdi3+0x260>
    d5f6:	42bb      	cmp	r3, r7
    d5f8:	f240 80fe 	bls.w	d7f8 <__divdi3+0x260>
    d5fc:	3a02      	subs	r2, #2
    d5fe:	442f      	add	r7, r5
    d600:	1aff      	subs	r7, r7, r3
    d602:	fbb7 f3f1 	udiv	r3, r7, r1
    d606:	b2b6      	uxth	r6, r6
    d608:	fb01 7113 	mls	r1, r1, r3, r7
    d60c:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    d610:	fb00 f003 	mul.w	r0, r0, r3
    d614:	4288      	cmp	r0, r1
    d616:	d908      	bls.n	d62a <__divdi3+0x92>
    d618:	1949      	adds	r1, r1, r5
    d61a:	f103 37ff 	add.w	r7, r3, #4294967295	; 0xffffffff
    d61e:	f080 80ed 	bcs.w	d7fc <__divdi3+0x264>
    d622:	4288      	cmp	r0, r1
    d624:	f240 80ea 	bls.w	d7fc <__divdi3+0x264>
    d628:	3b02      	subs	r3, #2
    d62a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    d62e:	2300      	movs	r3, #0
    d630:	e003      	b.n	d63a <__divdi3+0xa2>
    d632:	428b      	cmp	r3, r1
    d634:	d90a      	bls.n	d64c <__divdi3+0xb4>
    d636:	2300      	movs	r3, #0
    d638:	461a      	mov	r2, r3
    d63a:	4610      	mov	r0, r2
    d63c:	4619      	mov	r1, r3
    d63e:	b114      	cbz	r4, d646 <__divdi3+0xae>
    d640:	4240      	negs	r0, r0
    d642:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d646:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    d64a:	4770      	bx	lr
    d64c:	fab3 f883 	clz	r8, r3
    d650:	f1b8 0f00 	cmp.w	r8, #0
    d654:	f040 8084 	bne.w	d760 <__divdi3+0x1c8>
    d658:	428b      	cmp	r3, r1
    d65a:	d302      	bcc.n	d662 <__divdi3+0xca>
    d65c:	4282      	cmp	r2, r0
    d65e:	f200 80de 	bhi.w	d81e <__divdi3+0x286>
    d662:	2300      	movs	r3, #0
    d664:	2201      	movs	r2, #1
    d666:	e7e8      	b.n	d63a <__divdi3+0xa2>
    d668:	b912      	cbnz	r2, d670 <__divdi3+0xd8>
    d66a:	2301      	movs	r3, #1
    d66c:	fbb3 f5f2 	udiv	r5, r3, r2
    d670:	fab5 f285 	clz	r2, r5
    d674:	2a00      	cmp	r2, #0
    d676:	d139      	bne.n	d6ec <__divdi3+0x154>
    d678:	1b7f      	subs	r7, r7, r5
    d67a:	0c28      	lsrs	r0, r5, #16
    d67c:	fa1f fc85 	uxth.w	ip, r5
    d680:	2301      	movs	r3, #1
    d682:	fbb7 f1f0 	udiv	r1, r7, r0
    d686:	0c32      	lsrs	r2, r6, #16
    d688:	fb00 7711 	mls	r7, r0, r1, r7
    d68c:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
    d690:	fb0c f201 	mul.w	r2, ip, r1
    d694:	42ba      	cmp	r2, r7
    d696:	d907      	bls.n	d6a8 <__divdi3+0x110>
    d698:	197f      	adds	r7, r7, r5
    d69a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
    d69e:	d202      	bcs.n	d6a6 <__divdi3+0x10e>
    d6a0:	42ba      	cmp	r2, r7
    d6a2:	f200 80c1 	bhi.w	d828 <__divdi3+0x290>
    d6a6:	4641      	mov	r1, r8
    d6a8:	1abf      	subs	r7, r7, r2
    d6aa:	fbb7 f2f0 	udiv	r2, r7, r0
    d6ae:	b2b6      	uxth	r6, r6
    d6b0:	fb00 7012 	mls	r0, r0, r2, r7
    d6b4:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
    d6b8:	fb0c fc02 	mul.w	ip, ip, r2
    d6bc:	4584      	cmp	ip, r0
    d6be:	d907      	bls.n	d6d0 <__divdi3+0x138>
    d6c0:	1940      	adds	r0, r0, r5
    d6c2:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
    d6c6:	d202      	bcs.n	d6ce <__divdi3+0x136>
    d6c8:	4584      	cmp	ip, r0
    d6ca:	f200 80ab 	bhi.w	d824 <__divdi3+0x28c>
    d6ce:	463a      	mov	r2, r7
    d6d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    d6d4:	e7b1      	b.n	d63a <__divdi3+0xa2>
    d6d6:	43e4      	mvns	r4, r4
    d6d8:	4252      	negs	r2, r2
    d6da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d6de:	e764      	b.n	d5aa <__divdi3+0x12>
    d6e0:	4240      	negs	r0, r0
    d6e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d6e6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    d6ea:	e75b      	b.n	d5a4 <__divdi3+0xc>
    d6ec:	4095      	lsls	r5, r2
    d6ee:	f1c2 0320 	rsb	r3, r2, #32
    d6f2:	fa27 f103 	lsr.w	r1, r7, r3
    d6f6:	0c28      	lsrs	r0, r5, #16
    d6f8:	fa26 f303 	lsr.w	r3, r6, r3
    d6fc:	4097      	lsls	r7, r2
    d6fe:	fbb1 f8f0 	udiv	r8, r1, r0
    d702:	431f      	orrs	r7, r3
    d704:	0c3b      	lsrs	r3, r7, #16
    d706:	fb00 1118 	mls	r1, r0, r8, r1
    d70a:	fa1f fc85 	uxth.w	ip, r5
    d70e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    d712:	fb0c f308 	mul.w	r3, ip, r8
    d716:	428b      	cmp	r3, r1
    d718:	fa06 f602 	lsl.w	r6, r6, r2
    d71c:	d908      	bls.n	d730 <__divdi3+0x198>
    d71e:	1949      	adds	r1, r1, r5
    d720:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
    d724:	d279      	bcs.n	d81a <__divdi3+0x282>
    d726:	428b      	cmp	r3, r1
    d728:	d977      	bls.n	d81a <__divdi3+0x282>
    d72a:	f1a8 0802 	sub.w	r8, r8, #2
    d72e:	4429      	add	r1, r5
    d730:	1ac9      	subs	r1, r1, r3
    d732:	fbb1 f3f0 	udiv	r3, r1, r0
    d736:	b2bf      	uxth	r7, r7
    d738:	fb00 1113 	mls	r1, r0, r3, r1
    d73c:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
    d740:	fb0c f203 	mul.w	r2, ip, r3
    d744:	42ba      	cmp	r2, r7
    d746:	d907      	bls.n	d758 <__divdi3+0x1c0>
    d748:	197f      	adds	r7, r7, r5
    d74a:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
    d74e:	d260      	bcs.n	d812 <__divdi3+0x27a>
    d750:	42ba      	cmp	r2, r7
    d752:	d95e      	bls.n	d812 <__divdi3+0x27a>
    d754:	3b02      	subs	r3, #2
    d756:	442f      	add	r7, r5
    d758:	1abf      	subs	r7, r7, r2
    d75a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    d75e:	e790      	b.n	d682 <__divdi3+0xea>
    d760:	f1c8 0220 	rsb	r2, r8, #32
    d764:	fa03 fc08 	lsl.w	ip, r3, r8
    d768:	fa25 f302 	lsr.w	r3, r5, r2
    d76c:	ea43 0c0c 	orr.w	ip, r3, ip
    d770:	ea4f 491c 	mov.w	r9, ip, lsr #16
    d774:	fa21 f302 	lsr.w	r3, r1, r2
    d778:	fa01 f708 	lsl.w	r7, r1, r8
    d77c:	fa20 f202 	lsr.w	r2, r0, r2
    d780:	fbb3 f1f9 	udiv	r1, r3, r9
    d784:	4317      	orrs	r7, r2
    d786:	fb09 3311 	mls	r3, r9, r1, r3
    d78a:	0c3a      	lsrs	r2, r7, #16
    d78c:	fa1f fb8c 	uxth.w	fp, ip
    d790:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    d794:	fb0b fa01 	mul.w	sl, fp, r1
    d798:	459a      	cmp	sl, r3
    d79a:	fa05 f008 	lsl.w	r0, r5, r8
    d79e:	d908      	bls.n	d7b2 <__divdi3+0x21a>
    d7a0:	eb13 030c 	adds.w	r3, r3, ip
    d7a4:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
    d7a8:	d235      	bcs.n	d816 <__divdi3+0x27e>
    d7aa:	459a      	cmp	sl, r3
    d7ac:	d933      	bls.n	d816 <__divdi3+0x27e>
    d7ae:	3902      	subs	r1, #2
    d7b0:	4463      	add	r3, ip
    d7b2:	ebca 0303 	rsb	r3, sl, r3
    d7b6:	fbb3 f2f9 	udiv	r2, r3, r9
    d7ba:	fb09 3312 	mls	r3, r9, r2, r3
    d7be:	b2bf      	uxth	r7, r7
    d7c0:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
    d7c4:	fb0b f902 	mul.w	r9, fp, r2
    d7c8:	45b9      	cmp	r9, r7
    d7ca:	d908      	bls.n	d7de <__divdi3+0x246>
    d7cc:	eb17 070c 	adds.w	r7, r7, ip
    d7d0:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    d7d4:	d21b      	bcs.n	d80e <__divdi3+0x276>
    d7d6:	45b9      	cmp	r9, r7
    d7d8:	d919      	bls.n	d80e <__divdi3+0x276>
    d7da:	3a02      	subs	r2, #2
    d7dc:	4467      	add	r7, ip
    d7de:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
    d7e2:	fba5 0100 	umull	r0, r1, r5, r0
    d7e6:	ebc9 0707 	rsb	r7, r9, r7
    d7ea:	428f      	cmp	r7, r1
    d7ec:	f04f 0300 	mov.w	r3, #0
    d7f0:	d30a      	bcc.n	d808 <__divdi3+0x270>
    d7f2:	d005      	beq.n	d800 <__divdi3+0x268>
    d7f4:	462a      	mov	r2, r5
    d7f6:	e720      	b.n	d63a <__divdi3+0xa2>
    d7f8:	4662      	mov	r2, ip
    d7fa:	e701      	b.n	d600 <__divdi3+0x68>
    d7fc:	463b      	mov	r3, r7
    d7fe:	e714      	b.n	d62a <__divdi3+0x92>
    d800:	fa06 f608 	lsl.w	r6, r6, r8
    d804:	4286      	cmp	r6, r0
    d806:	d2f5      	bcs.n	d7f4 <__divdi3+0x25c>
    d808:	1e6a      	subs	r2, r5, #1
    d80a:	2300      	movs	r3, #0
    d80c:	e715      	b.n	d63a <__divdi3+0xa2>
    d80e:	461a      	mov	r2, r3
    d810:	e7e5      	b.n	d7de <__divdi3+0x246>
    d812:	460b      	mov	r3, r1
    d814:	e7a0      	b.n	d758 <__divdi3+0x1c0>
    d816:	4611      	mov	r1, r2
    d818:	e7cb      	b.n	d7b2 <__divdi3+0x21a>
    d81a:	4690      	mov	r8, r2
    d81c:	e788      	b.n	d730 <__divdi3+0x198>
    d81e:	4643      	mov	r3, r8
    d820:	4642      	mov	r2, r8
    d822:	e70a      	b.n	d63a <__divdi3+0xa2>
    d824:	3a02      	subs	r2, #2
    d826:	e753      	b.n	d6d0 <__divdi3+0x138>
    d828:	3902      	subs	r1, #2
    d82a:	442f      	add	r7, r5
    d82c:	e73c      	b.n	d6a8 <__divdi3+0x110>
    d82e:	bf00      	nop

0000d830 <__udivdi3>:
    d830:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    d834:	4614      	mov	r4, r2
    d836:	4605      	mov	r5, r0
    d838:	460e      	mov	r6, r1
    d83a:	2b00      	cmp	r3, #0
    d83c:	d143      	bne.n	d8c6 <__udivdi3+0x96>
    d83e:	428a      	cmp	r2, r1
    d840:	d953      	bls.n	d8ea <__udivdi3+0xba>
    d842:	fab2 f782 	clz	r7, r2
    d846:	b157      	cbz	r7, d85e <__udivdi3+0x2e>
    d848:	f1c7 0620 	rsb	r6, r7, #32
    d84c:	fa20 f606 	lsr.w	r6, r0, r6
    d850:	fa01 f307 	lsl.w	r3, r1, r7
    d854:	fa02 f407 	lsl.w	r4, r2, r7
    d858:	431e      	orrs	r6, r3
    d85a:	fa00 f507 	lsl.w	r5, r0, r7
    d85e:	0c21      	lsrs	r1, r4, #16
    d860:	fbb6 f2f1 	udiv	r2, r6, r1
    d864:	0c2b      	lsrs	r3, r5, #16
    d866:	fb01 6712 	mls	r7, r1, r2, r6
    d86a:	b2a0      	uxth	r0, r4
    d86c:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
    d870:	fb00 f302 	mul.w	r3, r0, r2
    d874:	42b3      	cmp	r3, r6
    d876:	d909      	bls.n	d88c <__udivdi3+0x5c>
    d878:	1936      	adds	r6, r6, r4
    d87a:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
    d87e:	f080 80f6 	bcs.w	da6e <__udivdi3+0x23e>
    d882:	42b3      	cmp	r3, r6
    d884:	f240 80f3 	bls.w	da6e <__udivdi3+0x23e>
    d888:	3a02      	subs	r2, #2
    d88a:	4426      	add	r6, r4
    d88c:	1af6      	subs	r6, r6, r3
    d88e:	fbb6 f3f1 	udiv	r3, r6, r1
    d892:	b2ad      	uxth	r5, r5
    d894:	fb01 6113 	mls	r1, r1, r3, r6
    d898:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
    d89c:	fb00 f003 	mul.w	r0, r0, r3
    d8a0:	4288      	cmp	r0, r1
    d8a2:	d908      	bls.n	d8b6 <__udivdi3+0x86>
    d8a4:	1909      	adds	r1, r1, r4
    d8a6:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
    d8aa:	f080 80e2 	bcs.w	da72 <__udivdi3+0x242>
    d8ae:	4288      	cmp	r0, r1
    d8b0:	f240 80df 	bls.w	da72 <__udivdi3+0x242>
    d8b4:	3b02      	subs	r3, #2
    d8b6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    d8ba:	2300      	movs	r3, #0
    d8bc:	4610      	mov	r0, r2
    d8be:	4619      	mov	r1, r3
    d8c0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    d8c4:	4770      	bx	lr
    d8c6:	428b      	cmp	r3, r1
    d8c8:	d84a      	bhi.n	d960 <__udivdi3+0x130>
    d8ca:	fab3 f683 	clz	r6, r3
    d8ce:	2e00      	cmp	r6, #0
    d8d0:	d14d      	bne.n	d96e <__udivdi3+0x13e>
    d8d2:	428b      	cmp	r3, r1
    d8d4:	d302      	bcc.n	d8dc <__udivdi3+0xac>
    d8d6:	4282      	cmp	r2, r0
    d8d8:	f200 80d6 	bhi.w	da88 <__udivdi3+0x258>
    d8dc:	2300      	movs	r3, #0
    d8de:	2201      	movs	r2, #1
    d8e0:	4610      	mov	r0, r2
    d8e2:	4619      	mov	r1, r3
    d8e4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    d8e8:	4770      	bx	lr
    d8ea:	b912      	cbnz	r2, d8f2 <__udivdi3+0xc2>
    d8ec:	2401      	movs	r4, #1
    d8ee:	fbb4 f4f2 	udiv	r4, r4, r2
    d8f2:	fab4 f284 	clz	r2, r4
    d8f6:	2a00      	cmp	r2, #0
    d8f8:	d17c      	bne.n	d9f4 <__udivdi3+0x1c4>
    d8fa:	1b09      	subs	r1, r1, r4
    d8fc:	0c26      	lsrs	r6, r4, #16
    d8fe:	b2a7      	uxth	r7, r4
    d900:	2301      	movs	r3, #1
    d902:	fbb1 f0f6 	udiv	r0, r1, r6
    d906:	0c2a      	lsrs	r2, r5, #16
    d908:	fb06 1110 	mls	r1, r6, r0, r1
    d90c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    d910:	fb07 f200 	mul.w	r2, r7, r0
    d914:	428a      	cmp	r2, r1
    d916:	d907      	bls.n	d928 <__udivdi3+0xf8>
    d918:	1909      	adds	r1, r1, r4
    d91a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    d91e:	d202      	bcs.n	d926 <__udivdi3+0xf6>
    d920:	428a      	cmp	r2, r1
    d922:	f200 80c3 	bhi.w	daac <__udivdi3+0x27c>
    d926:	4660      	mov	r0, ip
    d928:	1a89      	subs	r1, r1, r2
    d92a:	fbb1 f2f6 	udiv	r2, r1, r6
    d92e:	b2ad      	uxth	r5, r5
    d930:	fb06 1112 	mls	r1, r6, r2, r1
    d934:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
    d938:	fb07 f702 	mul.w	r7, r7, r2
    d93c:	42af      	cmp	r7, r5
    d93e:	d908      	bls.n	d952 <__udivdi3+0x122>
    d940:	192c      	adds	r4, r5, r4
    d942:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
    d946:	f080 8096 	bcs.w	da76 <__udivdi3+0x246>
    d94a:	42a7      	cmp	r7, r4
    d94c:	f240 8093 	bls.w	da76 <__udivdi3+0x246>
    d950:	3a02      	subs	r2, #2
    d952:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    d956:	4610      	mov	r0, r2
    d958:	4619      	mov	r1, r3
    d95a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    d95e:	4770      	bx	lr
    d960:	2300      	movs	r3, #0
    d962:	461a      	mov	r2, r3
    d964:	4610      	mov	r0, r2
    d966:	4619      	mov	r1, r3
    d968:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    d96c:	4770      	bx	lr
    d96e:	f1c6 0520 	rsb	r5, r6, #32
    d972:	fa22 f405 	lsr.w	r4, r2, r5
    d976:	40b3      	lsls	r3, r6
    d978:	431c      	orrs	r4, r3
    d97a:	ea4f 4814 	mov.w	r8, r4, lsr #16
    d97e:	fa21 f305 	lsr.w	r3, r1, r5
    d982:	fa01 f706 	lsl.w	r7, r1, r6
    d986:	fa20 f505 	lsr.w	r5, r0, r5
    d98a:	fbb3 fcf8 	udiv	ip, r3, r8
    d98e:	432f      	orrs	r7, r5
    d990:	fb08 331c 	mls	r3, r8, ip, r3
    d994:	0c3d      	lsrs	r5, r7, #16
    d996:	fa1f fa84 	uxth.w	sl, r4
    d99a:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
    d99e:	fb0a f90c 	mul.w	r9, sl, ip
    d9a2:	4599      	cmp	r9, r3
    d9a4:	fa02 fb06 	lsl.w	fp, r2, r6
    d9a8:	d904      	bls.n	d9b4 <__udivdi3+0x184>
    d9aa:	191b      	adds	r3, r3, r4
    d9ac:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
    d9b0:	d36d      	bcc.n	da8e <__udivdi3+0x25e>
    d9b2:	4694      	mov	ip, r2
    d9b4:	ebc9 0303 	rsb	r3, r9, r3
    d9b8:	fbb3 f5f8 	udiv	r5, r3, r8
    d9bc:	fb08 3315 	mls	r3, r8, r5, r3
    d9c0:	b2bf      	uxth	r7, r7
    d9c2:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
    d9c6:	fb0a f805 	mul.w	r8, sl, r5
    d9ca:	45b8      	cmp	r8, r7
    d9cc:	d904      	bls.n	d9d8 <__udivdi3+0x1a8>
    d9ce:	193f      	adds	r7, r7, r4
    d9d0:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
    d9d4:	d361      	bcc.n	da9a <__udivdi3+0x26a>
    d9d6:	461d      	mov	r5, r3
    d9d8:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
    d9dc:	fbac 230b 	umull	r2, r3, ip, fp
    d9e0:	ebc8 0707 	rsb	r7, r8, r7
    d9e4:	429f      	cmp	r7, r3
    d9e6:	f04f 0500 	mov.w	r5, #0
    d9ea:	d349      	bcc.n	da80 <__udivdi3+0x250>
    d9ec:	d045      	beq.n	da7a <__udivdi3+0x24a>
    d9ee:	4662      	mov	r2, ip
    d9f0:	462b      	mov	r3, r5
    d9f2:	e763      	b.n	d8bc <__udivdi3+0x8c>
    d9f4:	4094      	lsls	r4, r2
    d9f6:	f1c2 0320 	rsb	r3, r2, #32
    d9fa:	fa21 fc03 	lsr.w	ip, r1, r3
    d9fe:	0c26      	lsrs	r6, r4, #16
    da00:	fa20 f303 	lsr.w	r3, r0, r3
    da04:	fa01 f502 	lsl.w	r5, r1, r2
    da08:	fbbc f8f6 	udiv	r8, ip, r6
    da0c:	ea43 0105 	orr.w	r1, r3, r5
    da10:	0c0b      	lsrs	r3, r1, #16
    da12:	fb06 cc18 	mls	ip, r6, r8, ip
    da16:	b2a7      	uxth	r7, r4
    da18:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
    da1c:	fb07 f308 	mul.w	r3, r7, r8
    da20:	4563      	cmp	r3, ip
    da22:	fa00 f502 	lsl.w	r5, r0, r2
    da26:	d909      	bls.n	da3c <__udivdi3+0x20c>
    da28:	eb1c 0c04 	adds.w	ip, ip, r4
    da2c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
    da30:	d23a      	bcs.n	daa8 <__udivdi3+0x278>
    da32:	4563      	cmp	r3, ip
    da34:	d938      	bls.n	daa8 <__udivdi3+0x278>
    da36:	f1a8 0802 	sub.w	r8, r8, #2
    da3a:	44a4      	add	ip, r4
    da3c:	ebc3 0c0c 	rsb	ip, r3, ip
    da40:	fbbc f3f6 	udiv	r3, ip, r6
    da44:	b289      	uxth	r1, r1
    da46:	fb06 cc13 	mls	ip, r6, r3, ip
    da4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
    da4e:	fb07 f203 	mul.w	r2, r7, r3
    da52:	428a      	cmp	r2, r1
    da54:	d907      	bls.n	da66 <__udivdi3+0x236>
    da56:	1909      	adds	r1, r1, r4
    da58:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
    da5c:	d222      	bcs.n	daa4 <__udivdi3+0x274>
    da5e:	428a      	cmp	r2, r1
    da60:	d920      	bls.n	daa4 <__udivdi3+0x274>
    da62:	3b02      	subs	r3, #2
    da64:	4421      	add	r1, r4
    da66:	1a89      	subs	r1, r1, r2
    da68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    da6c:	e749      	b.n	d902 <__udivdi3+0xd2>
    da6e:	463a      	mov	r2, r7
    da70:	e70c      	b.n	d88c <__udivdi3+0x5c>
    da72:	4633      	mov	r3, r6
    da74:	e71f      	b.n	d8b6 <__udivdi3+0x86>
    da76:	460a      	mov	r2, r1
    da78:	e76b      	b.n	d952 <__udivdi3+0x122>
    da7a:	40b0      	lsls	r0, r6
    da7c:	4290      	cmp	r0, r2
    da7e:	d2b6      	bcs.n	d9ee <__udivdi3+0x1be>
    da80:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
    da84:	2300      	movs	r3, #0
    da86:	e719      	b.n	d8bc <__udivdi3+0x8c>
    da88:	4633      	mov	r3, r6
    da8a:	4632      	mov	r2, r6
    da8c:	e716      	b.n	d8bc <__udivdi3+0x8c>
    da8e:	4599      	cmp	r9, r3
    da90:	d98f      	bls.n	d9b2 <__udivdi3+0x182>
    da92:	f1ac 0c02 	sub.w	ip, ip, #2
    da96:	4423      	add	r3, r4
    da98:	e78c      	b.n	d9b4 <__udivdi3+0x184>
    da9a:	45b8      	cmp	r8, r7
    da9c:	d99b      	bls.n	d9d6 <__udivdi3+0x1a6>
    da9e:	3d02      	subs	r5, #2
    daa0:	4427      	add	r7, r4
    daa2:	e799      	b.n	d9d8 <__udivdi3+0x1a8>
    daa4:	4603      	mov	r3, r0
    daa6:	e7de      	b.n	da66 <__udivdi3+0x236>
    daa8:	4690      	mov	r8, r2
    daaa:	e7c7      	b.n	da3c <__udivdi3+0x20c>
    daac:	3802      	subs	r0, #2
    daae:	4421      	add	r1, r4
    dab0:	e73a      	b.n	d928 <__udivdi3+0xf8>
    dab2:	bf00      	nop

0000dab4 <__aeabi_atexit>:
    dab4:	4603      	mov	r3, r0
    dab6:	4608      	mov	r0, r1
    dab8:	4619      	mov	r1, r3
    daba:	f000 b801 	b.w	dac0 <__cxa_atexit>
    dabe:	bf00      	nop

0000dac0 <__cxa_atexit>:
    dac0:	b410      	push	{r4}
    dac2:	460c      	mov	r4, r1
    dac4:	4613      	mov	r3, r2
    dac6:	4601      	mov	r1, r0
    dac8:	4622      	mov	r2, r4
    daca:	2002      	movs	r0, #2
    dacc:	f85d 4b04 	ldr.w	r4, [sp], #4
    dad0:	f000 be88 	b.w	e7e4 <__register_exitproc>

0000dad4 <__errno>:
    dad4:	4b01      	ldr	r3, [pc, #4]	; (dadc <__errno+0x8>)
    dad6:	6818      	ldr	r0, [r3, #0]
    dad8:	4770      	bx	lr
    dada:	bf00      	nop
    dadc:	20001218 	.word	0x20001218

0000dae0 <__libc_init_array>:
    dae0:	b570      	push	{r4, r5, r6, lr}
    dae2:	4e0f      	ldr	r6, [pc, #60]	; (db20 <__libc_init_array+0x40>)
    dae4:	4d0f      	ldr	r5, [pc, #60]	; (db24 <__libc_init_array+0x44>)
    dae6:	1b76      	subs	r6, r6, r5
    dae8:	10b6      	asrs	r6, r6, #2
    daea:	d007      	beq.n	dafc <__libc_init_array+0x1c>
    daec:	3d04      	subs	r5, #4
    daee:	2400      	movs	r4, #0
    daf0:	3401      	adds	r4, #1
    daf2:	f855 3f04 	ldr.w	r3, [r5, #4]!
    daf6:	4798      	blx	r3
    daf8:	42a6      	cmp	r6, r4
    dafa:	d1f9      	bne.n	daf0 <__libc_init_array+0x10>
    dafc:	4e0a      	ldr	r6, [pc, #40]	; (db28 <__libc_init_array+0x48>)
    dafe:	4d0b      	ldr	r5, [pc, #44]	; (db2c <__libc_init_array+0x4c>)
    db00:	1b76      	subs	r6, r6, r5
    db02:	f004 fd91 	bl	12628 <_init>
    db06:	10b6      	asrs	r6, r6, #2
    db08:	d008      	beq.n	db1c <__libc_init_array+0x3c>
    db0a:	3d04      	subs	r5, #4
    db0c:	2400      	movs	r4, #0
    db0e:	3401      	adds	r4, #1
    db10:	f855 3f04 	ldr.w	r3, [r5, #4]!
    db14:	4798      	blx	r3
    db16:	42a6      	cmp	r6, r4
    db18:	d1f9      	bne.n	db0e <__libc_init_array+0x2e>
    db1a:	bd70      	pop	{r4, r5, r6, pc}
    db1c:	bd70      	pop	{r4, r5, r6, pc}
    db1e:	bf00      	nop
    db20:	00012634 	.word	0x00012634
    db24:	00012634 	.word	0x00012634
    db28:	00012680 	.word	0x00012680
    db2c:	00012634 	.word	0x00012634

0000db30 <malloc>:
    db30:	4b02      	ldr	r3, [pc, #8]	; (db3c <malloc+0xc>)
    db32:	4601      	mov	r1, r0
    db34:	6818      	ldr	r0, [r3, #0]
    db36:	f000 b803 	b.w	db40 <_malloc_r>
    db3a:	bf00      	nop
    db3c:	20001218 	.word	0x20001218

0000db40 <_malloc_r>:
    db40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db44:	f101 050b 	add.w	r5, r1, #11
    db48:	2d16      	cmp	r5, #22
    db4a:	b083      	sub	sp, #12
    db4c:	4606      	mov	r6, r0
    db4e:	d927      	bls.n	dba0 <_malloc_r+0x60>
    db50:	f035 0507 	bics.w	r5, r5, #7
    db54:	d427      	bmi.n	dba6 <_malloc_r+0x66>
    db56:	42a9      	cmp	r1, r5
    db58:	d825      	bhi.n	dba6 <_malloc_r+0x66>
    db5a:	4630      	mov	r0, r6
    db5c:	f000 fbd0 	bl	e300 <__malloc_lock>
    db60:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    db64:	d226      	bcs.n	dbb4 <_malloc_r+0x74>
    db66:	4fc1      	ldr	r7, [pc, #772]	; (de6c <_malloc_r+0x32c>)
    db68:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
    db6c:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
    db70:	68dc      	ldr	r4, [r3, #12]
    db72:	429c      	cmp	r4, r3
    db74:	f000 81d2 	beq.w	df1c <_malloc_r+0x3dc>
    db78:	6863      	ldr	r3, [r4, #4]
    db7a:	68e2      	ldr	r2, [r4, #12]
    db7c:	68a1      	ldr	r1, [r4, #8]
    db7e:	f023 0303 	bic.w	r3, r3, #3
    db82:	4423      	add	r3, r4
    db84:	4630      	mov	r0, r6
    db86:	685d      	ldr	r5, [r3, #4]
    db88:	60ca      	str	r2, [r1, #12]
    db8a:	f045 0501 	orr.w	r5, r5, #1
    db8e:	6091      	str	r1, [r2, #8]
    db90:	605d      	str	r5, [r3, #4]
    db92:	f000 fbb7 	bl	e304 <__malloc_unlock>
    db96:	3408      	adds	r4, #8
    db98:	4620      	mov	r0, r4
    db9a:	b003      	add	sp, #12
    db9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dba0:	2510      	movs	r5, #16
    dba2:	42a9      	cmp	r1, r5
    dba4:	d9d9      	bls.n	db5a <_malloc_r+0x1a>
    dba6:	2400      	movs	r4, #0
    dba8:	230c      	movs	r3, #12
    dbaa:	4620      	mov	r0, r4
    dbac:	6033      	str	r3, [r6, #0]
    dbae:	b003      	add	sp, #12
    dbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dbb4:	ea5f 2c55 	movs.w	ip, r5, lsr #9
    dbb8:	f000 808a 	beq.w	dcd0 <_malloc_r+0x190>
    dbbc:	f1bc 0f04 	cmp.w	ip, #4
    dbc0:	f200 8160 	bhi.w	de84 <_malloc_r+0x344>
    dbc4:	ea4f 1c95 	mov.w	ip, r5, lsr #6
    dbc8:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
    dbcc:	ea4f 014c 	mov.w	r1, ip, lsl #1
    dbd0:	4fa6      	ldr	r7, [pc, #664]	; (de6c <_malloc_r+0x32c>)
    dbd2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    dbd6:	68cc      	ldr	r4, [r1, #12]
    dbd8:	42a1      	cmp	r1, r4
    dbda:	d105      	bne.n	dbe8 <_malloc_r+0xa8>
    dbdc:	e00c      	b.n	dbf8 <_malloc_r+0xb8>
    dbde:	2b00      	cmp	r3, #0
    dbe0:	da7a      	bge.n	dcd8 <_malloc_r+0x198>
    dbe2:	68e4      	ldr	r4, [r4, #12]
    dbe4:	42a1      	cmp	r1, r4
    dbe6:	d007      	beq.n	dbf8 <_malloc_r+0xb8>
    dbe8:	6862      	ldr	r2, [r4, #4]
    dbea:	f022 0203 	bic.w	r2, r2, #3
    dbee:	1b53      	subs	r3, r2, r5
    dbf0:	2b0f      	cmp	r3, #15
    dbf2:	ddf4      	ble.n	dbde <_malloc_r+0x9e>
    dbf4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    dbf8:	f10c 0c01 	add.w	ip, ip, #1
    dbfc:	4b9b      	ldr	r3, [pc, #620]	; (de6c <_malloc_r+0x32c>)
    dbfe:	693c      	ldr	r4, [r7, #16]
    dc00:	f103 0e08 	add.w	lr, r3, #8
    dc04:	4574      	cmp	r4, lr
    dc06:	f000 817e 	beq.w	df06 <_malloc_r+0x3c6>
    dc0a:	6861      	ldr	r1, [r4, #4]
    dc0c:	f021 0103 	bic.w	r1, r1, #3
    dc10:	1b4a      	subs	r2, r1, r5
    dc12:	2a0f      	cmp	r2, #15
    dc14:	f300 8164 	bgt.w	dee0 <_malloc_r+0x3a0>
    dc18:	2a00      	cmp	r2, #0
    dc1a:	f8c3 e014 	str.w	lr, [r3, #20]
    dc1e:	f8c3 e010 	str.w	lr, [r3, #16]
    dc22:	da6a      	bge.n	dcfa <_malloc_r+0x1ba>
    dc24:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    dc28:	f080 813a 	bcs.w	dea0 <_malloc_r+0x360>
    dc2c:	08c9      	lsrs	r1, r1, #3
    dc2e:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
    dc32:	ea4f 08a1 	mov.w	r8, r1, asr #2
    dc36:	685a      	ldr	r2, [r3, #4]
    dc38:	6881      	ldr	r1, [r0, #8]
    dc3a:	60a1      	str	r1, [r4, #8]
    dc3c:	f04f 0901 	mov.w	r9, #1
    dc40:	fa09 f808 	lsl.w	r8, r9, r8
    dc44:	ea48 0202 	orr.w	r2, r8, r2
    dc48:	60e0      	str	r0, [r4, #12]
    dc4a:	605a      	str	r2, [r3, #4]
    dc4c:	6084      	str	r4, [r0, #8]
    dc4e:	60cc      	str	r4, [r1, #12]
    dc50:	ea4f 03ac 	mov.w	r3, ip, asr #2
    dc54:	2001      	movs	r0, #1
    dc56:	4098      	lsls	r0, r3
    dc58:	4290      	cmp	r0, r2
    dc5a:	d85b      	bhi.n	dd14 <_malloc_r+0x1d4>
    dc5c:	4202      	tst	r2, r0
    dc5e:	d106      	bne.n	dc6e <_malloc_r+0x12e>
    dc60:	f02c 0c03 	bic.w	ip, ip, #3
    dc64:	0040      	lsls	r0, r0, #1
    dc66:	4202      	tst	r2, r0
    dc68:	f10c 0c04 	add.w	ip, ip, #4
    dc6c:	d0fa      	beq.n	dc64 <_malloc_r+0x124>
    dc6e:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
    dc72:	4644      	mov	r4, r8
    dc74:	46e1      	mov	r9, ip
    dc76:	68e3      	ldr	r3, [r4, #12]
    dc78:	429c      	cmp	r4, r3
    dc7a:	d107      	bne.n	dc8c <_malloc_r+0x14c>
    dc7c:	e145      	b.n	df0a <_malloc_r+0x3ca>
    dc7e:	2a00      	cmp	r2, #0
    dc80:	f280 8156 	bge.w	df30 <_malloc_r+0x3f0>
    dc84:	68db      	ldr	r3, [r3, #12]
    dc86:	429c      	cmp	r4, r3
    dc88:	f000 813f 	beq.w	df0a <_malloc_r+0x3ca>
    dc8c:	6859      	ldr	r1, [r3, #4]
    dc8e:	f021 0103 	bic.w	r1, r1, #3
    dc92:	1b4a      	subs	r2, r1, r5
    dc94:	2a0f      	cmp	r2, #15
    dc96:	ddf2      	ble.n	dc7e <_malloc_r+0x13e>
    dc98:	461c      	mov	r4, r3
    dc9a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    dc9e:	f854 8f08 	ldr.w	r8, [r4, #8]!
    dca2:	1959      	adds	r1, r3, r5
    dca4:	f045 0901 	orr.w	r9, r5, #1
    dca8:	f042 0501 	orr.w	r5, r2, #1
    dcac:	f8c3 9004 	str.w	r9, [r3, #4]
    dcb0:	4630      	mov	r0, r6
    dcb2:	f8c8 c00c 	str.w	ip, [r8, #12]
    dcb6:	f8cc 8008 	str.w	r8, [ip, #8]
    dcba:	6179      	str	r1, [r7, #20]
    dcbc:	6139      	str	r1, [r7, #16]
    dcbe:	f8c1 e00c 	str.w	lr, [r1, #12]
    dcc2:	f8c1 e008 	str.w	lr, [r1, #8]
    dcc6:	604d      	str	r5, [r1, #4]
    dcc8:	508a      	str	r2, [r1, r2]
    dcca:	f000 fb1b 	bl	e304 <__malloc_unlock>
    dcce:	e763      	b.n	db98 <_malloc_r+0x58>
    dcd0:	217e      	movs	r1, #126	; 0x7e
    dcd2:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    dcd6:	e77b      	b.n	dbd0 <_malloc_r+0x90>
    dcd8:	4422      	add	r2, r4
    dcda:	68e3      	ldr	r3, [r4, #12]
    dcdc:	6850      	ldr	r0, [r2, #4]
    dcde:	68a1      	ldr	r1, [r4, #8]
    dce0:	f040 0501 	orr.w	r5, r0, #1
    dce4:	60cb      	str	r3, [r1, #12]
    dce6:	4630      	mov	r0, r6
    dce8:	6099      	str	r1, [r3, #8]
    dcea:	6055      	str	r5, [r2, #4]
    dcec:	f000 fb0a 	bl	e304 <__malloc_unlock>
    dcf0:	3408      	adds	r4, #8
    dcf2:	4620      	mov	r0, r4
    dcf4:	b003      	add	sp, #12
    dcf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dcfa:	4421      	add	r1, r4
    dcfc:	4630      	mov	r0, r6
    dcfe:	684b      	ldr	r3, [r1, #4]
    dd00:	f043 0301 	orr.w	r3, r3, #1
    dd04:	604b      	str	r3, [r1, #4]
    dd06:	f000 fafd 	bl	e304 <__malloc_unlock>
    dd0a:	3408      	adds	r4, #8
    dd0c:	4620      	mov	r0, r4
    dd0e:	b003      	add	sp, #12
    dd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd14:	68bc      	ldr	r4, [r7, #8]
    dd16:	6863      	ldr	r3, [r4, #4]
    dd18:	f023 0903 	bic.w	r9, r3, #3
    dd1c:	45a9      	cmp	r9, r5
    dd1e:	d304      	bcc.n	dd2a <_malloc_r+0x1ea>
    dd20:	ebc5 0309 	rsb	r3, r5, r9
    dd24:	2b0f      	cmp	r3, #15
    dd26:	f300 8091 	bgt.w	de4c <_malloc_r+0x30c>
    dd2a:	4b51      	ldr	r3, [pc, #324]	; (de70 <_malloc_r+0x330>)
    dd2c:	4a51      	ldr	r2, [pc, #324]	; (de74 <_malloc_r+0x334>)
    dd2e:	6819      	ldr	r1, [r3, #0]
    dd30:	6813      	ldr	r3, [r2, #0]
    dd32:	3301      	adds	r3, #1
    dd34:	eb05 0a01 	add.w	sl, r5, r1
    dd38:	eb04 0b09 	add.w	fp, r4, r9
    dd3c:	f000 8161 	beq.w	e002 <_malloc_r+0x4c2>
    dd40:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
    dd44:	f10a 0a0f 	add.w	sl, sl, #15
    dd48:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
    dd4c:	f02a 0a0f 	bic.w	sl, sl, #15
    dd50:	4630      	mov	r0, r6
    dd52:	4651      	mov	r1, sl
    dd54:	9201      	str	r2, [sp, #4]
    dd56:	f000 fcbd 	bl	e6d4 <_sbrk_r>
    dd5a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    dd5e:	4680      	mov	r8, r0
    dd60:	9a01      	ldr	r2, [sp, #4]
    dd62:	f000 8100 	beq.w	df66 <_malloc_r+0x426>
    dd66:	4583      	cmp	fp, r0
    dd68:	f200 80fa 	bhi.w	df60 <_malloc_r+0x420>
    dd6c:	f8df c110 	ldr.w	ip, [pc, #272]	; de80 <_malloc_r+0x340>
    dd70:	f8dc 3000 	ldr.w	r3, [ip]
    dd74:	45c3      	cmp	fp, r8
    dd76:	4453      	add	r3, sl
    dd78:	f8cc 3000 	str.w	r3, [ip]
    dd7c:	f000 814a 	beq.w	e014 <_malloc_r+0x4d4>
    dd80:	6812      	ldr	r2, [r2, #0]
    dd82:	493c      	ldr	r1, [pc, #240]	; (de74 <_malloc_r+0x334>)
    dd84:	3201      	adds	r2, #1
    dd86:	bf1b      	ittet	ne
    dd88:	ebcb 0b08 	rsbne	fp, fp, r8
    dd8c:	445b      	addne	r3, fp
    dd8e:	f8c1 8000 	streq.w	r8, [r1]
    dd92:	f8cc 3000 	strne.w	r3, [ip]
    dd96:	f018 0307 	ands.w	r3, r8, #7
    dd9a:	f000 8113 	beq.w	dfc4 <_malloc_r+0x484>
    dd9e:	f1c3 0208 	rsb	r2, r3, #8
    dda2:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
    dda6:	4490      	add	r8, r2
    dda8:	3308      	adds	r3, #8
    ddaa:	44c2      	add	sl, r8
    ddac:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
    ddb0:	ebca 0a03 	rsb	sl, sl, r3
    ddb4:	4651      	mov	r1, sl
    ddb6:	4630      	mov	r0, r6
    ddb8:	f8cd c004 	str.w	ip, [sp, #4]
    ddbc:	f000 fc8a 	bl	e6d4 <_sbrk_r>
    ddc0:	1c43      	adds	r3, r0, #1
    ddc2:	f8dd c004 	ldr.w	ip, [sp, #4]
    ddc6:	f000 8135 	beq.w	e034 <_malloc_r+0x4f4>
    ddca:	ebc8 0200 	rsb	r2, r8, r0
    ddce:	4452      	add	r2, sl
    ddd0:	f042 0201 	orr.w	r2, r2, #1
    ddd4:	f8dc 3000 	ldr.w	r3, [ip]
    ddd8:	f8c7 8008 	str.w	r8, [r7, #8]
    dddc:	4453      	add	r3, sl
    ddde:	42bc      	cmp	r4, r7
    dde0:	f8c8 2004 	str.w	r2, [r8, #4]
    dde4:	f8cc 3000 	str.w	r3, [ip]
    dde8:	f8df a094 	ldr.w	sl, [pc, #148]	; de80 <_malloc_r+0x340>
    ddec:	d015      	beq.n	de1a <_malloc_r+0x2da>
    ddee:	f1b9 0f0f 	cmp.w	r9, #15
    ddf2:	f240 80ea 	bls.w	dfca <_malloc_r+0x48a>
    ddf6:	6861      	ldr	r1, [r4, #4]
    ddf8:	f1a9 020c 	sub.w	r2, r9, #12
    ddfc:	f022 0207 	bic.w	r2, r2, #7
    de00:	f001 0e01 	and.w	lr, r1, #1
    de04:	18a1      	adds	r1, r4, r2
    de06:	2005      	movs	r0, #5
    de08:	ea42 0e0e 	orr.w	lr, r2, lr
    de0c:	2a0f      	cmp	r2, #15
    de0e:	f8c4 e004 	str.w	lr, [r4, #4]
    de12:	6048      	str	r0, [r1, #4]
    de14:	6088      	str	r0, [r1, #8]
    de16:	f200 8111 	bhi.w	e03c <_malloc_r+0x4fc>
    de1a:	4a17      	ldr	r2, [pc, #92]	; (de78 <_malloc_r+0x338>)
    de1c:	68bc      	ldr	r4, [r7, #8]
    de1e:	6811      	ldr	r1, [r2, #0]
    de20:	428b      	cmp	r3, r1
    de22:	bf88      	it	hi
    de24:	6013      	strhi	r3, [r2, #0]
    de26:	4a15      	ldr	r2, [pc, #84]	; (de7c <_malloc_r+0x33c>)
    de28:	6811      	ldr	r1, [r2, #0]
    de2a:	428b      	cmp	r3, r1
    de2c:	bf88      	it	hi
    de2e:	6013      	strhi	r3, [r2, #0]
    de30:	6862      	ldr	r2, [r4, #4]
    de32:	f022 0203 	bic.w	r2, r2, #3
    de36:	4295      	cmp	r5, r2
    de38:	ebc5 0302 	rsb	r3, r5, r2
    de3c:	d801      	bhi.n	de42 <_malloc_r+0x302>
    de3e:	2b0f      	cmp	r3, #15
    de40:	dc04      	bgt.n	de4c <_malloc_r+0x30c>
    de42:	4630      	mov	r0, r6
    de44:	f000 fa5e 	bl	e304 <__malloc_unlock>
    de48:	2400      	movs	r4, #0
    de4a:	e6a5      	b.n	db98 <_malloc_r+0x58>
    de4c:	1962      	adds	r2, r4, r5
    de4e:	f043 0301 	orr.w	r3, r3, #1
    de52:	f045 0501 	orr.w	r5, r5, #1
    de56:	6065      	str	r5, [r4, #4]
    de58:	4630      	mov	r0, r6
    de5a:	60ba      	str	r2, [r7, #8]
    de5c:	6053      	str	r3, [r2, #4]
    de5e:	f000 fa51 	bl	e304 <__malloc_unlock>
    de62:	3408      	adds	r4, #8
    de64:	4620      	mov	r0, r4
    de66:	b003      	add	sp, #12
    de68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de6c:	2000121c 	.word	0x2000121c
    de70:	200027e8 	.word	0x200027e8
    de74:	20001628 	.word	0x20001628
    de78:	200027e4 	.word	0x200027e4
    de7c:	200027e0 	.word	0x200027e0
    de80:	200027ec 	.word	0x200027ec
    de84:	f1bc 0f14 	cmp.w	ip, #20
    de88:	d961      	bls.n	df4e <_malloc_r+0x40e>
    de8a:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
    de8e:	f200 808f 	bhi.w	dfb0 <_malloc_r+0x470>
    de92:	ea4f 3c15 	mov.w	ip, r5, lsr #12
    de96:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
    de9a:	ea4f 014c 	mov.w	r1, ip, lsl #1
    de9e:	e697      	b.n	dbd0 <_malloc_r+0x90>
    dea0:	0a4b      	lsrs	r3, r1, #9
    dea2:	2b04      	cmp	r3, #4
    dea4:	d958      	bls.n	df58 <_malloc_r+0x418>
    dea6:	2b14      	cmp	r3, #20
    dea8:	f200 80ae 	bhi.w	e008 <_malloc_r+0x4c8>
    deac:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    deb0:	0050      	lsls	r0, r2, #1
    deb2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    deb6:	f8df 81bc 	ldr.w	r8, [pc, #444]	; e074 <_malloc_r+0x534>
    deba:	6883      	ldr	r3, [r0, #8]
    debc:	4283      	cmp	r3, r0
    debe:	f000 808a 	beq.w	dfd6 <_malloc_r+0x496>
    dec2:	685a      	ldr	r2, [r3, #4]
    dec4:	f022 0203 	bic.w	r2, r2, #3
    dec8:	4291      	cmp	r1, r2
    deca:	d202      	bcs.n	ded2 <_malloc_r+0x392>
    decc:	689b      	ldr	r3, [r3, #8]
    dece:	4298      	cmp	r0, r3
    ded0:	d1f7      	bne.n	dec2 <_malloc_r+0x382>
    ded2:	68d9      	ldr	r1, [r3, #12]
    ded4:	687a      	ldr	r2, [r7, #4]
    ded6:	60e1      	str	r1, [r4, #12]
    ded8:	60a3      	str	r3, [r4, #8]
    deda:	608c      	str	r4, [r1, #8]
    dedc:	60dc      	str	r4, [r3, #12]
    dede:	e6b7      	b.n	dc50 <_malloc_r+0x110>
    dee0:	1961      	adds	r1, r4, r5
    dee2:	f042 0701 	orr.w	r7, r2, #1
    dee6:	f045 0501 	orr.w	r5, r5, #1
    deea:	6065      	str	r5, [r4, #4]
    deec:	4630      	mov	r0, r6
    deee:	6159      	str	r1, [r3, #20]
    def0:	6119      	str	r1, [r3, #16]
    def2:	f8c1 e00c 	str.w	lr, [r1, #12]
    def6:	f8c1 e008 	str.w	lr, [r1, #8]
    defa:	604f      	str	r7, [r1, #4]
    defc:	508a      	str	r2, [r1, r2]
    defe:	3408      	adds	r4, #8
    df00:	f000 fa00 	bl	e304 <__malloc_unlock>
    df04:	e648      	b.n	db98 <_malloc_r+0x58>
    df06:	685a      	ldr	r2, [r3, #4]
    df08:	e6a2      	b.n	dc50 <_malloc_r+0x110>
    df0a:	f109 0901 	add.w	r9, r9, #1
    df0e:	f019 0f03 	tst.w	r9, #3
    df12:	f104 0408 	add.w	r4, r4, #8
    df16:	f47f aeae 	bne.w	dc76 <_malloc_r+0x136>
    df1a:	e02d      	b.n	df78 <_malloc_r+0x438>
    df1c:	f104 0308 	add.w	r3, r4, #8
    df20:	6964      	ldr	r4, [r4, #20]
    df22:	42a3      	cmp	r3, r4
    df24:	bf08      	it	eq
    df26:	f10c 0c02 	addeq.w	ip, ip, #2
    df2a:	f43f ae67 	beq.w	dbfc <_malloc_r+0xbc>
    df2e:	e623      	b.n	db78 <_malloc_r+0x38>
    df30:	4419      	add	r1, r3
    df32:	461c      	mov	r4, r3
    df34:	6848      	ldr	r0, [r1, #4]
    df36:	68db      	ldr	r3, [r3, #12]
    df38:	f854 2f08 	ldr.w	r2, [r4, #8]!
    df3c:	f040 0501 	orr.w	r5, r0, #1
    df40:	604d      	str	r5, [r1, #4]
    df42:	4630      	mov	r0, r6
    df44:	60d3      	str	r3, [r2, #12]
    df46:	609a      	str	r2, [r3, #8]
    df48:	f000 f9dc 	bl	e304 <__malloc_unlock>
    df4c:	e624      	b.n	db98 <_malloc_r+0x58>
    df4e:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
    df52:	ea4f 014c 	mov.w	r1, ip, lsl #1
    df56:	e63b      	b.n	dbd0 <_malloc_r+0x90>
    df58:	098a      	lsrs	r2, r1, #6
    df5a:	3238      	adds	r2, #56	; 0x38
    df5c:	0050      	lsls	r0, r2, #1
    df5e:	e7a8      	b.n	deb2 <_malloc_r+0x372>
    df60:	42bc      	cmp	r4, r7
    df62:	f43f af03 	beq.w	dd6c <_malloc_r+0x22c>
    df66:	68bc      	ldr	r4, [r7, #8]
    df68:	6862      	ldr	r2, [r4, #4]
    df6a:	f022 0203 	bic.w	r2, r2, #3
    df6e:	e762      	b.n	de36 <_malloc_r+0x2f6>
    df70:	f8d8 8000 	ldr.w	r8, [r8]
    df74:	4598      	cmp	r8, r3
    df76:	d17b      	bne.n	e070 <_malloc_r+0x530>
    df78:	f01c 0f03 	tst.w	ip, #3
    df7c:	f1a8 0308 	sub.w	r3, r8, #8
    df80:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    df84:	d1f4      	bne.n	df70 <_malloc_r+0x430>
    df86:	687b      	ldr	r3, [r7, #4]
    df88:	ea23 0300 	bic.w	r3, r3, r0
    df8c:	607b      	str	r3, [r7, #4]
    df8e:	0040      	lsls	r0, r0, #1
    df90:	4298      	cmp	r0, r3
    df92:	f63f aebf 	bhi.w	dd14 <_malloc_r+0x1d4>
    df96:	2800      	cmp	r0, #0
    df98:	f43f aebc 	beq.w	dd14 <_malloc_r+0x1d4>
    df9c:	4203      	tst	r3, r0
    df9e:	46cc      	mov	ip, r9
    dfa0:	f47f ae65 	bne.w	dc6e <_malloc_r+0x12e>
    dfa4:	0040      	lsls	r0, r0, #1
    dfa6:	4203      	tst	r3, r0
    dfa8:	f10c 0c04 	add.w	ip, ip, #4
    dfac:	d0fa      	beq.n	dfa4 <_malloc_r+0x464>
    dfae:	e65e      	b.n	dc6e <_malloc_r+0x12e>
    dfb0:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
    dfb4:	d81a      	bhi.n	dfec <_malloc_r+0x4ac>
    dfb6:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
    dfba:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
    dfbe:	ea4f 014c 	mov.w	r1, ip, lsl #1
    dfc2:	e605      	b.n	dbd0 <_malloc_r+0x90>
    dfc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    dfc8:	e6ef      	b.n	ddaa <_malloc_r+0x26a>
    dfca:	2301      	movs	r3, #1
    dfcc:	f8c8 3004 	str.w	r3, [r8, #4]
    dfd0:	4644      	mov	r4, r8
    dfd2:	2200      	movs	r2, #0
    dfd4:	e72f      	b.n	de36 <_malloc_r+0x2f6>
    dfd6:	1091      	asrs	r1, r2, #2
    dfd8:	2001      	movs	r0, #1
    dfda:	f8d8 2004 	ldr.w	r2, [r8, #4]
    dfde:	fa00 f101 	lsl.w	r1, r0, r1
    dfe2:	430a      	orrs	r2, r1
    dfe4:	f8c8 2004 	str.w	r2, [r8, #4]
    dfe8:	4619      	mov	r1, r3
    dfea:	e774      	b.n	ded6 <_malloc_r+0x396>
    dfec:	f240 5354 	movw	r3, #1364	; 0x554
    dff0:	459c      	cmp	ip, r3
    dff2:	d81b      	bhi.n	e02c <_malloc_r+0x4ec>
    dff4:	ea4f 4c95 	mov.w	ip, r5, lsr #18
    dff8:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
    dffc:	ea4f 014c 	mov.w	r1, ip, lsl #1
    e000:	e5e6      	b.n	dbd0 <_malloc_r+0x90>
    e002:	f10a 0a10 	add.w	sl, sl, #16
    e006:	e6a3      	b.n	dd50 <_malloc_r+0x210>
    e008:	2b54      	cmp	r3, #84	; 0x54
    e00a:	d81f      	bhi.n	e04c <_malloc_r+0x50c>
    e00c:	0b0a      	lsrs	r2, r1, #12
    e00e:	326e      	adds	r2, #110	; 0x6e
    e010:	0050      	lsls	r0, r2, #1
    e012:	e74e      	b.n	deb2 <_malloc_r+0x372>
    e014:	f3cb 010b 	ubfx	r1, fp, #0, #12
    e018:	2900      	cmp	r1, #0
    e01a:	f47f aeb1 	bne.w	dd80 <_malloc_r+0x240>
    e01e:	eb0a 0109 	add.w	r1, sl, r9
    e022:	68ba      	ldr	r2, [r7, #8]
    e024:	f041 0101 	orr.w	r1, r1, #1
    e028:	6051      	str	r1, [r2, #4]
    e02a:	e6f6      	b.n	de1a <_malloc_r+0x2da>
    e02c:	21fc      	movs	r1, #252	; 0xfc
    e02e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    e032:	e5cd      	b.n	dbd0 <_malloc_r+0x90>
    e034:	2201      	movs	r2, #1
    e036:	f04f 0a00 	mov.w	sl, #0
    e03a:	e6cb      	b.n	ddd4 <_malloc_r+0x294>
    e03c:	f104 0108 	add.w	r1, r4, #8
    e040:	4630      	mov	r0, r6
    e042:	f000 fc93 	bl	e96c <_free_r>
    e046:	f8da 3000 	ldr.w	r3, [sl]
    e04a:	e6e6      	b.n	de1a <_malloc_r+0x2da>
    e04c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    e050:	d803      	bhi.n	e05a <_malloc_r+0x51a>
    e052:	0bca      	lsrs	r2, r1, #15
    e054:	3277      	adds	r2, #119	; 0x77
    e056:	0050      	lsls	r0, r2, #1
    e058:	e72b      	b.n	deb2 <_malloc_r+0x372>
    e05a:	f240 5254 	movw	r2, #1364	; 0x554
    e05e:	4293      	cmp	r3, r2
    e060:	d803      	bhi.n	e06a <_malloc_r+0x52a>
    e062:	0c8a      	lsrs	r2, r1, #18
    e064:	327c      	adds	r2, #124	; 0x7c
    e066:	0050      	lsls	r0, r2, #1
    e068:	e723      	b.n	deb2 <_malloc_r+0x372>
    e06a:	20fc      	movs	r0, #252	; 0xfc
    e06c:	227e      	movs	r2, #126	; 0x7e
    e06e:	e720      	b.n	deb2 <_malloc_r+0x372>
    e070:	687b      	ldr	r3, [r7, #4]
    e072:	e78c      	b.n	df8e <_malloc_r+0x44e>
    e074:	2000121c 	.word	0x2000121c

0000e078 <memcpy>:
    e078:	4684      	mov	ip, r0
    e07a:	ea41 0300 	orr.w	r3, r1, r0
    e07e:	f013 0303 	ands.w	r3, r3, #3
    e082:	d16d      	bne.n	e160 <memcpy+0xe8>
    e084:	3a40      	subs	r2, #64	; 0x40
    e086:	d341      	bcc.n	e10c <memcpy+0x94>
    e088:	f851 3b04 	ldr.w	r3, [r1], #4
    e08c:	f840 3b04 	str.w	r3, [r0], #4
    e090:	f851 3b04 	ldr.w	r3, [r1], #4
    e094:	f840 3b04 	str.w	r3, [r0], #4
    e098:	f851 3b04 	ldr.w	r3, [r1], #4
    e09c:	f840 3b04 	str.w	r3, [r0], #4
    e0a0:	f851 3b04 	ldr.w	r3, [r1], #4
    e0a4:	f840 3b04 	str.w	r3, [r0], #4
    e0a8:	f851 3b04 	ldr.w	r3, [r1], #4
    e0ac:	f840 3b04 	str.w	r3, [r0], #4
    e0b0:	f851 3b04 	ldr.w	r3, [r1], #4
    e0b4:	f840 3b04 	str.w	r3, [r0], #4
    e0b8:	f851 3b04 	ldr.w	r3, [r1], #4
    e0bc:	f840 3b04 	str.w	r3, [r0], #4
    e0c0:	f851 3b04 	ldr.w	r3, [r1], #4
    e0c4:	f840 3b04 	str.w	r3, [r0], #4
    e0c8:	f851 3b04 	ldr.w	r3, [r1], #4
    e0cc:	f840 3b04 	str.w	r3, [r0], #4
    e0d0:	f851 3b04 	ldr.w	r3, [r1], #4
    e0d4:	f840 3b04 	str.w	r3, [r0], #4
    e0d8:	f851 3b04 	ldr.w	r3, [r1], #4
    e0dc:	f840 3b04 	str.w	r3, [r0], #4
    e0e0:	f851 3b04 	ldr.w	r3, [r1], #4
    e0e4:	f840 3b04 	str.w	r3, [r0], #4
    e0e8:	f851 3b04 	ldr.w	r3, [r1], #4
    e0ec:	f840 3b04 	str.w	r3, [r0], #4
    e0f0:	f851 3b04 	ldr.w	r3, [r1], #4
    e0f4:	f840 3b04 	str.w	r3, [r0], #4
    e0f8:	f851 3b04 	ldr.w	r3, [r1], #4
    e0fc:	f840 3b04 	str.w	r3, [r0], #4
    e100:	f851 3b04 	ldr.w	r3, [r1], #4
    e104:	f840 3b04 	str.w	r3, [r0], #4
    e108:	3a40      	subs	r2, #64	; 0x40
    e10a:	d2bd      	bcs.n	e088 <memcpy+0x10>
    e10c:	3230      	adds	r2, #48	; 0x30
    e10e:	d311      	bcc.n	e134 <memcpy+0xbc>
    e110:	f851 3b04 	ldr.w	r3, [r1], #4
    e114:	f840 3b04 	str.w	r3, [r0], #4
    e118:	f851 3b04 	ldr.w	r3, [r1], #4
    e11c:	f840 3b04 	str.w	r3, [r0], #4
    e120:	f851 3b04 	ldr.w	r3, [r1], #4
    e124:	f840 3b04 	str.w	r3, [r0], #4
    e128:	f851 3b04 	ldr.w	r3, [r1], #4
    e12c:	f840 3b04 	str.w	r3, [r0], #4
    e130:	3a10      	subs	r2, #16
    e132:	d2ed      	bcs.n	e110 <memcpy+0x98>
    e134:	320c      	adds	r2, #12
    e136:	d305      	bcc.n	e144 <memcpy+0xcc>
    e138:	f851 3b04 	ldr.w	r3, [r1], #4
    e13c:	f840 3b04 	str.w	r3, [r0], #4
    e140:	3a04      	subs	r2, #4
    e142:	d2f9      	bcs.n	e138 <memcpy+0xc0>
    e144:	3204      	adds	r2, #4
    e146:	d008      	beq.n	e15a <memcpy+0xe2>
    e148:	07d2      	lsls	r2, r2, #31
    e14a:	bf1c      	itt	ne
    e14c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    e150:	f800 3b01 	strbne.w	r3, [r0], #1
    e154:	d301      	bcc.n	e15a <memcpy+0xe2>
    e156:	880b      	ldrh	r3, [r1, #0]
    e158:	8003      	strh	r3, [r0, #0]
    e15a:	4660      	mov	r0, ip
    e15c:	4770      	bx	lr
    e15e:	bf00      	nop
    e160:	2a08      	cmp	r2, #8
    e162:	d313      	bcc.n	e18c <memcpy+0x114>
    e164:	078b      	lsls	r3, r1, #30
    e166:	d08d      	beq.n	e084 <memcpy+0xc>
    e168:	f010 0303 	ands.w	r3, r0, #3
    e16c:	d08a      	beq.n	e084 <memcpy+0xc>
    e16e:	f1c3 0304 	rsb	r3, r3, #4
    e172:	1ad2      	subs	r2, r2, r3
    e174:	07db      	lsls	r3, r3, #31
    e176:	bf1c      	itt	ne
    e178:	f811 3b01 	ldrbne.w	r3, [r1], #1
    e17c:	f800 3b01 	strbne.w	r3, [r0], #1
    e180:	d380      	bcc.n	e084 <memcpy+0xc>
    e182:	f831 3b02 	ldrh.w	r3, [r1], #2
    e186:	f820 3b02 	strh.w	r3, [r0], #2
    e18a:	e77b      	b.n	e084 <memcpy+0xc>
    e18c:	3a04      	subs	r2, #4
    e18e:	d3d9      	bcc.n	e144 <memcpy+0xcc>
    e190:	3a01      	subs	r2, #1
    e192:	f811 3b01 	ldrb.w	r3, [r1], #1
    e196:	f800 3b01 	strb.w	r3, [r0], #1
    e19a:	d2f9      	bcs.n	e190 <memcpy+0x118>
    e19c:	780b      	ldrb	r3, [r1, #0]
    e19e:	7003      	strb	r3, [r0, #0]
    e1a0:	784b      	ldrb	r3, [r1, #1]
    e1a2:	7043      	strb	r3, [r0, #1]
    e1a4:	788b      	ldrb	r3, [r1, #2]
    e1a6:	7083      	strb	r3, [r0, #2]
    e1a8:	4660      	mov	r0, ip
    e1aa:	4770      	bx	lr

0000e1ac <memmove>:
    e1ac:	4288      	cmp	r0, r1
    e1ae:	b4f0      	push	{r4, r5, r6, r7}
    e1b0:	d910      	bls.n	e1d4 <memmove+0x28>
    e1b2:	188c      	adds	r4, r1, r2
    e1b4:	42a0      	cmp	r0, r4
    e1b6:	d20d      	bcs.n	e1d4 <memmove+0x28>
    e1b8:	1885      	adds	r5, r0, r2
    e1ba:	1e53      	subs	r3, r2, #1
    e1bc:	b142      	cbz	r2, e1d0 <memmove+0x24>
    e1be:	4621      	mov	r1, r4
    e1c0:	462a      	mov	r2, r5
    e1c2:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    e1c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
    e1ca:	3b01      	subs	r3, #1
    e1cc:	1c5c      	adds	r4, r3, #1
    e1ce:	d1f8      	bne.n	e1c2 <memmove+0x16>
    e1d0:	bcf0      	pop	{r4, r5, r6, r7}
    e1d2:	4770      	bx	lr
    e1d4:	2a0f      	cmp	r2, #15
    e1d6:	d93f      	bls.n	e258 <memmove+0xac>
    e1d8:	ea40 0301 	orr.w	r3, r0, r1
    e1dc:	079b      	lsls	r3, r3, #30
    e1de:	d13f      	bne.n	e260 <memmove+0xb4>
    e1e0:	f1a2 0710 	sub.w	r7, r2, #16
    e1e4:	093f      	lsrs	r7, r7, #4
    e1e6:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    e1ea:	3610      	adds	r6, #16
    e1ec:	460c      	mov	r4, r1
    e1ee:	4603      	mov	r3, r0
    e1f0:	6825      	ldr	r5, [r4, #0]
    e1f2:	601d      	str	r5, [r3, #0]
    e1f4:	6865      	ldr	r5, [r4, #4]
    e1f6:	605d      	str	r5, [r3, #4]
    e1f8:	68a5      	ldr	r5, [r4, #8]
    e1fa:	609d      	str	r5, [r3, #8]
    e1fc:	68e5      	ldr	r5, [r4, #12]
    e1fe:	60dd      	str	r5, [r3, #12]
    e200:	3310      	adds	r3, #16
    e202:	42b3      	cmp	r3, r6
    e204:	f104 0410 	add.w	r4, r4, #16
    e208:	d1f2      	bne.n	e1f0 <memmove+0x44>
    e20a:	1c7b      	adds	r3, r7, #1
    e20c:	f002 0c0f 	and.w	ip, r2, #15
    e210:	011b      	lsls	r3, r3, #4
    e212:	f1bc 0f03 	cmp.w	ip, #3
    e216:	4419      	add	r1, r3
    e218:	4403      	add	r3, r0
    e21a:	d923      	bls.n	e264 <memmove+0xb8>
    e21c:	460e      	mov	r6, r1
    e21e:	461d      	mov	r5, r3
    e220:	4664      	mov	r4, ip
    e222:	3c04      	subs	r4, #4
    e224:	f856 7b04 	ldr.w	r7, [r6], #4
    e228:	f845 7b04 	str.w	r7, [r5], #4
    e22c:	2c03      	cmp	r4, #3
    e22e:	d8f8      	bhi.n	e222 <memmove+0x76>
    e230:	f1ac 0404 	sub.w	r4, ip, #4
    e234:	f024 0403 	bic.w	r4, r4, #3
    e238:	3404      	adds	r4, #4
    e23a:	f002 0203 	and.w	r2, r2, #3
    e23e:	4423      	add	r3, r4
    e240:	4421      	add	r1, r4
    e242:	2a00      	cmp	r2, #0
    e244:	d0c4      	beq.n	e1d0 <memmove+0x24>
    e246:	441a      	add	r2, r3
    e248:	f811 4b01 	ldrb.w	r4, [r1], #1
    e24c:	f803 4b01 	strb.w	r4, [r3], #1
    e250:	4293      	cmp	r3, r2
    e252:	d1f9      	bne.n	e248 <memmove+0x9c>
    e254:	bcf0      	pop	{r4, r5, r6, r7}
    e256:	4770      	bx	lr
    e258:	4603      	mov	r3, r0
    e25a:	2a00      	cmp	r2, #0
    e25c:	d1f3      	bne.n	e246 <memmove+0x9a>
    e25e:	e7b7      	b.n	e1d0 <memmove+0x24>
    e260:	4603      	mov	r3, r0
    e262:	e7f0      	b.n	e246 <memmove+0x9a>
    e264:	4662      	mov	r2, ip
    e266:	2a00      	cmp	r2, #0
    e268:	d1ed      	bne.n	e246 <memmove+0x9a>
    e26a:	e7b1      	b.n	e1d0 <memmove+0x24>

0000e26c <memset>:
    e26c:	b4f0      	push	{r4, r5, r6, r7}
    e26e:	0784      	lsls	r4, r0, #30
    e270:	d043      	beq.n	e2fa <memset+0x8e>
    e272:	1e54      	subs	r4, r2, #1
    e274:	2a00      	cmp	r2, #0
    e276:	d03e      	beq.n	e2f6 <memset+0x8a>
    e278:	b2cd      	uxtb	r5, r1
    e27a:	4603      	mov	r3, r0
    e27c:	e003      	b.n	e286 <memset+0x1a>
    e27e:	1e62      	subs	r2, r4, #1
    e280:	2c00      	cmp	r4, #0
    e282:	d038      	beq.n	e2f6 <memset+0x8a>
    e284:	4614      	mov	r4, r2
    e286:	f803 5b01 	strb.w	r5, [r3], #1
    e28a:	079a      	lsls	r2, r3, #30
    e28c:	d1f7      	bne.n	e27e <memset+0x12>
    e28e:	2c03      	cmp	r4, #3
    e290:	d92a      	bls.n	e2e8 <memset+0x7c>
    e292:	b2cd      	uxtb	r5, r1
    e294:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    e298:	2c0f      	cmp	r4, #15
    e29a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    e29e:	d915      	bls.n	e2cc <memset+0x60>
    e2a0:	f1a4 0710 	sub.w	r7, r4, #16
    e2a4:	093f      	lsrs	r7, r7, #4
    e2a6:	f103 0610 	add.w	r6, r3, #16
    e2aa:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    e2ae:	461a      	mov	r2, r3
    e2b0:	6015      	str	r5, [r2, #0]
    e2b2:	6055      	str	r5, [r2, #4]
    e2b4:	6095      	str	r5, [r2, #8]
    e2b6:	60d5      	str	r5, [r2, #12]
    e2b8:	3210      	adds	r2, #16
    e2ba:	42b2      	cmp	r2, r6
    e2bc:	d1f8      	bne.n	e2b0 <memset+0x44>
    e2be:	f004 040f 	and.w	r4, r4, #15
    e2c2:	3701      	adds	r7, #1
    e2c4:	2c03      	cmp	r4, #3
    e2c6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    e2ca:	d90d      	bls.n	e2e8 <memset+0x7c>
    e2cc:	461e      	mov	r6, r3
    e2ce:	4622      	mov	r2, r4
    e2d0:	3a04      	subs	r2, #4
    e2d2:	2a03      	cmp	r2, #3
    e2d4:	f846 5b04 	str.w	r5, [r6], #4
    e2d8:	d8fa      	bhi.n	e2d0 <memset+0x64>
    e2da:	1f22      	subs	r2, r4, #4
    e2dc:	f022 0203 	bic.w	r2, r2, #3
    e2e0:	3204      	adds	r2, #4
    e2e2:	4413      	add	r3, r2
    e2e4:	f004 0403 	and.w	r4, r4, #3
    e2e8:	b12c      	cbz	r4, e2f6 <memset+0x8a>
    e2ea:	b2c9      	uxtb	r1, r1
    e2ec:	441c      	add	r4, r3
    e2ee:	f803 1b01 	strb.w	r1, [r3], #1
    e2f2:	42a3      	cmp	r3, r4
    e2f4:	d1fb      	bne.n	e2ee <memset+0x82>
    e2f6:	bcf0      	pop	{r4, r5, r6, r7}
    e2f8:	4770      	bx	lr
    e2fa:	4614      	mov	r4, r2
    e2fc:	4603      	mov	r3, r0
    e2fe:	e7c6      	b.n	e28e <memset+0x22>

0000e300 <__malloc_lock>:
    e300:	4770      	bx	lr
    e302:	bf00      	nop

0000e304 <__malloc_unlock>:
    e304:	4770      	bx	lr
    e306:	bf00      	nop

0000e308 <_realloc_r>:
    e308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e30c:	460c      	mov	r4, r1
    e30e:	b083      	sub	sp, #12
    e310:	4690      	mov	r8, r2
    e312:	4681      	mov	r9, r0
    e314:	2900      	cmp	r1, #0
    e316:	f000 80e2 	beq.w	e4de <_realloc_r+0x1d6>
    e31a:	f7ff fff1 	bl	e300 <__malloc_lock>
    e31e:	f108 060b 	add.w	r6, r8, #11
    e322:	f854 3c04 	ldr.w	r3, [r4, #-4]
    e326:	2e16      	cmp	r6, #22
    e328:	f023 0503 	bic.w	r5, r3, #3
    e32c:	f1a4 0708 	sub.w	r7, r4, #8
    e330:	d84b      	bhi.n	e3ca <_realloc_r+0xc2>
    e332:	2110      	movs	r1, #16
    e334:	460e      	mov	r6, r1
    e336:	45b0      	cmp	r8, r6
    e338:	d84c      	bhi.n	e3d4 <_realloc_r+0xcc>
    e33a:	428d      	cmp	r5, r1
    e33c:	da78      	bge.n	e430 <_realloc_r+0x128>
    e33e:	f8df b390 	ldr.w	fp, [pc, #912]	; e6d0 <_realloc_r+0x3c8>
    e342:	f8db e008 	ldr.w	lr, [fp, #8]
    e346:	1978      	adds	r0, r7, r5
    e348:	4586      	cmp	lr, r0
    e34a:	f000 80ce 	beq.w	e4ea <_realloc_r+0x1e2>
    e34e:	6842      	ldr	r2, [r0, #4]
    e350:	f022 0c01 	bic.w	ip, r2, #1
    e354:	4484      	add	ip, r0
    e356:	f8dc c004 	ldr.w	ip, [ip, #4]
    e35a:	f01c 0f01 	tst.w	ip, #1
    e35e:	d07a      	beq.n	e456 <_realloc_r+0x14e>
    e360:	2200      	movs	r2, #0
    e362:	4610      	mov	r0, r2
    e364:	07db      	lsls	r3, r3, #31
    e366:	f100 8092 	bmi.w	e48e <_realloc_r+0x186>
    e36a:	f854 3c08 	ldr.w	r3, [r4, #-8]
    e36e:	ebc3 0a07 	rsb	sl, r3, r7
    e372:	f8da 3004 	ldr.w	r3, [sl, #4]
    e376:	f023 0303 	bic.w	r3, r3, #3
    e37a:	442b      	add	r3, r5
    e37c:	b388      	cbz	r0, e3e2 <_realloc_r+0xda>
    e37e:	4570      	cmp	r0, lr
    e380:	f000 80ed 	beq.w	e55e <_realloc_r+0x256>
    e384:	eb02 0e03 	add.w	lr, r2, r3
    e388:	458e      	cmp	lr, r1
    e38a:	db2a      	blt.n	e3e2 <_realloc_r+0xda>
    e38c:	68c3      	ldr	r3, [r0, #12]
    e38e:	6882      	ldr	r2, [r0, #8]
    e390:	4657      	mov	r7, sl
    e392:	60d3      	str	r3, [r2, #12]
    e394:	609a      	str	r2, [r3, #8]
    e396:	f857 1f08 	ldr.w	r1, [r7, #8]!
    e39a:	f8da 300c 	ldr.w	r3, [sl, #12]
    e39e:	60cb      	str	r3, [r1, #12]
    e3a0:	1f2a      	subs	r2, r5, #4
    e3a2:	2a24      	cmp	r2, #36	; 0x24
    e3a4:	6099      	str	r1, [r3, #8]
    e3a6:	f200 8126 	bhi.w	e5f6 <_realloc_r+0x2ee>
    e3aa:	2a13      	cmp	r2, #19
    e3ac:	f240 80b3 	bls.w	e516 <_realloc_r+0x20e>
    e3b0:	6823      	ldr	r3, [r4, #0]
    e3b2:	f8ca 3008 	str.w	r3, [sl, #8]
    e3b6:	6863      	ldr	r3, [r4, #4]
    e3b8:	f8ca 300c 	str.w	r3, [sl, #12]
    e3bc:	2a1b      	cmp	r2, #27
    e3be:	f200 8130 	bhi.w	e622 <_realloc_r+0x31a>
    e3c2:	3408      	adds	r4, #8
    e3c4:	f10a 0310 	add.w	r3, sl, #16
    e3c8:	e0a6      	b.n	e518 <_realloc_r+0x210>
    e3ca:	f026 0607 	bic.w	r6, r6, #7
    e3ce:	2e00      	cmp	r6, #0
    e3d0:	4631      	mov	r1, r6
    e3d2:	dab0      	bge.n	e336 <_realloc_r+0x2e>
    e3d4:	230c      	movs	r3, #12
    e3d6:	2000      	movs	r0, #0
    e3d8:	f8c9 3000 	str.w	r3, [r9]
    e3dc:	b003      	add	sp, #12
    e3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3e2:	428b      	cmp	r3, r1
    e3e4:	db53      	blt.n	e48e <_realloc_r+0x186>
    e3e6:	4657      	mov	r7, sl
    e3e8:	f8da 100c 	ldr.w	r1, [sl, #12]
    e3ec:	f857 0f08 	ldr.w	r0, [r7, #8]!
    e3f0:	1f2a      	subs	r2, r5, #4
    e3f2:	2a24      	cmp	r2, #36	; 0x24
    e3f4:	60c1      	str	r1, [r0, #12]
    e3f6:	6088      	str	r0, [r1, #8]
    e3f8:	f200 8109 	bhi.w	e60e <_realloc_r+0x306>
    e3fc:	2a13      	cmp	r2, #19
    e3fe:	f240 8104 	bls.w	e60a <_realloc_r+0x302>
    e402:	6821      	ldr	r1, [r4, #0]
    e404:	f8ca 1008 	str.w	r1, [sl, #8]
    e408:	6861      	ldr	r1, [r4, #4]
    e40a:	f8ca 100c 	str.w	r1, [sl, #12]
    e40e:	2a1b      	cmp	r2, #27
    e410:	f200 811c 	bhi.w	e64c <_realloc_r+0x344>
    e414:	3408      	adds	r4, #8
    e416:	f10a 0210 	add.w	r2, sl, #16
    e41a:	6821      	ldr	r1, [r4, #0]
    e41c:	6011      	str	r1, [r2, #0]
    e41e:	6861      	ldr	r1, [r4, #4]
    e420:	6051      	str	r1, [r2, #4]
    e422:	68a1      	ldr	r1, [r4, #8]
    e424:	6091      	str	r1, [r2, #8]
    e426:	461d      	mov	r5, r3
    e428:	f8da 3004 	ldr.w	r3, [sl, #4]
    e42c:	463c      	mov	r4, r7
    e42e:	4657      	mov	r7, sl
    e430:	1baa      	subs	r2, r5, r6
    e432:	2a0f      	cmp	r2, #15
    e434:	f003 0301 	and.w	r3, r3, #1
    e438:	d819      	bhi.n	e46e <_realloc_r+0x166>
    e43a:	432b      	orrs	r3, r5
    e43c:	443d      	add	r5, r7
    e43e:	607b      	str	r3, [r7, #4]
    e440:	686b      	ldr	r3, [r5, #4]
    e442:	f043 0301 	orr.w	r3, r3, #1
    e446:	606b      	str	r3, [r5, #4]
    e448:	4648      	mov	r0, r9
    e44a:	f7ff ff5b 	bl	e304 <__malloc_unlock>
    e44e:	4620      	mov	r0, r4
    e450:	b003      	add	sp, #12
    e452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e456:	f022 0203 	bic.w	r2, r2, #3
    e45a:	eb02 0c05 	add.w	ip, r2, r5
    e45e:	458c      	cmp	ip, r1
    e460:	db80      	blt.n	e364 <_realloc_r+0x5c>
    e462:	68c2      	ldr	r2, [r0, #12]
    e464:	6881      	ldr	r1, [r0, #8]
    e466:	4665      	mov	r5, ip
    e468:	60ca      	str	r2, [r1, #12]
    e46a:	6091      	str	r1, [r2, #8]
    e46c:	e7e0      	b.n	e430 <_realloc_r+0x128>
    e46e:	19b9      	adds	r1, r7, r6
    e470:	f042 0001 	orr.w	r0, r2, #1
    e474:	431e      	orrs	r6, r3
    e476:	440a      	add	r2, r1
    e478:	607e      	str	r6, [r7, #4]
    e47a:	6048      	str	r0, [r1, #4]
    e47c:	6853      	ldr	r3, [r2, #4]
    e47e:	f043 0301 	orr.w	r3, r3, #1
    e482:	3108      	adds	r1, #8
    e484:	6053      	str	r3, [r2, #4]
    e486:	4648      	mov	r0, r9
    e488:	f000 fa70 	bl	e96c <_free_r>
    e48c:	e7dc      	b.n	e448 <_realloc_r+0x140>
    e48e:	4641      	mov	r1, r8
    e490:	4648      	mov	r0, r9
    e492:	f7ff fb55 	bl	db40 <_malloc_r>
    e496:	4680      	mov	r8, r0
    e498:	b1d0      	cbz	r0, e4d0 <_realloc_r+0x1c8>
    e49a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    e49e:	f023 0201 	bic.w	r2, r3, #1
    e4a2:	443a      	add	r2, r7
    e4a4:	f1a0 0108 	sub.w	r1, r0, #8
    e4a8:	4291      	cmp	r1, r2
    e4aa:	f000 809e 	beq.w	e5ea <_realloc_r+0x2e2>
    e4ae:	1f2a      	subs	r2, r5, #4
    e4b0:	2a24      	cmp	r2, #36	; 0x24
    e4b2:	d850      	bhi.n	e556 <_realloc_r+0x24e>
    e4b4:	2a13      	cmp	r2, #19
    e4b6:	d823      	bhi.n	e500 <_realloc_r+0x1f8>
    e4b8:	4603      	mov	r3, r0
    e4ba:	4622      	mov	r2, r4
    e4bc:	6811      	ldr	r1, [r2, #0]
    e4be:	6019      	str	r1, [r3, #0]
    e4c0:	6851      	ldr	r1, [r2, #4]
    e4c2:	6059      	str	r1, [r3, #4]
    e4c4:	6892      	ldr	r2, [r2, #8]
    e4c6:	609a      	str	r2, [r3, #8]
    e4c8:	4621      	mov	r1, r4
    e4ca:	4648      	mov	r0, r9
    e4cc:	f000 fa4e 	bl	e96c <_free_r>
    e4d0:	4648      	mov	r0, r9
    e4d2:	f7ff ff17 	bl	e304 <__malloc_unlock>
    e4d6:	4640      	mov	r0, r8
    e4d8:	b003      	add	sp, #12
    e4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e4de:	4611      	mov	r1, r2
    e4e0:	b003      	add	sp, #12
    e4e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4e6:	f7ff bb2b 	b.w	db40 <_malloc_r>
    e4ea:	f8de 2004 	ldr.w	r2, [lr, #4]
    e4ee:	f022 0203 	bic.w	r2, r2, #3
    e4f2:	1950      	adds	r0, r2, r5
    e4f4:	f106 0c10 	add.w	ip, r6, #16
    e4f8:	4560      	cmp	r0, ip
    e4fa:	da19      	bge.n	e530 <_realloc_r+0x228>
    e4fc:	4670      	mov	r0, lr
    e4fe:	e731      	b.n	e364 <_realloc_r+0x5c>
    e500:	6823      	ldr	r3, [r4, #0]
    e502:	6003      	str	r3, [r0, #0]
    e504:	6863      	ldr	r3, [r4, #4]
    e506:	6043      	str	r3, [r0, #4]
    e508:	2a1b      	cmp	r2, #27
    e50a:	d863      	bhi.n	e5d4 <_realloc_r+0x2cc>
    e50c:	f100 0308 	add.w	r3, r0, #8
    e510:	f104 0208 	add.w	r2, r4, #8
    e514:	e7d2      	b.n	e4bc <_realloc_r+0x1b4>
    e516:	463b      	mov	r3, r7
    e518:	6822      	ldr	r2, [r4, #0]
    e51a:	601a      	str	r2, [r3, #0]
    e51c:	6862      	ldr	r2, [r4, #4]
    e51e:	605a      	str	r2, [r3, #4]
    e520:	68a2      	ldr	r2, [r4, #8]
    e522:	609a      	str	r2, [r3, #8]
    e524:	463c      	mov	r4, r7
    e526:	4675      	mov	r5, lr
    e528:	f8da 3004 	ldr.w	r3, [sl, #4]
    e52c:	4657      	mov	r7, sl
    e52e:	e77f      	b.n	e430 <_realloc_r+0x128>
    e530:	4437      	add	r7, r6
    e532:	1b83      	subs	r3, r0, r6
    e534:	f043 0301 	orr.w	r3, r3, #1
    e538:	f8cb 7008 	str.w	r7, [fp, #8]
    e53c:	607b      	str	r3, [r7, #4]
    e53e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    e542:	f003 0301 	and.w	r3, r3, #1
    e546:	431e      	orrs	r6, r3
    e548:	4648      	mov	r0, r9
    e54a:	f844 6c04 	str.w	r6, [r4, #-4]
    e54e:	f7ff fed9 	bl	e304 <__malloc_unlock>
    e552:	4620      	mov	r0, r4
    e554:	e77c      	b.n	e450 <_realloc_r+0x148>
    e556:	4621      	mov	r1, r4
    e558:	f7ff fe28 	bl	e1ac <memmove>
    e55c:	e7b4      	b.n	e4c8 <_realloc_r+0x1c0>
    e55e:	eb02 0c03 	add.w	ip, r2, r3
    e562:	f106 0210 	add.w	r2, r6, #16
    e566:	4594      	cmp	ip, r2
    e568:	f6ff af3b 	blt.w	e3e2 <_realloc_r+0xda>
    e56c:	4657      	mov	r7, sl
    e56e:	f8da 300c 	ldr.w	r3, [sl, #12]
    e572:	f857 1f08 	ldr.w	r1, [r7, #8]!
    e576:	1f2a      	subs	r2, r5, #4
    e578:	2a24      	cmp	r2, #36	; 0x24
    e57a:	60cb      	str	r3, [r1, #12]
    e57c:	6099      	str	r1, [r3, #8]
    e57e:	f200 8087 	bhi.w	e690 <_realloc_r+0x388>
    e582:	2a13      	cmp	r2, #19
    e584:	d978      	bls.n	e678 <_realloc_r+0x370>
    e586:	6823      	ldr	r3, [r4, #0]
    e588:	f8ca 3008 	str.w	r3, [sl, #8]
    e58c:	6863      	ldr	r3, [r4, #4]
    e58e:	f8ca 300c 	str.w	r3, [sl, #12]
    e592:	2a1b      	cmp	r2, #27
    e594:	f200 8085 	bhi.w	e6a2 <_realloc_r+0x39a>
    e598:	3408      	adds	r4, #8
    e59a:	f10a 0310 	add.w	r3, sl, #16
    e59e:	6822      	ldr	r2, [r4, #0]
    e5a0:	601a      	str	r2, [r3, #0]
    e5a2:	6862      	ldr	r2, [r4, #4]
    e5a4:	605a      	str	r2, [r3, #4]
    e5a6:	68a2      	ldr	r2, [r4, #8]
    e5a8:	609a      	str	r2, [r3, #8]
    e5aa:	eb0a 0306 	add.w	r3, sl, r6
    e5ae:	ebc6 020c 	rsb	r2, r6, ip
    e5b2:	f042 0201 	orr.w	r2, r2, #1
    e5b6:	f8cb 3008 	str.w	r3, [fp, #8]
    e5ba:	605a      	str	r2, [r3, #4]
    e5bc:	f8da 3004 	ldr.w	r3, [sl, #4]
    e5c0:	f003 0301 	and.w	r3, r3, #1
    e5c4:	431e      	orrs	r6, r3
    e5c6:	4648      	mov	r0, r9
    e5c8:	f8ca 6004 	str.w	r6, [sl, #4]
    e5cc:	f7ff fe9a 	bl	e304 <__malloc_unlock>
    e5d0:	4638      	mov	r0, r7
    e5d2:	e73d      	b.n	e450 <_realloc_r+0x148>
    e5d4:	68a3      	ldr	r3, [r4, #8]
    e5d6:	6083      	str	r3, [r0, #8]
    e5d8:	68e3      	ldr	r3, [r4, #12]
    e5da:	60c3      	str	r3, [r0, #12]
    e5dc:	2a24      	cmp	r2, #36	; 0x24
    e5de:	d02c      	beq.n	e63a <_realloc_r+0x332>
    e5e0:	f100 0310 	add.w	r3, r0, #16
    e5e4:	f104 0210 	add.w	r2, r4, #16
    e5e8:	e768      	b.n	e4bc <_realloc_r+0x1b4>
    e5ea:	f850 2c04 	ldr.w	r2, [r0, #-4]
    e5ee:	f022 0203 	bic.w	r2, r2, #3
    e5f2:	4415      	add	r5, r2
    e5f4:	e71c      	b.n	e430 <_realloc_r+0x128>
    e5f6:	4621      	mov	r1, r4
    e5f8:	4638      	mov	r0, r7
    e5fa:	4675      	mov	r5, lr
    e5fc:	463c      	mov	r4, r7
    e5fe:	f7ff fdd5 	bl	e1ac <memmove>
    e602:	4657      	mov	r7, sl
    e604:	f8da 3004 	ldr.w	r3, [sl, #4]
    e608:	e712      	b.n	e430 <_realloc_r+0x128>
    e60a:	463a      	mov	r2, r7
    e60c:	e705      	b.n	e41a <_realloc_r+0x112>
    e60e:	4621      	mov	r1, r4
    e610:	4638      	mov	r0, r7
    e612:	461d      	mov	r5, r3
    e614:	463c      	mov	r4, r7
    e616:	f7ff fdc9 	bl	e1ac <memmove>
    e61a:	4657      	mov	r7, sl
    e61c:	f8da 3004 	ldr.w	r3, [sl, #4]
    e620:	e706      	b.n	e430 <_realloc_r+0x128>
    e622:	68a3      	ldr	r3, [r4, #8]
    e624:	f8ca 3010 	str.w	r3, [sl, #16]
    e628:	68e3      	ldr	r3, [r4, #12]
    e62a:	f8ca 3014 	str.w	r3, [sl, #20]
    e62e:	2a24      	cmp	r2, #36	; 0x24
    e630:	d018      	beq.n	e664 <_realloc_r+0x35c>
    e632:	3410      	adds	r4, #16
    e634:	f10a 0318 	add.w	r3, sl, #24
    e638:	e76e      	b.n	e518 <_realloc_r+0x210>
    e63a:	6923      	ldr	r3, [r4, #16]
    e63c:	6103      	str	r3, [r0, #16]
    e63e:	6963      	ldr	r3, [r4, #20]
    e640:	6143      	str	r3, [r0, #20]
    e642:	f104 0218 	add.w	r2, r4, #24
    e646:	f100 0318 	add.w	r3, r0, #24
    e64a:	e737      	b.n	e4bc <_realloc_r+0x1b4>
    e64c:	68a1      	ldr	r1, [r4, #8]
    e64e:	f8ca 1010 	str.w	r1, [sl, #16]
    e652:	68e1      	ldr	r1, [r4, #12]
    e654:	f8ca 1014 	str.w	r1, [sl, #20]
    e658:	2a24      	cmp	r2, #36	; 0x24
    e65a:	d00f      	beq.n	e67c <_realloc_r+0x374>
    e65c:	3410      	adds	r4, #16
    e65e:	f10a 0218 	add.w	r2, sl, #24
    e662:	e6da      	b.n	e41a <_realloc_r+0x112>
    e664:	6923      	ldr	r3, [r4, #16]
    e666:	f8ca 3018 	str.w	r3, [sl, #24]
    e66a:	6963      	ldr	r3, [r4, #20]
    e66c:	f8ca 301c 	str.w	r3, [sl, #28]
    e670:	3418      	adds	r4, #24
    e672:	f10a 0320 	add.w	r3, sl, #32
    e676:	e74f      	b.n	e518 <_realloc_r+0x210>
    e678:	463b      	mov	r3, r7
    e67a:	e790      	b.n	e59e <_realloc_r+0x296>
    e67c:	6922      	ldr	r2, [r4, #16]
    e67e:	f8ca 2018 	str.w	r2, [sl, #24]
    e682:	6962      	ldr	r2, [r4, #20]
    e684:	f8ca 201c 	str.w	r2, [sl, #28]
    e688:	3418      	adds	r4, #24
    e68a:	f10a 0220 	add.w	r2, sl, #32
    e68e:	e6c4      	b.n	e41a <_realloc_r+0x112>
    e690:	4621      	mov	r1, r4
    e692:	4638      	mov	r0, r7
    e694:	f8cd c004 	str.w	ip, [sp, #4]
    e698:	f7ff fd88 	bl	e1ac <memmove>
    e69c:	f8dd c004 	ldr.w	ip, [sp, #4]
    e6a0:	e783      	b.n	e5aa <_realloc_r+0x2a2>
    e6a2:	68a3      	ldr	r3, [r4, #8]
    e6a4:	f8ca 3010 	str.w	r3, [sl, #16]
    e6a8:	68e3      	ldr	r3, [r4, #12]
    e6aa:	f8ca 3014 	str.w	r3, [sl, #20]
    e6ae:	2a24      	cmp	r2, #36	; 0x24
    e6b0:	d003      	beq.n	e6ba <_realloc_r+0x3b2>
    e6b2:	3410      	adds	r4, #16
    e6b4:	f10a 0318 	add.w	r3, sl, #24
    e6b8:	e771      	b.n	e59e <_realloc_r+0x296>
    e6ba:	6923      	ldr	r3, [r4, #16]
    e6bc:	f8ca 3018 	str.w	r3, [sl, #24]
    e6c0:	6963      	ldr	r3, [r4, #20]
    e6c2:	f8ca 301c 	str.w	r3, [sl, #28]
    e6c6:	3418      	adds	r4, #24
    e6c8:	f10a 0320 	add.w	r3, sl, #32
    e6cc:	e767      	b.n	e59e <_realloc_r+0x296>
    e6ce:	bf00      	nop
    e6d0:	2000121c 	.word	0x2000121c

0000e6d4 <_sbrk_r>:
    e6d4:	b538      	push	{r3, r4, r5, lr}
    e6d6:	4c07      	ldr	r4, [pc, #28]	; (e6f4 <_sbrk_r+0x20>)
    e6d8:	2300      	movs	r3, #0
    e6da:	4605      	mov	r5, r0
    e6dc:	4608      	mov	r0, r1
    e6de:	6023      	str	r3, [r4, #0]
    e6e0:	f7f8 fa7a 	bl	6bd8 <_sbrk>
    e6e4:	1c43      	adds	r3, r0, #1
    e6e6:	d000      	beq.n	e6ea <_sbrk_r+0x16>
    e6e8:	bd38      	pop	{r3, r4, r5, pc}
    e6ea:	6823      	ldr	r3, [r4, #0]
    e6ec:	2b00      	cmp	r3, #0
    e6ee:	d0fb      	beq.n	e6e8 <_sbrk_r+0x14>
    e6f0:	602b      	str	r3, [r5, #0]
    e6f2:	bd38      	pop	{r3, r4, r5, pc}
    e6f4:	20002860 	.word	0x20002860

0000e6f8 <strlen>:
    e6f8:	f020 0103 	bic.w	r1, r0, #3
    e6fc:	f010 0003 	ands.w	r0, r0, #3
    e700:	f1c0 0000 	rsb	r0, r0, #0
    e704:	f851 3b04 	ldr.w	r3, [r1], #4
    e708:	f100 0c04 	add.w	ip, r0, #4
    e70c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    e710:	f06f 0200 	mvn.w	r2, #0
    e714:	bf1c      	itt	ne
    e716:	fa22 f20c 	lsrne.w	r2, r2, ip
    e71a:	4313      	orrne	r3, r2
    e71c:	f04f 0c01 	mov.w	ip, #1
    e720:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    e724:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    e728:	eba3 020c 	sub.w	r2, r3, ip
    e72c:	ea22 0203 	bic.w	r2, r2, r3
    e730:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    e734:	bf04      	itt	eq
    e736:	f851 3b04 	ldreq.w	r3, [r1], #4
    e73a:	3004      	addeq	r0, #4
    e73c:	d0f4      	beq.n	e728 <strlen+0x30>
    e73e:	f013 0fff 	tst.w	r3, #255	; 0xff
    e742:	bf1f      	itttt	ne
    e744:	3001      	addne	r0, #1
    e746:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
    e74a:	3001      	addne	r0, #1
    e74c:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
    e750:	bf18      	it	ne
    e752:	3001      	addne	r0, #1
    e754:	4770      	bx	lr
    e756:	bf00      	nop

0000e758 <_vdprintf_r>:
    e758:	b5f0      	push	{r4, r5, r6, r7, lr}
    e75a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    e75e:	ad04      	add	r5, sp, #16
    e760:	9300      	str	r3, [sp, #0]
    e762:	f44f 7400 	mov.w	r4, #512	; 0x200
    e766:	4613      	mov	r3, r2
    e768:	460f      	mov	r7, r1
    e76a:	aa03      	add	r2, sp, #12
    e76c:	4629      	mov	r1, r5
    e76e:	9403      	str	r4, [sp, #12]
    e770:	4606      	mov	r6, r0
    e772:	f000 fd1f 	bl	f1b4 <_vasnprintf_r>
    e776:	4604      	mov	r4, r0
    e778:	b180      	cbz	r0, e79c <_vdprintf_r+0x44>
    e77a:	4639      	mov	r1, r7
    e77c:	4630      	mov	r0, r6
    e77e:	4622      	mov	r2, r4
    e780:	9b03      	ldr	r3, [sp, #12]
    e782:	f000 f81b 	bl	e7bc <_write_r>
    e786:	42ac      	cmp	r4, r5
    e788:	9003      	str	r0, [sp, #12]
    e78a:	d004      	beq.n	e796 <_vdprintf_r+0x3e>
    e78c:	4630      	mov	r0, r6
    e78e:	4621      	mov	r1, r4
    e790:	f000 f8ec 	bl	e96c <_free_r>
    e794:	9803      	ldr	r0, [sp, #12]
    e796:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    e79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e79c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e7a0:	e7f9      	b.n	e796 <_vdprintf_r+0x3e>
    e7a2:	bf00      	nop

0000e7a4 <vdprintf>:
    e7a4:	b430      	push	{r4, r5}
    e7a6:	4c04      	ldr	r4, [pc, #16]	; (e7b8 <vdprintf+0x14>)
    e7a8:	460d      	mov	r5, r1
    e7aa:	4613      	mov	r3, r2
    e7ac:	4601      	mov	r1, r0
    e7ae:	462a      	mov	r2, r5
    e7b0:	6820      	ldr	r0, [r4, #0]
    e7b2:	bc30      	pop	{r4, r5}
    e7b4:	f7ff bfd0 	b.w	e758 <_vdprintf_r>
    e7b8:	20001218 	.word	0x20001218

0000e7bc <_write_r>:
    e7bc:	b570      	push	{r4, r5, r6, lr}
    e7be:	4c08      	ldr	r4, [pc, #32]	; (e7e0 <_write_r+0x24>)
    e7c0:	4606      	mov	r6, r0
    e7c2:	2500      	movs	r5, #0
    e7c4:	4608      	mov	r0, r1
    e7c6:	4611      	mov	r1, r2
    e7c8:	461a      	mov	r2, r3
    e7ca:	6025      	str	r5, [r4, #0]
    e7cc:	f7fb fbea 	bl	9fa4 <_write>
    e7d0:	1c43      	adds	r3, r0, #1
    e7d2:	d000      	beq.n	e7d6 <_write_r+0x1a>
    e7d4:	bd70      	pop	{r4, r5, r6, pc}
    e7d6:	6823      	ldr	r3, [r4, #0]
    e7d8:	2b00      	cmp	r3, #0
    e7da:	d0fb      	beq.n	e7d4 <_write_r+0x18>
    e7dc:	6033      	str	r3, [r6, #0]
    e7de:	bd70      	pop	{r4, r5, r6, pc}
    e7e0:	20002860 	.word	0x20002860

0000e7e4 <__register_exitproc>:
    e7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7e6:	4c27      	ldr	r4, [pc, #156]	; (e884 <__register_exitproc+0xa0>)
    e7e8:	6826      	ldr	r6, [r4, #0]
    e7ea:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
    e7ee:	b085      	sub	sp, #20
    e7f0:	4607      	mov	r7, r0
    e7f2:	2c00      	cmp	r4, #0
    e7f4:	d041      	beq.n	e87a <__register_exitproc+0x96>
    e7f6:	6865      	ldr	r5, [r4, #4]
    e7f8:	2d1f      	cmp	r5, #31
    e7fa:	dd1e      	ble.n	e83a <__register_exitproc+0x56>
    e7fc:	4822      	ldr	r0, [pc, #136]	; (e888 <__register_exitproc+0xa4>)
    e7fe:	b918      	cbnz	r0, e808 <__register_exitproc+0x24>
    e800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e804:	b005      	add	sp, #20
    e806:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e808:	f44f 70c8 	mov.w	r0, #400	; 0x190
    e80c:	9103      	str	r1, [sp, #12]
    e80e:	9202      	str	r2, [sp, #8]
    e810:	9301      	str	r3, [sp, #4]
    e812:	f7ff f98d 	bl	db30 <malloc>
    e816:	9903      	ldr	r1, [sp, #12]
    e818:	9a02      	ldr	r2, [sp, #8]
    e81a:	9b01      	ldr	r3, [sp, #4]
    e81c:	4604      	mov	r4, r0
    e81e:	2800      	cmp	r0, #0
    e820:	d0ee      	beq.n	e800 <__register_exitproc+0x1c>
    e822:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
    e826:	6025      	str	r5, [r4, #0]
    e828:	2000      	movs	r0, #0
    e82a:	6060      	str	r0, [r4, #4]
    e82c:	4605      	mov	r5, r0
    e82e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    e832:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
    e836:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
    e83a:	b93f      	cbnz	r7, e84c <__register_exitproc+0x68>
    e83c:	1cab      	adds	r3, r5, #2
    e83e:	2000      	movs	r0, #0
    e840:	3501      	adds	r5, #1
    e842:	6065      	str	r5, [r4, #4]
    e844:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    e848:	b005      	add	sp, #20
    e84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e84c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    e850:	f04f 0c01 	mov.w	ip, #1
    e854:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    e858:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
    e85c:	fa0c f205 	lsl.w	r2, ip, r5
    e860:	4316      	orrs	r6, r2
    e862:	2f02      	cmp	r7, #2
    e864:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
    e868:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    e86c:	d1e6      	bne.n	e83c <__register_exitproc+0x58>
    e86e:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    e872:	431a      	orrs	r2, r3
    e874:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    e878:	e7e0      	b.n	e83c <__register_exitproc+0x58>
    e87a:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
    e87e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    e882:	e7b8      	b.n	e7f6 <__register_exitproc+0x12>
    e884:	000124a4 	.word	0x000124a4
    e888:	0000db31 	.word	0x0000db31

0000e88c <register_fini>:
    e88c:	4b02      	ldr	r3, [pc, #8]	; (e898 <register_fini+0xc>)
    e88e:	b113      	cbz	r3, e896 <register_fini+0xa>
    e890:	4802      	ldr	r0, [pc, #8]	; (e89c <register_fini+0x10>)
    e892:	f7fc bd87 	b.w	b3a4 <atexit>
    e896:	4770      	bx	lr
    e898:	00000000 	.word	0x00000000
    e89c:	0000e8a1 	.word	0x0000e8a1

0000e8a0 <__libc_fini_array>:
    e8a0:	b538      	push	{r3, r4, r5, lr}
    e8a2:	4d09      	ldr	r5, [pc, #36]	; (e8c8 <__libc_fini_array+0x28>)
    e8a4:	4c09      	ldr	r4, [pc, #36]	; (e8cc <__libc_fini_array+0x2c>)
    e8a6:	1b64      	subs	r4, r4, r5
    e8a8:	10a4      	asrs	r4, r4, #2
    e8aa:	bf18      	it	ne
    e8ac:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
    e8b0:	d005      	beq.n	e8be <__libc_fini_array+0x1e>
    e8b2:	3c01      	subs	r4, #1
    e8b4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    e8b8:	4798      	blx	r3
    e8ba:	2c00      	cmp	r4, #0
    e8bc:	d1f9      	bne.n	e8b2 <__libc_fini_array+0x12>
    e8be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e8c2:	f003 bedd 	b.w	12680 <__init_array_end>
    e8c6:	bf00      	nop
	...

0000e8d0 <_malloc_trim_r>:
    e8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e8d2:	4d23      	ldr	r5, [pc, #140]	; (e960 <_malloc_trim_r+0x90>)
    e8d4:	460f      	mov	r7, r1
    e8d6:	4604      	mov	r4, r0
    e8d8:	f7ff fd12 	bl	e300 <__malloc_lock>
    e8dc:	68ab      	ldr	r3, [r5, #8]
    e8de:	685e      	ldr	r6, [r3, #4]
    e8e0:	f026 0603 	bic.w	r6, r6, #3
    e8e4:	1bf1      	subs	r1, r6, r7
    e8e6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    e8ea:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    e8ee:	f021 010f 	bic.w	r1, r1, #15
    e8f2:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
    e8f6:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    e8fa:	db07      	blt.n	e90c <_malloc_trim_r+0x3c>
    e8fc:	4620      	mov	r0, r4
    e8fe:	2100      	movs	r1, #0
    e900:	f7ff fee8 	bl	e6d4 <_sbrk_r>
    e904:	68ab      	ldr	r3, [r5, #8]
    e906:	4433      	add	r3, r6
    e908:	4298      	cmp	r0, r3
    e90a:	d004      	beq.n	e916 <_malloc_trim_r+0x46>
    e90c:	4620      	mov	r0, r4
    e90e:	f7ff fcf9 	bl	e304 <__malloc_unlock>
    e912:	2000      	movs	r0, #0
    e914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e916:	4620      	mov	r0, r4
    e918:	4279      	negs	r1, r7
    e91a:	f7ff fedb 	bl	e6d4 <_sbrk_r>
    e91e:	3001      	adds	r0, #1
    e920:	d00d      	beq.n	e93e <_malloc_trim_r+0x6e>
    e922:	4b10      	ldr	r3, [pc, #64]	; (e964 <_malloc_trim_r+0x94>)
    e924:	68aa      	ldr	r2, [r5, #8]
    e926:	6819      	ldr	r1, [r3, #0]
    e928:	1bf6      	subs	r6, r6, r7
    e92a:	f046 0601 	orr.w	r6, r6, #1
    e92e:	4620      	mov	r0, r4
    e930:	1bc9      	subs	r1, r1, r7
    e932:	6056      	str	r6, [r2, #4]
    e934:	6019      	str	r1, [r3, #0]
    e936:	f7ff fce5 	bl	e304 <__malloc_unlock>
    e93a:	2001      	movs	r0, #1
    e93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e93e:	4620      	mov	r0, r4
    e940:	2100      	movs	r1, #0
    e942:	f7ff fec7 	bl	e6d4 <_sbrk_r>
    e946:	68ab      	ldr	r3, [r5, #8]
    e948:	1ac2      	subs	r2, r0, r3
    e94a:	2a0f      	cmp	r2, #15
    e94c:	ddde      	ble.n	e90c <_malloc_trim_r+0x3c>
    e94e:	4d06      	ldr	r5, [pc, #24]	; (e968 <_malloc_trim_r+0x98>)
    e950:	4904      	ldr	r1, [pc, #16]	; (e964 <_malloc_trim_r+0x94>)
    e952:	682d      	ldr	r5, [r5, #0]
    e954:	f042 0201 	orr.w	r2, r2, #1
    e958:	1b40      	subs	r0, r0, r5
    e95a:	605a      	str	r2, [r3, #4]
    e95c:	6008      	str	r0, [r1, #0]
    e95e:	e7d5      	b.n	e90c <_malloc_trim_r+0x3c>
    e960:	2000121c 	.word	0x2000121c
    e964:	200027ec 	.word	0x200027ec
    e968:	20001628 	.word	0x20001628

0000e96c <_free_r>:
    e96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e970:	460d      	mov	r5, r1
    e972:	4606      	mov	r6, r0
    e974:	2900      	cmp	r1, #0
    e976:	d055      	beq.n	ea24 <_free_r+0xb8>
    e978:	f7ff fcc2 	bl	e300 <__malloc_lock>
    e97c:	f855 1c04 	ldr.w	r1, [r5, #-4]
    e980:	f8df c174 	ldr.w	ip, [pc, #372]	; eaf8 <_free_r+0x18c>
    e984:	f021 0301 	bic.w	r3, r1, #1
    e988:	f1a5 0408 	sub.w	r4, r5, #8
    e98c:	18e2      	adds	r2, r4, r3
    e98e:	f8dc 0008 	ldr.w	r0, [ip, #8]
    e992:	6857      	ldr	r7, [r2, #4]
    e994:	4290      	cmp	r0, r2
    e996:	f027 0703 	bic.w	r7, r7, #3
    e99a:	d069      	beq.n	ea70 <_free_r+0x104>
    e99c:	f011 0101 	ands.w	r1, r1, #1
    e9a0:	6057      	str	r7, [r2, #4]
    e9a2:	d032      	beq.n	ea0a <_free_r+0x9e>
    e9a4:	2100      	movs	r1, #0
    e9a6:	19d0      	adds	r0, r2, r7
    e9a8:	6840      	ldr	r0, [r0, #4]
    e9aa:	07c0      	lsls	r0, r0, #31
    e9ac:	d406      	bmi.n	e9bc <_free_r+0x50>
    e9ae:	443b      	add	r3, r7
    e9b0:	6890      	ldr	r0, [r2, #8]
    e9b2:	2900      	cmp	r1, #0
    e9b4:	d04e      	beq.n	ea54 <_free_r+0xe8>
    e9b6:	68d2      	ldr	r2, [r2, #12]
    e9b8:	60c2      	str	r2, [r0, #12]
    e9ba:	6090      	str	r0, [r2, #8]
    e9bc:	f043 0201 	orr.w	r2, r3, #1
    e9c0:	6062      	str	r2, [r4, #4]
    e9c2:	50e3      	str	r3, [r4, r3]
    e9c4:	b9e1      	cbnz	r1, ea00 <_free_r+0x94>
    e9c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    e9ca:	d32d      	bcc.n	ea28 <_free_r+0xbc>
    e9cc:	0a5a      	lsrs	r2, r3, #9
    e9ce:	2a04      	cmp	r2, #4
    e9d0:	d86a      	bhi.n	eaa8 <_free_r+0x13c>
    e9d2:	0998      	lsrs	r0, r3, #6
    e9d4:	3038      	adds	r0, #56	; 0x38
    e9d6:	0041      	lsls	r1, r0, #1
    e9d8:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
    e9dc:	4946      	ldr	r1, [pc, #280]	; (eaf8 <_free_r+0x18c>)
    e9de:	f8dc 2008 	ldr.w	r2, [ip, #8]
    e9e2:	4562      	cmp	r2, ip
    e9e4:	d066      	beq.n	eab4 <_free_r+0x148>
    e9e6:	6851      	ldr	r1, [r2, #4]
    e9e8:	f021 0103 	bic.w	r1, r1, #3
    e9ec:	428b      	cmp	r3, r1
    e9ee:	d202      	bcs.n	e9f6 <_free_r+0x8a>
    e9f0:	6892      	ldr	r2, [r2, #8]
    e9f2:	4594      	cmp	ip, r2
    e9f4:	d1f7      	bne.n	e9e6 <_free_r+0x7a>
    e9f6:	68d3      	ldr	r3, [r2, #12]
    e9f8:	60e3      	str	r3, [r4, #12]
    e9fa:	60a2      	str	r2, [r4, #8]
    e9fc:	609c      	str	r4, [r3, #8]
    e9fe:	60d4      	str	r4, [r2, #12]
    ea00:	4630      	mov	r0, r6
    ea02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ea06:	f7ff bc7d 	b.w	e304 <__malloc_unlock>
    ea0a:	f855 5c08 	ldr.w	r5, [r5, #-8]
    ea0e:	1b64      	subs	r4, r4, r5
    ea10:	f10c 0808 	add.w	r8, ip, #8
    ea14:	68a0      	ldr	r0, [r4, #8]
    ea16:	4540      	cmp	r0, r8
    ea18:	442b      	add	r3, r5
    ea1a:	d043      	beq.n	eaa4 <_free_r+0x138>
    ea1c:	68e5      	ldr	r5, [r4, #12]
    ea1e:	60c5      	str	r5, [r0, #12]
    ea20:	60a8      	str	r0, [r5, #8]
    ea22:	e7c0      	b.n	e9a6 <_free_r+0x3a>
    ea24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ea28:	08db      	lsrs	r3, r3, #3
    ea2a:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
    ea2e:	2501      	movs	r5, #1
    ea30:	f8dc 0004 	ldr.w	r0, [ip, #4]
    ea34:	6891      	ldr	r1, [r2, #8]
    ea36:	60a1      	str	r1, [r4, #8]
    ea38:	109b      	asrs	r3, r3, #2
    ea3a:	fa05 f303 	lsl.w	r3, r5, r3
    ea3e:	4318      	orrs	r0, r3
    ea40:	60e2      	str	r2, [r4, #12]
    ea42:	f8cc 0004 	str.w	r0, [ip, #4]
    ea46:	6094      	str	r4, [r2, #8]
    ea48:	4630      	mov	r0, r6
    ea4a:	60cc      	str	r4, [r1, #12]
    ea4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ea50:	f7ff bc58 	b.w	e304 <__malloc_unlock>
    ea54:	4d29      	ldr	r5, [pc, #164]	; (eafc <_free_r+0x190>)
    ea56:	42a8      	cmp	r0, r5
    ea58:	d1ad      	bne.n	e9b6 <_free_r+0x4a>
    ea5a:	f043 0201 	orr.w	r2, r3, #1
    ea5e:	f8cc 4014 	str.w	r4, [ip, #20]
    ea62:	f8cc 4010 	str.w	r4, [ip, #16]
    ea66:	60e0      	str	r0, [r4, #12]
    ea68:	60a0      	str	r0, [r4, #8]
    ea6a:	6062      	str	r2, [r4, #4]
    ea6c:	50e3      	str	r3, [r4, r3]
    ea6e:	e7c7      	b.n	ea00 <_free_r+0x94>
    ea70:	441f      	add	r7, r3
    ea72:	07cb      	lsls	r3, r1, #31
    ea74:	d407      	bmi.n	ea86 <_free_r+0x11a>
    ea76:	f855 3c08 	ldr.w	r3, [r5, #-8]
    ea7a:	1ae4      	subs	r4, r4, r3
    ea7c:	441f      	add	r7, r3
    ea7e:	68a2      	ldr	r2, [r4, #8]
    ea80:	68e3      	ldr	r3, [r4, #12]
    ea82:	60d3      	str	r3, [r2, #12]
    ea84:	609a      	str	r2, [r3, #8]
    ea86:	4b1e      	ldr	r3, [pc, #120]	; (eb00 <_free_r+0x194>)
    ea88:	681b      	ldr	r3, [r3, #0]
    ea8a:	f047 0201 	orr.w	r2, r7, #1
    ea8e:	429f      	cmp	r7, r3
    ea90:	6062      	str	r2, [r4, #4]
    ea92:	f8cc 4008 	str.w	r4, [ip, #8]
    ea96:	d3b3      	bcc.n	ea00 <_free_r+0x94>
    ea98:	4b1a      	ldr	r3, [pc, #104]	; (eb04 <_free_r+0x198>)
    ea9a:	4630      	mov	r0, r6
    ea9c:	6819      	ldr	r1, [r3, #0]
    ea9e:	f7ff ff17 	bl	e8d0 <_malloc_trim_r>
    eaa2:	e7ad      	b.n	ea00 <_free_r+0x94>
    eaa4:	2101      	movs	r1, #1
    eaa6:	e77e      	b.n	e9a6 <_free_r+0x3a>
    eaa8:	2a14      	cmp	r2, #20
    eaaa:	d80c      	bhi.n	eac6 <_free_r+0x15a>
    eaac:	f102 005b 	add.w	r0, r2, #91	; 0x5b
    eab0:	0041      	lsls	r1, r0, #1
    eab2:	e791      	b.n	e9d8 <_free_r+0x6c>
    eab4:	684b      	ldr	r3, [r1, #4]
    eab6:	1080      	asrs	r0, r0, #2
    eab8:	2501      	movs	r5, #1
    eaba:	fa05 f000 	lsl.w	r0, r5, r0
    eabe:	4303      	orrs	r3, r0
    eac0:	604b      	str	r3, [r1, #4]
    eac2:	4613      	mov	r3, r2
    eac4:	e798      	b.n	e9f8 <_free_r+0x8c>
    eac6:	2a54      	cmp	r2, #84	; 0x54
    eac8:	d803      	bhi.n	ead2 <_free_r+0x166>
    eaca:	0b18      	lsrs	r0, r3, #12
    eacc:	306e      	adds	r0, #110	; 0x6e
    eace:	0041      	lsls	r1, r0, #1
    ead0:	e782      	b.n	e9d8 <_free_r+0x6c>
    ead2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    ead6:	d803      	bhi.n	eae0 <_free_r+0x174>
    ead8:	0bd8      	lsrs	r0, r3, #15
    eada:	3077      	adds	r0, #119	; 0x77
    eadc:	0041      	lsls	r1, r0, #1
    eade:	e77b      	b.n	e9d8 <_free_r+0x6c>
    eae0:	f240 5154 	movw	r1, #1364	; 0x554
    eae4:	428a      	cmp	r2, r1
    eae6:	d803      	bhi.n	eaf0 <_free_r+0x184>
    eae8:	0c98      	lsrs	r0, r3, #18
    eaea:	307c      	adds	r0, #124	; 0x7c
    eaec:	0041      	lsls	r1, r0, #1
    eaee:	e773      	b.n	e9d8 <_free_r+0x6c>
    eaf0:	21fc      	movs	r1, #252	; 0xfc
    eaf2:	207e      	movs	r0, #126	; 0x7e
    eaf4:	e770      	b.n	e9d8 <_free_r+0x6c>
    eaf6:	bf00      	nop
    eaf8:	2000121c 	.word	0x2000121c
    eafc:	20001224 	.word	0x20001224
    eb00:	20001624 	.word	0x20001624
    eb04:	200027e8 	.word	0x200027e8

0000eb08 <_localeconv_r>:
    eb08:	4800      	ldr	r0, [pc, #0]	; (eb0c <_localeconv_r+0x4>)
    eb0a:	4770      	bx	lr
    eb0c:	2000162c 	.word	0x2000162c

0000eb10 <memchr>:
    eb10:	0783      	lsls	r3, r0, #30
    eb12:	b470      	push	{r4, r5, r6}
    eb14:	b2c9      	uxtb	r1, r1
    eb16:	d03f      	beq.n	eb98 <memchr+0x88>
    eb18:	1e54      	subs	r4, r2, #1
    eb1a:	b32a      	cbz	r2, eb68 <memchr+0x58>
    eb1c:	7803      	ldrb	r3, [r0, #0]
    eb1e:	428b      	cmp	r3, r1
    eb20:	d023      	beq.n	eb6a <memchr+0x5a>
    eb22:	1c43      	adds	r3, r0, #1
    eb24:	e004      	b.n	eb30 <memchr+0x20>
    eb26:	b1fc      	cbz	r4, eb68 <memchr+0x58>
    eb28:	7804      	ldrb	r4, [r0, #0]
    eb2a:	428c      	cmp	r4, r1
    eb2c:	d01d      	beq.n	eb6a <memchr+0x5a>
    eb2e:	4614      	mov	r4, r2
    eb30:	f013 0f03 	tst.w	r3, #3
    eb34:	4618      	mov	r0, r3
    eb36:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
    eb3a:	f103 0301 	add.w	r3, r3, #1
    eb3e:	d1f2      	bne.n	eb26 <memchr+0x16>
    eb40:	2c03      	cmp	r4, #3
    eb42:	d814      	bhi.n	eb6e <memchr+0x5e>
    eb44:	1e65      	subs	r5, r4, #1
    eb46:	b34c      	cbz	r4, eb9c <memchr+0x8c>
    eb48:	7803      	ldrb	r3, [r0, #0]
    eb4a:	428b      	cmp	r3, r1
    eb4c:	d00d      	beq.n	eb6a <memchr+0x5a>
    eb4e:	1c42      	adds	r2, r0, #1
    eb50:	2300      	movs	r3, #0
    eb52:	e002      	b.n	eb5a <memchr+0x4a>
    eb54:	7804      	ldrb	r4, [r0, #0]
    eb56:	428c      	cmp	r4, r1
    eb58:	d007      	beq.n	eb6a <memchr+0x5a>
    eb5a:	42ab      	cmp	r3, r5
    eb5c:	4610      	mov	r0, r2
    eb5e:	f103 0301 	add.w	r3, r3, #1
    eb62:	f102 0201 	add.w	r2, r2, #1
    eb66:	d1f5      	bne.n	eb54 <memchr+0x44>
    eb68:	2000      	movs	r0, #0
    eb6a:	bc70      	pop	{r4, r5, r6}
    eb6c:	4770      	bx	lr
    eb6e:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
    eb72:	4603      	mov	r3, r0
    eb74:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
    eb78:	4618      	mov	r0, r3
    eb7a:	3304      	adds	r3, #4
    eb7c:	6802      	ldr	r2, [r0, #0]
    eb7e:	4072      	eors	r2, r6
    eb80:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
    eb84:	ea25 0202 	bic.w	r2, r5, r2
    eb88:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    eb8c:	d1da      	bne.n	eb44 <memchr+0x34>
    eb8e:	3c04      	subs	r4, #4
    eb90:	2c03      	cmp	r4, #3
    eb92:	4618      	mov	r0, r3
    eb94:	d8f0      	bhi.n	eb78 <memchr+0x68>
    eb96:	e7d5      	b.n	eb44 <memchr+0x34>
    eb98:	4614      	mov	r4, r2
    eb9a:	e7d1      	b.n	eb40 <memchr+0x30>
    eb9c:	4620      	mov	r0, r4
    eb9e:	e7e4      	b.n	eb6a <memchr+0x5a>

0000eba0 <_Balloc>:
    eba0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    eba2:	b570      	push	{r4, r5, r6, lr}
    eba4:	4605      	mov	r5, r0
    eba6:	460c      	mov	r4, r1
    eba8:	b14a      	cbz	r2, ebbe <_Balloc+0x1e>
    ebaa:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
    ebae:	b180      	cbz	r0, ebd2 <_Balloc+0x32>
    ebb0:	6801      	ldr	r1, [r0, #0]
    ebb2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
    ebb6:	2200      	movs	r2, #0
    ebb8:	6102      	str	r2, [r0, #16]
    ebba:	60c2      	str	r2, [r0, #12]
    ebbc:	bd70      	pop	{r4, r5, r6, pc}
    ebbe:	2221      	movs	r2, #33	; 0x21
    ebc0:	2104      	movs	r1, #4
    ebc2:	f000 fb27 	bl	f214 <_calloc_r>
    ebc6:	64e8      	str	r0, [r5, #76]	; 0x4c
    ebc8:	4602      	mov	r2, r0
    ebca:	2800      	cmp	r0, #0
    ebcc:	d1ed      	bne.n	ebaa <_Balloc+0xa>
    ebce:	2000      	movs	r0, #0
    ebd0:	bd70      	pop	{r4, r5, r6, pc}
    ebd2:	2101      	movs	r1, #1
    ebd4:	fa01 f604 	lsl.w	r6, r1, r4
    ebd8:	1d72      	adds	r2, r6, #5
    ebda:	4628      	mov	r0, r5
    ebdc:	0092      	lsls	r2, r2, #2
    ebde:	f000 fb19 	bl	f214 <_calloc_r>
    ebe2:	2800      	cmp	r0, #0
    ebe4:	d0f3      	beq.n	ebce <_Balloc+0x2e>
    ebe6:	6044      	str	r4, [r0, #4]
    ebe8:	6086      	str	r6, [r0, #8]
    ebea:	e7e4      	b.n	ebb6 <_Balloc+0x16>

0000ebec <_Bfree>:
    ebec:	b131      	cbz	r1, ebfc <_Bfree+0x10>
    ebee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    ebf0:	684a      	ldr	r2, [r1, #4]
    ebf2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    ebf6:	6008      	str	r0, [r1, #0]
    ebf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ebfc:	4770      	bx	lr
    ebfe:	bf00      	nop

0000ec00 <__multadd>:
    ec00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ec04:	f8d1 8010 	ldr.w	r8, [r1, #16]
    ec08:	b082      	sub	sp, #8
    ec0a:	4689      	mov	r9, r1
    ec0c:	4682      	mov	sl, r0
    ec0e:	f101 0514 	add.w	r5, r1, #20
    ec12:	2400      	movs	r4, #0
    ec14:	682f      	ldr	r7, [r5, #0]
    ec16:	b2be      	uxth	r6, r7
    ec18:	0c3f      	lsrs	r7, r7, #16
    ec1a:	fb02 3606 	mla	r6, r2, r6, r3
    ec1e:	fb02 f307 	mul.w	r3, r2, r7
    ec22:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    ec26:	3401      	adds	r4, #1
    ec28:	b2b6      	uxth	r6, r6
    ec2a:	eb06 4603 	add.w	r6, r6, r3, lsl #16
    ec2e:	45a0      	cmp	r8, r4
    ec30:	f845 6b04 	str.w	r6, [r5], #4
    ec34:	ea4f 4313 	mov.w	r3, r3, lsr #16
    ec38:	dcec      	bgt.n	ec14 <__multadd+0x14>
    ec3a:	b153      	cbz	r3, ec52 <__multadd+0x52>
    ec3c:	f8d9 2008 	ldr.w	r2, [r9, #8]
    ec40:	4590      	cmp	r8, r2
    ec42:	da0a      	bge.n	ec5a <__multadd+0x5a>
    ec44:	eb09 0188 	add.w	r1, r9, r8, lsl #2
    ec48:	f108 0201 	add.w	r2, r8, #1
    ec4c:	614b      	str	r3, [r1, #20]
    ec4e:	f8c9 2010 	str.w	r2, [r9, #16]
    ec52:	4648      	mov	r0, r9
    ec54:	b002      	add	sp, #8
    ec56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ec5a:	f8d9 1004 	ldr.w	r1, [r9, #4]
    ec5e:	9301      	str	r3, [sp, #4]
    ec60:	3101      	adds	r1, #1
    ec62:	4650      	mov	r0, sl
    ec64:	f7ff ff9c 	bl	eba0 <_Balloc>
    ec68:	f8d9 2010 	ldr.w	r2, [r9, #16]
    ec6c:	3202      	adds	r2, #2
    ec6e:	f109 010c 	add.w	r1, r9, #12
    ec72:	4604      	mov	r4, r0
    ec74:	0092      	lsls	r2, r2, #2
    ec76:	300c      	adds	r0, #12
    ec78:	f7ff f9fe 	bl	e078 <memcpy>
    ec7c:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
    ec80:	f8d9 1004 	ldr.w	r1, [r9, #4]
    ec84:	9b01      	ldr	r3, [sp, #4]
    ec86:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    ec8a:	f8c9 0000 	str.w	r0, [r9]
    ec8e:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
    ec92:	46a1      	mov	r9, r4
    ec94:	e7d6      	b.n	ec44 <__multadd+0x44>
    ec96:	bf00      	nop

0000ec98 <__hi0bits>:
    ec98:	0c03      	lsrs	r3, r0, #16
    ec9a:	041b      	lsls	r3, r3, #16
    ec9c:	b9b3      	cbnz	r3, eccc <__hi0bits+0x34>
    ec9e:	0400      	lsls	r0, r0, #16
    eca0:	2310      	movs	r3, #16
    eca2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    eca6:	bf04      	itt	eq
    eca8:	0200      	lsleq	r0, r0, #8
    ecaa:	3308      	addeq	r3, #8
    ecac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    ecb0:	bf04      	itt	eq
    ecb2:	0100      	lsleq	r0, r0, #4
    ecb4:	3304      	addeq	r3, #4
    ecb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    ecba:	bf04      	itt	eq
    ecbc:	0080      	lsleq	r0, r0, #2
    ecbe:	3302      	addeq	r3, #2
    ecc0:	2800      	cmp	r0, #0
    ecc2:	db07      	blt.n	ecd4 <__hi0bits+0x3c>
    ecc4:	0042      	lsls	r2, r0, #1
    ecc6:	d403      	bmi.n	ecd0 <__hi0bits+0x38>
    ecc8:	2020      	movs	r0, #32
    ecca:	4770      	bx	lr
    eccc:	2300      	movs	r3, #0
    ecce:	e7e8      	b.n	eca2 <__hi0bits+0xa>
    ecd0:	1c58      	adds	r0, r3, #1
    ecd2:	4770      	bx	lr
    ecd4:	4618      	mov	r0, r3
    ecd6:	4770      	bx	lr

0000ecd8 <__lo0bits>:
    ecd8:	6803      	ldr	r3, [r0, #0]
    ecda:	f013 0207 	ands.w	r2, r3, #7
    ecde:	d007      	beq.n	ecf0 <__lo0bits+0x18>
    ece0:	07d9      	lsls	r1, r3, #31
    ece2:	d420      	bmi.n	ed26 <__lo0bits+0x4e>
    ece4:	079a      	lsls	r2, r3, #30
    ece6:	d420      	bmi.n	ed2a <__lo0bits+0x52>
    ece8:	089b      	lsrs	r3, r3, #2
    ecea:	6003      	str	r3, [r0, #0]
    ecec:	2002      	movs	r0, #2
    ecee:	4770      	bx	lr
    ecf0:	b299      	uxth	r1, r3
    ecf2:	b909      	cbnz	r1, ecf8 <__lo0bits+0x20>
    ecf4:	0c1b      	lsrs	r3, r3, #16
    ecf6:	2210      	movs	r2, #16
    ecf8:	f013 0fff 	tst.w	r3, #255	; 0xff
    ecfc:	bf04      	itt	eq
    ecfe:	0a1b      	lsreq	r3, r3, #8
    ed00:	3208      	addeq	r2, #8
    ed02:	0719      	lsls	r1, r3, #28
    ed04:	bf04      	itt	eq
    ed06:	091b      	lsreq	r3, r3, #4
    ed08:	3204      	addeq	r2, #4
    ed0a:	0799      	lsls	r1, r3, #30
    ed0c:	bf04      	itt	eq
    ed0e:	089b      	lsreq	r3, r3, #2
    ed10:	3202      	addeq	r2, #2
    ed12:	07d9      	lsls	r1, r3, #31
    ed14:	d404      	bmi.n	ed20 <__lo0bits+0x48>
    ed16:	085b      	lsrs	r3, r3, #1
    ed18:	d101      	bne.n	ed1e <__lo0bits+0x46>
    ed1a:	2020      	movs	r0, #32
    ed1c:	4770      	bx	lr
    ed1e:	3201      	adds	r2, #1
    ed20:	6003      	str	r3, [r0, #0]
    ed22:	4610      	mov	r0, r2
    ed24:	4770      	bx	lr
    ed26:	2000      	movs	r0, #0
    ed28:	4770      	bx	lr
    ed2a:	085b      	lsrs	r3, r3, #1
    ed2c:	6003      	str	r3, [r0, #0]
    ed2e:	2001      	movs	r0, #1
    ed30:	4770      	bx	lr
    ed32:	bf00      	nop

0000ed34 <__i2b>:
    ed34:	b510      	push	{r4, lr}
    ed36:	460c      	mov	r4, r1
    ed38:	2101      	movs	r1, #1
    ed3a:	f7ff ff31 	bl	eba0 <_Balloc>
    ed3e:	2201      	movs	r2, #1
    ed40:	6144      	str	r4, [r0, #20]
    ed42:	6102      	str	r2, [r0, #16]
    ed44:	bd10      	pop	{r4, pc}
    ed46:	bf00      	nop

0000ed48 <__multiply>:
    ed48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed4c:	690d      	ldr	r5, [r1, #16]
    ed4e:	f8d2 9010 	ldr.w	r9, [r2, #16]
    ed52:	454d      	cmp	r5, r9
    ed54:	b085      	sub	sp, #20
    ed56:	460c      	mov	r4, r1
    ed58:	4692      	mov	sl, r2
    ed5a:	da04      	bge.n	ed66 <__multiply+0x1e>
    ed5c:	462a      	mov	r2, r5
    ed5e:	4654      	mov	r4, sl
    ed60:	464d      	mov	r5, r9
    ed62:	468a      	mov	sl, r1
    ed64:	4691      	mov	r9, r2
    ed66:	68a3      	ldr	r3, [r4, #8]
    ed68:	6861      	ldr	r1, [r4, #4]
    ed6a:	eb05 0709 	add.w	r7, r5, r9
    ed6e:	429f      	cmp	r7, r3
    ed70:	bfc8      	it	gt
    ed72:	3101      	addgt	r1, #1
    ed74:	f7ff ff14 	bl	eba0 <_Balloc>
    ed78:	f100 0614 	add.w	r6, r0, #20
    ed7c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
    ed80:	4546      	cmp	r6, r8
    ed82:	9001      	str	r0, [sp, #4]
    ed84:	d205      	bcs.n	ed92 <__multiply+0x4a>
    ed86:	4633      	mov	r3, r6
    ed88:	2000      	movs	r0, #0
    ed8a:	f843 0b04 	str.w	r0, [r3], #4
    ed8e:	4598      	cmp	r8, r3
    ed90:	d8fb      	bhi.n	ed8a <__multiply+0x42>
    ed92:	f10a 0c14 	add.w	ip, sl, #20
    ed96:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
    ed9a:	3414      	adds	r4, #20
    ed9c:	45cc      	cmp	ip, r9
    ed9e:	9400      	str	r4, [sp, #0]
    eda0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    eda4:	d25b      	bcs.n	ee5e <__multiply+0x116>
    eda6:	f8cd 8008 	str.w	r8, [sp, #8]
    edaa:	9703      	str	r7, [sp, #12]
    edac:	46c8      	mov	r8, r9
    edae:	f85c 3b04 	ldr.w	r3, [ip], #4
    edb2:	b29c      	uxth	r4, r3
    edb4:	b324      	cbz	r4, ee00 <__multiply+0xb8>
    edb6:	9a00      	ldr	r2, [sp, #0]
    edb8:	4633      	mov	r3, r6
    edba:	f04f 0900 	mov.w	r9, #0
    edbe:	e000      	b.n	edc2 <__multiply+0x7a>
    edc0:	460b      	mov	r3, r1
    edc2:	f852 7b04 	ldr.w	r7, [r2], #4
    edc6:	6819      	ldr	r1, [r3, #0]
    edc8:	fa1f fb87 	uxth.w	fp, r7
    edcc:	fa1f fa81 	uxth.w	sl, r1
    edd0:	0c38      	lsrs	r0, r7, #16
    edd2:	0c09      	lsrs	r1, r1, #16
    edd4:	fb04 a70b 	mla	r7, r4, fp, sl
    edd8:	44b9      	add	r9, r7
    edda:	fb04 1000 	mla	r0, r4, r0, r1
    edde:	eb00 4019 	add.w	r0, r0, r9, lsr #16
    ede2:	4619      	mov	r1, r3
    ede4:	fa1f f989 	uxth.w	r9, r9
    ede8:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
    edec:	4295      	cmp	r5, r2
    edee:	ea4f 4910 	mov.w	r9, r0, lsr #16
    edf2:	f841 7b04 	str.w	r7, [r1], #4
    edf6:	d8e3      	bhi.n	edc0 <__multiply+0x78>
    edf8:	f8c3 9004 	str.w	r9, [r3, #4]
    edfc:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    ee00:	ea5f 4913 	movs.w	r9, r3, lsr #16
    ee04:	d024      	beq.n	ee50 <__multiply+0x108>
    ee06:	f8d6 a000 	ldr.w	sl, [r6]
    ee0a:	9b00      	ldr	r3, [sp, #0]
    ee0c:	4650      	mov	r0, sl
    ee0e:	4631      	mov	r1, r6
    ee10:	f04f 0b00 	mov.w	fp, #0
    ee14:	e000      	b.n	ee18 <__multiply+0xd0>
    ee16:	4611      	mov	r1, r2
    ee18:	881a      	ldrh	r2, [r3, #0]
    ee1a:	0c00      	lsrs	r0, r0, #16
    ee1c:	fb09 0002 	mla	r0, r9, r2, r0
    ee20:	4483      	add	fp, r0
    ee22:	fa1f fa8a 	uxth.w	sl, sl
    ee26:	460a      	mov	r2, r1
    ee28:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
    ee2c:	f842 0b04 	str.w	r0, [r2], #4
    ee30:	f853 7b04 	ldr.w	r7, [r3], #4
    ee34:	6848      	ldr	r0, [r1, #4]
    ee36:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    ee3a:	b284      	uxth	r4, r0
    ee3c:	fb09 4a0a 	mla	sl, r9, sl, r4
    ee40:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
    ee44:	429d      	cmp	r5, r3
    ee46:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
    ee4a:	d8e4      	bhi.n	ee16 <__multiply+0xce>
    ee4c:	f8c1 a004 	str.w	sl, [r1, #4]
    ee50:	45e0      	cmp	r8, ip
    ee52:	f106 0604 	add.w	r6, r6, #4
    ee56:	d8aa      	bhi.n	edae <__multiply+0x66>
    ee58:	f8dd 8008 	ldr.w	r8, [sp, #8]
    ee5c:	9f03      	ldr	r7, [sp, #12]
    ee5e:	2f00      	cmp	r7, #0
    ee60:	dd0a      	ble.n	ee78 <__multiply+0x130>
    ee62:	f858 3c04 	ldr.w	r3, [r8, #-4]
    ee66:	f1a8 0804 	sub.w	r8, r8, #4
    ee6a:	b11b      	cbz	r3, ee74 <__multiply+0x12c>
    ee6c:	e004      	b.n	ee78 <__multiply+0x130>
    ee6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
    ee72:	b90b      	cbnz	r3, ee78 <__multiply+0x130>
    ee74:	3f01      	subs	r7, #1
    ee76:	d1fa      	bne.n	ee6e <__multiply+0x126>
    ee78:	9b01      	ldr	r3, [sp, #4]
    ee7a:	4618      	mov	r0, r3
    ee7c:	611f      	str	r7, [r3, #16]
    ee7e:	b005      	add	sp, #20
    ee80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ee84 <__pow5mult>:
    ee84:	f012 0303 	ands.w	r3, r2, #3
    ee88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee8c:	4614      	mov	r4, r2
    ee8e:	4607      	mov	r7, r0
    ee90:	460e      	mov	r6, r1
    ee92:	d12c      	bne.n	eeee <__pow5mult+0x6a>
    ee94:	10a4      	asrs	r4, r4, #2
    ee96:	d01c      	beq.n	eed2 <__pow5mult+0x4e>
    ee98:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    ee9a:	2d00      	cmp	r5, #0
    ee9c:	d030      	beq.n	ef00 <__pow5mult+0x7c>
    ee9e:	f04f 0800 	mov.w	r8, #0
    eea2:	e004      	b.n	eeae <__pow5mult+0x2a>
    eea4:	1064      	asrs	r4, r4, #1
    eea6:	d014      	beq.n	eed2 <__pow5mult+0x4e>
    eea8:	6828      	ldr	r0, [r5, #0]
    eeaa:	b1a8      	cbz	r0, eed8 <__pow5mult+0x54>
    eeac:	4605      	mov	r5, r0
    eeae:	07e3      	lsls	r3, r4, #31
    eeb0:	d5f8      	bpl.n	eea4 <__pow5mult+0x20>
    eeb2:	4638      	mov	r0, r7
    eeb4:	4631      	mov	r1, r6
    eeb6:	462a      	mov	r2, r5
    eeb8:	f7ff ff46 	bl	ed48 <__multiply>
    eebc:	b1ae      	cbz	r6, eeea <__pow5mult+0x66>
    eebe:	6872      	ldr	r2, [r6, #4]
    eec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    eec2:	1064      	asrs	r4, r4, #1
    eec4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    eec8:	6031      	str	r1, [r6, #0]
    eeca:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    eece:	4606      	mov	r6, r0
    eed0:	d1ea      	bne.n	eea8 <__pow5mult+0x24>
    eed2:	4630      	mov	r0, r6
    eed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eed8:	4638      	mov	r0, r7
    eeda:	4629      	mov	r1, r5
    eedc:	462a      	mov	r2, r5
    eede:	f7ff ff33 	bl	ed48 <__multiply>
    eee2:	6028      	str	r0, [r5, #0]
    eee4:	f8c0 8000 	str.w	r8, [r0]
    eee8:	e7e0      	b.n	eeac <__pow5mult+0x28>
    eeea:	4606      	mov	r6, r0
    eeec:	e7da      	b.n	eea4 <__pow5mult+0x20>
    eeee:	1e5d      	subs	r5, r3, #1
    eef0:	4a0a      	ldr	r2, [pc, #40]	; (ef1c <__pow5mult+0x98>)
    eef2:	2300      	movs	r3, #0
    eef4:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
    eef8:	f7ff fe82 	bl	ec00 <__multadd>
    eefc:	4606      	mov	r6, r0
    eefe:	e7c9      	b.n	ee94 <__pow5mult+0x10>
    ef00:	2101      	movs	r1, #1
    ef02:	4638      	mov	r0, r7
    ef04:	f7ff fe4c 	bl	eba0 <_Balloc>
    ef08:	f240 2171 	movw	r1, #625	; 0x271
    ef0c:	2201      	movs	r2, #1
    ef0e:	2300      	movs	r3, #0
    ef10:	6141      	str	r1, [r0, #20]
    ef12:	6102      	str	r2, [r0, #16]
    ef14:	4605      	mov	r5, r0
    ef16:	64b8      	str	r0, [r7, #72]	; 0x48
    ef18:	6003      	str	r3, [r0, #0]
    ef1a:	e7c0      	b.n	ee9e <__pow5mult+0x1a>
    ef1c:	000125a8 	.word	0x000125a8

0000ef20 <__lshift>:
    ef20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef24:	4693      	mov	fp, r2
    ef26:	690a      	ldr	r2, [r1, #16]
    ef28:	688b      	ldr	r3, [r1, #8]
    ef2a:	ea4f 1a6b 	mov.w	sl, fp, asr #5
    ef2e:	eb0a 0902 	add.w	r9, sl, r2
    ef32:	f109 0601 	add.w	r6, r9, #1
    ef36:	429e      	cmp	r6, r3
    ef38:	460f      	mov	r7, r1
    ef3a:	4680      	mov	r8, r0
    ef3c:	6849      	ldr	r1, [r1, #4]
    ef3e:	dd04      	ble.n	ef4a <__lshift+0x2a>
    ef40:	005b      	lsls	r3, r3, #1
    ef42:	429e      	cmp	r6, r3
    ef44:	f101 0101 	add.w	r1, r1, #1
    ef48:	dcfa      	bgt.n	ef40 <__lshift+0x20>
    ef4a:	4640      	mov	r0, r8
    ef4c:	f7ff fe28 	bl	eba0 <_Balloc>
    ef50:	f1ba 0f00 	cmp.w	sl, #0
    ef54:	f100 0414 	add.w	r4, r0, #20
    ef58:	dd09      	ble.n	ef6e <__lshift+0x4e>
    ef5a:	2300      	movs	r3, #0
    ef5c:	461a      	mov	r2, r3
    ef5e:	4625      	mov	r5, r4
    ef60:	3301      	adds	r3, #1
    ef62:	4553      	cmp	r3, sl
    ef64:	f845 2b04 	str.w	r2, [r5], #4
    ef68:	d1fa      	bne.n	ef60 <__lshift+0x40>
    ef6a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    ef6e:	693a      	ldr	r2, [r7, #16]
    ef70:	f107 0314 	add.w	r3, r7, #20
    ef74:	f01b 0b1f 	ands.w	fp, fp, #31
    ef78:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
    ef7c:	d021      	beq.n	efc2 <__lshift+0xa2>
    ef7e:	f1cb 0a20 	rsb	sl, fp, #32
    ef82:	2200      	movs	r2, #0
    ef84:	e000      	b.n	ef88 <__lshift+0x68>
    ef86:	462c      	mov	r4, r5
    ef88:	6819      	ldr	r1, [r3, #0]
    ef8a:	4625      	mov	r5, r4
    ef8c:	fa01 f10b 	lsl.w	r1, r1, fp
    ef90:	430a      	orrs	r2, r1
    ef92:	f845 2b04 	str.w	r2, [r5], #4
    ef96:	f853 2b04 	ldr.w	r2, [r3], #4
    ef9a:	4563      	cmp	r3, ip
    ef9c:	fa22 f20a 	lsr.w	r2, r2, sl
    efa0:	d3f1      	bcc.n	ef86 <__lshift+0x66>
    efa2:	6062      	str	r2, [r4, #4]
    efa4:	b10a      	cbz	r2, efaa <__lshift+0x8a>
    efa6:	f109 0602 	add.w	r6, r9, #2
    efaa:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
    efae:	687a      	ldr	r2, [r7, #4]
    efb0:	3e01      	subs	r6, #1
    efb2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    efb6:	6106      	str	r6, [r0, #16]
    efb8:	6039      	str	r1, [r7, #0]
    efba:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    efbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    efc2:	f853 2b04 	ldr.w	r2, [r3], #4
    efc6:	f844 2b04 	str.w	r2, [r4], #4
    efca:	459c      	cmp	ip, r3
    efcc:	d9ed      	bls.n	efaa <__lshift+0x8a>
    efce:	f853 2b04 	ldr.w	r2, [r3], #4
    efd2:	f844 2b04 	str.w	r2, [r4], #4
    efd6:	459c      	cmp	ip, r3
    efd8:	d8f3      	bhi.n	efc2 <__lshift+0xa2>
    efda:	e7e6      	b.n	efaa <__lshift+0x8a>

0000efdc <__mcmp>:
    efdc:	6902      	ldr	r2, [r0, #16]
    efde:	690b      	ldr	r3, [r1, #16]
    efe0:	1ad2      	subs	r2, r2, r3
    efe2:	b410      	push	{r4}
    efe4:	d115      	bne.n	f012 <__mcmp+0x36>
    efe6:	009b      	lsls	r3, r3, #2
    efe8:	3014      	adds	r0, #20
    efea:	3114      	adds	r1, #20
    efec:	4419      	add	r1, r3
    efee:	4403      	add	r3, r0
    eff0:	e001      	b.n	eff6 <__mcmp+0x1a>
    eff2:	4298      	cmp	r0, r3
    eff4:	d211      	bcs.n	f01a <__mcmp+0x3e>
    eff6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    effa:	f851 4d04 	ldr.w	r4, [r1, #-4]!
    effe:	42a2      	cmp	r2, r4
    f000:	d0f7      	beq.n	eff2 <__mcmp+0x16>
    f002:	4294      	cmp	r4, r2
    f004:	bf94      	ite	ls
    f006:	2001      	movls	r0, #1
    f008:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
    f00c:	f85d 4b04 	ldr.w	r4, [sp], #4
    f010:	4770      	bx	lr
    f012:	4610      	mov	r0, r2
    f014:	f85d 4b04 	ldr.w	r4, [sp], #4
    f018:	4770      	bx	lr
    f01a:	2000      	movs	r0, #0
    f01c:	f85d 4b04 	ldr.w	r4, [sp], #4
    f020:	4770      	bx	lr
    f022:	bf00      	nop

0000f024 <__mdiff>:
    f024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f028:	460d      	mov	r5, r1
    f02a:	4604      	mov	r4, r0
    f02c:	4611      	mov	r1, r2
    f02e:	4628      	mov	r0, r5
    f030:	4616      	mov	r6, r2
    f032:	f7ff ffd3 	bl	efdc <__mcmp>
    f036:	1e07      	subs	r7, r0, #0
    f038:	d055      	beq.n	f0e6 <__mdiff+0xc2>
    f03a:	db4e      	blt.n	f0da <__mdiff+0xb6>
    f03c:	f04f 0800 	mov.w	r8, #0
    f040:	6869      	ldr	r1, [r5, #4]
    f042:	4620      	mov	r0, r4
    f044:	f7ff fdac 	bl	eba0 <_Balloc>
    f048:	692f      	ldr	r7, [r5, #16]
    f04a:	6932      	ldr	r2, [r6, #16]
    f04c:	f8c0 800c 	str.w	r8, [r0, #12]
    f050:	3514      	adds	r5, #20
    f052:	3614      	adds	r6, #20
    f054:	f100 0314 	add.w	r3, r0, #20
    f058:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
    f05c:	eb06 0882 	add.w	r8, r6, r2, lsl #2
    f060:	2100      	movs	r1, #0
    f062:	f856 2b04 	ldr.w	r2, [r6], #4
    f066:	f855 4b04 	ldr.w	r4, [r5], #4
    f06a:	fa1f f982 	uxth.w	r9, r2
    f06e:	fa11 fa84 	uxtah	sl, r1, r4
    f072:	0c11      	lsrs	r1, r2, #16
    f074:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
    f078:	ebc9 020a 	rsb	r2, r9, sl
    f07c:	eb01 4122 	add.w	r1, r1, r2, asr #16
    f080:	b292      	uxth	r2, r2
    f082:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    f086:	45b0      	cmp	r8, r6
    f088:	f843 2b04 	str.w	r2, [r3], #4
    f08c:	ea4f 4121 	mov.w	r1, r1, asr #16
    f090:	462c      	mov	r4, r5
    f092:	d8e6      	bhi.n	f062 <__mdiff+0x3e>
    f094:	45ac      	cmp	ip, r5
    f096:	4698      	mov	r8, r3
    f098:	d915      	bls.n	f0c6 <__mdiff+0xa2>
    f09a:	f854 6b04 	ldr.w	r6, [r4], #4
    f09e:	fa11 f186 	uxtah	r1, r1, r6
    f0a2:	0c36      	lsrs	r6, r6, #16
    f0a4:	eb06 4621 	add.w	r6, r6, r1, asr #16
    f0a8:	b289      	uxth	r1, r1
    f0aa:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
    f0ae:	45a4      	cmp	ip, r4
    f0b0:	f843 2b04 	str.w	r2, [r3], #4
    f0b4:	ea4f 4126 	mov.w	r1, r6, asr #16
    f0b8:	d8ef      	bhi.n	f09a <__mdiff+0x76>
    f0ba:	43eb      	mvns	r3, r5
    f0bc:	4463      	add	r3, ip
    f0be:	f023 0303 	bic.w	r3, r3, #3
    f0c2:	3304      	adds	r3, #4
    f0c4:	4443      	add	r3, r8
    f0c6:	3b04      	subs	r3, #4
    f0c8:	b922      	cbnz	r2, f0d4 <__mdiff+0xb0>
    f0ca:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    f0ce:	3f01      	subs	r7, #1
    f0d0:	2a00      	cmp	r2, #0
    f0d2:	d0fa      	beq.n	f0ca <__mdiff+0xa6>
    f0d4:	6107      	str	r7, [r0, #16]
    f0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f0da:	462b      	mov	r3, r5
    f0dc:	f04f 0801 	mov.w	r8, #1
    f0e0:	4635      	mov	r5, r6
    f0e2:	461e      	mov	r6, r3
    f0e4:	e7ac      	b.n	f040 <__mdiff+0x1c>
    f0e6:	4620      	mov	r0, r4
    f0e8:	4639      	mov	r1, r7
    f0ea:	f7ff fd59 	bl	eba0 <_Balloc>
    f0ee:	2301      	movs	r3, #1
    f0f0:	6147      	str	r7, [r0, #20]
    f0f2:	6103      	str	r3, [r0, #16]
    f0f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f0f8 <__d2b>:
    f0f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f0fc:	b083      	sub	sp, #12
    f0fe:	2101      	movs	r1, #1
    f100:	461d      	mov	r5, r3
    f102:	f3c3 560a 	ubfx	r6, r3, #20, #11
    f106:	4614      	mov	r4, r2
    f108:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    f10a:	f7ff fd49 	bl	eba0 <_Balloc>
    f10e:	f3c5 0313 	ubfx	r3, r5, #0, #20
    f112:	4680      	mov	r8, r0
    f114:	b10e      	cbz	r6, f11a <__d2b+0x22>
    f116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f11a:	9301      	str	r3, [sp, #4]
    f11c:	b324      	cbz	r4, f168 <__d2b+0x70>
    f11e:	a802      	add	r0, sp, #8
    f120:	f840 4d08 	str.w	r4, [r0, #-8]!
    f124:	4668      	mov	r0, sp
    f126:	f7ff fdd7 	bl	ecd8 <__lo0bits>
    f12a:	2800      	cmp	r0, #0
    f12c:	d135      	bne.n	f19a <__d2b+0xa2>
    f12e:	e89d 000c 	ldmia.w	sp, {r2, r3}
    f132:	f8c8 2014 	str.w	r2, [r8, #20]
    f136:	2b00      	cmp	r3, #0
    f138:	bf0c      	ite	eq
    f13a:	2401      	moveq	r4, #1
    f13c:	2402      	movne	r4, #2
    f13e:	f8c8 3018 	str.w	r3, [r8, #24]
    f142:	f8c8 4010 	str.w	r4, [r8, #16]
    f146:	b9de      	cbnz	r6, f180 <__d2b+0x88>
    f148:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    f14c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    f150:	6038      	str	r0, [r7, #0]
    f152:	6918      	ldr	r0, [r3, #16]
    f154:	f7ff fda0 	bl	ec98 <__hi0bits>
    f158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f15a:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
    f15e:	6018      	str	r0, [r3, #0]
    f160:	4640      	mov	r0, r8
    f162:	b003      	add	sp, #12
    f164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f168:	a801      	add	r0, sp, #4
    f16a:	f7ff fdb5 	bl	ecd8 <__lo0bits>
    f16e:	2401      	movs	r4, #1
    f170:	9b01      	ldr	r3, [sp, #4]
    f172:	f8c8 3014 	str.w	r3, [r8, #20]
    f176:	3020      	adds	r0, #32
    f178:	f8c8 4010 	str.w	r4, [r8, #16]
    f17c:	2e00      	cmp	r6, #0
    f17e:	d0e3      	beq.n	f148 <__d2b+0x50>
    f180:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
    f184:	eb09 0300 	add.w	r3, r9, r0
    f188:	603b      	str	r3, [r7, #0]
    f18a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f18c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    f190:	6018      	str	r0, [r3, #0]
    f192:	4640      	mov	r0, r8
    f194:	b003      	add	sp, #12
    f196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f19a:	e89d 000c 	ldmia.w	sp, {r2, r3}
    f19e:	f1c0 0120 	rsb	r1, r0, #32
    f1a2:	fa03 f101 	lsl.w	r1, r3, r1
    f1a6:	430a      	orrs	r2, r1
    f1a8:	40c3      	lsrs	r3, r0
    f1aa:	9301      	str	r3, [sp, #4]
    f1ac:	f8c8 2014 	str.w	r2, [r8, #20]
    f1b0:	e7c1      	b.n	f136 <__d2b+0x3e>
    f1b2:	bf00      	nop

0000f1b4 <_vasnprintf_r>:
    f1b4:	b570      	push	{r4, r5, r6, lr}
    f1b6:	4614      	mov	r4, r2
    f1b8:	b09a      	sub	sp, #104	; 0x68
    f1ba:	6815      	ldr	r5, [r2, #0]
    f1bc:	b109      	cbz	r1, f1c2 <_vasnprintf_r+0xe>
    f1be:	2d00      	cmp	r5, #0
    f1c0:	d11a      	bne.n	f1f8 <_vasnprintf_r+0x44>
    f1c2:	2500      	movs	r5, #0
    f1c4:	f44f 7222 	mov.w	r2, #648	; 0x288
    f1c8:	f8ad 200c 	strh.w	r2, [sp, #12]
    f1cc:	9500      	str	r5, [sp, #0]
    f1ce:	9504      	str	r5, [sp, #16]
    f1d0:	461a      	mov	r2, r3
    f1d2:	f64f 76ff 	movw	r6, #65535	; 0xffff
    f1d6:	4669      	mov	r1, sp
    f1d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f1da:	9502      	str	r5, [sp, #8]
    f1dc:	9505      	str	r5, [sp, #20]
    f1de:	f8ad 600e 	strh.w	r6, [sp, #14]
    f1e2:	f000 fffd 	bl	101e0 <_svfprintf_r>
    f1e6:	2800      	cmp	r0, #0
    f1e8:	db11      	blt.n	f20e <_vasnprintf_r+0x5a>
    f1ea:	9b00      	ldr	r3, [sp, #0]
    f1ec:	6020      	str	r0, [r4, #0]
    f1ee:	2200      	movs	r2, #0
    f1f0:	701a      	strb	r2, [r3, #0]
    f1f2:	9804      	ldr	r0, [sp, #16]
    f1f4:	b01a      	add	sp, #104	; 0x68
    f1f6:	bd70      	pop	{r4, r5, r6, pc}
    f1f8:	f44f 62c1 	mov.w	r2, #1544	; 0x608
    f1fc:	9100      	str	r1, [sp, #0]
    f1fe:	9104      	str	r1, [sp, #16]
    f200:	f8ad 200c 	strh.w	r2, [sp, #12]
    f204:	dae4      	bge.n	f1d0 <_vasnprintf_r+0x1c>
    f206:	238b      	movs	r3, #139	; 0x8b
    f208:	6003      	str	r3, [r0, #0]
    f20a:	2000      	movs	r0, #0
    f20c:	e7f2      	b.n	f1f4 <_vasnprintf_r+0x40>
    f20e:	2000      	movs	r0, #0
    f210:	e7f0      	b.n	f1f4 <_vasnprintf_r+0x40>
    f212:	bf00      	nop

0000f214 <_calloc_r>:
    f214:	b510      	push	{r4, lr}
    f216:	fb02 f101 	mul.w	r1, r2, r1
    f21a:	f7fe fc91 	bl	db40 <_malloc_r>
    f21e:	4604      	mov	r4, r0
    f220:	b168      	cbz	r0, f23e <_calloc_r+0x2a>
    f222:	f850 2c04 	ldr.w	r2, [r0, #-4]
    f226:	f022 0203 	bic.w	r2, r2, #3
    f22a:	3a04      	subs	r2, #4
    f22c:	2a24      	cmp	r2, #36	; 0x24
    f22e:	d818      	bhi.n	f262 <_calloc_r+0x4e>
    f230:	2a13      	cmp	r2, #19
    f232:	d806      	bhi.n	f242 <_calloc_r+0x2e>
    f234:	4603      	mov	r3, r0
    f236:	2200      	movs	r2, #0
    f238:	601a      	str	r2, [r3, #0]
    f23a:	605a      	str	r2, [r3, #4]
    f23c:	609a      	str	r2, [r3, #8]
    f23e:	4620      	mov	r0, r4
    f240:	bd10      	pop	{r4, pc}
    f242:	2300      	movs	r3, #0
    f244:	2a1b      	cmp	r2, #27
    f246:	6003      	str	r3, [r0, #0]
    f248:	6043      	str	r3, [r0, #4]
    f24a:	d90f      	bls.n	f26c <_calloc_r+0x58>
    f24c:	2a24      	cmp	r2, #36	; 0x24
    f24e:	6083      	str	r3, [r0, #8]
    f250:	60c3      	str	r3, [r0, #12]
    f252:	bf05      	ittet	eq
    f254:	6103      	streq	r3, [r0, #16]
    f256:	6143      	streq	r3, [r0, #20]
    f258:	f100 0310 	addne.w	r3, r0, #16
    f25c:	f100 0318 	addeq.w	r3, r0, #24
    f260:	e7e9      	b.n	f236 <_calloc_r+0x22>
    f262:	2100      	movs	r1, #0
    f264:	f7ff f802 	bl	e26c <memset>
    f268:	4620      	mov	r0, r4
    f26a:	bd10      	pop	{r4, pc}
    f26c:	f100 0308 	add.w	r3, r0, #8
    f270:	e7e1      	b.n	f236 <_calloc_r+0x22>
    f272:	bf00      	nop

0000f274 <quorem>:
    f274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f278:	6903      	ldr	r3, [r0, #16]
    f27a:	690d      	ldr	r5, [r1, #16]
    f27c:	429d      	cmp	r5, r3
    f27e:	b083      	sub	sp, #12
    f280:	4683      	mov	fp, r0
    f282:	f300 808b 	bgt.w	f39c <quorem+0x128>
    f286:	3d01      	subs	r5, #1
    f288:	f101 0414 	add.w	r4, r1, #20
    f28c:	f100 0a14 	add.w	sl, r0, #20
    f290:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
    f294:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
    f298:	3201      	adds	r2, #1
    f29a:	fbb3 f8f2 	udiv	r8, r3, r2
    f29e:	00aa      	lsls	r2, r5, #2
    f2a0:	4691      	mov	r9, r2
    f2a2:	9200      	str	r2, [sp, #0]
    f2a4:	4452      	add	r2, sl
    f2a6:	44a1      	add	r9, r4
    f2a8:	9201      	str	r2, [sp, #4]
    f2aa:	f1b8 0f00 	cmp.w	r8, #0
    f2ae:	d03d      	beq.n	f32c <quorem+0xb8>
    f2b0:	f04f 0e00 	mov.w	lr, #0
    f2b4:	4670      	mov	r0, lr
    f2b6:	4622      	mov	r2, r4
    f2b8:	4653      	mov	r3, sl
    f2ba:	468c      	mov	ip, r1
    f2bc:	f852 6b04 	ldr.w	r6, [r2], #4
    f2c0:	6819      	ldr	r1, [r3, #0]
    f2c2:	b2b7      	uxth	r7, r6
    f2c4:	0c36      	lsrs	r6, r6, #16
    f2c6:	fb07 ee08 	mla	lr, r7, r8, lr
    f2ca:	fb06 f608 	mul.w	r6, r6, r8
    f2ce:	eb06 461e 	add.w	r6, r6, lr, lsr #16
    f2d2:	fa1f f78e 	uxth.w	r7, lr
    f2d6:	1bc7      	subs	r7, r0, r7
    f2d8:	b2b0      	uxth	r0, r6
    f2da:	fa17 f781 	uxtah	r7, r7, r1
    f2de:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
    f2e2:	eb00 4027 	add.w	r0, r0, r7, asr #16
    f2e6:	b2bf      	uxth	r7, r7
    f2e8:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    f2ec:	4591      	cmp	r9, r2
    f2ee:	f843 7b04 	str.w	r7, [r3], #4
    f2f2:	ea4f 4020 	mov.w	r0, r0, asr #16
    f2f6:	ea4f 4e16 	mov.w	lr, r6, lsr #16
    f2fa:	d2df      	bcs.n	f2bc <quorem+0x48>
    f2fc:	9a00      	ldr	r2, [sp, #0]
    f2fe:	f85a 3002 	ldr.w	r3, [sl, r2]
    f302:	4661      	mov	r1, ip
    f304:	b993      	cbnz	r3, f32c <quorem+0xb8>
    f306:	9a01      	ldr	r2, [sp, #4]
    f308:	1f13      	subs	r3, r2, #4
    f30a:	459a      	cmp	sl, r3
    f30c:	d20c      	bcs.n	f328 <quorem+0xb4>
    f30e:	f852 3c04 	ldr.w	r3, [r2, #-4]
    f312:	b94b      	cbnz	r3, f328 <quorem+0xb4>
    f314:	f1a2 0308 	sub.w	r3, r2, #8
    f318:	e002      	b.n	f320 <quorem+0xac>
    f31a:	681a      	ldr	r2, [r3, #0]
    f31c:	3b04      	subs	r3, #4
    f31e:	b91a      	cbnz	r2, f328 <quorem+0xb4>
    f320:	459a      	cmp	sl, r3
    f322:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
    f326:	d3f8      	bcc.n	f31a <quorem+0xa6>
    f328:	f8cb 5010 	str.w	r5, [fp, #16]
    f32c:	4658      	mov	r0, fp
    f32e:	f7ff fe55 	bl	efdc <__mcmp>
    f332:	2800      	cmp	r0, #0
    f334:	db2e      	blt.n	f394 <quorem+0x120>
    f336:	f108 0801 	add.w	r8, r8, #1
    f33a:	4653      	mov	r3, sl
    f33c:	2200      	movs	r2, #0
    f33e:	f854 6b04 	ldr.w	r6, [r4], #4
    f342:	6818      	ldr	r0, [r3, #0]
    f344:	b2b1      	uxth	r1, r6
    f346:	1a52      	subs	r2, r2, r1
    f348:	0c36      	lsrs	r6, r6, #16
    f34a:	fa12 f180 	uxtah	r1, r2, r0
    f34e:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
    f352:	eb02 4221 	add.w	r2, r2, r1, asr #16
    f356:	b289      	uxth	r1, r1
    f358:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
    f35c:	45a1      	cmp	r9, r4
    f35e:	f843 1b04 	str.w	r1, [r3], #4
    f362:	ea4f 4222 	mov.w	r2, r2, asr #16
    f366:	d2ea      	bcs.n	f33e <quorem+0xca>
    f368:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
    f36c:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
    f370:	b982      	cbnz	r2, f394 <quorem+0x120>
    f372:	1f1a      	subs	r2, r3, #4
    f374:	4592      	cmp	sl, r2
    f376:	d20b      	bcs.n	f390 <quorem+0x11c>
    f378:	f853 2c04 	ldr.w	r2, [r3, #-4]
    f37c:	b942      	cbnz	r2, f390 <quorem+0x11c>
    f37e:	3b08      	subs	r3, #8
    f380:	e002      	b.n	f388 <quorem+0x114>
    f382:	681a      	ldr	r2, [r3, #0]
    f384:	3b04      	subs	r3, #4
    f386:	b91a      	cbnz	r2, f390 <quorem+0x11c>
    f388:	459a      	cmp	sl, r3
    f38a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
    f38e:	d3f8      	bcc.n	f382 <quorem+0x10e>
    f390:	f8cb 5010 	str.w	r5, [fp, #16]
    f394:	4640      	mov	r0, r8
    f396:	b003      	add	sp, #12
    f398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f39c:	2000      	movs	r0, #0
    f39e:	b003      	add	sp, #12
    f3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

0000f3a8 <_dtoa_r>:
    f3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f3ac:	6c01      	ldr	r1, [r0, #64]	; 0x40
    f3ae:	b09b      	sub	sp, #108	; 0x6c
    f3b0:	4604      	mov	r4, r0
    f3b2:	9d27      	ldr	r5, [sp, #156]	; 0x9c
    f3b4:	4692      	mov	sl, r2
    f3b6:	469b      	mov	fp, r3
    f3b8:	b149      	cbz	r1, f3ce <_dtoa_r+0x26>
    f3ba:	6c43      	ldr	r3, [r0, #68]	; 0x44
    f3bc:	604b      	str	r3, [r1, #4]
    f3be:	2201      	movs	r2, #1
    f3c0:	fa02 f303 	lsl.w	r3, r2, r3
    f3c4:	608b      	str	r3, [r1, #8]
    f3c6:	f7ff fc11 	bl	ebec <_Bfree>
    f3ca:	2300      	movs	r3, #0
    f3cc:	6423      	str	r3, [r4, #64]	; 0x40
    f3ce:	f1bb 0f00 	cmp.w	fp, #0
    f3d2:	46d9      	mov	r9, fp
    f3d4:	db33      	blt.n	f43e <_dtoa_r+0x96>
    f3d6:	2300      	movs	r3, #0
    f3d8:	602b      	str	r3, [r5, #0]
    f3da:	4ba5      	ldr	r3, [pc, #660]	; (f670 <_dtoa_r+0x2c8>)
    f3dc:	461a      	mov	r2, r3
    f3de:	ea09 0303 	and.w	r3, r9, r3
    f3e2:	4293      	cmp	r3, r2
    f3e4:	d014      	beq.n	f410 <_dtoa_r+0x68>
    f3e6:	4650      	mov	r0, sl
    f3e8:	4659      	mov	r1, fp
    f3ea:	2200      	movs	r2, #0
    f3ec:	2300      	movs	r3, #0
    f3ee:	f7fd fcbd 	bl	cd6c <__aeabi_dcmpeq>
    f3f2:	4680      	mov	r8, r0
    f3f4:	b348      	cbz	r0, f44a <_dtoa_r+0xa2>
    f3f6:	9e26      	ldr	r6, [sp, #152]	; 0x98
    f3f8:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    f3fa:	2301      	movs	r3, #1
    f3fc:	6033      	str	r3, [r6, #0]
    f3fe:	2d00      	cmp	r5, #0
    f400:	f000 80c9 	beq.w	f596 <_dtoa_r+0x1ee>
    f404:	489b      	ldr	r0, [pc, #620]	; (f674 <_dtoa_r+0x2cc>)
    f406:	6028      	str	r0, [r5, #0]
    f408:	3801      	subs	r0, #1
    f40a:	b01b      	add	sp, #108	; 0x6c
    f40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f410:	9d26      	ldr	r5, [sp, #152]	; 0x98
    f412:	f242 730f 	movw	r3, #9999	; 0x270f
    f416:	602b      	str	r3, [r5, #0]
    f418:	f1ba 0f00 	cmp.w	sl, #0
    f41c:	f000 80a4 	beq.w	f568 <_dtoa_r+0x1c0>
    f420:	4895      	ldr	r0, [pc, #596]	; (f678 <_dtoa_r+0x2d0>)
    f422:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    f424:	2e00      	cmp	r6, #0
    f426:	d0f0      	beq.n	f40a <_dtoa_r+0x62>
    f428:	78c3      	ldrb	r3, [r0, #3]
    f42a:	2b00      	cmp	r3, #0
    f42c:	f000 80b5 	beq.w	f59a <_dtoa_r+0x1f2>
    f430:	f100 0308 	add.w	r3, r0, #8
    f434:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    f436:	602b      	str	r3, [r5, #0]
    f438:	b01b      	add	sp, #108	; 0x6c
    f43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f43e:	2301      	movs	r3, #1
    f440:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
    f444:	602b      	str	r3, [r5, #0]
    f446:	46cb      	mov	fp, r9
    f448:	e7c7      	b.n	f3da <_dtoa_r+0x32>
    f44a:	aa19      	add	r2, sp, #100	; 0x64
    f44c:	ab18      	add	r3, sp, #96	; 0x60
    f44e:	e88d 000c 	stmia.w	sp, {r2, r3}
    f452:	4620      	mov	r0, r4
    f454:	4652      	mov	r2, sl
    f456:	465b      	mov	r3, fp
    f458:	f7ff fe4e 	bl	f0f8 <__d2b>
    f45c:	ea5f 5519 	movs.w	r5, r9, lsr #20
    f460:	900a      	str	r0, [sp, #40]	; 0x28
    f462:	f040 808a 	bne.w	f57a <_dtoa_r+0x1d2>
    f466:	9f18      	ldr	r7, [sp, #96]	; 0x60
    f468:	9d19      	ldr	r5, [sp, #100]	; 0x64
    f46a:	f46f 6382 	mvn.w	r3, #1040	; 0x410
    f46e:	443d      	add	r5, r7
    f470:	429d      	cmp	r5, r3
    f472:	f2c0 8294 	blt.w	f99e <_dtoa_r+0x5f6>
    f476:	331f      	adds	r3, #31
    f478:	f205 4212 	addw	r2, r5, #1042	; 0x412
    f47c:	1b5b      	subs	r3, r3, r5
    f47e:	fa09 f303 	lsl.w	r3, r9, r3
    f482:	fa2a f202 	lsr.w	r2, sl, r2
    f486:	ea43 0002 	orr.w	r0, r3, r2
    f48a:	f7fd f991 	bl	c7b0 <__aeabi_ui2d>
    f48e:	2601      	movs	r6, #1
    f490:	3d01      	subs	r5, #1
    f492:	46b8      	mov	r8, r7
    f494:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    f498:	9616      	str	r6, [sp, #88]	; 0x58
    f49a:	2200      	movs	r2, #0
    f49c:	4b77      	ldr	r3, [pc, #476]	; (f67c <_dtoa_r+0x2d4>)
    f49e:	f7fd f849 	bl	c534 <__aeabi_dsub>
    f4a2:	a36d      	add	r3, pc, #436	; (adr r3, f658 <_dtoa_r+0x2b0>)
    f4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    f4a8:	f7fd f9f8 	bl	c89c <__aeabi_dmul>
    f4ac:	a36c      	add	r3, pc, #432	; (adr r3, f660 <_dtoa_r+0x2b8>)
    f4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    f4b2:	f7fd f841 	bl	c538 <__adddf3>
    f4b6:	4606      	mov	r6, r0
    f4b8:	4628      	mov	r0, r5
    f4ba:	460f      	mov	r7, r1
    f4bc:	f7fd f988 	bl	c7d0 <__aeabi_i2d>
    f4c0:	a369      	add	r3, pc, #420	; (adr r3, f668 <_dtoa_r+0x2c0>)
    f4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    f4c6:	f7fd f9e9 	bl	c89c <__aeabi_dmul>
    f4ca:	4602      	mov	r2, r0
    f4cc:	460b      	mov	r3, r1
    f4ce:	4630      	mov	r0, r6
    f4d0:	4639      	mov	r1, r7
    f4d2:	f7fd f831 	bl	c538 <__adddf3>
    f4d6:	4606      	mov	r6, r0
    f4d8:	460f      	mov	r7, r1
    f4da:	f7fd fc79 	bl	cdd0 <__aeabi_d2iz>
    f4de:	4639      	mov	r1, r7
    f4e0:	9007      	str	r0, [sp, #28]
    f4e2:	2200      	movs	r2, #0
    f4e4:	4630      	mov	r0, r6
    f4e6:	2300      	movs	r3, #0
    f4e8:	f7fd fc4a 	bl	cd80 <__aeabi_dcmplt>
    f4ec:	2800      	cmp	r0, #0
    f4ee:	f040 8228 	bne.w	f942 <_dtoa_r+0x59a>
    f4f2:	9e07      	ldr	r6, [sp, #28]
    f4f4:	2e16      	cmp	r6, #22
    f4f6:	f200 8221 	bhi.w	f93c <_dtoa_r+0x594>
    f4fa:	4b61      	ldr	r3, [pc, #388]	; (f680 <_dtoa_r+0x2d8>)
    f4fc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    f500:	e9d3 0100 	ldrd	r0, r1, [r3]
    f504:	4652      	mov	r2, sl
    f506:	465b      	mov	r3, fp
    f508:	f7fd fc58 	bl	cdbc <__aeabi_dcmpgt>
    f50c:	2800      	cmp	r0, #0
    f50e:	f000 824b 	beq.w	f9a8 <_dtoa_r+0x600>
    f512:	3e01      	subs	r6, #1
    f514:	9607      	str	r6, [sp, #28]
    f516:	2600      	movs	r6, #0
    f518:	960e      	str	r6, [sp, #56]	; 0x38
    f51a:	ebc5 0508 	rsb	r5, r5, r8
    f51e:	3d01      	subs	r5, #1
    f520:	9506      	str	r5, [sp, #24]
    f522:	f100 8225 	bmi.w	f970 <_dtoa_r+0x5c8>
    f526:	2500      	movs	r5, #0
    f528:	9508      	str	r5, [sp, #32]
    f52a:	9e07      	ldr	r6, [sp, #28]
    f52c:	2e00      	cmp	r6, #0
    f52e:	f2c0 8216 	blt.w	f95e <_dtoa_r+0x5b6>
    f532:	9d06      	ldr	r5, [sp, #24]
    f534:	960d      	str	r6, [sp, #52]	; 0x34
    f536:	4435      	add	r5, r6
    f538:	2600      	movs	r6, #0
    f53a:	9506      	str	r5, [sp, #24]
    f53c:	960c      	str	r6, [sp, #48]	; 0x30
    f53e:	9d24      	ldr	r5, [sp, #144]	; 0x90
    f540:	2d09      	cmp	r5, #9
    f542:	d82c      	bhi.n	f59e <_dtoa_r+0x1f6>
    f544:	2d05      	cmp	r5, #5
    f546:	bfc4      	itt	gt
    f548:	3d04      	subgt	r5, #4
    f54a:	9524      	strgt	r5, [sp, #144]	; 0x90
    f54c:	9e24      	ldr	r6, [sp, #144]	; 0x90
    f54e:	f1a6 0302 	sub.w	r3, r6, #2
    f552:	bfcc      	ite	gt
    f554:	2500      	movgt	r5, #0
    f556:	2501      	movle	r5, #1
    f558:	2b03      	cmp	r3, #3
    f55a:	d822      	bhi.n	f5a2 <_dtoa_r+0x1fa>
    f55c:	e8df f013 	tbh	[pc, r3, lsl #1]
    f560:	029e03b7 	.word	0x029e03b7
    f564:	049a03c0 	.word	0x049a03c0
    f568:	4a46      	ldr	r2, [pc, #280]	; (f684 <_dtoa_r+0x2dc>)
    f56a:	4b43      	ldr	r3, [pc, #268]	; (f678 <_dtoa_r+0x2d0>)
    f56c:	f3c9 0013 	ubfx	r0, r9, #0, #20
    f570:	2800      	cmp	r0, #0
    f572:	bf0c      	ite	eq
    f574:	4610      	moveq	r0, r2
    f576:	4618      	movne	r0, r3
    f578:	e753      	b.n	f422 <_dtoa_r+0x7a>
    f57a:	f3cb 0313 	ubfx	r3, fp, #0, #20
    f57e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    f582:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
    f586:	4650      	mov	r0, sl
    f588:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
    f58c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    f590:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    f594:	e781      	b.n	f49a <_dtoa_r+0xf2>
    f596:	483c      	ldr	r0, [pc, #240]	; (f688 <_dtoa_r+0x2e0>)
    f598:	e737      	b.n	f40a <_dtoa_r+0x62>
    f59a:	1cc3      	adds	r3, r0, #3
    f59c:	e74a      	b.n	f434 <_dtoa_r+0x8c>
    f59e:	2500      	movs	r5, #0
    f5a0:	9524      	str	r5, [sp, #144]	; 0x90
    f5a2:	2500      	movs	r5, #0
    f5a4:	6465      	str	r5, [r4, #68]	; 0x44
    f5a6:	4629      	mov	r1, r5
    f5a8:	4620      	mov	r0, r4
    f5aa:	f7ff faf9 	bl	eba0 <_Balloc>
    f5ae:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    f5b2:	2601      	movs	r6, #1
    f5b4:	9009      	str	r0, [sp, #36]	; 0x24
    f5b6:	9525      	str	r5, [sp, #148]	; 0x94
    f5b8:	6420      	str	r0, [r4, #64]	; 0x40
    f5ba:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    f5be:	960b      	str	r6, [sp, #44]	; 0x2c
    f5c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    f5c2:	2b00      	cmp	r3, #0
    f5c4:	f2c0 80d2 	blt.w	f76c <_dtoa_r+0x3c4>
    f5c8:	9e07      	ldr	r6, [sp, #28]
    f5ca:	2e0e      	cmp	r6, #14
    f5cc:	f300 80ce 	bgt.w	f76c <_dtoa_r+0x3c4>
    f5d0:	4b2b      	ldr	r3, [pc, #172]	; (f680 <_dtoa_r+0x2d8>)
    f5d2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    f5d6:	e9d3 0100 	ldrd	r0, r1, [r3]
    f5da:	e9cd 0104 	strd	r0, r1, [sp, #16]
    f5de:	9925      	ldr	r1, [sp, #148]	; 0x94
    f5e0:	2900      	cmp	r1, #0
    f5e2:	f2c0 8380 	blt.w	fce6 <_dtoa_r+0x93e>
    f5e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f5ea:	4659      	mov	r1, fp
    f5ec:	4650      	mov	r0, sl
    f5ee:	f7fd fa7f 	bl	caf0 <__aeabi_ddiv>
    f5f2:	f7fd fbed 	bl	cdd0 <__aeabi_d2iz>
    f5f6:	4605      	mov	r5, r0
    f5f8:	f7fd f8ea 	bl	c7d0 <__aeabi_i2d>
    f5fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f600:	f7fd f94c 	bl	c89c <__aeabi_dmul>
    f604:	4602      	mov	r2, r0
    f606:	460b      	mov	r3, r1
    f608:	4650      	mov	r0, sl
    f60a:	4659      	mov	r1, fp
    f60c:	f7fc ff92 	bl	c534 <__aeabi_dsub>
    f610:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f612:	f105 0330 	add.w	r3, r5, #48	; 0x30
    f616:	f1b9 0f01 	cmp.w	r9, #1
    f61a:	4606      	mov	r6, r0
    f61c:	460f      	mov	r7, r1
    f61e:	7013      	strb	r3, [r2, #0]
    f620:	f102 0b01 	add.w	fp, r2, #1
    f624:	d064      	beq.n	f6f0 <_dtoa_r+0x348>
    f626:	2200      	movs	r2, #0
    f628:	4b18      	ldr	r3, [pc, #96]	; (f68c <_dtoa_r+0x2e4>)
    f62a:	f7fd f937 	bl	c89c <__aeabi_dmul>
    f62e:	2200      	movs	r2, #0
    f630:	2300      	movs	r3, #0
    f632:	4606      	mov	r6, r0
    f634:	460f      	mov	r7, r1
    f636:	f7fd fb99 	bl	cd6c <__aeabi_dcmpeq>
    f63a:	2800      	cmp	r0, #0
    f63c:	f040 8081 	bne.w	f742 <_dtoa_r+0x39a>
    f640:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    f644:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f646:	9403      	str	r4, [sp, #12]
    f648:	44c8      	add	r8, r9
    f64a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
    f64e:	f105 0902 	add.w	r9, r5, #2
    f652:	e028      	b.n	f6a6 <_dtoa_r+0x2fe>
    f654:	f3af 8000 	nop.w
    f658:	636f4361 	.word	0x636f4361
    f65c:	3fd287a7 	.word	0x3fd287a7
    f660:	8b60c8b3 	.word	0x8b60c8b3
    f664:	3fc68a28 	.word	0x3fc68a28
    f668:	509f79fb 	.word	0x509f79fb
    f66c:	3fd34413 	.word	0x3fd34413
    f670:	7ff00000 	.word	0x7ff00000
    f674:	000125c5 	.word	0x000125c5
    f678:	000125c0 	.word	0x000125c0
    f67c:	3ff80000 	.word	0x3ff80000
    f680:	000124b8 	.word	0x000124b8
    f684:	000125b4 	.word	0x000125b4
    f688:	000125c4 	.word	0x000125c4
    f68c:	40240000 	.word	0x40240000
    f690:	f7fd f904 	bl	c89c <__aeabi_dmul>
    f694:	2200      	movs	r2, #0
    f696:	2300      	movs	r3, #0
    f698:	4606      	mov	r6, r0
    f69a:	460f      	mov	r7, r1
    f69c:	f7fd fb66 	bl	cd6c <__aeabi_dcmpeq>
    f6a0:	2800      	cmp	r0, #0
    f6a2:	f040 83c1 	bne.w	fe28 <_dtoa_r+0xa80>
    f6a6:	4652      	mov	r2, sl
    f6a8:	465b      	mov	r3, fp
    f6aa:	4630      	mov	r0, r6
    f6ac:	4639      	mov	r1, r7
    f6ae:	f7fd fa1f 	bl	caf0 <__aeabi_ddiv>
    f6b2:	f7fd fb8d 	bl	cdd0 <__aeabi_d2iz>
    f6b6:	4605      	mov	r5, r0
    f6b8:	f7fd f88a 	bl	c7d0 <__aeabi_i2d>
    f6bc:	4652      	mov	r2, sl
    f6be:	465b      	mov	r3, fp
    f6c0:	f7fd f8ec 	bl	c89c <__aeabi_dmul>
    f6c4:	4602      	mov	r2, r0
    f6c6:	460b      	mov	r3, r1
    f6c8:	4630      	mov	r0, r6
    f6ca:	4639      	mov	r1, r7
    f6cc:	f7fc ff32 	bl	c534 <__aeabi_dsub>
    f6d0:	f105 0e30 	add.w	lr, r5, #48	; 0x30
    f6d4:	45c1      	cmp	r9, r8
    f6d6:	f809 ec01 	strb.w	lr, [r9, #-1]
    f6da:	464c      	mov	r4, r9
    f6dc:	4606      	mov	r6, r0
    f6de:	460f      	mov	r7, r1
    f6e0:	f04f 0200 	mov.w	r2, #0
    f6e4:	4ba7      	ldr	r3, [pc, #668]	; (f984 <_dtoa_r+0x5dc>)
    f6e6:	f109 0901 	add.w	r9, r9, #1
    f6ea:	d1d1      	bne.n	f690 <_dtoa_r+0x2e8>
    f6ec:	46a3      	mov	fp, r4
    f6ee:	9c03      	ldr	r4, [sp, #12]
    f6f0:	4632      	mov	r2, r6
    f6f2:	463b      	mov	r3, r7
    f6f4:	4630      	mov	r0, r6
    f6f6:	4639      	mov	r1, r7
    f6f8:	f7fc ff1e 	bl	c538 <__adddf3>
    f6fc:	4606      	mov	r6, r0
    f6fe:	460f      	mov	r7, r1
    f700:	4632      	mov	r2, r6
    f702:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    f706:	463b      	mov	r3, r7
    f708:	f7fd fb3a 	bl	cd80 <__aeabi_dcmplt>
    f70c:	b940      	cbnz	r0, f720 <_dtoa_r+0x378>
    f70e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    f712:	4632      	mov	r2, r6
    f714:	463b      	mov	r3, r7
    f716:	f7fd fb29 	bl	cd6c <__aeabi_dcmpeq>
    f71a:	b190      	cbz	r0, f742 <_dtoa_r+0x39a>
    f71c:	07eb      	lsls	r3, r5, #31
    f71e:	d510      	bpl.n	f742 <_dtoa_r+0x39a>
    f720:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
    f724:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f726:	e005      	b.n	f734 <_dtoa_r+0x38c>
    f728:	429a      	cmp	r2, r3
    f72a:	f000 8428 	beq.w	ff7e <_dtoa_r+0xbd6>
    f72e:	f813 5c01 	ldrb.w	r5, [r3, #-1]
    f732:	469b      	mov	fp, r3
    f734:	2d39      	cmp	r5, #57	; 0x39
    f736:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
    f73a:	d0f5      	beq.n	f728 <_dtoa_r+0x380>
    f73c:	1c6a      	adds	r2, r5, #1
    f73e:	b2d2      	uxtb	r2, r2
    f740:	701a      	strb	r2, [r3, #0]
    f742:	4620      	mov	r0, r4
    f744:	990a      	ldr	r1, [sp, #40]	; 0x28
    f746:	f7ff fa51 	bl	ebec <_Bfree>
    f74a:	9e07      	ldr	r6, [sp, #28]
    f74c:	9d26      	ldr	r5, [sp, #152]	; 0x98
    f74e:	1c73      	adds	r3, r6, #1
    f750:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    f752:	2200      	movs	r2, #0
    f754:	f88b 2000 	strb.w	r2, [fp]
    f758:	602b      	str	r3, [r5, #0]
    f75a:	2e00      	cmp	r6, #0
    f75c:	f000 8325 	beq.w	fdaa <_dtoa_r+0xa02>
    f760:	9809      	ldr	r0, [sp, #36]	; 0x24
    f762:	f8c6 b000 	str.w	fp, [r6]
    f766:	b01b      	add	sp, #108	; 0x6c
    f768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f76c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    f76e:	2d00      	cmp	r5, #0
    f770:	f000 8103 	beq.w	f97a <_dtoa_r+0x5d2>
    f774:	9e24      	ldr	r6, [sp, #144]	; 0x90
    f776:	2e01      	cmp	r6, #1
    f778:	f340 82dc 	ble.w	fd34 <_dtoa_r+0x98c>
    f77c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f77e:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
    f782:	42be      	cmp	r6, r7
    f784:	f2c0 8389 	blt.w	fe9a <_dtoa_r+0xaf2>
    f788:	1bf7      	subs	r7, r6, r7
    f78a:	f1b9 0f00 	cmp.w	r9, #0
    f78e:	f2c0 8486 	blt.w	1009e <_dtoa_r+0xcf6>
    f792:	9d08      	ldr	r5, [sp, #32]
    f794:	464b      	mov	r3, r9
    f796:	9e08      	ldr	r6, [sp, #32]
    f798:	441e      	add	r6, r3
    f79a:	9608      	str	r6, [sp, #32]
    f79c:	9e06      	ldr	r6, [sp, #24]
    f79e:	4620      	mov	r0, r4
    f7a0:	441e      	add	r6, r3
    f7a2:	2101      	movs	r1, #1
    f7a4:	9606      	str	r6, [sp, #24]
    f7a6:	f7ff fac5 	bl	ed34 <__i2b>
    f7aa:	4606      	mov	r6, r0
    f7ac:	b165      	cbz	r5, f7c8 <_dtoa_r+0x420>
    f7ae:	9806      	ldr	r0, [sp, #24]
    f7b0:	2800      	cmp	r0, #0
    f7b2:	dd09      	ble.n	f7c8 <_dtoa_r+0x420>
    f7b4:	4603      	mov	r3, r0
    f7b6:	9908      	ldr	r1, [sp, #32]
    f7b8:	42ab      	cmp	r3, r5
    f7ba:	bfa8      	it	ge
    f7bc:	462b      	movge	r3, r5
    f7be:	1ac9      	subs	r1, r1, r3
    f7c0:	1ac0      	subs	r0, r0, r3
    f7c2:	9108      	str	r1, [sp, #32]
    f7c4:	1aed      	subs	r5, r5, r3
    f7c6:	9006      	str	r0, [sp, #24]
    f7c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f7ca:	2a00      	cmp	r2, #0
    f7cc:	dd1d      	ble.n	f80a <_dtoa_r+0x462>
    f7ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7d0:	2b00      	cmp	r3, #0
    f7d2:	f000 8358 	beq.w	fe86 <_dtoa_r+0xade>
    f7d6:	2f00      	cmp	r7, #0
    f7d8:	dd11      	ble.n	f7fe <_dtoa_r+0x456>
    f7da:	4631      	mov	r1, r6
    f7dc:	463a      	mov	r2, r7
    f7de:	4620      	mov	r0, r4
    f7e0:	f7ff fb50 	bl	ee84 <__pow5mult>
    f7e4:	4606      	mov	r6, r0
    f7e6:	4631      	mov	r1, r6
    f7e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f7ea:	4620      	mov	r0, r4
    f7ec:	f7ff faac 	bl	ed48 <__multiply>
    f7f0:	990a      	ldr	r1, [sp, #40]	; 0x28
    f7f2:	4680      	mov	r8, r0
    f7f4:	4620      	mov	r0, r4
    f7f6:	f7ff f9f9 	bl	ebec <_Bfree>
    f7fa:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    f7fe:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
    f802:	ebbe 0207 	subs.w	r2, lr, r7
    f806:	f040 828f 	bne.w	fd28 <_dtoa_r+0x980>
    f80a:	4620      	mov	r0, r4
    f80c:	2101      	movs	r1, #1
    f80e:	f7ff fa91 	bl	ed34 <__i2b>
    f812:	4680      	mov	r8, r0
    f814:	980d      	ldr	r0, [sp, #52]	; 0x34
    f816:	2800      	cmp	r0, #0
    f818:	dd05      	ble.n	f826 <_dtoa_r+0x47e>
    f81a:	4641      	mov	r1, r8
    f81c:	4620      	mov	r0, r4
    f81e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f820:	f7ff fb30 	bl	ee84 <__pow5mult>
    f824:	4680      	mov	r8, r0
    f826:	9924      	ldr	r1, [sp, #144]	; 0x90
    f828:	2901      	cmp	r1, #1
    f82a:	f340 82c1 	ble.w	fdb0 <_dtoa_r+0xa08>
    f82e:	2700      	movs	r7, #0
    f830:	980d      	ldr	r0, [sp, #52]	; 0x34
    f832:	2800      	cmp	r0, #0
    f834:	f040 82af 	bne.w	fd96 <_dtoa_r+0x9ee>
    f838:	2001      	movs	r0, #1
    f83a:	9b06      	ldr	r3, [sp, #24]
    f83c:	4403      	add	r3, r0
    f83e:	f013 031f 	ands.w	r3, r3, #31
    f842:	f000 80a1 	beq.w	f988 <_dtoa_r+0x5e0>
    f846:	f1c3 0220 	rsb	r2, r3, #32
    f84a:	2a04      	cmp	r2, #4
    f84c:	f340 84b5 	ble.w	101ba <_dtoa_r+0xe12>
    f850:	9908      	ldr	r1, [sp, #32]
    f852:	9a06      	ldr	r2, [sp, #24]
    f854:	f1c3 031c 	rsb	r3, r3, #28
    f858:	4419      	add	r1, r3
    f85a:	441a      	add	r2, r3
    f85c:	9108      	str	r1, [sp, #32]
    f85e:	441d      	add	r5, r3
    f860:	9206      	str	r2, [sp, #24]
    f862:	9908      	ldr	r1, [sp, #32]
    f864:	2900      	cmp	r1, #0
    f866:	dd05      	ble.n	f874 <_dtoa_r+0x4cc>
    f868:	990a      	ldr	r1, [sp, #40]	; 0x28
    f86a:	9a08      	ldr	r2, [sp, #32]
    f86c:	4620      	mov	r0, r4
    f86e:	f7ff fb57 	bl	ef20 <__lshift>
    f872:	900a      	str	r0, [sp, #40]	; 0x28
    f874:	9a06      	ldr	r2, [sp, #24]
    f876:	2a00      	cmp	r2, #0
    f878:	dd04      	ble.n	f884 <_dtoa_r+0x4dc>
    f87a:	4641      	mov	r1, r8
    f87c:	4620      	mov	r0, r4
    f87e:	f7ff fb4f 	bl	ef20 <__lshift>
    f882:	4680      	mov	r8, r0
    f884:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f886:	2b00      	cmp	r3, #0
    f888:	f040 826a 	bne.w	fd60 <_dtoa_r+0x9b8>
    f88c:	f1b9 0f00 	cmp.w	r9, #0
    f890:	f340 82a6 	ble.w	fde0 <_dtoa_r+0xa38>
    f894:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f896:	2800      	cmp	r0, #0
    f898:	f040 8088 	bne.w	f9ac <_dtoa_r+0x604>
    f89c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    f89e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    f8a0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    f8a4:	e006      	b.n	f8b4 <_dtoa_r+0x50c>
    f8a6:	4639      	mov	r1, r7
    f8a8:	4620      	mov	r0, r4
    f8aa:	220a      	movs	r2, #10
    f8ac:	2300      	movs	r3, #0
    f8ae:	f7ff f9a7 	bl	ec00 <__multadd>
    f8b2:	4607      	mov	r7, r0
    f8b4:	4638      	mov	r0, r7
    f8b6:	4641      	mov	r1, r8
    f8b8:	f7ff fcdc 	bl	f274 <quorem>
    f8bc:	3030      	adds	r0, #48	; 0x30
    f8be:	f80b 0005 	strb.w	r0, [fp, r5]
    f8c2:	3501      	adds	r5, #1
    f8c4:	45a9      	cmp	r9, r5
    f8c6:	dcee      	bgt.n	f8a6 <_dtoa_r+0x4fe>
    f8c8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    f8cc:	970a      	str	r7, [sp, #40]	; 0x28
    f8ce:	4682      	mov	sl, r0
    f8d0:	f1b9 0f01 	cmp.w	r9, #1
    f8d4:	bfac      	ite	ge
    f8d6:	44cb      	addge	fp, r9
    f8d8:	f10b 0b01 	addlt.w	fp, fp, #1
    f8dc:	2500      	movs	r5, #0
    f8de:	990a      	ldr	r1, [sp, #40]	; 0x28
    f8e0:	2201      	movs	r2, #1
    f8e2:	4620      	mov	r0, r4
    f8e4:	f7ff fb1c 	bl	ef20 <__lshift>
    f8e8:	4641      	mov	r1, r8
    f8ea:	900a      	str	r0, [sp, #40]	; 0x28
    f8ec:	f7ff fb76 	bl	efdc <__mcmp>
    f8f0:	2800      	cmp	r0, #0
    f8f2:	f340 8309 	ble.w	ff08 <_dtoa_r+0xb60>
    f8f6:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
    f8fa:	9909      	ldr	r1, [sp, #36]	; 0x24
    f8fc:	e005      	b.n	f90a <_dtoa_r+0x562>
    f8fe:	4299      	cmp	r1, r3
    f900:	f000 828b 	beq.w	fe1a <_dtoa_r+0xa72>
    f904:	f813 2c01 	ldrb.w	r2, [r3, #-1]
    f908:	469b      	mov	fp, r3
    f90a:	2a39      	cmp	r2, #57	; 0x39
    f90c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
    f910:	d0f5      	beq.n	f8fe <_dtoa_r+0x556>
    f912:	3201      	adds	r2, #1
    f914:	701a      	strb	r2, [r3, #0]
    f916:	4641      	mov	r1, r8
    f918:	4620      	mov	r0, r4
    f91a:	f7ff f967 	bl	ebec <_Bfree>
    f91e:	2e00      	cmp	r6, #0
    f920:	f43f af0f 	beq.w	f742 <_dtoa_r+0x39a>
    f924:	b12d      	cbz	r5, f932 <_dtoa_r+0x58a>
    f926:	42b5      	cmp	r5, r6
    f928:	d003      	beq.n	f932 <_dtoa_r+0x58a>
    f92a:	4629      	mov	r1, r5
    f92c:	4620      	mov	r0, r4
    f92e:	f7ff f95d 	bl	ebec <_Bfree>
    f932:	4631      	mov	r1, r6
    f934:	4620      	mov	r0, r4
    f936:	f7ff f959 	bl	ebec <_Bfree>
    f93a:	e702      	b.n	f742 <_dtoa_r+0x39a>
    f93c:	2601      	movs	r6, #1
    f93e:	960e      	str	r6, [sp, #56]	; 0x38
    f940:	e5eb      	b.n	f51a <_dtoa_r+0x172>
    f942:	9807      	ldr	r0, [sp, #28]
    f944:	f7fc ff44 	bl	c7d0 <__aeabi_i2d>
    f948:	4632      	mov	r2, r6
    f94a:	463b      	mov	r3, r7
    f94c:	f7fd fa0e 	bl	cd6c <__aeabi_dcmpeq>
    f950:	2800      	cmp	r0, #0
    f952:	f47f adce 	bne.w	f4f2 <_dtoa_r+0x14a>
    f956:	9e07      	ldr	r6, [sp, #28]
    f958:	3e01      	subs	r6, #1
    f95a:	9607      	str	r6, [sp, #28]
    f95c:	e5c9      	b.n	f4f2 <_dtoa_r+0x14a>
    f95e:	9e07      	ldr	r6, [sp, #28]
    f960:	9d08      	ldr	r5, [sp, #32]
    f962:	1bad      	subs	r5, r5, r6
    f964:	9508      	str	r5, [sp, #32]
    f966:	4275      	negs	r5, r6
    f968:	2600      	movs	r6, #0
    f96a:	950c      	str	r5, [sp, #48]	; 0x30
    f96c:	960d      	str	r6, [sp, #52]	; 0x34
    f96e:	e5e6      	b.n	f53e <_dtoa_r+0x196>
    f970:	426d      	negs	r5, r5
    f972:	2600      	movs	r6, #0
    f974:	9508      	str	r5, [sp, #32]
    f976:	9606      	str	r6, [sp, #24]
    f978:	e5d7      	b.n	f52a <_dtoa_r+0x182>
    f97a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    f97c:	9d08      	ldr	r5, [sp, #32]
    f97e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    f980:	e714      	b.n	f7ac <_dtoa_r+0x404>
    f982:	bf00      	nop
    f984:	40240000 	.word	0x40240000
    f988:	231c      	movs	r3, #28
    f98a:	f8dd e020 	ldr.w	lr, [sp, #32]
    f98e:	9806      	ldr	r0, [sp, #24]
    f990:	449e      	add	lr, r3
    f992:	4418      	add	r0, r3
    f994:	f8cd e020 	str.w	lr, [sp, #32]
    f998:	441d      	add	r5, r3
    f99a:	9006      	str	r0, [sp, #24]
    f99c:	e761      	b.n	f862 <_dtoa_r+0x4ba>
    f99e:	48a7      	ldr	r0, [pc, #668]	; (fc3c <_dtoa_r+0x894>)
    f9a0:	1b40      	subs	r0, r0, r5
    f9a2:	fa0a f000 	lsl.w	r0, sl, r0
    f9a6:	e570      	b.n	f48a <_dtoa_r+0xe2>
    f9a8:	900e      	str	r0, [sp, #56]	; 0x38
    f9aa:	e5b6      	b.n	f51a <_dtoa_r+0x172>
    f9ac:	2d00      	cmp	r5, #0
    f9ae:	dd05      	ble.n	f9bc <_dtoa_r+0x614>
    f9b0:	4631      	mov	r1, r6
    f9b2:	462a      	mov	r2, r5
    f9b4:	4620      	mov	r0, r4
    f9b6:	f7ff fab3 	bl	ef20 <__lshift>
    f9ba:	4606      	mov	r6, r0
    f9bc:	2f00      	cmp	r7, #0
    f9be:	f040 82e8 	bne.w	ff92 <_dtoa_r+0xbea>
    f9c2:	4637      	mov	r7, r6
    f9c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f9c6:	9809      	ldr	r0, [sp, #36]	; 0x24
    f9c8:	444d      	add	r5, r9
    f9ca:	9508      	str	r5, [sp, #32]
    f9cc:	f00a 0501 	and.w	r5, sl, #1
    f9d0:	950b      	str	r5, [sp, #44]	; 0x2c
    f9d2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    f9d6:	1c45      	adds	r5, r0, #1
    f9d8:	e00a      	b.n	f9f0 <_dtoa_r+0x648>
    f9da:	f7ff f911 	bl	ec00 <__multadd>
    f9de:	4639      	mov	r1, r7
    f9e0:	4606      	mov	r6, r0
    f9e2:	220a      	movs	r2, #10
    f9e4:	4620      	mov	r0, r4
    f9e6:	2300      	movs	r3, #0
    f9e8:	f7ff f90a 	bl	ec00 <__multadd>
    f9ec:	4607      	mov	r7, r0
    f9ee:	3501      	adds	r5, #1
    f9f0:	4641      	mov	r1, r8
    f9f2:	4648      	mov	r0, r9
    f9f4:	f7ff fc3e 	bl	f274 <quorem>
    f9f8:	4631      	mov	r1, r6
    f9fa:	4683      	mov	fp, r0
    f9fc:	4648      	mov	r0, r9
    f9fe:	f7ff faed 	bl	efdc <__mcmp>
    fa02:	4641      	mov	r1, r8
    fa04:	9003      	str	r0, [sp, #12]
    fa06:	463a      	mov	r2, r7
    fa08:	4620      	mov	r0, r4
    fa0a:	f7ff fb0b 	bl	f024 <__mdiff>
    fa0e:	68c2      	ldr	r2, [r0, #12]
    fa10:	1e69      	subs	r1, r5, #1
    fa12:	4603      	mov	r3, r0
    fa14:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
    fa18:	9106      	str	r1, [sp, #24]
    fa1a:	2a00      	cmp	r2, #0
    fa1c:	f040 8193 	bne.w	fd46 <_dtoa_r+0x99e>
    fa20:	4619      	mov	r1, r3
    fa22:	4648      	mov	r0, r9
    fa24:	9302      	str	r3, [sp, #8]
    fa26:	f7ff fad9 	bl	efdc <__mcmp>
    fa2a:	9b02      	ldr	r3, [sp, #8]
    fa2c:	4602      	mov	r2, r0
    fa2e:	4619      	mov	r1, r3
    fa30:	4620      	mov	r0, r4
    fa32:	9202      	str	r2, [sp, #8]
    fa34:	f7ff f8da 	bl	ebec <_Bfree>
    fa38:	9a02      	ldr	r2, [sp, #8]
    fa3a:	b92a      	cbnz	r2, fa48 <_dtoa_r+0x6a0>
    fa3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    fa3e:	b91b      	cbnz	r3, fa48 <_dtoa_r+0x6a0>
    fa40:	980b      	ldr	r0, [sp, #44]	; 0x2c
    fa42:	2800      	cmp	r0, #0
    fa44:	f000 8391 	beq.w	1016a <_dtoa_r+0xdc2>
    fa48:	9b03      	ldr	r3, [sp, #12]
    fa4a:	2b00      	cmp	r3, #0
    fa4c:	f2c0 8234 	blt.w	feb8 <_dtoa_r+0xb10>
    fa50:	d105      	bne.n	fa5e <_dtoa_r+0x6b6>
    fa52:	9824      	ldr	r0, [sp, #144]	; 0x90
    fa54:	b918      	cbnz	r0, fa5e <_dtoa_r+0x6b6>
    fa56:	990b      	ldr	r1, [sp, #44]	; 0x2c
    fa58:	2900      	cmp	r1, #0
    fa5a:	f000 822d 	beq.w	feb8 <_dtoa_r+0xb10>
    fa5e:	2a00      	cmp	r2, #0
    fa60:	f300 82ab 	bgt.w	ffba <_dtoa_r+0xc12>
    fa64:	f8dd e020 	ldr.w	lr, [sp, #32]
    fa68:	f805 ac01 	strb.w	sl, [r5, #-1]
    fa6c:	4575      	cmp	r5, lr
    fa6e:	46ab      	mov	fp, r5
    fa70:	f000 82b3 	beq.w	ffda <_dtoa_r+0xc32>
    fa74:	4649      	mov	r1, r9
    fa76:	220a      	movs	r2, #10
    fa78:	2300      	movs	r3, #0
    fa7a:	4620      	mov	r0, r4
    fa7c:	f7ff f8c0 	bl	ec00 <__multadd>
    fa80:	42be      	cmp	r6, r7
    fa82:	4681      	mov	r9, r0
    fa84:	4631      	mov	r1, r6
    fa86:	4620      	mov	r0, r4
    fa88:	f04f 020a 	mov.w	r2, #10
    fa8c:	f04f 0300 	mov.w	r3, #0
    fa90:	d1a3      	bne.n	f9da <_dtoa_r+0x632>
    fa92:	f7ff f8b5 	bl	ec00 <__multadd>
    fa96:	4606      	mov	r6, r0
    fa98:	4607      	mov	r7, r0
    fa9a:	e7a8      	b.n	f9ee <_dtoa_r+0x646>
    fa9c:	2600      	movs	r6, #0
    fa9e:	960b      	str	r6, [sp, #44]	; 0x2c
    faa0:	9e07      	ldr	r6, [sp, #28]
    faa2:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
    faa6:	44b6      	add	lr, r6
    faa8:	f10e 0901 	add.w	r9, lr, #1
    faac:	f1b9 0f00 	cmp.w	r9, #0
    fab0:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
    fab4:	464e      	mov	r6, r9
    fab6:	f340 8150 	ble.w	fd5a <_dtoa_r+0x9b2>
    faba:	2100      	movs	r1, #0
    fabc:	2e17      	cmp	r6, #23
    fabe:	6461      	str	r1, [r4, #68]	; 0x44
    fac0:	d90a      	bls.n	fad8 <_dtoa_r+0x730>
    fac2:	2201      	movs	r2, #1
    fac4:	2304      	movs	r3, #4
    fac6:	005b      	lsls	r3, r3, #1
    fac8:	f103 0014 	add.w	r0, r3, #20
    facc:	42b0      	cmp	r0, r6
    face:	4611      	mov	r1, r2
    fad0:	f102 0201 	add.w	r2, r2, #1
    fad4:	d9f7      	bls.n	fac6 <_dtoa_r+0x71e>
    fad6:	6461      	str	r1, [r4, #68]	; 0x44
    fad8:	4620      	mov	r0, r4
    fada:	f7ff f861 	bl	eba0 <_Balloc>
    fade:	2e0e      	cmp	r6, #14
    fae0:	9009      	str	r0, [sp, #36]	; 0x24
    fae2:	6420      	str	r0, [r4, #64]	; 0x40
    fae4:	f63f ad6c 	bhi.w	f5c0 <_dtoa_r+0x218>
    fae8:	2d00      	cmp	r5, #0
    faea:	f43f ad69 	beq.w	f5c0 <_dtoa_r+0x218>
    faee:	9d07      	ldr	r5, [sp, #28]
    faf0:	2d00      	cmp	r5, #0
    faf2:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
    faf6:	f340 821b 	ble.w	ff30 <_dtoa_r+0xb88>
    fafa:	4b51      	ldr	r3, [pc, #324]	; (fc40 <_dtoa_r+0x898>)
    fafc:	f005 020f 	and.w	r2, r5, #15
    fb00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    fb04:	112d      	asrs	r5, r5, #4
    fb06:	e9d3 6700 	ldrd	r6, r7, [r3]
    fb0a:	06eb      	lsls	r3, r5, #27
    fb0c:	f140 81cd 	bpl.w	feaa <_dtoa_r+0xb02>
    fb10:	4b4c      	ldr	r3, [pc, #304]	; (fc44 <_dtoa_r+0x89c>)
    fb12:	4650      	mov	r0, sl
    fb14:	4659      	mov	r1, fp
    fb16:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    fb1a:	f7fc ffe9 	bl	caf0 <__aeabi_ddiv>
    fb1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    fb22:	f005 050f 	and.w	r5, r5, #15
    fb26:	f04f 0803 	mov.w	r8, #3
    fb2a:	b18d      	cbz	r5, fb50 <_dtoa_r+0x7a8>
    fb2c:	f8df a114 	ldr.w	sl, [pc, #276]	; fc44 <_dtoa_r+0x89c>
    fb30:	4630      	mov	r0, r6
    fb32:	4639      	mov	r1, r7
    fb34:	07ee      	lsls	r6, r5, #31
    fb36:	d505      	bpl.n	fb44 <_dtoa_r+0x79c>
    fb38:	e9da 2300 	ldrd	r2, r3, [sl]
    fb3c:	f108 0801 	add.w	r8, r8, #1
    fb40:	f7fc feac 	bl	c89c <__aeabi_dmul>
    fb44:	106d      	asrs	r5, r5, #1
    fb46:	f10a 0a08 	add.w	sl, sl, #8
    fb4a:	d1f3      	bne.n	fb34 <_dtoa_r+0x78c>
    fb4c:	4606      	mov	r6, r0
    fb4e:	460f      	mov	r7, r1
    fb50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    fb54:	4632      	mov	r2, r6
    fb56:	463b      	mov	r3, r7
    fb58:	f7fc ffca 	bl	caf0 <__aeabi_ddiv>
    fb5c:	4682      	mov	sl, r0
    fb5e:	468b      	mov	fp, r1
    fb60:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    fb62:	b145      	cbz	r5, fb76 <_dtoa_r+0x7ce>
    fb64:	4650      	mov	r0, sl
    fb66:	4659      	mov	r1, fp
    fb68:	2200      	movs	r2, #0
    fb6a:	4b37      	ldr	r3, [pc, #220]	; (fc48 <_dtoa_r+0x8a0>)
    fb6c:	f7fd f908 	bl	cd80 <__aeabi_dcmplt>
    fb70:	2800      	cmp	r0, #0
    fb72:	f040 82a9 	bne.w	100c8 <_dtoa_r+0xd20>
    fb76:	4640      	mov	r0, r8
    fb78:	f7fc fe2a 	bl	c7d0 <__aeabi_i2d>
    fb7c:	4652      	mov	r2, sl
    fb7e:	465b      	mov	r3, fp
    fb80:	f7fc fe8c 	bl	c89c <__aeabi_dmul>
    fb84:	2200      	movs	r2, #0
    fb86:	4b31      	ldr	r3, [pc, #196]	; (fc4c <_dtoa_r+0x8a4>)
    fb88:	f7fc fcd6 	bl	c538 <__adddf3>
    fb8c:	4606      	mov	r6, r0
    fb8e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
    fb92:	f1b9 0f00 	cmp.w	r9, #0
    fb96:	f000 815a 	beq.w	fe4e <_dtoa_r+0xaa6>
    fb9a:	9d07      	ldr	r5, [sp, #28]
    fb9c:	9517      	str	r5, [sp, #92]	; 0x5c
    fb9e:	46c8      	mov	r8, r9
    fba0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    fba2:	2d00      	cmp	r5, #0
    fba4:	f000 8222 	beq.w	ffec <_dtoa_r+0xc44>
    fba8:	4b25      	ldr	r3, [pc, #148]	; (fc40 <_dtoa_r+0x898>)
    fbaa:	4929      	ldr	r1, [pc, #164]	; (fc50 <_dtoa_r+0x8a8>)
    fbac:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
    fbb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    fbb4:	2000      	movs	r0, #0
    fbb6:	f7fc ff9b 	bl	caf0 <__aeabi_ddiv>
    fbba:	4632      	mov	r2, r6
    fbbc:	463b      	mov	r3, r7
    fbbe:	f7fc fcb9 	bl	c534 <__aeabi_dsub>
    fbc2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    fbc6:	4659      	mov	r1, fp
    fbc8:	4650      	mov	r0, sl
    fbca:	f7fd f901 	bl	cdd0 <__aeabi_d2iz>
    fbce:	4605      	mov	r5, r0
    fbd0:	f7fc fdfe 	bl	c7d0 <__aeabi_i2d>
    fbd4:	4602      	mov	r2, r0
    fbd6:	460b      	mov	r3, r1
    fbd8:	4650      	mov	r0, sl
    fbda:	4659      	mov	r1, fp
    fbdc:	f7fc fcaa 	bl	c534 <__aeabi_dsub>
    fbe0:	3530      	adds	r5, #48	; 0x30
    fbe2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    fbe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    fbe8:	b2ed      	uxtb	r5, r5
    fbea:	7035      	strb	r5, [r6, #0]
    fbec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    fbf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    fbf4:	f106 0b01 	add.w	fp, r6, #1
    fbf8:	f7fd f8e0 	bl	cdbc <__aeabi_dcmpgt>
    fbfc:	2800      	cmp	r0, #0
    fbfe:	f040 82a9 	bne.w	10154 <_dtoa_r+0xdac>
    fc02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    fc06:	2000      	movs	r0, #0
    fc08:	490f      	ldr	r1, [pc, #60]	; (fc48 <_dtoa_r+0x8a0>)
    fc0a:	f7fc fc93 	bl	c534 <__aeabi_dsub>
    fc0e:	4602      	mov	r2, r0
    fc10:	460b      	mov	r3, r1
    fc12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    fc16:	f7fd f8d1 	bl	cdbc <__aeabi_dcmpgt>
    fc1a:	2800      	cmp	r0, #0
    fc1c:	f040 82a0 	bne.w	10160 <_dtoa_r+0xdb8>
    fc20:	f1b8 0f01 	cmp.w	r8, #1
    fc24:	f340 8180 	ble.w	ff28 <_dtoa_r+0xb80>
    fc28:	44b0      	add	r8, r6
    fc2a:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
    fc2e:	46a2      	mov	sl, r4
    fc30:	46c1      	mov	r9, r8
    fc32:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    fc36:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
    fc3a:	e019      	b.n	fc70 <_dtoa_r+0x8c8>
    fc3c:	fffffbee 	.word	0xfffffbee
    fc40:	000124b8 	.word	0x000124b8
    fc44:	00012580 	.word	0x00012580
    fc48:	3ff00000 	.word	0x3ff00000
    fc4c:	401c0000 	.word	0x401c0000
    fc50:	3fe00000 	.word	0x3fe00000
    fc54:	2000      	movs	r0, #0
    fc56:	49a8      	ldr	r1, [pc, #672]	; (fef8 <_dtoa_r+0xb50>)
    fc58:	f7fc fc6c 	bl	c534 <__aeabi_dsub>
    fc5c:	4622      	mov	r2, r4
    fc5e:	462b      	mov	r3, r5
    fc60:	f7fd f88e 	bl	cd80 <__aeabi_dcmplt>
    fc64:	2800      	cmp	r0, #0
    fc66:	f040 8279 	bne.w	1015c <_dtoa_r+0xdb4>
    fc6a:	45cb      	cmp	fp, r9
    fc6c:	f000 8159 	beq.w	ff22 <_dtoa_r+0xb7a>
    fc70:	4620      	mov	r0, r4
    fc72:	4629      	mov	r1, r5
    fc74:	2200      	movs	r2, #0
    fc76:	4ba1      	ldr	r3, [pc, #644]	; (fefc <_dtoa_r+0xb54>)
    fc78:	f7fc fe10 	bl	c89c <__aeabi_dmul>
    fc7c:	2200      	movs	r2, #0
    fc7e:	4b9f      	ldr	r3, [pc, #636]	; (fefc <_dtoa_r+0xb54>)
    fc80:	4604      	mov	r4, r0
    fc82:	460d      	mov	r5, r1
    fc84:	4630      	mov	r0, r6
    fc86:	4639      	mov	r1, r7
    fc88:	f7fc fe08 	bl	c89c <__aeabi_dmul>
    fc8c:	460f      	mov	r7, r1
    fc8e:	4606      	mov	r6, r0
    fc90:	f7fd f89e 	bl	cdd0 <__aeabi_d2iz>
    fc94:	4680      	mov	r8, r0
    fc96:	f7fc fd9b 	bl	c7d0 <__aeabi_i2d>
    fc9a:	4602      	mov	r2, r0
    fc9c:	460b      	mov	r3, r1
    fc9e:	4630      	mov	r0, r6
    fca0:	4639      	mov	r1, r7
    fca2:	f7fc fc47 	bl	c534 <__aeabi_dsub>
    fca6:	f108 0830 	add.w	r8, r8, #48	; 0x30
    fcaa:	fa5f f888 	uxtb.w	r8, r8
    fcae:	4622      	mov	r2, r4
    fcb0:	462b      	mov	r3, r5
    fcb2:	f80b 8b01 	strb.w	r8, [fp], #1
    fcb6:	4606      	mov	r6, r0
    fcb8:	460f      	mov	r7, r1
    fcba:	f7fd f861 	bl	cd80 <__aeabi_dcmplt>
    fcbe:	4632      	mov	r2, r6
    fcc0:	463b      	mov	r3, r7
    fcc2:	2800      	cmp	r0, #0
    fcc4:	d0c6      	beq.n	fc54 <_dtoa_r+0x8ac>
    fcc6:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    fcc8:	9607      	str	r6, [sp, #28]
    fcca:	4654      	mov	r4, sl
    fccc:	e539      	b.n	f742 <_dtoa_r+0x39a>
    fcce:	2600      	movs	r6, #0
    fcd0:	960b      	str	r6, [sp, #44]	; 0x2c
    fcd2:	9825      	ldr	r0, [sp, #148]	; 0x94
    fcd4:	2800      	cmp	r0, #0
    fcd6:	dd3c      	ble.n	fd52 <_dtoa_r+0x9aa>
    fcd8:	4606      	mov	r6, r0
    fcda:	900f      	str	r0, [sp, #60]	; 0x3c
    fcdc:	4681      	mov	r9, r0
    fcde:	e6ec      	b.n	faba <_dtoa_r+0x712>
    fce0:	2601      	movs	r6, #1
    fce2:	960b      	str	r6, [sp, #44]	; 0x2c
    fce4:	e7f5      	b.n	fcd2 <_dtoa_r+0x92a>
    fce6:	f1b9 0f00 	cmp.w	r9, #0
    fcea:	f73f ac7c 	bgt.w	f5e6 <_dtoa_r+0x23e>
    fcee:	f040 80c6 	bne.w	fe7e <_dtoa_r+0xad6>
    fcf2:	2200      	movs	r2, #0
    fcf4:	4b82      	ldr	r3, [pc, #520]	; (ff00 <_dtoa_r+0xb58>)
    fcf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    fcfa:	f7fc fdcf 	bl	c89c <__aeabi_dmul>
    fcfe:	4652      	mov	r2, sl
    fd00:	465b      	mov	r3, fp
    fd02:	f7fd f851 	bl	cda8 <__aeabi_dcmpge>
    fd06:	46c8      	mov	r8, r9
    fd08:	464e      	mov	r6, r9
    fd0a:	2800      	cmp	r0, #0
    fd0c:	d07c      	beq.n	fe08 <_dtoa_r+0xa60>
    fd0e:	9d25      	ldr	r5, [sp, #148]	; 0x94
    fd10:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    fd14:	43ed      	mvns	r5, r5
    fd16:	9507      	str	r5, [sp, #28]
    fd18:	4641      	mov	r1, r8
    fd1a:	4620      	mov	r0, r4
    fd1c:	f7fe ff66 	bl	ebec <_Bfree>
    fd20:	2e00      	cmp	r6, #0
    fd22:	f47f ae06 	bne.w	f932 <_dtoa_r+0x58a>
    fd26:	e50c      	b.n	f742 <_dtoa_r+0x39a>
    fd28:	990a      	ldr	r1, [sp, #40]	; 0x28
    fd2a:	4620      	mov	r0, r4
    fd2c:	f7ff f8aa 	bl	ee84 <__pow5mult>
    fd30:	900a      	str	r0, [sp, #40]	; 0x28
    fd32:	e56a      	b.n	f80a <_dtoa_r+0x462>
    fd34:	9d16      	ldr	r5, [sp, #88]	; 0x58
    fd36:	2d00      	cmp	r5, #0
    fd38:	f000 81b7 	beq.w	100aa <_dtoa_r+0xd02>
    fd3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
    fd40:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    fd42:	9d08      	ldr	r5, [sp, #32]
    fd44:	e527      	b.n	f796 <_dtoa_r+0x3ee>
    fd46:	4601      	mov	r1, r0
    fd48:	4620      	mov	r0, r4
    fd4a:	f7fe ff4f 	bl	ebec <_Bfree>
    fd4e:	2201      	movs	r2, #1
    fd50:	e67a      	b.n	fa48 <_dtoa_r+0x6a0>
    fd52:	2601      	movs	r6, #1
    fd54:	9625      	str	r6, [sp, #148]	; 0x94
    fd56:	960f      	str	r6, [sp, #60]	; 0x3c
    fd58:	46b1      	mov	r9, r6
    fd5a:	2100      	movs	r1, #0
    fd5c:	6461      	str	r1, [r4, #68]	; 0x44
    fd5e:	e6bb      	b.n	fad8 <_dtoa_r+0x730>
    fd60:	980a      	ldr	r0, [sp, #40]	; 0x28
    fd62:	4641      	mov	r1, r8
    fd64:	f7ff f93a 	bl	efdc <__mcmp>
    fd68:	2800      	cmp	r0, #0
    fd6a:	f6bf ad8f 	bge.w	f88c <_dtoa_r+0x4e4>
    fd6e:	f8dd e01c 	ldr.w	lr, [sp, #28]
    fd72:	990a      	ldr	r1, [sp, #40]	; 0x28
    fd74:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    fd78:	4620      	mov	r0, r4
    fd7a:	220a      	movs	r2, #10
    fd7c:	2300      	movs	r3, #0
    fd7e:	f8cd e01c 	str.w	lr, [sp, #28]
    fd82:	f7fe ff3d 	bl	ec00 <__multadd>
    fd86:	900a      	str	r0, [sp, #40]	; 0x28
    fd88:	980b      	ldr	r0, [sp, #44]	; 0x2c
    fd8a:	2800      	cmp	r0, #0
    fd8c:	f040 8207 	bne.w	1019e <_dtoa_r+0xdf6>
    fd90:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    fd94:	e57a      	b.n	f88c <_dtoa_r+0x4e4>
    fd96:	f8d8 3010 	ldr.w	r3, [r8, #16]
    fd9a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    fd9e:	6918      	ldr	r0, [r3, #16]
    fda0:	f7fe ff7a 	bl	ec98 <__hi0bits>
    fda4:	f1c0 0020 	rsb	r0, r0, #32
    fda8:	e547      	b.n	f83a <_dtoa_r+0x492>
    fdaa:	9809      	ldr	r0, [sp, #36]	; 0x24
    fdac:	f7ff bb2d 	b.w	f40a <_dtoa_r+0x62>
    fdb0:	f1ba 0f00 	cmp.w	sl, #0
    fdb4:	f47f ad3b 	bne.w	f82e <_dtoa_r+0x486>
    fdb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
    fdbc:	2b00      	cmp	r3, #0
    fdbe:	f040 817b 	bne.w	100b8 <_dtoa_r+0xd10>
    fdc2:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
    fdc6:	0d3f      	lsrs	r7, r7, #20
    fdc8:	053f      	lsls	r7, r7, #20
    fdca:	2f00      	cmp	r7, #0
    fdcc:	f43f ad30 	beq.w	f830 <_dtoa_r+0x488>
    fdd0:	9a08      	ldr	r2, [sp, #32]
    fdd2:	9b06      	ldr	r3, [sp, #24]
    fdd4:	3201      	adds	r2, #1
    fdd6:	3301      	adds	r3, #1
    fdd8:	9208      	str	r2, [sp, #32]
    fdda:	9306      	str	r3, [sp, #24]
    fddc:	2701      	movs	r7, #1
    fdde:	e527      	b.n	f830 <_dtoa_r+0x488>
    fde0:	9924      	ldr	r1, [sp, #144]	; 0x90
    fde2:	2902      	cmp	r1, #2
    fde4:	f77f ad56 	ble.w	f894 <_dtoa_r+0x4ec>
    fde8:	f1b9 0f00 	cmp.w	r9, #0
    fdec:	d18f      	bne.n	fd0e <_dtoa_r+0x966>
    fdee:	4641      	mov	r1, r8
    fdf0:	464b      	mov	r3, r9
    fdf2:	2205      	movs	r2, #5
    fdf4:	4620      	mov	r0, r4
    fdf6:	f7fe ff03 	bl	ec00 <__multadd>
    fdfa:	4680      	mov	r8, r0
    fdfc:	4641      	mov	r1, r8
    fdfe:	980a      	ldr	r0, [sp, #40]	; 0x28
    fe00:	f7ff f8ec 	bl	efdc <__mcmp>
    fe04:	2800      	cmp	r0, #0
    fe06:	dd82      	ble.n	fd0e <_dtoa_r+0x966>
    fe08:	9d07      	ldr	r5, [sp, #28]
    fe0a:	3501      	adds	r5, #1
    fe0c:	9507      	str	r5, [sp, #28]
    fe0e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    fe10:	2331      	movs	r3, #49	; 0x31
    fe12:	702b      	strb	r3, [r5, #0]
    fe14:	f105 0b01 	add.w	fp, r5, #1
    fe18:	e77e      	b.n	fd18 <_dtoa_r+0x970>
    fe1a:	9807      	ldr	r0, [sp, #28]
    fe1c:	9909      	ldr	r1, [sp, #36]	; 0x24
    fe1e:	2331      	movs	r3, #49	; 0x31
    fe20:	3001      	adds	r0, #1
    fe22:	9007      	str	r0, [sp, #28]
    fe24:	700b      	strb	r3, [r1, #0]
    fe26:	e576      	b.n	f916 <_dtoa_r+0x56e>
    fe28:	46a3      	mov	fp, r4
    fe2a:	9c03      	ldr	r4, [sp, #12]
    fe2c:	e489      	b.n	f742 <_dtoa_r+0x39a>
    fe2e:	4640      	mov	r0, r8
    fe30:	f7fc fcce 	bl	c7d0 <__aeabi_i2d>
    fe34:	4602      	mov	r2, r0
    fe36:	460b      	mov	r3, r1
    fe38:	4650      	mov	r0, sl
    fe3a:	4659      	mov	r1, fp
    fe3c:	f7fc fd2e 	bl	c89c <__aeabi_dmul>
    fe40:	2200      	movs	r2, #0
    fe42:	4b30      	ldr	r3, [pc, #192]	; (ff04 <_dtoa_r+0xb5c>)
    fe44:	f7fc fb78 	bl	c538 <__adddf3>
    fe48:	4606      	mov	r6, r0
    fe4a:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
    fe4e:	4650      	mov	r0, sl
    fe50:	4659      	mov	r1, fp
    fe52:	2200      	movs	r2, #0
    fe54:	4b2a      	ldr	r3, [pc, #168]	; (ff00 <_dtoa_r+0xb58>)
    fe56:	f7fc fb6d 	bl	c534 <__aeabi_dsub>
    fe5a:	4632      	mov	r2, r6
    fe5c:	463b      	mov	r3, r7
    fe5e:	4682      	mov	sl, r0
    fe60:	468b      	mov	fp, r1
    fe62:	f7fc ffab 	bl	cdbc <__aeabi_dcmpgt>
    fe66:	2800      	cmp	r0, #0
    fe68:	f040 80bc 	bne.w	ffe4 <_dtoa_r+0xc3c>
    fe6c:	4632      	mov	r2, r6
    fe6e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
    fe72:	4650      	mov	r0, sl
    fe74:	4659      	mov	r1, fp
    fe76:	f7fc ff83 	bl	cd80 <__aeabi_dcmplt>
    fe7a:	2800      	cmp	r0, #0
    fe7c:	d054      	beq.n	ff28 <_dtoa_r+0xb80>
    fe7e:	f04f 0800 	mov.w	r8, #0
    fe82:	4646      	mov	r6, r8
    fe84:	e743      	b.n	fd0e <_dtoa_r+0x966>
    fe86:	990a      	ldr	r1, [sp, #40]	; 0x28
    fe88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fe8a:	4620      	mov	r0, r4
    fe8c:	f7fe fffa 	bl	ee84 <__pow5mult>
    fe90:	900a      	str	r0, [sp, #40]	; 0x28
    fe92:	e4ba      	b.n	f80a <_dtoa_r+0x462>
    fe94:	2601      	movs	r6, #1
    fe96:	960b      	str	r6, [sp, #44]	; 0x2c
    fe98:	e602      	b.n	faa0 <_dtoa_r+0x6f8>
    fe9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    fe9c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    fe9e:	970c      	str	r7, [sp, #48]	; 0x30
    fea0:	1b7b      	subs	r3, r7, r5
    fea2:	441e      	add	r6, r3
    fea4:	960d      	str	r6, [sp, #52]	; 0x34
    fea6:	2700      	movs	r7, #0
    fea8:	e46f      	b.n	f78a <_dtoa_r+0x3e2>
    feaa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    feae:	f04f 0802 	mov.w	r8, #2
    feb2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    feb6:	e638      	b.n	fb2a <_dtoa_r+0x782>
    feb8:	2a00      	cmp	r2, #0
    feba:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    febe:	46d9      	mov	r9, fp
    fec0:	dd11      	ble.n	fee6 <_dtoa_r+0xb3e>
    fec2:	990a      	ldr	r1, [sp, #40]	; 0x28
    fec4:	2201      	movs	r2, #1
    fec6:	4620      	mov	r0, r4
    fec8:	f7ff f82a 	bl	ef20 <__lshift>
    fecc:	4641      	mov	r1, r8
    fece:	900a      	str	r0, [sp, #40]	; 0x28
    fed0:	f7ff f884 	bl	efdc <__mcmp>
    fed4:	2800      	cmp	r0, #0
    fed6:	f340 815b 	ble.w	10190 <_dtoa_r+0xde8>
    feda:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    fede:	f000 811a 	beq.w	10116 <_dtoa_r+0xd6e>
    fee2:	f109 0a31 	add.w	sl, r9, #49	; 0x31
    fee6:	9b06      	ldr	r3, [sp, #24]
    fee8:	4635      	mov	r5, r6
    feea:	f883 a000 	strb.w	sl, [r3]
    feee:	f103 0b01 	add.w	fp, r3, #1
    fef2:	463e      	mov	r6, r7
    fef4:	e50f      	b.n	f916 <_dtoa_r+0x56e>
    fef6:	bf00      	nop
    fef8:	3ff00000 	.word	0x3ff00000
    fefc:	40240000 	.word	0x40240000
    ff00:	40140000 	.word	0x40140000
    ff04:	401c0000 	.word	0x401c0000
    ff08:	d103      	bne.n	ff12 <_dtoa_r+0xb6a>
    ff0a:	f01a 0f01 	tst.w	sl, #1
    ff0e:	f47f acf2 	bne.w	f8f6 <_dtoa_r+0x54e>
    ff12:	465b      	mov	r3, fp
    ff14:	469b      	mov	fp, r3
    ff16:	3b01      	subs	r3, #1
    ff18:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
    ff1c:	2a30      	cmp	r2, #48	; 0x30
    ff1e:	d0f9      	beq.n	ff14 <_dtoa_r+0xb6c>
    ff20:	e4f9      	b.n	f916 <_dtoa_r+0x56e>
    ff22:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    ff26:	4654      	mov	r4, sl
    ff28:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
    ff2c:	f7ff bb48 	b.w	f5c0 <_dtoa_r+0x218>
    ff30:	9e07      	ldr	r6, [sp, #28]
    ff32:	4275      	negs	r5, r6
    ff34:	2d00      	cmp	r5, #0
    ff36:	f000 80c2 	beq.w	100be <_dtoa_r+0xd16>
    ff3a:	4ba3      	ldr	r3, [pc, #652]	; (101c8 <_dtoa_r+0xe20>)
    ff3c:	f005 020f 	and.w	r2, r5, #15
    ff40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    ff44:	e9d3 2300 	ldrd	r2, r3, [r3]
    ff48:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    ff4c:	f7fc fca6 	bl	c89c <__aeabi_dmul>
    ff50:	112d      	asrs	r5, r5, #4
    ff52:	4682      	mov	sl, r0
    ff54:	468b      	mov	fp, r1
    ff56:	f000 812d 	beq.w	101b4 <_dtoa_r+0xe0c>
    ff5a:	4e9c      	ldr	r6, [pc, #624]	; (101cc <_dtoa_r+0xe24>)
    ff5c:	f04f 0802 	mov.w	r8, #2
    ff60:	07ea      	lsls	r2, r5, #31
    ff62:	d505      	bpl.n	ff70 <_dtoa_r+0xbc8>
    ff64:	e9d6 2300 	ldrd	r2, r3, [r6]
    ff68:	f108 0801 	add.w	r8, r8, #1
    ff6c:	f7fc fc96 	bl	c89c <__aeabi_dmul>
    ff70:	106d      	asrs	r5, r5, #1
    ff72:	f106 0608 	add.w	r6, r6, #8
    ff76:	d1f3      	bne.n	ff60 <_dtoa_r+0xbb8>
    ff78:	4682      	mov	sl, r0
    ff7a:	468b      	mov	fp, r1
    ff7c:	e5f0      	b.n	fb60 <_dtoa_r+0x7b8>
    ff7e:	9e07      	ldr	r6, [sp, #28]
    ff80:	9d09      	ldr	r5, [sp, #36]	; 0x24
    ff82:	2230      	movs	r2, #48	; 0x30
    ff84:	702a      	strb	r2, [r5, #0]
    ff86:	3601      	adds	r6, #1
    ff88:	2231      	movs	r2, #49	; 0x31
    ff8a:	9607      	str	r6, [sp, #28]
    ff8c:	701a      	strb	r2, [r3, #0]
    ff8e:	f7ff bbd8 	b.w	f742 <_dtoa_r+0x39a>
    ff92:	6871      	ldr	r1, [r6, #4]
    ff94:	4620      	mov	r0, r4
    ff96:	f7fe fe03 	bl	eba0 <_Balloc>
    ff9a:	6933      	ldr	r3, [r6, #16]
    ff9c:	1c9a      	adds	r2, r3, #2
    ff9e:	4605      	mov	r5, r0
    ffa0:	0092      	lsls	r2, r2, #2
    ffa2:	f106 010c 	add.w	r1, r6, #12
    ffa6:	300c      	adds	r0, #12
    ffa8:	f7fe f866 	bl	e078 <memcpy>
    ffac:	4620      	mov	r0, r4
    ffae:	4629      	mov	r1, r5
    ffb0:	2201      	movs	r2, #1
    ffb2:	f7fe ffb5 	bl	ef20 <__lshift>
    ffb6:	4607      	mov	r7, r0
    ffb8:	e504      	b.n	f9c4 <_dtoa_r+0x61c>
    ffba:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    ffbe:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    ffc2:	f000 80a8 	beq.w	10116 <_dtoa_r+0xd6e>
    ffc6:	9d06      	ldr	r5, [sp, #24]
    ffc8:	f10a 0301 	add.w	r3, sl, #1
    ffcc:	702b      	strb	r3, [r5, #0]
    ffce:	4635      	mov	r5, r6
    ffd0:	9e06      	ldr	r6, [sp, #24]
    ffd2:	f106 0b01 	add.w	fp, r6, #1
    ffd6:	463e      	mov	r6, r7
    ffd8:	e49d      	b.n	f916 <_dtoa_r+0x56e>
    ffda:	4635      	mov	r5, r6
    ffdc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    ffe0:	463e      	mov	r6, r7
    ffe2:	e47c      	b.n	f8de <_dtoa_r+0x536>
    ffe4:	f04f 0800 	mov.w	r8, #0
    ffe8:	4646      	mov	r6, r8
    ffea:	e70d      	b.n	fe08 <_dtoa_r+0xa60>
    ffec:	4976      	ldr	r1, [pc, #472]	; (101c8 <_dtoa_r+0xe20>)
    ffee:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
    fff2:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
    fff6:	4632      	mov	r2, r6
    fff8:	463b      	mov	r3, r7
    fffa:	e9d1 0100 	ldrd	r0, r1, [r1]
    fffe:	9510      	str	r5, [sp, #64]	; 0x40
   10000:	f7fc fc4c 	bl	c89c <__aeabi_dmul>
   10004:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   10008:	4659      	mov	r1, fp
   1000a:	4650      	mov	r0, sl
   1000c:	f7fc fee0 	bl	cdd0 <__aeabi_d2iz>
   10010:	4605      	mov	r5, r0
   10012:	f7fc fbdd 	bl	c7d0 <__aeabi_i2d>
   10016:	4602      	mov	r2, r0
   10018:	460b      	mov	r3, r1
   1001a:	4650      	mov	r0, sl
   1001c:	4659      	mov	r1, fp
   1001e:	f7fc fa89 	bl	c534 <__aeabi_dsub>
   10022:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   10026:	3530      	adds	r5, #48	; 0x30
   10028:	f1b8 0f01 	cmp.w	r8, #1
   1002c:	4606      	mov	r6, r0
   1002e:	460f      	mov	r7, r1
   10030:	f88e 5000 	strb.w	r5, [lr]
   10034:	f10e 0b01 	add.w	fp, lr, #1
   10038:	d01e      	beq.n	10078 <_dtoa_r+0xcd0>
   1003a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1003c:	1e6b      	subs	r3, r5, #1
   1003e:	eb03 0a08 	add.w	sl, r3, r8
   10042:	2200      	movs	r2, #0
   10044:	4b62      	ldr	r3, [pc, #392]	; (101d0 <_dtoa_r+0xe28>)
   10046:	f7fc fc29 	bl	c89c <__aeabi_dmul>
   1004a:	460f      	mov	r7, r1
   1004c:	4606      	mov	r6, r0
   1004e:	f7fc febf 	bl	cdd0 <__aeabi_d2iz>
   10052:	4680      	mov	r8, r0
   10054:	f7fc fbbc 	bl	c7d0 <__aeabi_i2d>
   10058:	f108 0830 	add.w	r8, r8, #48	; 0x30
   1005c:	4602      	mov	r2, r0
   1005e:	460b      	mov	r3, r1
   10060:	4630      	mov	r0, r6
   10062:	4639      	mov	r1, r7
   10064:	f7fc fa66 	bl	c534 <__aeabi_dsub>
   10068:	f805 8f01 	strb.w	r8, [r5, #1]!
   1006c:	4555      	cmp	r5, sl
   1006e:	d1e8      	bne.n	10042 <_dtoa_r+0xc9a>
   10070:	9d10      	ldr	r5, [sp, #64]	; 0x40
   10072:	4606      	mov	r6, r0
   10074:	460f      	mov	r7, r1
   10076:	44ab      	add	fp, r5
   10078:	2200      	movs	r2, #0
   1007a:	4b56      	ldr	r3, [pc, #344]	; (101d4 <_dtoa_r+0xe2c>)
   1007c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   10080:	f7fc fa5a 	bl	c538 <__adddf3>
   10084:	4632      	mov	r2, r6
   10086:	463b      	mov	r3, r7
   10088:	f7fc fe7a 	bl	cd80 <__aeabi_dcmplt>
   1008c:	2800      	cmp	r0, #0
   1008e:	d04d      	beq.n	1012c <_dtoa_r+0xd84>
   10090:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   10092:	9607      	str	r6, [sp, #28]
   10094:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
   10098:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1009a:	f7ff bb4b 	b.w	f734 <_dtoa_r+0x38c>
   1009e:	9e08      	ldr	r6, [sp, #32]
   100a0:	2300      	movs	r3, #0
   100a2:	ebc9 0506 	rsb	r5, r9, r6
   100a6:	f7ff bb76 	b.w	f796 <_dtoa_r+0x3ee>
   100aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
   100ac:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   100ae:	9d08      	ldr	r5, [sp, #32]
   100b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   100b4:	f7ff bb6f 	b.w	f796 <_dtoa_r+0x3ee>
   100b8:	4657      	mov	r7, sl
   100ba:	f7ff bbb9 	b.w	f830 <_dtoa_r+0x488>
   100be:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   100c2:	f04f 0802 	mov.w	r8, #2
   100c6:	e54b      	b.n	fb60 <_dtoa_r+0x7b8>
   100c8:	f1b9 0f00 	cmp.w	r9, #0
   100cc:	f43f aeaf 	beq.w	fe2e <_dtoa_r+0xa86>
   100d0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   100d2:	2e00      	cmp	r6, #0
   100d4:	f77f af28 	ble.w	ff28 <_dtoa_r+0xb80>
   100d8:	2200      	movs	r2, #0
   100da:	4b3d      	ldr	r3, [pc, #244]	; (101d0 <_dtoa_r+0xe28>)
   100dc:	4650      	mov	r0, sl
   100de:	4659      	mov	r1, fp
   100e0:	f7fc fbdc 	bl	c89c <__aeabi_dmul>
   100e4:	4682      	mov	sl, r0
   100e6:	f108 0001 	add.w	r0, r8, #1
   100ea:	468b      	mov	fp, r1
   100ec:	f7fc fb70 	bl	c7d0 <__aeabi_i2d>
   100f0:	4602      	mov	r2, r0
   100f2:	460b      	mov	r3, r1
   100f4:	4650      	mov	r0, sl
   100f6:	4659      	mov	r1, fp
   100f8:	f7fc fbd0 	bl	c89c <__aeabi_dmul>
   100fc:	2200      	movs	r2, #0
   100fe:	4b36      	ldr	r3, [pc, #216]	; (101d8 <_dtoa_r+0xe30>)
   10100:	f7fc fa1a 	bl	c538 <__adddf3>
   10104:	9d07      	ldr	r5, [sp, #28]
   10106:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   1010a:	3d01      	subs	r5, #1
   1010c:	4606      	mov	r6, r0
   1010e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   10112:	9517      	str	r5, [sp, #92]	; 0x5c
   10114:	e544      	b.n	fba0 <_dtoa_r+0x7f8>
   10116:	4635      	mov	r5, r6
   10118:	9b06      	ldr	r3, [sp, #24]
   1011a:	9e06      	ldr	r6, [sp, #24]
   1011c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1011e:	2239      	movs	r2, #57	; 0x39
   10120:	7032      	strb	r2, [r6, #0]
   10122:	f103 0b01 	add.w	fp, r3, #1
   10126:	463e      	mov	r6, r7
   10128:	f7ff bbef 	b.w	f90a <_dtoa_r+0x562>
   1012c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   10130:	2000      	movs	r0, #0
   10132:	4928      	ldr	r1, [pc, #160]	; (101d4 <_dtoa_r+0xe2c>)
   10134:	f7fc f9fe 	bl	c534 <__aeabi_dsub>
   10138:	4632      	mov	r2, r6
   1013a:	463b      	mov	r3, r7
   1013c:	f7fc fe3e 	bl	cdbc <__aeabi_dcmpgt>
   10140:	2800      	cmp	r0, #0
   10142:	f43f aef1 	beq.w	ff28 <_dtoa_r+0xb80>
   10146:	465b      	mov	r3, fp
   10148:	469b      	mov	fp, r3
   1014a:	3b01      	subs	r3, #1
   1014c:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   10150:	2a30      	cmp	r2, #48	; 0x30
   10152:	d0f9      	beq.n	10148 <_dtoa_r+0xda0>
   10154:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   10156:	9507      	str	r5, [sp, #28]
   10158:	f7ff baf3 	b.w	f742 <_dtoa_r+0x39a>
   1015c:	4645      	mov	r5, r8
   1015e:	4654      	mov	r4, sl
   10160:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   10162:	9607      	str	r6, [sp, #28]
   10164:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10166:	f7ff bae5 	b.w	f734 <_dtoa_r+0x38c>
   1016a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1016e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   10172:	d0d0      	beq.n	10116 <_dtoa_r+0xd6e>
   10174:	9b03      	ldr	r3, [sp, #12]
   10176:	4635      	mov	r5, r6
   10178:	2b00      	cmp	r3, #0
   1017a:	9e06      	ldr	r6, [sp, #24]
   1017c:	bfc8      	it	gt
   1017e:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
   10182:	f886 a000 	strb.w	sl, [r6]
   10186:	f106 0b01 	add.w	fp, r6, #1
   1018a:	463e      	mov	r6, r7
   1018c:	f7ff bbc3 	b.w	f916 <_dtoa_r+0x56e>
   10190:	f47f aea9 	bne.w	fee6 <_dtoa_r+0xb3e>
   10194:	f01a 0f01 	tst.w	sl, #1
   10198:	f43f aea5 	beq.w	fee6 <_dtoa_r+0xb3e>
   1019c:	e69d      	b.n	feda <_dtoa_r+0xb32>
   1019e:	4631      	mov	r1, r6
   101a0:	4620      	mov	r0, r4
   101a2:	220a      	movs	r2, #10
   101a4:	2300      	movs	r3, #0
   101a6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   101aa:	f7fe fd29 	bl	ec00 <__multadd>
   101ae:	4606      	mov	r6, r0
   101b0:	f7ff bb6c 	b.w	f88c <_dtoa_r+0x4e4>
   101b4:	f04f 0802 	mov.w	r8, #2
   101b8:	e4d2      	b.n	fb60 <_dtoa_r+0x7b8>
   101ba:	f43f ab52 	beq.w	f862 <_dtoa_r+0x4ba>
   101be:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   101c2:	f7ff bbe2 	b.w	f98a <_dtoa_r+0x5e2>
   101c6:	bf00      	nop
   101c8:	000124b8 	.word	0x000124b8
   101cc:	00012580 	.word	0x00012580
   101d0:	40240000 	.word	0x40240000
   101d4:	3fe00000 	.word	0x3fe00000
   101d8:	401c0000 	.word	0x401c0000
   101dc:	f3af 8000 	nop.w

000101e0 <_svfprintf_r>:
   101e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   101e4:	b0c9      	sub	sp, #292	; 0x124
   101e6:	4691      	mov	r9, r2
   101e8:	9310      	str	r3, [sp, #64]	; 0x40
   101ea:	910c      	str	r1, [sp, #48]	; 0x30
   101ec:	900d      	str	r0, [sp, #52]	; 0x34
   101ee:	f7fe fc8b 	bl	eb08 <_localeconv_r>
   101f2:	6800      	ldr	r0, [r0, #0]
   101f4:	9015      	str	r0, [sp, #84]	; 0x54
   101f6:	f7fe fa7f 	bl	e6f8 <strlen>
   101fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   101fc:	9018      	str	r0, [sp, #96]	; 0x60
   101fe:	89a3      	ldrh	r3, [r4, #12]
   10200:	061a      	lsls	r2, r3, #24
   10202:	d503      	bpl.n	1020c <_svfprintf_r+0x2c>
   10204:	6923      	ldr	r3, [r4, #16]
   10206:	2b00      	cmp	r3, #0
   10208:	f001 808d 	beq.w	11326 <_svfprintf_r+0x1146>
   1020c:	ac38      	add	r4, sp, #224	; 0xe0
   1020e:	46a4      	mov	ip, r4
   10210:	9408      	str	r4, [sp, #32]
   10212:	942b      	str	r4, [sp, #172]	; 0xac
   10214:	2500      	movs	r5, #0
   10216:	2400      	movs	r4, #0
   10218:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
   1021c:	2300      	movs	r3, #0
   1021e:	9311      	str	r3, [sp, #68]	; 0x44
   10220:	932d      	str	r3, [sp, #180]	; 0xb4
   10222:	932c      	str	r3, [sp, #176]	; 0xb0
   10224:	931a      	str	r3, [sp, #104]	; 0x68
   10226:	9319      	str	r3, [sp, #100]	; 0x64
   10228:	930e      	str	r3, [sp, #56]	; 0x38
   1022a:	4666      	mov	r6, ip
   1022c:	f899 3000 	ldrb.w	r3, [r9]
   10230:	2b00      	cmp	r3, #0
   10232:	f000 80f8 	beq.w	10426 <_svfprintf_r+0x246>
   10236:	2b25      	cmp	r3, #37	; 0x25
   10238:	f000 80f5 	beq.w	10426 <_svfprintf_r+0x246>
   1023c:	f109 0201 	add.w	r2, r9, #1
   10240:	e001      	b.n	10246 <_svfprintf_r+0x66>
   10242:	2b25      	cmp	r3, #37	; 0x25
   10244:	d004      	beq.n	10250 <_svfprintf_r+0x70>
   10246:	4614      	mov	r4, r2
   10248:	3201      	adds	r2, #1
   1024a:	7823      	ldrb	r3, [r4, #0]
   1024c:	2b00      	cmp	r3, #0
   1024e:	d1f8      	bne.n	10242 <_svfprintf_r+0x62>
   10250:	ebc9 0504 	rsb	r5, r9, r4
   10254:	b17d      	cbz	r5, 10276 <_svfprintf_r+0x96>
   10256:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10258:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   1025a:	f8c6 9000 	str.w	r9, [r6]
   1025e:	3301      	adds	r3, #1
   10260:	442a      	add	r2, r5
   10262:	2b07      	cmp	r3, #7
   10264:	6075      	str	r5, [r6, #4]
   10266:	922d      	str	r2, [sp, #180]	; 0xb4
   10268:	932c      	str	r3, [sp, #176]	; 0xb0
   1026a:	f300 80c2 	bgt.w	103f2 <_svfprintf_r+0x212>
   1026e:	3608      	adds	r6, #8
   10270:	980e      	ldr	r0, [sp, #56]	; 0x38
   10272:	4428      	add	r0, r5
   10274:	900e      	str	r0, [sp, #56]	; 0x38
   10276:	7823      	ldrb	r3, [r4, #0]
   10278:	2b00      	cmp	r3, #0
   1027a:	f000 80c2 	beq.w	10402 <_svfprintf_r+0x222>
   1027e:	2300      	movs	r3, #0
   10280:	f894 8001 	ldrb.w	r8, [r4, #1]
   10284:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
   10288:	461a      	mov	r2, r3
   1028a:	930f      	str	r3, [sp, #60]	; 0x3c
   1028c:	9309      	str	r3, [sp, #36]	; 0x24
   1028e:	f104 0901 	add.w	r9, r4, #1
   10292:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10296:	940a      	str	r4, [sp, #40]	; 0x28
   10298:	f109 0901 	add.w	r9, r9, #1
   1029c:	f1a8 0320 	sub.w	r3, r8, #32
   102a0:	2b58      	cmp	r3, #88	; 0x58
   102a2:	f200 83c7 	bhi.w	10a34 <_svfprintf_r+0x854>
   102a6:	e8df f013 	tbh	[pc, r3, lsl #1]
   102aa:	026a      	.short	0x026a
   102ac:	03c503c5 	.word	0x03c503c5
   102b0:	03c50271 	.word	0x03c50271
   102b4:	03c503c5 	.word	0x03c503c5
   102b8:	03c503c5 	.word	0x03c503c5
   102bc:	031403c5 	.word	0x031403c5
   102c0:	03c50364 	.word	0x03c50364
   102c4:	00c0009d 	.word	0x00c0009d
   102c8:	027803c5 	.word	0x027803c5
   102cc:	027f027f 	.word	0x027f027f
   102d0:	027f027f 	.word	0x027f027f
   102d4:	027f027f 	.word	0x027f027f
   102d8:	027f027f 	.word	0x027f027f
   102dc:	03c5027f 	.word	0x03c5027f
   102e0:	03c503c5 	.word	0x03c503c5
   102e4:	03c503c5 	.word	0x03c503c5
   102e8:	03c503c5 	.word	0x03c503c5
   102ec:	03c503c5 	.word	0x03c503c5
   102f0:	029003c5 	.word	0x029003c5
   102f4:	03c5036f 	.word	0x03c5036f
   102f8:	03c5036f 	.word	0x03c5036f
   102fc:	03c503c5 	.word	0x03c503c5
   10300:	036803c5 	.word	0x036803c5
   10304:	03c503c5 	.word	0x03c503c5
   10308:	03c50078 	.word	0x03c50078
   1030c:	03c503c5 	.word	0x03c503c5
   10310:	03c503c5 	.word	0x03c503c5
   10314:	03c50059 	.word	0x03c50059
   10318:	02af03c5 	.word	0x02af03c5
   1031c:	03c503c5 	.word	0x03c503c5
   10320:	03c503c5 	.word	0x03c503c5
   10324:	03c503c5 	.word	0x03c503c5
   10328:	03c503c5 	.word	0x03c503c5
   1032c:	03c503c5 	.word	0x03c503c5
   10330:	03480337 	.word	0x03480337
   10334:	036f036f 	.word	0x036f036f
   10338:	02ff036f 	.word	0x02ff036f
   1033c:	03c50348 	.word	0x03c50348
   10340:	030803c5 	.word	0x030803c5
   10344:	02c503c5 	.word	0x02c503c5
   10348:	0321007c 	.word	0x0321007c
   1034c:	03c503a5 	.word	0x03c503a5
   10350:	03c502d9 	.word	0x03c502d9
   10354:	03c5005f 	.word	0x03c5005f
   10358:	00de03c5 	.word	0x00de03c5
   1035c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   10360:	f04c 0c10 	orr.w	ip, ip, #16
   10364:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   10368:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1036a:	06a2      	lsls	r2, r4, #26
   1036c:	f100 8356 	bmi.w	10a1c <_svfprintf_r+0x83c>
   10370:	9c09      	ldr	r4, [sp, #36]	; 0x24
   10372:	06e3      	lsls	r3, r4, #27
   10374:	f100 85e0 	bmi.w	10f38 <_svfprintf_r+0xd58>
   10378:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   1037c:	f01c 0f40 	tst.w	ip, #64	; 0x40
   10380:	f000 85da 	beq.w	10f38 <_svfprintf_r+0xd58>
   10384:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   10388:	f8bc 4000 	ldrh.w	r4, [ip]
   1038c:	f10c 0c04 	add.w	ip, ip, #4
   10390:	2500      	movs	r5, #0
   10392:	2301      	movs	r3, #1
   10394:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   10398:	e08c      	b.n	104b4 <_svfprintf_r+0x2d4>
   1039a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1039c:	f045 0510 	orr.w	r5, r5, #16
   103a0:	9509      	str	r5, [sp, #36]	; 0x24
   103a2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   103a6:	f01c 0320 	ands.w	r3, ip, #32
   103aa:	f040 832c 	bne.w	10a06 <_svfprintf_r+0x826>
   103ae:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   103b2:	f01c 0210 	ands.w	r2, ip, #16
   103b6:	f040 85b8 	bne.w	10f2a <_svfprintf_r+0xd4a>
   103ba:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   103be:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
   103c2:	f000 85b2 	beq.w	10f2a <_svfprintf_r+0xd4a>
   103c6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   103ca:	f8bc 4000 	ldrh.w	r4, [ip]
   103ce:	f10c 0c04 	add.w	ip, ip, #4
   103d2:	4613      	mov	r3, r2
   103d4:	2500      	movs	r5, #0
   103d6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   103da:	e06b      	b.n	104b4 <_svfprintf_r+0x2d4>
   103dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   103de:	9310      	str	r3, [sp, #64]	; 0x40
   103e0:	4264      	negs	r4, r4
   103e2:	940f      	str	r4, [sp, #60]	; 0x3c
   103e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   103e6:	f045 0504 	orr.w	r5, r5, #4
   103ea:	9509      	str	r5, [sp, #36]	; 0x24
   103ec:	f899 8000 	ldrb.w	r8, [r9]
   103f0:	e752      	b.n	10298 <_svfprintf_r+0xb8>
   103f2:	980d      	ldr	r0, [sp, #52]	; 0x34
   103f4:	990c      	ldr	r1, [sp, #48]	; 0x30
   103f6:	aa2b      	add	r2, sp, #172	; 0xac
   103f8:	f001 f96e 	bl	116d8 <__ssprint_r>
   103fc:	b940      	cbnz	r0, 10410 <_svfprintf_r+0x230>
   103fe:	ae38      	add	r6, sp, #224	; 0xe0
   10400:	e736      	b.n	10270 <_svfprintf_r+0x90>
   10402:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   10404:	b123      	cbz	r3, 10410 <_svfprintf_r+0x230>
   10406:	980d      	ldr	r0, [sp, #52]	; 0x34
   10408:	990c      	ldr	r1, [sp, #48]	; 0x30
   1040a:	aa2b      	add	r2, sp, #172	; 0xac
   1040c:	f001 f964 	bl	116d8 <__ssprint_r>
   10410:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   10412:	980e      	ldr	r0, [sp, #56]	; 0x38
   10414:	89a3      	ldrh	r3, [r4, #12]
   10416:	f013 0f40 	tst.w	r3, #64	; 0x40
   1041a:	bf18      	it	ne
   1041c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   10420:	b049      	add	sp, #292	; 0x124
   10422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10426:	464c      	mov	r4, r9
   10428:	e725      	b.n	10276 <_svfprintf_r+0x96>
   1042a:	f899 8000 	ldrb.w	r8, [r9]
   1042e:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
   10432:	f109 0001 	add.w	r0, r9, #1
   10436:	f001 8118 	beq.w	1166a <_svfprintf_r+0x148a>
   1043a:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   1043e:	2b09      	cmp	r3, #9
   10440:	bf98      	it	ls
   10442:	2100      	movls	r1, #0
   10444:	f201 8077 	bhi.w	11536 <_svfprintf_r+0x1356>
   10448:	f810 8b01 	ldrb.w	r8, [r0], #1
   1044c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   10450:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   10454:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   10458:	2b09      	cmp	r3, #9
   1045a:	d9f5      	bls.n	10448 <_svfprintf_r+0x268>
   1045c:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   10460:	910a      	str	r1, [sp, #40]	; 0x28
   10462:	4681      	mov	r9, r0
   10464:	e71a      	b.n	1029c <_svfprintf_r+0xbc>
   10466:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10468:	4ca1      	ldr	r4, [pc, #644]	; (106f0 <_svfprintf_r+0x510>)
   1046a:	941a      	str	r4, [sp, #104]	; 0x68
   1046c:	06af      	lsls	r7, r5, #26
   1046e:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   10472:	f140 81d1 	bpl.w	10818 <_svfprintf_r+0x638>
   10476:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   1047a:	f10c 0307 	add.w	r3, ip, #7
   1047e:	f023 0307 	bic.w	r3, r3, #7
   10482:	f103 0408 	add.w	r4, r3, #8
   10486:	9410      	str	r4, [sp, #64]	; 0x40
   10488:	e9d3 4500 	ldrd	r4, r5, [r3]
   1048c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   10490:	f01c 0f01 	tst.w	ip, #1
   10494:	f000 8464 	beq.w	10d60 <_svfprintf_r+0xb80>
   10498:	ea54 0005 	orrs.w	r0, r4, r5
   1049c:	f000 8460 	beq.w	10d60 <_svfprintf_r+0xb80>
   104a0:	2330      	movs	r3, #48	; 0x30
   104a2:	f04c 0c02 	orr.w	ip, ip, #2
   104a6:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
   104aa:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
   104ae:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   104b2:	2302      	movs	r3, #2
   104b4:	f04f 0a00 	mov.w	sl, #0
   104b8:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   104bc:	990a      	ldr	r1, [sp, #40]	; 0x28
   104be:	2900      	cmp	r1, #0
   104c0:	db05      	blt.n	104ce <_svfprintf_r+0x2ee>
   104c2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   104c6:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
   104ca:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   104ce:	ea54 0005 	orrs.w	r0, r4, r5
   104d2:	f040 82c7 	bne.w	10a64 <_svfprintf_r+0x884>
   104d6:	990a      	ldr	r1, [sp, #40]	; 0x28
   104d8:	2900      	cmp	r1, #0
   104da:	f040 82c3 	bne.w	10a64 <_svfprintf_r+0x884>
   104de:	2b00      	cmp	r3, #0
   104e0:	f040 843a 	bne.w	10d58 <_svfprintf_r+0xb78>
   104e4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   104e8:	f01c 0f01 	tst.w	ip, #1
   104ec:	f000 8434 	beq.w	10d58 <_svfprintf_r+0xb78>
   104f0:	af48      	add	r7, sp, #288	; 0x120
   104f2:	2330      	movs	r3, #48	; 0x30
   104f4:	f807 3d41 	strb.w	r3, [r7, #-65]!
   104f8:	9d08      	ldr	r5, [sp, #32]
   104fa:	1bec      	subs	r4, r5, r7
   104fc:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   10500:	2500      	movs	r5, #0
   10502:	4564      	cmp	r4, ip
   10504:	bfa8      	it	ge
   10506:	46a4      	movge	ip, r4
   10508:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   1050c:	9514      	str	r5, [sp, #80]	; 0x50
   1050e:	f1ba 0f00 	cmp.w	sl, #0
   10512:	d002      	beq.n	1051a <_svfprintf_r+0x33a>
   10514:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10516:	3501      	adds	r5, #1
   10518:	950b      	str	r5, [sp, #44]	; 0x2c
   1051a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1051c:	f013 0302 	ands.w	r3, r3, #2
   10520:	9312      	str	r3, [sp, #72]	; 0x48
   10522:	d002      	beq.n	1052a <_svfprintf_r+0x34a>
   10524:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10526:	3502      	adds	r5, #2
   10528:	950b      	str	r5, [sp, #44]	; 0x2c
   1052a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   1052e:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
   10532:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
   10536:	f040 8292 	bne.w	10a5e <_svfprintf_r+0x87e>
   1053a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1053c:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
   10540:	ebcc 0b05 	rsb	fp, ip, r5
   10544:	f1bb 0f00 	cmp.w	fp, #0
   10548:	f340 8289 	ble.w	10a5e <_svfprintf_r+0x87e>
   1054c:	f1bb 0f10 	cmp.w	fp, #16
   10550:	992d      	ldr	r1, [sp, #180]	; 0xb4
   10552:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   10554:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 106f8 <_svfprintf_r+0x518>
   10558:	dd2c      	ble.n	105b4 <_svfprintf_r+0x3d4>
   1055a:	971b      	str	r7, [sp, #108]	; 0x6c
   1055c:	4630      	mov	r0, r6
   1055e:	4657      	mov	r7, sl
   10560:	2510      	movs	r5, #16
   10562:	46ca      	mov	sl, r9
   10564:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   10566:	46a1      	mov	r9, r4
   10568:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1056a:	e006      	b.n	1057a <_svfprintf_r+0x39a>
   1056c:	f1ab 0b10 	sub.w	fp, fp, #16
   10570:	f1bb 0f10 	cmp.w	fp, #16
   10574:	f100 0008 	add.w	r0, r0, #8
   10578:	dd17      	ble.n	105aa <_svfprintf_r+0x3ca>
   1057a:	3201      	adds	r2, #1
   1057c:	3110      	adds	r1, #16
   1057e:	2a07      	cmp	r2, #7
   10580:	912d      	str	r1, [sp, #180]	; 0xb4
   10582:	922c      	str	r2, [sp, #176]	; 0xb0
   10584:	6007      	str	r7, [r0, #0]
   10586:	6045      	str	r5, [r0, #4]
   10588:	ddf0      	ble.n	1056c <_svfprintf_r+0x38c>
   1058a:	4620      	mov	r0, r4
   1058c:	4631      	mov	r1, r6
   1058e:	aa2b      	add	r2, sp, #172	; 0xac
   10590:	f001 f8a2 	bl	116d8 <__ssprint_r>
   10594:	2800      	cmp	r0, #0
   10596:	f47f af3b 	bne.w	10410 <_svfprintf_r+0x230>
   1059a:	f1ab 0b10 	sub.w	fp, fp, #16
   1059e:	f1bb 0f10 	cmp.w	fp, #16
   105a2:	992d      	ldr	r1, [sp, #180]	; 0xb4
   105a4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   105a6:	a838      	add	r0, sp, #224	; 0xe0
   105a8:	dce7      	bgt.n	1057a <_svfprintf_r+0x39a>
   105aa:	464c      	mov	r4, r9
   105ac:	46d1      	mov	r9, sl
   105ae:	46ba      	mov	sl, r7
   105b0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
   105b2:	4606      	mov	r6, r0
   105b4:	3201      	adds	r2, #1
   105b6:	eb0b 0c01 	add.w	ip, fp, r1
   105ba:	2a07      	cmp	r2, #7
   105bc:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   105c0:	922c      	str	r2, [sp, #176]	; 0xb0
   105c2:	e886 0c00 	stmia.w	r6, {sl, fp}
   105c6:	f300 841c 	bgt.w	10e02 <_svfprintf_r+0xc22>
   105ca:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   105ce:	3608      	adds	r6, #8
   105d0:	f1ba 0f00 	cmp.w	sl, #0
   105d4:	d00f      	beq.n	105f6 <_svfprintf_r+0x416>
   105d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   105d8:	3301      	adds	r3, #1
   105da:	f10c 0c01 	add.w	ip, ip, #1
   105de:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
   105e2:	2201      	movs	r2, #1
   105e4:	2b07      	cmp	r3, #7
   105e6:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   105ea:	932c      	str	r3, [sp, #176]	; 0xb0
   105ec:	e886 0006 	stmia.w	r6, {r1, r2}
   105f0:	f300 839a 	bgt.w	10d28 <_svfprintf_r+0xb48>
   105f4:	3608      	adds	r6, #8
   105f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   105f8:	b173      	cbz	r3, 10618 <_svfprintf_r+0x438>
   105fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   105fc:	3301      	adds	r3, #1
   105fe:	f10c 0c02 	add.w	ip, ip, #2
   10602:	a924      	add	r1, sp, #144	; 0x90
   10604:	2202      	movs	r2, #2
   10606:	2b07      	cmp	r3, #7
   10608:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   1060c:	932c      	str	r3, [sp, #176]	; 0xb0
   1060e:	e886 0006 	stmia.w	r6, {r1, r2}
   10612:	f300 8395 	bgt.w	10d40 <_svfprintf_r+0xb60>
   10616:	3608      	adds	r6, #8
   10618:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   1061a:	2d80      	cmp	r5, #128	; 0x80
   1061c:	f000 82cc 	beq.w	10bb8 <_svfprintf_r+0x9d8>
   10620:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   10622:	ebc4 0a05 	rsb	sl, r4, r5
   10626:	f1ba 0f00 	cmp.w	sl, #0
   1062a:	dd3b      	ble.n	106a4 <_svfprintf_r+0x4c4>
   1062c:	f1ba 0f10 	cmp.w	sl, #16
   10630:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10632:	4d30      	ldr	r5, [pc, #192]	; (106f4 <_svfprintf_r+0x514>)
   10634:	dd2b      	ble.n	1068e <_svfprintf_r+0x4ae>
   10636:	940a      	str	r4, [sp, #40]	; 0x28
   10638:	4632      	mov	r2, r6
   1063a:	f04f 0b10 	mov.w	fp, #16
   1063e:	462e      	mov	r6, r5
   10640:	4661      	mov	r1, ip
   10642:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   10644:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   10646:	e006      	b.n	10656 <_svfprintf_r+0x476>
   10648:	f1aa 0a10 	sub.w	sl, sl, #16
   1064c:	f1ba 0f10 	cmp.w	sl, #16
   10650:	f102 0208 	add.w	r2, r2, #8
   10654:	dd17      	ble.n	10686 <_svfprintf_r+0x4a6>
   10656:	3301      	adds	r3, #1
   10658:	3110      	adds	r1, #16
   1065a:	2b07      	cmp	r3, #7
   1065c:	912d      	str	r1, [sp, #180]	; 0xb4
   1065e:	932c      	str	r3, [sp, #176]	; 0xb0
   10660:	e882 0840 	stmia.w	r2, {r6, fp}
   10664:	ddf0      	ble.n	10648 <_svfprintf_r+0x468>
   10666:	4620      	mov	r0, r4
   10668:	4629      	mov	r1, r5
   1066a:	aa2b      	add	r2, sp, #172	; 0xac
   1066c:	f001 f834 	bl	116d8 <__ssprint_r>
   10670:	2800      	cmp	r0, #0
   10672:	f47f aecd 	bne.w	10410 <_svfprintf_r+0x230>
   10676:	f1aa 0a10 	sub.w	sl, sl, #16
   1067a:	f1ba 0f10 	cmp.w	sl, #16
   1067e:	992d      	ldr	r1, [sp, #180]	; 0xb4
   10680:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10682:	aa38      	add	r2, sp, #224	; 0xe0
   10684:	dce7      	bgt.n	10656 <_svfprintf_r+0x476>
   10686:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10688:	4635      	mov	r5, r6
   1068a:	468c      	mov	ip, r1
   1068c:	4616      	mov	r6, r2
   1068e:	3301      	adds	r3, #1
   10690:	44d4      	add	ip, sl
   10692:	2b07      	cmp	r3, #7
   10694:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   10698:	932c      	str	r3, [sp, #176]	; 0xb0
   1069a:	e886 0420 	stmia.w	r6, {r5, sl}
   1069e:	f300 8337 	bgt.w	10d10 <_svfprintf_r+0xb30>
   106a2:	3608      	adds	r6, #8
   106a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   106a6:	05ed      	lsls	r5, r5, #23
   106a8:	f100 8226 	bmi.w	10af8 <_svfprintf_r+0x918>
   106ac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   106ae:	6037      	str	r7, [r6, #0]
   106b0:	3301      	adds	r3, #1
   106b2:	44a4      	add	ip, r4
   106b4:	2b07      	cmp	r3, #7
   106b6:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   106ba:	6074      	str	r4, [r6, #4]
   106bc:	932c      	str	r3, [sp, #176]	; 0xb0
   106be:	f300 8311 	bgt.w	10ce4 <_svfprintf_r+0xb04>
   106c2:	3608      	adds	r6, #8
   106c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   106c6:	0763      	lsls	r3, r4, #29
   106c8:	d549      	bpl.n	1075e <_svfprintf_r+0x57e>
   106ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   106cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
   106ce:	1a2c      	subs	r4, r5, r0
   106d0:	2c00      	cmp	r4, #0
   106d2:	dd44      	ble.n	1075e <_svfprintf_r+0x57e>
   106d4:	2c10      	cmp	r4, #16
   106d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   106d8:	f8df a01c 	ldr.w	sl, [pc, #28]	; 106f8 <_svfprintf_r+0x518>
   106dc:	dd2b      	ble.n	10736 <_svfprintf_r+0x556>
   106de:	4657      	mov	r7, sl
   106e0:	2510      	movs	r5, #16
   106e2:	4662      	mov	r2, ip
   106e4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   106e8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   106ec:	e00b      	b.n	10706 <_svfprintf_r+0x526>
   106ee:	bf00      	nop
   106f0:	000125fc 	.word	0x000125fc
   106f4:	000125c8 	.word	0x000125c8
   106f8:	00012618 	.word	0x00012618
   106fc:	3c10      	subs	r4, #16
   106fe:	2c10      	cmp	r4, #16
   10700:	f106 0608 	add.w	r6, r6, #8
   10704:	dd15      	ble.n	10732 <_svfprintf_r+0x552>
   10706:	3301      	adds	r3, #1
   10708:	3210      	adds	r2, #16
   1070a:	2b07      	cmp	r3, #7
   1070c:	922d      	str	r2, [sp, #180]	; 0xb4
   1070e:	932c      	str	r3, [sp, #176]	; 0xb0
   10710:	6037      	str	r7, [r6, #0]
   10712:	6075      	str	r5, [r6, #4]
   10714:	ddf2      	ble.n	106fc <_svfprintf_r+0x51c>
   10716:	4650      	mov	r0, sl
   10718:	4641      	mov	r1, r8
   1071a:	aa2b      	add	r2, sp, #172	; 0xac
   1071c:	f000 ffdc 	bl	116d8 <__ssprint_r>
   10720:	2800      	cmp	r0, #0
   10722:	f47f ae75 	bne.w	10410 <_svfprintf_r+0x230>
   10726:	3c10      	subs	r4, #16
   10728:	2c10      	cmp	r4, #16
   1072a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   1072c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1072e:	ae38      	add	r6, sp, #224	; 0xe0
   10730:	dce9      	bgt.n	10706 <_svfprintf_r+0x526>
   10732:	4694      	mov	ip, r2
   10734:	46ba      	mov	sl, r7
   10736:	3301      	adds	r3, #1
   10738:	44a4      	add	ip, r4
   1073a:	2b07      	cmp	r3, #7
   1073c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   10740:	932c      	str	r3, [sp, #176]	; 0xb0
   10742:	f8c6 a000 	str.w	sl, [r6]
   10746:	6074      	str	r4, [r6, #4]
   10748:	dd09      	ble.n	1075e <_svfprintf_r+0x57e>
   1074a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1074c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1074e:	aa2b      	add	r2, sp, #172	; 0xac
   10750:	f000 ffc2 	bl	116d8 <__ssprint_r>
   10754:	2800      	cmp	r0, #0
   10756:	f47f ae5b 	bne.w	10410 <_svfprintf_r+0x230>
   1075a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   1075e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   10760:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10762:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   10764:	42a8      	cmp	r0, r5
   10766:	bfac      	ite	ge
   10768:	1824      	addge	r4, r4, r0
   1076a:	1964      	addlt	r4, r4, r5
   1076c:	940e      	str	r4, [sp, #56]	; 0x38
   1076e:	f1bc 0f00 	cmp.w	ip, #0
   10772:	f040 82c3 	bne.w	10cfc <_svfprintf_r+0xb1c>
   10776:	2300      	movs	r3, #0
   10778:	932c      	str	r3, [sp, #176]	; 0xb0
   1077a:	ae38      	add	r6, sp, #224	; 0xe0
   1077c:	e556      	b.n	1022c <_svfprintf_r+0x4c>
   1077e:	f899 8000 	ldrb.w	r8, [r9]
   10782:	2a00      	cmp	r2, #0
   10784:	f47f ad88 	bne.w	10298 <_svfprintf_r+0xb8>
   10788:	2220      	movs	r2, #32
   1078a:	e585      	b.n	10298 <_svfprintf_r+0xb8>
   1078c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1078e:	f045 0501 	orr.w	r5, r5, #1
   10792:	9509      	str	r5, [sp, #36]	; 0x24
   10794:	f899 8000 	ldrb.w	r8, [r9]
   10798:	e57e      	b.n	10298 <_svfprintf_r+0xb8>
   1079a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1079c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   107a0:	9509      	str	r5, [sp, #36]	; 0x24
   107a2:	f899 8000 	ldrb.w	r8, [r9]
   107a6:	e577      	b.n	10298 <_svfprintf_r+0xb8>
   107a8:	2400      	movs	r4, #0
   107aa:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   107ae:	940f      	str	r4, [sp, #60]	; 0x3c
   107b0:	4621      	mov	r1, r4
   107b2:	f819 8b01 	ldrb.w	r8, [r9], #1
   107b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   107ba:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   107be:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   107c2:	2b09      	cmp	r3, #9
   107c4:	d9f5      	bls.n	107b2 <_svfprintf_r+0x5d2>
   107c6:	910f      	str	r1, [sp, #60]	; 0x3c
   107c8:	e568      	b.n	1029c <_svfprintf_r+0xbc>
   107ca:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   107ce:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   107d2:	f04c 0c10 	orr.w	ip, ip, #16
   107d6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   107da:	9c09      	ldr	r4, [sp, #36]	; 0x24
   107dc:	06a3      	lsls	r3, r4, #26
   107de:	f140 80b2 	bpl.w	10946 <_svfprintf_r+0x766>
   107e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
   107e4:	1de9      	adds	r1, r5, #7
   107e6:	f021 0107 	bic.w	r1, r1, #7
   107ea:	e9d1 2300 	ldrd	r2, r3, [r1]
   107ee:	3108      	adds	r1, #8
   107f0:	9110      	str	r1, [sp, #64]	; 0x40
   107f2:	4614      	mov	r4, r2
   107f4:	461d      	mov	r5, r3
   107f6:	2a00      	cmp	r2, #0
   107f8:	f173 0000 	sbcs.w	r0, r3, #0
   107fc:	f2c0 838b 	blt.w	10f16 <_svfprintf_r+0xd36>
   10800:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   10804:	2301      	movs	r3, #1
   10806:	e659      	b.n	104bc <_svfprintf_r+0x2dc>
   10808:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1080a:	4cb7      	ldr	r4, [pc, #732]	; (10ae8 <_svfprintf_r+0x908>)
   1080c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   10810:	06af      	lsls	r7, r5, #26
   10812:	941a      	str	r4, [sp, #104]	; 0x68
   10814:	f53f ae2f 	bmi.w	10476 <_svfprintf_r+0x296>
   10818:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1081a:	06ed      	lsls	r5, r5, #27
   1081c:	f140 845d 	bpl.w	110da <_svfprintf_r+0xefa>
   10820:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   10824:	f8dc 4000 	ldr.w	r4, [ip]
   10828:	f10c 0c04 	add.w	ip, ip, #4
   1082c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   10830:	2500      	movs	r5, #0
   10832:	e62b      	b.n	1048c <_svfprintf_r+0x2ac>
   10834:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   10838:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   1083c:	f01c 0f20 	tst.w	ip, #32
   10840:	f000 843d 	beq.w	110be <_svfprintf_r+0xede>
   10844:	9c10      	ldr	r4, [sp, #64]	; 0x40
   10846:	6821      	ldr	r1, [r4, #0]
   10848:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1084a:	17e5      	asrs	r5, r4, #31
   1084c:	462b      	mov	r3, r5
   1084e:	9d10      	ldr	r5, [sp, #64]	; 0x40
   10850:	4622      	mov	r2, r4
   10852:	3504      	adds	r5, #4
   10854:	9510      	str	r5, [sp, #64]	; 0x40
   10856:	e9c1 2300 	strd	r2, r3, [r1]
   1085a:	e4e7      	b.n	1022c <_svfprintf_r+0x4c>
   1085c:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1085e:	6827      	ldr	r7, [r4, #0]
   10860:	f04f 0a00 	mov.w	sl, #0
   10864:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   10868:	1d25      	adds	r5, r4, #4
   1086a:	2f00      	cmp	r7, #0
   1086c:	f000 85f5 	beq.w	1145a <_svfprintf_r+0x127a>
   10870:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10872:	2c00      	cmp	r4, #0
   10874:	4638      	mov	r0, r7
   10876:	f2c0 85a7 	blt.w	113c8 <_svfprintf_r+0x11e8>
   1087a:	4651      	mov	r1, sl
   1087c:	4622      	mov	r2, r4
   1087e:	f7fe f947 	bl	eb10 <memchr>
   10882:	2800      	cmp	r0, #0
   10884:	f000 861f 	beq.w	114c6 <_svfprintf_r+0x12e6>
   10888:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1088a:	9510      	str	r5, [sp, #64]	; 0x40
   1088c:	1bc0      	subs	r0, r0, r7
   1088e:	42a0      	cmp	r0, r4
   10890:	bfb8      	it	lt
   10892:	4604      	movlt	r4, r0
   10894:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
   10898:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1089c:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
   108a0:	950b      	str	r5, [sp, #44]	; 0x2c
   108a2:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   108a6:	e632      	b.n	1050e <_svfprintf_r+0x32e>
   108a8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   108ac:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
   108b0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   108b4:	f899 8000 	ldrb.w	r8, [r9]
   108b8:	e4ee      	b.n	10298 <_svfprintf_r+0xb8>
   108ba:	f899 8000 	ldrb.w	r8, [r9]
   108be:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   108c2:	464b      	mov	r3, r9
   108c4:	f000 848b 	beq.w	111de <_svfprintf_r+0xffe>
   108c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
   108ca:	f045 0510 	orr.w	r5, r5, #16
   108ce:	9509      	str	r5, [sp, #36]	; 0x24
   108d0:	e4e2      	b.n	10298 <_svfprintf_r+0xb8>
   108d2:	9c10      	ldr	r4, [sp, #64]	; 0x40
   108d4:	9d10      	ldr	r5, [sp, #64]	; 0x40
   108d6:	6824      	ldr	r4, [r4, #0]
   108d8:	940f      	str	r4, [sp, #60]	; 0x3c
   108da:	2c00      	cmp	r4, #0
   108dc:	f105 0304 	add.w	r3, r5, #4
   108e0:	f6ff ad7c 	blt.w	103dc <_svfprintf_r+0x1fc>
   108e4:	9310      	str	r3, [sp, #64]	; 0x40
   108e6:	f899 8000 	ldrb.w	r8, [r9]
   108ea:	e4d5      	b.n	10298 <_svfprintf_r+0xb8>
   108ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
   108ee:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   108f2:	487e      	ldr	r0, [pc, #504]	; (10aec <_svfprintf_r+0x90c>)
   108f4:	6814      	ldr	r4, [r2, #0]
   108f6:	901a      	str	r0, [sp, #104]	; 0x68
   108f8:	2330      	movs	r3, #48	; 0x30
   108fa:	1d15      	adds	r5, r2, #4
   108fc:	f04f 0878 	mov.w	r8, #120	; 0x78
   10900:	f04c 0c02 	orr.w	ip, ip, #2
   10904:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
   10908:	9510      	str	r5, [sp, #64]	; 0x40
   1090a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   1090e:	2500      	movs	r5, #0
   10910:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
   10914:	2302      	movs	r3, #2
   10916:	e5cd      	b.n	104b4 <_svfprintf_r+0x2d4>
   10918:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1091a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1091c:	6812      	ldr	r2, [r2, #0]
   1091e:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
   10922:	2300      	movs	r3, #0
   10924:	2401      	movs	r4, #1
   10926:	3504      	adds	r5, #4
   10928:	469a      	mov	sl, r3
   1092a:	940b      	str	r4, [sp, #44]	; 0x2c
   1092c:	9510      	str	r5, [sp, #64]	; 0x40
   1092e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
   10932:	930a      	str	r3, [sp, #40]	; 0x28
   10934:	9314      	str	r3, [sp, #80]	; 0x50
   10936:	af2e      	add	r7, sp, #184	; 0xb8
   10938:	e5ef      	b.n	1051a <_svfprintf_r+0x33a>
   1093a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1093c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   10940:	06a3      	lsls	r3, r4, #26
   10942:	f53f af4e 	bmi.w	107e2 <_svfprintf_r+0x602>
   10946:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   1094a:	f01c 0f10 	tst.w	ip, #16
   1094e:	f040 82d2 	bne.w	10ef6 <_svfprintf_r+0xd16>
   10952:	9c09      	ldr	r4, [sp, #36]	; 0x24
   10954:	0667      	lsls	r7, r4, #25
   10956:	f140 82ce 	bpl.w	10ef6 <_svfprintf_r+0xd16>
   1095a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   1095e:	f9bc 4000 	ldrsh.w	r4, [ip]
   10962:	f10c 0c04 	add.w	ip, ip, #4
   10966:	17e5      	asrs	r5, r4, #31
   10968:	4622      	mov	r2, r4
   1096a:	462b      	mov	r3, r5
   1096c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   10970:	e741      	b.n	107f6 <_svfprintf_r+0x616>
   10972:	f899 8000 	ldrb.w	r8, [r9]
   10976:	222b      	movs	r2, #43	; 0x2b
   10978:	e48e      	b.n	10298 <_svfprintf_r+0xb8>
   1097a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1097c:	f045 0508 	orr.w	r5, r5, #8
   10980:	9509      	str	r5, [sp, #36]	; 0x24
   10982:	f899 8000 	ldrb.w	r8, [r9]
   10986:	e487      	b.n	10298 <_svfprintf_r+0xb8>
   10988:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1098a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1098c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   10990:	1deb      	adds	r3, r5, #7
   10992:	0725      	lsls	r5, r4, #28
   10994:	f023 0307 	bic.w	r3, r3, #7
   10998:	f140 838a 	bpl.w	110b0 <_svfprintf_r+0xed0>
   1099c:	e9d3 4500 	ldrd	r4, r5, [r3]
   109a0:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
   109a4:	f103 0c08 	add.w	ip, r3, #8
   109a8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   109ac:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   109b0:	f7fa fece 	bl	b750 <__fpclassifyd>
   109b4:	2801      	cmp	r0, #1
   109b6:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   109ba:	f040 835f 	bne.w	1107c <_svfprintf_r+0xe9c>
   109be:	2200      	movs	r2, #0
   109c0:	2300      	movs	r3, #0
   109c2:	f7fc f9dd 	bl	cd80 <__aeabi_dcmplt>
   109c6:	2800      	cmp	r0, #0
   109c8:	f040 856d 	bne.w	114a6 <_svfprintf_r+0x12c6>
   109cc:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   109d0:	2503      	movs	r5, #3
   109d2:	950b      	str	r5, [sp, #44]	; 0x2c
   109d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   109d6:	4f46      	ldr	r7, [pc, #280]	; (10af0 <_svfprintf_r+0x910>)
   109d8:	4b46      	ldr	r3, [pc, #280]	; (10af4 <_svfprintf_r+0x914>)
   109da:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   109de:	2400      	movs	r4, #0
   109e0:	9509      	str	r5, [sp, #36]	; 0x24
   109e2:	2500      	movs	r5, #0
   109e4:	940a      	str	r4, [sp, #40]	; 0x28
   109e6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   109ea:	bfd8      	it	le
   109ec:	461f      	movle	r7, r3
   109ee:	2403      	movs	r4, #3
   109f0:	9514      	str	r5, [sp, #80]	; 0x50
   109f2:	e58c      	b.n	1050e <_svfprintf_r+0x32e>
   109f4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   109f8:	f04c 0c20 	orr.w	ip, ip, #32
   109fc:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   10a00:	f899 8000 	ldrb.w	r8, [r9]
   10a04:	e448      	b.n	10298 <_svfprintf_r+0xb8>
   10a06:	9c10      	ldr	r4, [sp, #64]	; 0x40
   10a08:	1de3      	adds	r3, r4, #7
   10a0a:	f023 0307 	bic.w	r3, r3, #7
   10a0e:	f103 0508 	add.w	r5, r3, #8
   10a12:	9510      	str	r5, [sp, #64]	; 0x40
   10a14:	e9d3 4500 	ldrd	r4, r5, [r3]
   10a18:	2300      	movs	r3, #0
   10a1a:	e54b      	b.n	104b4 <_svfprintf_r+0x2d4>
   10a1c:	9d10      	ldr	r5, [sp, #64]	; 0x40
   10a1e:	1deb      	adds	r3, r5, #7
   10a20:	f023 0307 	bic.w	r3, r3, #7
   10a24:	f103 0c08 	add.w	ip, r3, #8
   10a28:	e9d3 4500 	ldrd	r4, r5, [r3]
   10a2c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   10a30:	2301      	movs	r3, #1
   10a32:	e53f      	b.n	104b4 <_svfprintf_r+0x2d4>
   10a34:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   10a38:	f1b8 0f00 	cmp.w	r8, #0
   10a3c:	f43f ace1 	beq.w	10402 <_svfprintf_r+0x222>
   10a40:	2300      	movs	r3, #0
   10a42:	f04f 0c01 	mov.w	ip, #1
   10a46:	469a      	mov	sl, r3
   10a48:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   10a4c:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
   10a50:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
   10a54:	930a      	str	r3, [sp, #40]	; 0x28
   10a56:	9314      	str	r3, [sp, #80]	; 0x50
   10a58:	4664      	mov	r4, ip
   10a5a:	af2e      	add	r7, sp, #184	; 0xb8
   10a5c:	e55d      	b.n	1051a <_svfprintf_r+0x33a>
   10a5e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   10a62:	e5b5      	b.n	105d0 <_svfprintf_r+0x3f0>
   10a64:	2b01      	cmp	r3, #1
   10a66:	f000 80ec 	beq.w	10c42 <_svfprintf_r+0xa62>
   10a6a:	2b02      	cmp	r3, #2
   10a6c:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
   10a70:	d118      	bne.n	10aa4 <_svfprintf_r+0x8c4>
   10a72:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
   10a76:	4619      	mov	r1, r3
   10a78:	f004 000f 	and.w	r0, r4, #15
   10a7c:	0922      	lsrs	r2, r4, #4
   10a7e:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   10a82:	460f      	mov	r7, r1
   10a84:	092b      	lsrs	r3, r5, #4
   10a86:	f81c 1000 	ldrb.w	r1, [ip, r0]
   10a8a:	7039      	strb	r1, [r7, #0]
   10a8c:	ea52 0003 	orrs.w	r0, r2, r3
   10a90:	4614      	mov	r4, r2
   10a92:	461d      	mov	r5, r3
   10a94:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
   10a98:	d1ee      	bne.n	10a78 <_svfprintf_r+0x898>
   10a9a:	9d08      	ldr	r5, [sp, #32]
   10a9c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
   10aa0:	1bec      	subs	r4, r5, r7
   10aa2:	e52b      	b.n	104fc <_svfprintf_r+0x31c>
   10aa4:	08e0      	lsrs	r0, r4, #3
   10aa6:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   10aaa:	f004 0207 	and.w	r2, r4, #7
   10aae:	08e9      	lsrs	r1, r5, #3
   10ab0:	3230      	adds	r2, #48	; 0x30
   10ab2:	ea50 0c01 	orrs.w	ip, r0, r1
   10ab6:	461f      	mov	r7, r3
   10ab8:	701a      	strb	r2, [r3, #0]
   10aba:	4604      	mov	r4, r0
   10abc:	460d      	mov	r5, r1
   10abe:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   10ac2:	d1ef      	bne.n	10aa4 <_svfprintf_r+0x8c4>
   10ac4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   10ac6:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
   10aca:	07e0      	lsls	r0, r4, #31
   10acc:	4639      	mov	r1, r7
   10ace:	f140 80c1 	bpl.w	10c54 <_svfprintf_r+0xa74>
   10ad2:	2a30      	cmp	r2, #48	; 0x30
   10ad4:	f000 80be 	beq.w	10c54 <_svfprintf_r+0xa74>
   10ad8:	9d08      	ldr	r5, [sp, #32]
   10ada:	461f      	mov	r7, r3
   10adc:	2330      	movs	r3, #48	; 0x30
   10ade:	1bec      	subs	r4, r5, r7
   10ae0:	f801 3c01 	strb.w	r3, [r1, #-1]
   10ae4:	e50a      	b.n	104fc <_svfprintf_r+0x31c>
   10ae6:	bf00      	nop
   10ae8:	000125e8 	.word	0x000125e8
   10aec:	000125fc 	.word	0x000125fc
   10af0:	000125dc 	.word	0x000125dc
   10af4:	000125d8 	.word	0x000125d8
   10af8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   10afc:	f340 80ad 	ble.w	10c5a <_svfprintf_r+0xa7a>
   10b00:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   10b04:	2200      	movs	r2, #0
   10b06:	2300      	movs	r3, #0
   10b08:	f8cd c01c 	str.w	ip, [sp, #28]
   10b0c:	f7fc f92e 	bl	cd6c <__aeabi_dcmpeq>
   10b10:	f8dd c01c 	ldr.w	ip, [sp, #28]
   10b14:	2800      	cmp	r0, #0
   10b16:	f000 8126 	beq.w	10d66 <_svfprintf_r+0xb86>
   10b1a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10b1c:	4aaa      	ldr	r2, [pc, #680]	; (10dc8 <_svfprintf_r+0xbe8>)
   10b1e:	6032      	str	r2, [r6, #0]
   10b20:	3301      	adds	r3, #1
   10b22:	f10c 0c01 	add.w	ip, ip, #1
   10b26:	2201      	movs	r2, #1
   10b28:	2b07      	cmp	r3, #7
   10b2a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   10b2e:	932c      	str	r3, [sp, #176]	; 0xb0
   10b30:	6072      	str	r2, [r6, #4]
   10b32:	f300 82f7 	bgt.w	11124 <_svfprintf_r+0xf44>
   10b36:	3608      	adds	r6, #8
   10b38:	9b25      	ldr	r3, [sp, #148]	; 0x94
   10b3a:	9c11      	ldr	r4, [sp, #68]	; 0x44
   10b3c:	42a3      	cmp	r3, r4
   10b3e:	db03      	blt.n	10b48 <_svfprintf_r+0x968>
   10b40:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10b42:	07ec      	lsls	r4, r5, #31
   10b44:	f57f adbe 	bpl.w	106c4 <_svfprintf_r+0x4e4>
   10b48:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10b4a:	9d18      	ldr	r5, [sp, #96]	; 0x60
   10b4c:	9c15      	ldr	r4, [sp, #84]	; 0x54
   10b4e:	6034      	str	r4, [r6, #0]
   10b50:	3301      	adds	r3, #1
   10b52:	44ac      	add	ip, r5
   10b54:	2b07      	cmp	r3, #7
   10b56:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   10b5a:	6075      	str	r5, [r6, #4]
   10b5c:	932c      	str	r3, [sp, #176]	; 0xb0
   10b5e:	f300 8348 	bgt.w	111f2 <_svfprintf_r+0x1012>
   10b62:	3608      	adds	r6, #8
   10b64:	9d11      	ldr	r5, [sp, #68]	; 0x44
   10b66:	1e6c      	subs	r4, r5, #1
   10b68:	2c00      	cmp	r4, #0
   10b6a:	f77f adab 	ble.w	106c4 <_svfprintf_r+0x4e4>
   10b6e:	2c10      	cmp	r4, #16
   10b70:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10b72:	4d96      	ldr	r5, [pc, #600]	; (10dcc <_svfprintf_r+0xbec>)
   10b74:	f340 8197 	ble.w	10ea6 <_svfprintf_r+0xcc6>
   10b78:	2710      	movs	r7, #16
   10b7a:	4662      	mov	r2, ip
   10b7c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   10b80:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   10b84:	e004      	b.n	10b90 <_svfprintf_r+0x9b0>
   10b86:	3608      	adds	r6, #8
   10b88:	3c10      	subs	r4, #16
   10b8a:	2c10      	cmp	r4, #16
   10b8c:	f340 818a 	ble.w	10ea4 <_svfprintf_r+0xcc4>
   10b90:	3301      	adds	r3, #1
   10b92:	3210      	adds	r2, #16
   10b94:	2b07      	cmp	r3, #7
   10b96:	922d      	str	r2, [sp, #180]	; 0xb4
   10b98:	932c      	str	r3, [sp, #176]	; 0xb0
   10b9a:	e886 00a0 	stmia.w	r6, {r5, r7}
   10b9e:	ddf2      	ble.n	10b86 <_svfprintf_r+0x9a6>
   10ba0:	4640      	mov	r0, r8
   10ba2:	4651      	mov	r1, sl
   10ba4:	aa2b      	add	r2, sp, #172	; 0xac
   10ba6:	f000 fd97 	bl	116d8 <__ssprint_r>
   10baa:	2800      	cmp	r0, #0
   10bac:	f47f ac30 	bne.w	10410 <_svfprintf_r+0x230>
   10bb0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   10bb2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10bb4:	ae38      	add	r6, sp, #224	; 0xe0
   10bb6:	e7e7      	b.n	10b88 <_svfprintf_r+0x9a8>
   10bb8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   10bba:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10bbc:	ebc0 0a05 	rsb	sl, r0, r5
   10bc0:	f1ba 0f00 	cmp.w	sl, #0
   10bc4:	f77f ad2c 	ble.w	10620 <_svfprintf_r+0x440>
   10bc8:	f1ba 0f10 	cmp.w	sl, #16
   10bcc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10bce:	4d7f      	ldr	r5, [pc, #508]	; (10dcc <_svfprintf_r+0xbec>)
   10bd0:	dd2b      	ble.n	10c2a <_svfprintf_r+0xa4a>
   10bd2:	9412      	str	r4, [sp, #72]	; 0x48
   10bd4:	4632      	mov	r2, r6
   10bd6:	f04f 0b10 	mov.w	fp, #16
   10bda:	462e      	mov	r6, r5
   10bdc:	4661      	mov	r1, ip
   10bde:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   10be0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   10be2:	e006      	b.n	10bf2 <_svfprintf_r+0xa12>
   10be4:	f1aa 0a10 	sub.w	sl, sl, #16
   10be8:	f1ba 0f10 	cmp.w	sl, #16
   10bec:	f102 0208 	add.w	r2, r2, #8
   10bf0:	dd17      	ble.n	10c22 <_svfprintf_r+0xa42>
   10bf2:	3301      	adds	r3, #1
   10bf4:	3110      	adds	r1, #16
   10bf6:	2b07      	cmp	r3, #7
   10bf8:	912d      	str	r1, [sp, #180]	; 0xb4
   10bfa:	932c      	str	r3, [sp, #176]	; 0xb0
   10bfc:	e882 0840 	stmia.w	r2, {r6, fp}
   10c00:	ddf0      	ble.n	10be4 <_svfprintf_r+0xa04>
   10c02:	4620      	mov	r0, r4
   10c04:	4629      	mov	r1, r5
   10c06:	aa2b      	add	r2, sp, #172	; 0xac
   10c08:	f000 fd66 	bl	116d8 <__ssprint_r>
   10c0c:	2800      	cmp	r0, #0
   10c0e:	f47f abff 	bne.w	10410 <_svfprintf_r+0x230>
   10c12:	f1aa 0a10 	sub.w	sl, sl, #16
   10c16:	f1ba 0f10 	cmp.w	sl, #16
   10c1a:	992d      	ldr	r1, [sp, #180]	; 0xb4
   10c1c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10c1e:	aa38      	add	r2, sp, #224	; 0xe0
   10c20:	dce7      	bgt.n	10bf2 <_svfprintf_r+0xa12>
   10c22:	9c12      	ldr	r4, [sp, #72]	; 0x48
   10c24:	4635      	mov	r5, r6
   10c26:	468c      	mov	ip, r1
   10c28:	4616      	mov	r6, r2
   10c2a:	3301      	adds	r3, #1
   10c2c:	44d4      	add	ip, sl
   10c2e:	2b07      	cmp	r3, #7
   10c30:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   10c34:	932c      	str	r3, [sp, #176]	; 0xb0
   10c36:	e886 0420 	stmia.w	r6, {r5, sl}
   10c3a:	f300 8212 	bgt.w	11062 <_svfprintf_r+0xe82>
   10c3e:	3608      	adds	r6, #8
   10c40:	e4ee      	b.n	10620 <_svfprintf_r+0x440>
   10c42:	2d00      	cmp	r5, #0
   10c44:	bf08      	it	eq
   10c46:	2c0a      	cmpeq	r4, #10
   10c48:	f080 8138 	bcs.w	10ebc <_svfprintf_r+0xcdc>
   10c4c:	af48      	add	r7, sp, #288	; 0x120
   10c4e:	3430      	adds	r4, #48	; 0x30
   10c50:	f807 4d41 	strb.w	r4, [r7, #-65]!
   10c54:	9d08      	ldr	r5, [sp, #32]
   10c56:	1bec      	subs	r4, r5, r7
   10c58:	e450      	b.n	104fc <_svfprintf_r+0x31c>
   10c5a:	9c11      	ldr	r4, [sp, #68]	; 0x44
   10c5c:	2c01      	cmp	r4, #1
   10c5e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   10c60:	f340 81d5 	ble.w	1100e <_svfprintf_r+0xe2e>
   10c64:	3401      	adds	r4, #1
   10c66:	f10c 0301 	add.w	r3, ip, #1
   10c6a:	2201      	movs	r2, #1
   10c6c:	2c07      	cmp	r4, #7
   10c6e:	6037      	str	r7, [r6, #0]
   10c70:	932d      	str	r3, [sp, #180]	; 0xb4
   10c72:	942c      	str	r4, [sp, #176]	; 0xb0
   10c74:	6072      	str	r2, [r6, #4]
   10c76:	f300 81db 	bgt.w	11030 <_svfprintf_r+0xe50>
   10c7a:	3608      	adds	r6, #8
   10c7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   10c80:	9d15      	ldr	r5, [sp, #84]	; 0x54
   10c82:	6035      	str	r5, [r6, #0]
   10c84:	3401      	adds	r4, #1
   10c86:	4498      	add	r8, r3
   10c88:	9d18      	ldr	r5, [sp, #96]	; 0x60
   10c8a:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   10c8e:	2c07      	cmp	r4, #7
   10c90:	942c      	str	r4, [sp, #176]	; 0xb0
   10c92:	6075      	str	r5, [r6, #4]
   10c94:	f300 81d8 	bgt.w	11048 <_svfprintf_r+0xe68>
   10c98:	3608      	adds	r6, #8
   10c9a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   10c9e:	2200      	movs	r2, #0
   10ca0:	2300      	movs	r3, #0
   10ca2:	f7fc f863 	bl	cd6c <__aeabi_dcmpeq>
   10ca6:	9d11      	ldr	r5, [sp, #68]	; 0x44
   10ca8:	2800      	cmp	r0, #0
   10caa:	f040 80b9 	bne.w	10e20 <_svfprintf_r+0xc40>
   10cae:	1e6b      	subs	r3, r5, #1
   10cb0:	3401      	adds	r4, #1
   10cb2:	3701      	adds	r7, #1
   10cb4:	4498      	add	r8, r3
   10cb6:	2c07      	cmp	r4, #7
   10cb8:	942c      	str	r4, [sp, #176]	; 0xb0
   10cba:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   10cbe:	6037      	str	r7, [r6, #0]
   10cc0:	6073      	str	r3, [r6, #4]
   10cc2:	f300 80e2 	bgt.w	10e8a <_svfprintf_r+0xcaa>
   10cc6:	3608      	adds	r6, #8
   10cc8:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
   10ccc:	9d19      	ldr	r5, [sp, #100]	; 0x64
   10cce:	3401      	adds	r4, #1
   10cd0:	44c4      	add	ip, r8
   10cd2:	ab27      	add	r3, sp, #156	; 0x9c
   10cd4:	2c07      	cmp	r4, #7
   10cd6:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   10cda:	942c      	str	r4, [sp, #176]	; 0xb0
   10cdc:	e886 0028 	stmia.w	r6, {r3, r5}
   10ce0:	f77f acef 	ble.w	106c2 <_svfprintf_r+0x4e2>
   10ce4:	980d      	ldr	r0, [sp, #52]	; 0x34
   10ce6:	990c      	ldr	r1, [sp, #48]	; 0x30
   10ce8:	aa2b      	add	r2, sp, #172	; 0xac
   10cea:	f000 fcf5 	bl	116d8 <__ssprint_r>
   10cee:	2800      	cmp	r0, #0
   10cf0:	f47f ab8e 	bne.w	10410 <_svfprintf_r+0x230>
   10cf4:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   10cf8:	ae38      	add	r6, sp, #224	; 0xe0
   10cfa:	e4e3      	b.n	106c4 <_svfprintf_r+0x4e4>
   10cfc:	980d      	ldr	r0, [sp, #52]	; 0x34
   10cfe:	990c      	ldr	r1, [sp, #48]	; 0x30
   10d00:	aa2b      	add	r2, sp, #172	; 0xac
   10d02:	f000 fce9 	bl	116d8 <__ssprint_r>
   10d06:	2800      	cmp	r0, #0
   10d08:	f43f ad35 	beq.w	10776 <_svfprintf_r+0x596>
   10d0c:	f7ff bb80 	b.w	10410 <_svfprintf_r+0x230>
   10d10:	980d      	ldr	r0, [sp, #52]	; 0x34
   10d12:	990c      	ldr	r1, [sp, #48]	; 0x30
   10d14:	aa2b      	add	r2, sp, #172	; 0xac
   10d16:	f000 fcdf 	bl	116d8 <__ssprint_r>
   10d1a:	2800      	cmp	r0, #0
   10d1c:	f47f ab78 	bne.w	10410 <_svfprintf_r+0x230>
   10d20:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   10d24:	ae38      	add	r6, sp, #224	; 0xe0
   10d26:	e4bd      	b.n	106a4 <_svfprintf_r+0x4c4>
   10d28:	980d      	ldr	r0, [sp, #52]	; 0x34
   10d2a:	990c      	ldr	r1, [sp, #48]	; 0x30
   10d2c:	aa2b      	add	r2, sp, #172	; 0xac
   10d2e:	f000 fcd3 	bl	116d8 <__ssprint_r>
   10d32:	2800      	cmp	r0, #0
   10d34:	f47f ab6c 	bne.w	10410 <_svfprintf_r+0x230>
   10d38:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   10d3c:	ae38      	add	r6, sp, #224	; 0xe0
   10d3e:	e45a      	b.n	105f6 <_svfprintf_r+0x416>
   10d40:	980d      	ldr	r0, [sp, #52]	; 0x34
   10d42:	990c      	ldr	r1, [sp, #48]	; 0x30
   10d44:	aa2b      	add	r2, sp, #172	; 0xac
   10d46:	f000 fcc7 	bl	116d8 <__ssprint_r>
   10d4a:	2800      	cmp	r0, #0
   10d4c:	f47f ab60 	bne.w	10410 <_svfprintf_r+0x230>
   10d50:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   10d54:	ae38      	add	r6, sp, #224	; 0xe0
   10d56:	e45f      	b.n	10618 <_svfprintf_r+0x438>
   10d58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10d5a:	af38      	add	r7, sp, #224	; 0xe0
   10d5c:	f7ff bbce 	b.w	104fc <_svfprintf_r+0x31c>
   10d60:	2302      	movs	r3, #2
   10d62:	f7ff bba7 	b.w	104b4 <_svfprintf_r+0x2d4>
   10d66:	9b25      	ldr	r3, [sp, #148]	; 0x94
   10d68:	2b00      	cmp	r3, #0
   10d6a:	f340 81e7 	ble.w	1113c <_svfprintf_r+0xf5c>
   10d6e:	9c11      	ldr	r4, [sp, #68]	; 0x44
   10d70:	9d14      	ldr	r5, [sp, #80]	; 0x50
   10d72:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   10d76:	42ac      	cmp	r4, r5
   10d78:	bfa8      	it	ge
   10d7a:	462c      	movge	r4, r5
   10d7c:	2c00      	cmp	r4, #0
   10d7e:	44ba      	add	sl, r7
   10d80:	dd0b      	ble.n	10d9a <_svfprintf_r+0xbba>
   10d82:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10d84:	6037      	str	r7, [r6, #0]
   10d86:	3301      	adds	r3, #1
   10d88:	44a4      	add	ip, r4
   10d8a:	2b07      	cmp	r3, #7
   10d8c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   10d90:	6074      	str	r4, [r6, #4]
   10d92:	932c      	str	r3, [sp, #176]	; 0xb0
   10d94:	f300 8328 	bgt.w	113e8 <_svfprintf_r+0x1208>
   10d98:	3608      	adds	r6, #8
   10d9a:	9d14      	ldr	r5, [sp, #80]	; 0x50
   10d9c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   10da0:	1b2c      	subs	r4, r5, r4
   10da2:	2c00      	cmp	r4, #0
   10da4:	f340 80db 	ble.w	10f5e <_svfprintf_r+0xd7e>
   10da8:	2c10      	cmp	r4, #16
   10daa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10dac:	4d07      	ldr	r5, [pc, #28]	; (10dcc <_svfprintf_r+0xbec>)
   10dae:	f340 81ad 	ble.w	1110c <_svfprintf_r+0xf2c>
   10db2:	970a      	str	r7, [sp, #40]	; 0x28
   10db4:	f04f 0810 	mov.w	r8, #16
   10db8:	462f      	mov	r7, r5
   10dba:	4662      	mov	r2, ip
   10dbc:	4625      	mov	r5, r4
   10dbe:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
   10dc2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   10dc4:	e009      	b.n	10dda <_svfprintf_r+0xbfa>
   10dc6:	bf00      	nop
   10dc8:	000125c4 	.word	0x000125c4
   10dcc:	000125c8 	.word	0x000125c8
   10dd0:	3608      	adds	r6, #8
   10dd2:	3d10      	subs	r5, #16
   10dd4:	2d10      	cmp	r5, #16
   10dd6:	f340 8195 	ble.w	11104 <_svfprintf_r+0xf24>
   10dda:	3301      	adds	r3, #1
   10ddc:	3210      	adds	r2, #16
   10dde:	2b07      	cmp	r3, #7
   10de0:	922d      	str	r2, [sp, #180]	; 0xb4
   10de2:	932c      	str	r3, [sp, #176]	; 0xb0
   10de4:	e886 0180 	stmia.w	r6, {r7, r8}
   10de8:	ddf2      	ble.n	10dd0 <_svfprintf_r+0xbf0>
   10dea:	4658      	mov	r0, fp
   10dec:	4621      	mov	r1, r4
   10dee:	aa2b      	add	r2, sp, #172	; 0xac
   10df0:	f000 fc72 	bl	116d8 <__ssprint_r>
   10df4:	2800      	cmp	r0, #0
   10df6:	f47f ab0b 	bne.w	10410 <_svfprintf_r+0x230>
   10dfa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   10dfc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10dfe:	ae38      	add	r6, sp, #224	; 0xe0
   10e00:	e7e7      	b.n	10dd2 <_svfprintf_r+0xbf2>
   10e02:	980d      	ldr	r0, [sp, #52]	; 0x34
   10e04:	990c      	ldr	r1, [sp, #48]	; 0x30
   10e06:	aa2b      	add	r2, sp, #172	; 0xac
   10e08:	f000 fc66 	bl	116d8 <__ssprint_r>
   10e0c:	2800      	cmp	r0, #0
   10e0e:	f47f aaff 	bne.w	10410 <_svfprintf_r+0x230>
   10e12:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   10e16:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   10e1a:	ae38      	add	r6, sp, #224	; 0xe0
   10e1c:	f7ff bbd8 	b.w	105d0 <_svfprintf_r+0x3f0>
   10e20:	1e6f      	subs	r7, r5, #1
   10e22:	2f00      	cmp	r7, #0
   10e24:	f77f af50 	ble.w	10cc8 <_svfprintf_r+0xae8>
   10e28:	2f10      	cmp	r7, #16
   10e2a:	4db3      	ldr	r5, [pc, #716]	; (110f8 <_svfprintf_r+0xf18>)
   10e2c:	dd23      	ble.n	10e76 <_svfprintf_r+0xc96>
   10e2e:	4643      	mov	r3, r8
   10e30:	f04f 0a10 	mov.w	sl, #16
   10e34:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   10e38:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   10e3c:	e004      	b.n	10e48 <_svfprintf_r+0xc68>
   10e3e:	3f10      	subs	r7, #16
   10e40:	2f10      	cmp	r7, #16
   10e42:	f106 0608 	add.w	r6, r6, #8
   10e46:	dd15      	ble.n	10e74 <_svfprintf_r+0xc94>
   10e48:	3401      	adds	r4, #1
   10e4a:	3310      	adds	r3, #16
   10e4c:	2c07      	cmp	r4, #7
   10e4e:	932d      	str	r3, [sp, #180]	; 0xb4
   10e50:	942c      	str	r4, [sp, #176]	; 0xb0
   10e52:	e886 0420 	stmia.w	r6, {r5, sl}
   10e56:	ddf2      	ble.n	10e3e <_svfprintf_r+0xc5e>
   10e58:	4640      	mov	r0, r8
   10e5a:	4659      	mov	r1, fp
   10e5c:	aa2b      	add	r2, sp, #172	; 0xac
   10e5e:	f000 fc3b 	bl	116d8 <__ssprint_r>
   10e62:	2800      	cmp	r0, #0
   10e64:	f47f aad4 	bne.w	10410 <_svfprintf_r+0x230>
   10e68:	3f10      	subs	r7, #16
   10e6a:	2f10      	cmp	r7, #16
   10e6c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   10e6e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   10e70:	ae38      	add	r6, sp, #224	; 0xe0
   10e72:	dce9      	bgt.n	10e48 <_svfprintf_r+0xc68>
   10e74:	4698      	mov	r8, r3
   10e76:	3401      	adds	r4, #1
   10e78:	44b8      	add	r8, r7
   10e7a:	2c07      	cmp	r4, #7
   10e7c:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   10e80:	942c      	str	r4, [sp, #176]	; 0xb0
   10e82:	e886 00a0 	stmia.w	r6, {r5, r7}
   10e86:	f77f af1e 	ble.w	10cc6 <_svfprintf_r+0xae6>
   10e8a:	980d      	ldr	r0, [sp, #52]	; 0x34
   10e8c:	990c      	ldr	r1, [sp, #48]	; 0x30
   10e8e:	aa2b      	add	r2, sp, #172	; 0xac
   10e90:	f000 fc22 	bl	116d8 <__ssprint_r>
   10e94:	2800      	cmp	r0, #0
   10e96:	f47f aabb 	bne.w	10410 <_svfprintf_r+0x230>
   10e9a:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
   10e9e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   10ea0:	ae38      	add	r6, sp, #224	; 0xe0
   10ea2:	e711      	b.n	10cc8 <_svfprintf_r+0xae8>
   10ea4:	4694      	mov	ip, r2
   10ea6:	3301      	adds	r3, #1
   10ea8:	44a4      	add	ip, r4
   10eaa:	2b07      	cmp	r3, #7
   10eac:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   10eb0:	932c      	str	r3, [sp, #176]	; 0xb0
   10eb2:	6035      	str	r5, [r6, #0]
   10eb4:	6074      	str	r4, [r6, #4]
   10eb6:	f77f ac04 	ble.w	106c2 <_svfprintf_r+0x4e2>
   10eba:	e713      	b.n	10ce4 <_svfprintf_r+0xb04>
   10ebc:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
   10ec0:	4620      	mov	r0, r4
   10ec2:	4629      	mov	r1, r5
   10ec4:	220a      	movs	r2, #10
   10ec6:	2300      	movs	r3, #0
   10ec8:	f000 fc86 	bl	117d8 <__aeabi_uldivmod>
   10ecc:	3230      	adds	r2, #48	; 0x30
   10ece:	f88b 2000 	strb.w	r2, [fp]
   10ed2:	4620      	mov	r0, r4
   10ed4:	4629      	mov	r1, r5
   10ed6:	220a      	movs	r2, #10
   10ed8:	2300      	movs	r3, #0
   10eda:	f000 fc7d 	bl	117d8 <__aeabi_uldivmod>
   10ede:	4604      	mov	r4, r0
   10ee0:	460d      	mov	r5, r1
   10ee2:	ea54 0c05 	orrs.w	ip, r4, r5
   10ee6:	465f      	mov	r7, fp
   10ee8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   10eec:	d1e8      	bne.n	10ec0 <_svfprintf_r+0xce0>
   10eee:	9d08      	ldr	r5, [sp, #32]
   10ef0:	1bec      	subs	r4, r5, r7
   10ef2:	f7ff bb03 	b.w	104fc <_svfprintf_r+0x31c>
   10ef6:	9d10      	ldr	r5, [sp, #64]	; 0x40
   10ef8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   10efc:	682c      	ldr	r4, [r5, #0]
   10efe:	17e5      	asrs	r5, r4, #31
   10f00:	4622      	mov	r2, r4
   10f02:	462b      	mov	r3, r5
   10f04:	f10c 0c04 	add.w	ip, ip, #4
   10f08:	2a00      	cmp	r2, #0
   10f0a:	f173 0000 	sbcs.w	r0, r3, #0
   10f0e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   10f12:	f6bf ac75 	bge.w	10800 <_svfprintf_r+0x620>
   10f16:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   10f1a:	4264      	negs	r4, r4
   10f1c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   10f20:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   10f24:	2301      	movs	r3, #1
   10f26:	f7ff bac9 	b.w	104bc <_svfprintf_r+0x2dc>
   10f2a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   10f2c:	682c      	ldr	r4, [r5, #0]
   10f2e:	3504      	adds	r5, #4
   10f30:	9510      	str	r5, [sp, #64]	; 0x40
   10f32:	2500      	movs	r5, #0
   10f34:	f7ff babe 	b.w	104b4 <_svfprintf_r+0x2d4>
   10f38:	9d10      	ldr	r5, [sp, #64]	; 0x40
   10f3a:	682c      	ldr	r4, [r5, #0]
   10f3c:	3504      	adds	r5, #4
   10f3e:	9510      	str	r5, [sp, #64]	; 0x40
   10f40:	2301      	movs	r3, #1
   10f42:	2500      	movs	r5, #0
   10f44:	f7ff bab6 	b.w	104b4 <_svfprintf_r+0x2d4>
   10f48:	980d      	ldr	r0, [sp, #52]	; 0x34
   10f4a:	990c      	ldr	r1, [sp, #48]	; 0x30
   10f4c:	aa2b      	add	r2, sp, #172	; 0xac
   10f4e:	f000 fbc3 	bl	116d8 <__ssprint_r>
   10f52:	2800      	cmp	r0, #0
   10f54:	f47f aa5c 	bne.w	10410 <_svfprintf_r+0x230>
   10f58:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   10f5c:	ae38      	add	r6, sp, #224	; 0xe0
   10f5e:	9d14      	ldr	r5, [sp, #80]	; 0x50
   10f60:	9c25      	ldr	r4, [sp, #148]	; 0x94
   10f62:	442f      	add	r7, r5
   10f64:	9d11      	ldr	r5, [sp, #68]	; 0x44
   10f66:	42ac      	cmp	r4, r5
   10f68:	db42      	blt.n	10ff0 <_svfprintf_r+0xe10>
   10f6a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10f6c:	07e9      	lsls	r1, r5, #31
   10f6e:	d43f      	bmi.n	10ff0 <_svfprintf_r+0xe10>
   10f70:	9811      	ldr	r0, [sp, #68]	; 0x44
   10f72:	ebc7 050a 	rsb	r5, r7, sl
   10f76:	1b04      	subs	r4, r0, r4
   10f78:	42ac      	cmp	r4, r5
   10f7a:	bfb8      	it	lt
   10f7c:	4625      	movlt	r5, r4
   10f7e:	2d00      	cmp	r5, #0
   10f80:	dd0b      	ble.n	10f9a <_svfprintf_r+0xdba>
   10f82:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10f84:	6037      	str	r7, [r6, #0]
   10f86:	3301      	adds	r3, #1
   10f88:	44ac      	add	ip, r5
   10f8a:	2b07      	cmp	r3, #7
   10f8c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   10f90:	6075      	str	r5, [r6, #4]
   10f92:	932c      	str	r3, [sp, #176]	; 0xb0
   10f94:	f300 8252 	bgt.w	1143c <_svfprintf_r+0x125c>
   10f98:	3608      	adds	r6, #8
   10f9a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   10f9e:	1b64      	subs	r4, r4, r5
   10fa0:	2c00      	cmp	r4, #0
   10fa2:	f77f ab8f 	ble.w	106c4 <_svfprintf_r+0x4e4>
   10fa6:	2c10      	cmp	r4, #16
   10fa8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10faa:	4d53      	ldr	r5, [pc, #332]	; (110f8 <_svfprintf_r+0xf18>)
   10fac:	f77f af7b 	ble.w	10ea6 <_svfprintf_r+0xcc6>
   10fb0:	2710      	movs	r7, #16
   10fb2:	4662      	mov	r2, ip
   10fb4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   10fb8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   10fbc:	e004      	b.n	10fc8 <_svfprintf_r+0xde8>
   10fbe:	3608      	adds	r6, #8
   10fc0:	3c10      	subs	r4, #16
   10fc2:	2c10      	cmp	r4, #16
   10fc4:	f77f af6e 	ble.w	10ea4 <_svfprintf_r+0xcc4>
   10fc8:	3301      	adds	r3, #1
   10fca:	3210      	adds	r2, #16
   10fcc:	2b07      	cmp	r3, #7
   10fce:	922d      	str	r2, [sp, #180]	; 0xb4
   10fd0:	932c      	str	r3, [sp, #176]	; 0xb0
   10fd2:	e886 00a0 	stmia.w	r6, {r5, r7}
   10fd6:	ddf2      	ble.n	10fbe <_svfprintf_r+0xdde>
   10fd8:	4640      	mov	r0, r8
   10fda:	4651      	mov	r1, sl
   10fdc:	aa2b      	add	r2, sp, #172	; 0xac
   10fde:	f000 fb7b 	bl	116d8 <__ssprint_r>
   10fe2:	2800      	cmp	r0, #0
   10fe4:	f47f aa14 	bne.w	10410 <_svfprintf_r+0x230>
   10fe8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   10fea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10fec:	ae38      	add	r6, sp, #224	; 0xe0
   10fee:	e7e7      	b.n	10fc0 <_svfprintf_r+0xde0>
   10ff0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10ff2:	9d15      	ldr	r5, [sp, #84]	; 0x54
   10ff4:	6035      	str	r5, [r6, #0]
   10ff6:	9d18      	ldr	r5, [sp, #96]	; 0x60
   10ff8:	6075      	str	r5, [r6, #4]
   10ffa:	3301      	adds	r3, #1
   10ffc:	44ac      	add	ip, r5
   10ffe:	2b07      	cmp	r3, #7
   11000:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   11004:	932c      	str	r3, [sp, #176]	; 0xb0
   11006:	f300 81fb 	bgt.w	11400 <_svfprintf_r+0x1220>
   1100a:	3608      	adds	r6, #8
   1100c:	e7b0      	b.n	10f70 <_svfprintf_r+0xd90>
   1100e:	9d09      	ldr	r5, [sp, #36]	; 0x24
   11010:	07ea      	lsls	r2, r5, #31
   11012:	f53f ae27 	bmi.w	10c64 <_svfprintf_r+0xa84>
   11016:	3401      	adds	r4, #1
   11018:	f10c 0801 	add.w	r8, ip, #1
   1101c:	2301      	movs	r3, #1
   1101e:	2c07      	cmp	r4, #7
   11020:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   11024:	942c      	str	r4, [sp, #176]	; 0xb0
   11026:	6037      	str	r7, [r6, #0]
   11028:	6073      	str	r3, [r6, #4]
   1102a:	f77f ae4c 	ble.w	10cc6 <_svfprintf_r+0xae6>
   1102e:	e72c      	b.n	10e8a <_svfprintf_r+0xcaa>
   11030:	980d      	ldr	r0, [sp, #52]	; 0x34
   11032:	990c      	ldr	r1, [sp, #48]	; 0x30
   11034:	aa2b      	add	r2, sp, #172	; 0xac
   11036:	f000 fb4f 	bl	116d8 <__ssprint_r>
   1103a:	2800      	cmp	r0, #0
   1103c:	f47f a9e8 	bne.w	10410 <_svfprintf_r+0x230>
   11040:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   11042:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   11044:	ae38      	add	r6, sp, #224	; 0xe0
   11046:	e619      	b.n	10c7c <_svfprintf_r+0xa9c>
   11048:	980d      	ldr	r0, [sp, #52]	; 0x34
   1104a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1104c:	aa2b      	add	r2, sp, #172	; 0xac
   1104e:	f000 fb43 	bl	116d8 <__ssprint_r>
   11052:	2800      	cmp	r0, #0
   11054:	f47f a9dc 	bne.w	10410 <_svfprintf_r+0x230>
   11058:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
   1105c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   1105e:	ae38      	add	r6, sp, #224	; 0xe0
   11060:	e61b      	b.n	10c9a <_svfprintf_r+0xaba>
   11062:	980d      	ldr	r0, [sp, #52]	; 0x34
   11064:	990c      	ldr	r1, [sp, #48]	; 0x30
   11066:	aa2b      	add	r2, sp, #172	; 0xac
   11068:	f000 fb36 	bl	116d8 <__ssprint_r>
   1106c:	2800      	cmp	r0, #0
   1106e:	f47f a9cf 	bne.w	10410 <_svfprintf_r+0x230>
   11072:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   11076:	ae38      	add	r6, sp, #224	; 0xe0
   11078:	f7ff bad2 	b.w	10620 <_svfprintf_r+0x440>
   1107c:	f7fa fb68 	bl	b750 <__fpclassifyd>
   11080:	2800      	cmp	r0, #0
   11082:	f040 80c2 	bne.w	1120a <_svfprintf_r+0x102a>
   11086:	9c09      	ldr	r4, [sp, #36]	; 0x24
   11088:	4f1c      	ldr	r7, [pc, #112]	; (110fc <_svfprintf_r+0xf1c>)
   1108a:	4b1d      	ldr	r3, [pc, #116]	; (11100 <_svfprintf_r+0xf20>)
   1108c:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   11090:	900a      	str	r0, [sp, #40]	; 0x28
   11092:	f04f 0c03 	mov.w	ip, #3
   11096:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   1109a:	9409      	str	r4, [sp, #36]	; 0x24
   1109c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   110a0:	9014      	str	r0, [sp, #80]	; 0x50
   110a2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   110a6:	bfd8      	it	le
   110a8:	461f      	movle	r7, r3
   110aa:	4664      	mov	r4, ip
   110ac:	f7ff ba2f 	b.w	1050e <_svfprintf_r+0x32e>
   110b0:	e9d3 4500 	ldrd	r4, r5, [r3]
   110b4:	3308      	adds	r3, #8
   110b6:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
   110ba:	9310      	str	r3, [sp, #64]	; 0x40
   110bc:	e476      	b.n	109ac <_svfprintf_r+0x7cc>
   110be:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   110c2:	f01c 0f10 	tst.w	ip, #16
   110c6:	f000 8155 	beq.w	11374 <_svfprintf_r+0x1194>
   110ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
   110cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   110ce:	6823      	ldr	r3, [r4, #0]
   110d0:	3404      	adds	r4, #4
   110d2:	9410      	str	r4, [sp, #64]	; 0x40
   110d4:	601d      	str	r5, [r3, #0]
   110d6:	f7ff b8a9 	b.w	1022c <_svfprintf_r+0x4c>
   110da:	9c09      	ldr	r4, [sp, #36]	; 0x24
   110dc:	0664      	lsls	r4, r4, #25
   110de:	f140 8142 	bpl.w	11366 <_svfprintf_r+0x1186>
   110e2:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   110e6:	f8bc 4000 	ldrh.w	r4, [ip]
   110ea:	f10c 0c04 	add.w	ip, ip, #4
   110ee:	2500      	movs	r5, #0
   110f0:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   110f4:	f7ff b9ca 	b.w	1048c <_svfprintf_r+0x2ac>
   110f8:	000125c8 	.word	0x000125c8
   110fc:	000125e4 	.word	0x000125e4
   11100:	000125e0 	.word	0x000125e0
   11104:	462c      	mov	r4, r5
   11106:	463d      	mov	r5, r7
   11108:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1110a:	4694      	mov	ip, r2
   1110c:	3301      	adds	r3, #1
   1110e:	44a4      	add	ip, r4
   11110:	2b07      	cmp	r3, #7
   11112:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   11116:	932c      	str	r3, [sp, #176]	; 0xb0
   11118:	6035      	str	r5, [r6, #0]
   1111a:	6074      	str	r4, [r6, #4]
   1111c:	f73f af14 	bgt.w	10f48 <_svfprintf_r+0xd68>
   11120:	3608      	adds	r6, #8
   11122:	e71c      	b.n	10f5e <_svfprintf_r+0xd7e>
   11124:	980d      	ldr	r0, [sp, #52]	; 0x34
   11126:	990c      	ldr	r1, [sp, #48]	; 0x30
   11128:	aa2b      	add	r2, sp, #172	; 0xac
   1112a:	f000 fad5 	bl	116d8 <__ssprint_r>
   1112e:	2800      	cmp	r0, #0
   11130:	f47f a96e 	bne.w	10410 <_svfprintf_r+0x230>
   11134:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   11138:	ae38      	add	r6, sp, #224	; 0xe0
   1113a:	e4fd      	b.n	10b38 <_svfprintf_r+0x958>
   1113c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   1113e:	49b7      	ldr	r1, [pc, #732]	; (1141c <_svfprintf_r+0x123c>)
   11140:	6031      	str	r1, [r6, #0]
   11142:	3201      	adds	r2, #1
   11144:	f10c 0c01 	add.w	ip, ip, #1
   11148:	2101      	movs	r1, #1
   1114a:	2a07      	cmp	r2, #7
   1114c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   11150:	922c      	str	r2, [sp, #176]	; 0xb0
   11152:	6071      	str	r1, [r6, #4]
   11154:	f300 80f7 	bgt.w	11346 <_svfprintf_r+0x1166>
   11158:	3608      	adds	r6, #8
   1115a:	461c      	mov	r4, r3
   1115c:	b92c      	cbnz	r4, 1116a <_svfprintf_r+0xf8a>
   1115e:	9d11      	ldr	r5, [sp, #68]	; 0x44
   11160:	b91d      	cbnz	r5, 1116a <_svfprintf_r+0xf8a>
   11162:	9d09      	ldr	r5, [sp, #36]	; 0x24
   11164:	07e8      	lsls	r0, r5, #31
   11166:	f57f aaad 	bpl.w	106c4 <_svfprintf_r+0x4e4>
   1116a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1116c:	9918      	ldr	r1, [sp, #96]	; 0x60
   1116e:	9d15      	ldr	r5, [sp, #84]	; 0x54
   11170:	6035      	str	r5, [r6, #0]
   11172:	3301      	adds	r3, #1
   11174:	4461      	add	r1, ip
   11176:	9d18      	ldr	r5, [sp, #96]	; 0x60
   11178:	912d      	str	r1, [sp, #180]	; 0xb4
   1117a:	2b07      	cmp	r3, #7
   1117c:	6075      	str	r5, [r6, #4]
   1117e:	932c      	str	r3, [sp, #176]	; 0xb0
   11180:	f300 81de 	bgt.w	11540 <_svfprintf_r+0x1360>
   11184:	f106 0208 	add.w	r2, r6, #8
   11188:	4264      	negs	r4, r4
   1118a:	2c00      	cmp	r4, #0
   1118c:	f340 810b 	ble.w	113a6 <_svfprintf_r+0x11c6>
   11190:	2c10      	cmp	r4, #16
   11192:	4da3      	ldr	r5, [pc, #652]	; (11420 <_svfprintf_r+0x1240>)
   11194:	f340 8148 	ble.w	11428 <_svfprintf_r+0x1248>
   11198:	46a3      	mov	fp, r4
   1119a:	2610      	movs	r6, #16
   1119c:	460c      	mov	r4, r1
   1119e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   111a2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   111a6:	e006      	b.n	111b6 <_svfprintf_r+0xfd6>
   111a8:	3208      	adds	r2, #8
   111aa:	f1ab 0b10 	sub.w	fp, fp, #16
   111ae:	f1bb 0f10 	cmp.w	fp, #16
   111b2:	f340 8137 	ble.w	11424 <_svfprintf_r+0x1244>
   111b6:	3301      	adds	r3, #1
   111b8:	3410      	adds	r4, #16
   111ba:	2b07      	cmp	r3, #7
   111bc:	942d      	str	r4, [sp, #180]	; 0xb4
   111be:	932c      	str	r3, [sp, #176]	; 0xb0
   111c0:	e882 0060 	stmia.w	r2, {r5, r6}
   111c4:	ddf0      	ble.n	111a8 <_svfprintf_r+0xfc8>
   111c6:	4640      	mov	r0, r8
   111c8:	4651      	mov	r1, sl
   111ca:	aa2b      	add	r2, sp, #172	; 0xac
   111cc:	f000 fa84 	bl	116d8 <__ssprint_r>
   111d0:	2800      	cmp	r0, #0
   111d2:	f47f a91d 	bne.w	10410 <_svfprintf_r+0x230>
   111d6:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
   111d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   111da:	aa38      	add	r2, sp, #224	; 0xe0
   111dc:	e7e5      	b.n	111aa <_svfprintf_r+0xfca>
   111de:	9c09      	ldr	r4, [sp, #36]	; 0x24
   111e0:	f893 8001 	ldrb.w	r8, [r3, #1]
   111e4:	f044 0420 	orr.w	r4, r4, #32
   111e8:	f109 0901 	add.w	r9, r9, #1
   111ec:	9409      	str	r4, [sp, #36]	; 0x24
   111ee:	f7ff b853 	b.w	10298 <_svfprintf_r+0xb8>
   111f2:	980d      	ldr	r0, [sp, #52]	; 0x34
   111f4:	990c      	ldr	r1, [sp, #48]	; 0x30
   111f6:	aa2b      	add	r2, sp, #172	; 0xac
   111f8:	f000 fa6e 	bl	116d8 <__ssprint_r>
   111fc:	2800      	cmp	r0, #0
   111fe:	f47f a907 	bne.w	10410 <_svfprintf_r+0x230>
   11202:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   11206:	ae38      	add	r6, sp, #224	; 0xe0
   11208:	e4ac      	b.n	10b64 <_svfprintf_r+0x984>
   1120a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1120c:	3501      	adds	r5, #1
   1120e:	f028 0a20 	bic.w	sl, r8, #32
   11212:	f000 80a5 	beq.w	11360 <_svfprintf_r+0x1180>
   11216:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   1121a:	d104      	bne.n	11226 <_svfprintf_r+0x1046>
   1121c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1121e:	2d00      	cmp	r5, #0
   11220:	bf08      	it	eq
   11222:	2501      	moveq	r5, #1
   11224:	950a      	str	r5, [sp, #40]	; 0x28
   11226:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   1122a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   1122e:	2b00      	cmp	r3, #0
   11230:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
   11234:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
   11238:	f2c0 819c 	blt.w	11574 <_svfprintf_r+0x1394>
   1123c:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   11240:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
   11244:	f04f 0b00 	mov.w	fp, #0
   11248:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
   1124c:	f000 819b 	beq.w	11586 <_svfprintf_r+0x13a6>
   11250:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   11254:	f000 81a9 	beq.w	115aa <_svfprintf_r+0x13ca>
   11258:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   1125c:	bf0a      	itet	eq
   1125e:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
   11260:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   11262:	1c65      	addeq	r5, r4, #1
   11264:	2002      	movs	r0, #2
   11266:	a925      	add	r1, sp, #148	; 0x94
   11268:	aa26      	add	r2, sp, #152	; 0x98
   1126a:	ab29      	add	r3, sp, #164	; 0xa4
   1126c:	e88d 0021 	stmia.w	sp, {r0, r5}
   11270:	9203      	str	r2, [sp, #12]
   11272:	9304      	str	r3, [sp, #16]
   11274:	9102      	str	r1, [sp, #8]
   11276:	980d      	ldr	r0, [sp, #52]	; 0x34
   11278:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
   1127c:	f7fe f894 	bl	f3a8 <_dtoa_r>
   11280:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   11284:	4607      	mov	r7, r0
   11286:	d002      	beq.n	1128e <_svfprintf_r+0x10ae>
   11288:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   1128c:	d105      	bne.n	1129a <_svfprintf_r+0x10ba>
   1128e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   11292:	f01c 0f01 	tst.w	ip, #1
   11296:	f000 819c 	beq.w	115d2 <_svfprintf_r+0x13f2>
   1129a:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   1129e:	eb07 0405 	add.w	r4, r7, r5
   112a2:	f000 811c 	beq.w	114de <_svfprintf_r+0x12fe>
   112a6:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
   112aa:	2200      	movs	r2, #0
   112ac:	2300      	movs	r3, #0
   112ae:	f7fb fd5d 	bl	cd6c <__aeabi_dcmpeq>
   112b2:	2800      	cmp	r0, #0
   112b4:	f040 8105 	bne.w	114c2 <_svfprintf_r+0x12e2>
   112b8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   112ba:	429c      	cmp	r4, r3
   112bc:	d906      	bls.n	112cc <_svfprintf_r+0x10ec>
   112be:	2130      	movs	r1, #48	; 0x30
   112c0:	1c5a      	adds	r2, r3, #1
   112c2:	9229      	str	r2, [sp, #164]	; 0xa4
   112c4:	7019      	strb	r1, [r3, #0]
   112c6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   112c8:	429c      	cmp	r4, r3
   112ca:	d8f9      	bhi.n	112c0 <_svfprintf_r+0x10e0>
   112cc:	1bdb      	subs	r3, r3, r7
   112ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   112d2:	9311      	str	r3, [sp, #68]	; 0x44
   112d4:	f000 80ed 	beq.w	114b2 <_svfprintf_r+0x12d2>
   112d8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   112dc:	f340 81f2 	ble.w	116c4 <_svfprintf_r+0x14e4>
   112e0:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
   112e4:	f000 8168 	beq.w	115b8 <_svfprintf_r+0x13d8>
   112e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
   112ea:	9414      	str	r4, [sp, #80]	; 0x50
   112ec:	9c11      	ldr	r4, [sp, #68]	; 0x44
   112ee:	9d14      	ldr	r5, [sp, #80]	; 0x50
   112f0:	42ac      	cmp	r4, r5
   112f2:	f300 8132 	bgt.w	1155a <_svfprintf_r+0x137a>
   112f6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   112fa:	f01c 0f01 	tst.w	ip, #1
   112fe:	f040 81ad 	bne.w	1165c <_svfprintf_r+0x147c>
   11302:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
   11306:	462c      	mov	r4, r5
   11308:	f04f 0867 	mov.w	r8, #103	; 0x67
   1130c:	f1bb 0f00 	cmp.w	fp, #0
   11310:	f040 80b2 	bne.w	11478 <_svfprintf_r+0x1298>
   11314:	9d12      	ldr	r5, [sp, #72]	; 0x48
   11316:	930b      	str	r3, [sp, #44]	; 0x2c
   11318:	9509      	str	r5, [sp, #36]	; 0x24
   1131a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   1131e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   11322:	f7ff b8f4 	b.w	1050e <_svfprintf_r+0x32e>
   11326:	980d      	ldr	r0, [sp, #52]	; 0x34
   11328:	2140      	movs	r1, #64	; 0x40
   1132a:	f7fc fc09 	bl	db40 <_malloc_r>
   1132e:	6020      	str	r0, [r4, #0]
   11330:	6120      	str	r0, [r4, #16]
   11332:	2800      	cmp	r0, #0
   11334:	f000 81bf 	beq.w	116b6 <_svfprintf_r+0x14d6>
   11338:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   1133c:	2340      	movs	r3, #64	; 0x40
   1133e:	f8cc 3014 	str.w	r3, [ip, #20]
   11342:	f7fe bf63 	b.w	1020c <_svfprintf_r+0x2c>
   11346:	980d      	ldr	r0, [sp, #52]	; 0x34
   11348:	990c      	ldr	r1, [sp, #48]	; 0x30
   1134a:	aa2b      	add	r2, sp, #172	; 0xac
   1134c:	f000 f9c4 	bl	116d8 <__ssprint_r>
   11350:	2800      	cmp	r0, #0
   11352:	f47f a85d 	bne.w	10410 <_svfprintf_r+0x230>
   11356:	9c25      	ldr	r4, [sp, #148]	; 0x94
   11358:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   1135c:	ae38      	add	r6, sp, #224	; 0xe0
   1135e:	e6fd      	b.n	1115c <_svfprintf_r+0xf7c>
   11360:	2406      	movs	r4, #6
   11362:	940a      	str	r4, [sp, #40]	; 0x28
   11364:	e75f      	b.n	11226 <_svfprintf_r+0x1046>
   11366:	9d10      	ldr	r5, [sp, #64]	; 0x40
   11368:	682c      	ldr	r4, [r5, #0]
   1136a:	3504      	adds	r5, #4
   1136c:	9510      	str	r5, [sp, #64]	; 0x40
   1136e:	2500      	movs	r5, #0
   11370:	f7ff b88c 	b.w	1048c <_svfprintf_r+0x2ac>
   11374:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   11378:	f01c 0f40 	tst.w	ip, #64	; 0x40
   1137c:	f000 8087 	beq.w	1148e <_svfprintf_r+0x12ae>
   11380:	9c10      	ldr	r4, [sp, #64]	; 0x40
   11382:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   11384:	6823      	ldr	r3, [r4, #0]
   11386:	3404      	adds	r4, #4
   11388:	9410      	str	r4, [sp, #64]	; 0x40
   1138a:	801d      	strh	r5, [r3, #0]
   1138c:	f7fe bf4e 	b.w	1022c <_svfprintf_r+0x4c>
   11390:	980d      	ldr	r0, [sp, #52]	; 0x34
   11392:	990c      	ldr	r1, [sp, #48]	; 0x30
   11394:	aa2b      	add	r2, sp, #172	; 0xac
   11396:	f000 f99f 	bl	116d8 <__ssprint_r>
   1139a:	2800      	cmp	r0, #0
   1139c:	f47f a838 	bne.w	10410 <_svfprintf_r+0x230>
   113a0:	992d      	ldr	r1, [sp, #180]	; 0xb4
   113a2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   113a4:	aa38      	add	r2, sp, #224	; 0xe0
   113a6:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   113aa:	9c11      	ldr	r4, [sp, #68]	; 0x44
   113ac:	6017      	str	r7, [r2, #0]
   113ae:	3301      	adds	r3, #1
   113b0:	448c      	add	ip, r1
   113b2:	2b07      	cmp	r3, #7
   113b4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   113b8:	932c      	str	r3, [sp, #176]	; 0xb0
   113ba:	6054      	str	r4, [r2, #4]
   113bc:	f73f ac92 	bgt.w	10ce4 <_svfprintf_r+0xb04>
   113c0:	f102 0608 	add.w	r6, r2, #8
   113c4:	f7ff b97e 	b.w	106c4 <_svfprintf_r+0x4e4>
   113c8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   113cc:	f7fd f994 	bl	e6f8 <strlen>
   113d0:	9510      	str	r5, [sp, #64]	; 0x40
   113d2:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   113d6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   113d8:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   113dc:	4604      	mov	r4, r0
   113de:	9514      	str	r5, [sp, #80]	; 0x50
   113e0:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   113e4:	f7ff b893 	b.w	1050e <_svfprintf_r+0x32e>
   113e8:	980d      	ldr	r0, [sp, #52]	; 0x34
   113ea:	990c      	ldr	r1, [sp, #48]	; 0x30
   113ec:	aa2b      	add	r2, sp, #172	; 0xac
   113ee:	f000 f973 	bl	116d8 <__ssprint_r>
   113f2:	2800      	cmp	r0, #0
   113f4:	f47f a80c 	bne.w	10410 <_svfprintf_r+0x230>
   113f8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   113fc:	ae38      	add	r6, sp, #224	; 0xe0
   113fe:	e4cc      	b.n	10d9a <_svfprintf_r+0xbba>
   11400:	980d      	ldr	r0, [sp, #52]	; 0x34
   11402:	990c      	ldr	r1, [sp, #48]	; 0x30
   11404:	aa2b      	add	r2, sp, #172	; 0xac
   11406:	f000 f967 	bl	116d8 <__ssprint_r>
   1140a:	2800      	cmp	r0, #0
   1140c:	f47f a800 	bne.w	10410 <_svfprintf_r+0x230>
   11410:	9c25      	ldr	r4, [sp, #148]	; 0x94
   11412:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   11416:	ae38      	add	r6, sp, #224	; 0xe0
   11418:	e5aa      	b.n	10f70 <_svfprintf_r+0xd90>
   1141a:	bf00      	nop
   1141c:	000125c4 	.word	0x000125c4
   11420:	000125c8 	.word	0x000125c8
   11424:	4621      	mov	r1, r4
   11426:	465c      	mov	r4, fp
   11428:	3301      	adds	r3, #1
   1142a:	4421      	add	r1, r4
   1142c:	2b07      	cmp	r3, #7
   1142e:	912d      	str	r1, [sp, #180]	; 0xb4
   11430:	932c      	str	r3, [sp, #176]	; 0xb0
   11432:	6015      	str	r5, [r2, #0]
   11434:	6054      	str	r4, [r2, #4]
   11436:	dcab      	bgt.n	11390 <_svfprintf_r+0x11b0>
   11438:	3208      	adds	r2, #8
   1143a:	e7b4      	b.n	113a6 <_svfprintf_r+0x11c6>
   1143c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1143e:	990c      	ldr	r1, [sp, #48]	; 0x30
   11440:	aa2b      	add	r2, sp, #172	; 0xac
   11442:	f000 f949 	bl	116d8 <__ssprint_r>
   11446:	2800      	cmp	r0, #0
   11448:	f47e afe2 	bne.w	10410 <_svfprintf_r+0x230>
   1144c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1144e:	9911      	ldr	r1, [sp, #68]	; 0x44
   11450:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   11454:	1b0c      	subs	r4, r1, r4
   11456:	ae38      	add	r6, sp, #224	; 0xe0
   11458:	e59f      	b.n	10f9a <_svfprintf_r+0xdba>
   1145a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1145c:	9714      	str	r7, [sp, #80]	; 0x50
   1145e:	2c06      	cmp	r4, #6
   11460:	bf28      	it	cs
   11462:	2406      	movcs	r4, #6
   11464:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
   11468:	46ba      	mov	sl, r7
   1146a:	970a      	str	r7, [sp, #40]	; 0x28
   1146c:	9510      	str	r5, [sp, #64]	; 0x40
   1146e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   11472:	4f97      	ldr	r7, [pc, #604]	; (116d0 <_svfprintf_r+0x14f0>)
   11474:	f7ff b84b 	b.w	1050e <_svfprintf_r+0x32e>
   11478:	9d12      	ldr	r5, [sp, #72]	; 0x48
   1147a:	9509      	str	r5, [sp, #36]	; 0x24
   1147c:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   11480:	2500      	movs	r5, #0
   11482:	930b      	str	r3, [sp, #44]	; 0x2c
   11484:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   11488:	950a      	str	r5, [sp, #40]	; 0x28
   1148a:	f7ff b843 	b.w	10514 <_svfprintf_r+0x334>
   1148e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   11492:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   11494:	f8dc 3000 	ldr.w	r3, [ip]
   11498:	f10c 0c04 	add.w	ip, ip, #4
   1149c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   114a0:	601c      	str	r4, [r3, #0]
   114a2:	f7fe bec3 	b.w	1022c <_svfprintf_r+0x4c>
   114a6:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   114aa:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   114ae:	f7ff ba8f 	b.w	109d0 <_svfprintf_r+0x7f0>
   114b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   114b4:	1cdc      	adds	r4, r3, #3
   114b6:	db19      	blt.n	114ec <_svfprintf_r+0x130c>
   114b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   114ba:	429c      	cmp	r4, r3
   114bc:	db16      	blt.n	114ec <_svfprintf_r+0x130c>
   114be:	9314      	str	r3, [sp, #80]	; 0x50
   114c0:	e714      	b.n	112ec <_svfprintf_r+0x110c>
   114c2:	4623      	mov	r3, r4
   114c4:	e702      	b.n	112cc <_svfprintf_r+0x10ec>
   114c6:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
   114ca:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   114ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   114d0:	9510      	str	r5, [sp, #64]	; 0x40
   114d2:	900a      	str	r0, [sp, #40]	; 0x28
   114d4:	9014      	str	r0, [sp, #80]	; 0x50
   114d6:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   114da:	f7ff b818 	b.w	1050e <_svfprintf_r+0x32e>
   114de:	783b      	ldrb	r3, [r7, #0]
   114e0:	2b30      	cmp	r3, #48	; 0x30
   114e2:	f000 80ad 	beq.w	11640 <_svfprintf_r+0x1460>
   114e6:	9d25      	ldr	r5, [sp, #148]	; 0x94
   114e8:	442c      	add	r4, r5
   114ea:	e6dc      	b.n	112a6 <_svfprintf_r+0x10c6>
   114ec:	f1a8 0802 	sub.w	r8, r8, #2
   114f0:	3b01      	subs	r3, #1
   114f2:	2b00      	cmp	r3, #0
   114f4:	9325      	str	r3, [sp, #148]	; 0x94
   114f6:	bfba      	itte	lt
   114f8:	425b      	neglt	r3, r3
   114fa:	222d      	movlt	r2, #45	; 0x2d
   114fc:	222b      	movge	r2, #43	; 0x2b
   114fe:	2b09      	cmp	r3, #9
   11500:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
   11504:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
   11508:	dc65      	bgt.n	115d6 <_svfprintf_r+0x13f6>
   1150a:	3330      	adds	r3, #48	; 0x30
   1150c:	2230      	movs	r2, #48	; 0x30
   1150e:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
   11512:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
   11516:	ab28      	add	r3, sp, #160	; 0xa0
   11518:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1151a:	9c11      	ldr	r4, [sp, #68]	; 0x44
   1151c:	aa27      	add	r2, sp, #156	; 0x9c
   1151e:	1a9a      	subs	r2, r3, r2
   11520:	2d01      	cmp	r5, #1
   11522:	9219      	str	r2, [sp, #100]	; 0x64
   11524:	4414      	add	r4, r2
   11526:	f340 80b7 	ble.w	11698 <_svfprintf_r+0x14b8>
   1152a:	3401      	adds	r4, #1
   1152c:	2500      	movs	r5, #0
   1152e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   11532:	9514      	str	r5, [sp, #80]	; 0x50
   11534:	e6ea      	b.n	1130c <_svfprintf_r+0x112c>
   11536:	2400      	movs	r4, #0
   11538:	4681      	mov	r9, r0
   1153a:	940a      	str	r4, [sp, #40]	; 0x28
   1153c:	f7fe beae 	b.w	1029c <_svfprintf_r+0xbc>
   11540:	980d      	ldr	r0, [sp, #52]	; 0x34
   11542:	990c      	ldr	r1, [sp, #48]	; 0x30
   11544:	aa2b      	add	r2, sp, #172	; 0xac
   11546:	f000 f8c7 	bl	116d8 <__ssprint_r>
   1154a:	2800      	cmp	r0, #0
   1154c:	f47e af60 	bne.w	10410 <_svfprintf_r+0x230>
   11550:	9c25      	ldr	r4, [sp, #148]	; 0x94
   11552:	992d      	ldr	r1, [sp, #180]	; 0xb4
   11554:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   11556:	aa38      	add	r2, sp, #224	; 0xe0
   11558:	e616      	b.n	11188 <_svfprintf_r+0xfa8>
   1155a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1155c:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1155e:	2c00      	cmp	r4, #0
   11560:	bfd4      	ite	le
   11562:	f1c4 0402 	rsble	r4, r4, #2
   11566:	2401      	movgt	r4, #1
   11568:	442c      	add	r4, r5
   1156a:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   1156e:	f04f 0867 	mov.w	r8, #103	; 0x67
   11572:	e6cb      	b.n	1130c <_svfprintf_r+0x112c>
   11574:	9917      	ldr	r1, [sp, #92]	; 0x5c
   11576:	9816      	ldr	r0, [sp, #88]	; 0x58
   11578:	9020      	str	r0, [sp, #128]	; 0x80
   1157a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1157e:	9121      	str	r1, [sp, #132]	; 0x84
   11580:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   11584:	e660      	b.n	11248 <_svfprintf_r+0x1068>
   11586:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   11588:	9501      	str	r5, [sp, #4]
   1158a:	2003      	movs	r0, #3
   1158c:	a925      	add	r1, sp, #148	; 0x94
   1158e:	aa26      	add	r2, sp, #152	; 0x98
   11590:	ab29      	add	r3, sp, #164	; 0xa4
   11592:	9000      	str	r0, [sp, #0]
   11594:	9203      	str	r2, [sp, #12]
   11596:	9304      	str	r3, [sp, #16]
   11598:	9102      	str	r1, [sp, #8]
   1159a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1159c:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
   115a0:	f7fd ff02 	bl	f3a8 <_dtoa_r>
   115a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   115a6:	4607      	mov	r7, r0
   115a8:	e677      	b.n	1129a <_svfprintf_r+0x10ba>
   115aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   115ac:	9401      	str	r4, [sp, #4]
   115ae:	2003      	movs	r0, #3
   115b0:	a925      	add	r1, sp, #148	; 0x94
   115b2:	aa26      	add	r2, sp, #152	; 0x98
   115b4:	ab29      	add	r3, sp, #164	; 0xa4
   115b6:	e7ec      	b.n	11592 <_svfprintf_r+0x13b2>
   115b8:	9d25      	ldr	r5, [sp, #148]	; 0x94
   115ba:	9514      	str	r5, [sp, #80]	; 0x50
   115bc:	2d00      	cmp	r5, #0
   115be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   115c0:	dd63      	ble.n	1168a <_svfprintf_r+0x14aa>
   115c2:	bbb4      	cbnz	r4, 11632 <_svfprintf_r+0x1452>
   115c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   115c6:	07e8      	lsls	r0, r5, #31
   115c8:	d433      	bmi.n	11632 <_svfprintf_r+0x1452>
   115ca:	9c14      	ldr	r4, [sp, #80]	; 0x50
   115cc:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   115d0:	e69c      	b.n	1130c <_svfprintf_r+0x112c>
   115d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   115d4:	e67a      	b.n	112cc <_svfprintf_r+0x10ec>
   115d6:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
   115da:	4d3e      	ldr	r5, [pc, #248]	; (116d4 <_svfprintf_r+0x14f4>)
   115dc:	17da      	asrs	r2, r3, #31
   115de:	fb85 5103 	smull	r5, r1, r5, r3
   115e2:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
   115e6:	eb01 0481 	add.w	r4, r1, r1, lsl #2
   115ea:	4602      	mov	r2, r0
   115ec:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
   115f0:	f103 0030 	add.w	r0, r3, #48	; 0x30
   115f4:	2909      	cmp	r1, #9
   115f6:	7010      	strb	r0, [r2, #0]
   115f8:	460b      	mov	r3, r1
   115fa:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
   115fe:	dcec      	bgt.n	115da <_svfprintf_r+0x13fa>
   11600:	f101 0330 	add.w	r3, r1, #48	; 0x30
   11604:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
   11608:	b2d9      	uxtb	r1, r3
   1160a:	4284      	cmp	r4, r0
   1160c:	f802 1c01 	strb.w	r1, [r2, #-1]
   11610:	d95a      	bls.n	116c8 <_svfprintf_r+0x14e8>
   11612:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
   11616:	4613      	mov	r3, r2
   11618:	e001      	b.n	1161e <_svfprintf_r+0x143e>
   1161a:	f813 1b01 	ldrb.w	r1, [r3], #1
   1161e:	42a3      	cmp	r3, r4
   11620:	f800 1f01 	strb.w	r1, [r0, #1]!
   11624:	d1f9      	bne.n	1161a <_svfprintf_r+0x143a>
   11626:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
   1162a:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
   1162e:	3bf6      	subs	r3, #246	; 0xf6
   11630:	e772      	b.n	11518 <_svfprintf_r+0x1338>
   11632:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   11634:	1c6c      	adds	r4, r5, #1
   11636:	9d14      	ldr	r5, [sp, #80]	; 0x50
   11638:	442c      	add	r4, r5
   1163a:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   1163e:	e665      	b.n	1130c <_svfprintf_r+0x112c>
   11640:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
   11644:	2200      	movs	r2, #0
   11646:	2300      	movs	r3, #0
   11648:	f7fb fb90 	bl	cd6c <__aeabi_dcmpeq>
   1164c:	2800      	cmp	r0, #0
   1164e:	f47f af4a 	bne.w	114e6 <_svfprintf_r+0x1306>
   11652:	f1c5 0501 	rsb	r5, r5, #1
   11656:	9525      	str	r5, [sp, #148]	; 0x94
   11658:	442c      	add	r4, r5
   1165a:	e624      	b.n	112a6 <_svfprintf_r+0x10c6>
   1165c:	9d14      	ldr	r5, [sp, #80]	; 0x50
   1165e:	1c6c      	adds	r4, r5, #1
   11660:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   11664:	f04f 0867 	mov.w	r8, #103	; 0x67
   11668:	e650      	b.n	1130c <_svfprintf_r+0x112c>
   1166a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1166c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   11670:	682d      	ldr	r5, [r5, #0]
   11672:	f899 8001 	ldrb.w	r8, [r9, #1]
   11676:	950a      	str	r5, [sp, #40]	; 0x28
   11678:	f10c 0304 	add.w	r3, ip, #4
   1167c:	2d00      	cmp	r5, #0
   1167e:	9310      	str	r3, [sp, #64]	; 0x40
   11680:	4681      	mov	r9, r0
   11682:	f6be ae09 	bge.w	10298 <_svfprintf_r+0xb8>
   11686:	f7fe be04 	b.w	10292 <_svfprintf_r+0xb2>
   1168a:	b97c      	cbnz	r4, 116ac <_svfprintf_r+0x14cc>
   1168c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1168e:	07e9      	lsls	r1, r5, #31
   11690:	d40c      	bmi.n	116ac <_svfprintf_r+0x14cc>
   11692:	2301      	movs	r3, #1
   11694:	461c      	mov	r4, r3
   11696:	e639      	b.n	1130c <_svfprintf_r+0x112c>
   11698:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   1169c:	f01c 0301 	ands.w	r3, ip, #1
   116a0:	f47f af43 	bne.w	1152a <_svfprintf_r+0x134a>
   116a4:	9314      	str	r3, [sp, #80]	; 0x50
   116a6:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   116aa:	e62f      	b.n	1130c <_svfprintf_r+0x112c>
   116ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   116ae:	1cac      	adds	r4, r5, #2
   116b0:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   116b4:	e62a      	b.n	1130c <_svfprintf_r+0x112c>
   116b6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   116b8:	230c      	movs	r3, #12
   116ba:	602b      	str	r3, [r5, #0]
   116bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   116c0:	f7fe beae 	b.w	10420 <_svfprintf_r+0x240>
   116c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   116c6:	e713      	b.n	114f0 <_svfprintf_r+0x1310>
   116c8:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
   116cc:	e724      	b.n	11518 <_svfprintf_r+0x1338>
   116ce:	bf00      	nop
   116d0:	00012610 	.word	0x00012610
   116d4:	66666667 	.word	0x66666667

000116d8 <__ssprint_r>:
   116d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116dc:	6894      	ldr	r4, [r2, #8]
   116de:	6816      	ldr	r6, [r2, #0]
   116e0:	b083      	sub	sp, #12
   116e2:	4692      	mov	sl, r2
   116e4:	4680      	mov	r8, r0
   116e6:	460d      	mov	r5, r1
   116e8:	2c00      	cmp	r4, #0
   116ea:	d06f      	beq.n	117cc <__ssprint_r+0xf4>
   116ec:	f04f 0b00 	mov.w	fp, #0
   116f0:	6808      	ldr	r0, [r1, #0]
   116f2:	688b      	ldr	r3, [r1, #8]
   116f4:	465c      	mov	r4, fp
   116f6:	2c00      	cmp	r4, #0
   116f8:	d043      	beq.n	11782 <__ssprint_r+0xaa>
   116fa:	429c      	cmp	r4, r3
   116fc:	461f      	mov	r7, r3
   116fe:	d345      	bcc.n	1178c <__ssprint_r+0xb4>
   11700:	89ab      	ldrh	r3, [r5, #12]
   11702:	f413 6f90 	tst.w	r3, #1152	; 0x480
   11706:	d044      	beq.n	11792 <__ssprint_r+0xba>
   11708:	696f      	ldr	r7, [r5, #20]
   1170a:	6929      	ldr	r1, [r5, #16]
   1170c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   11710:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   11714:	ebc1 0900 	rsb	r9, r1, r0
   11718:	1c62      	adds	r2, r4, #1
   1171a:	107f      	asrs	r7, r7, #1
   1171c:	444a      	add	r2, r9
   1171e:	4297      	cmp	r7, r2
   11720:	bf34      	ite	cc
   11722:	4617      	movcc	r7, r2
   11724:	463a      	movcs	r2, r7
   11726:	055b      	lsls	r3, r3, #21
   11728:	d535      	bpl.n	11796 <__ssprint_r+0xbe>
   1172a:	4611      	mov	r1, r2
   1172c:	4640      	mov	r0, r8
   1172e:	f7fc fa07 	bl	db40 <_malloc_r>
   11732:	2800      	cmp	r0, #0
   11734:	d039      	beq.n	117aa <__ssprint_r+0xd2>
   11736:	6929      	ldr	r1, [r5, #16]
   11738:	9001      	str	r0, [sp, #4]
   1173a:	464a      	mov	r2, r9
   1173c:	f7fc fc9c 	bl	e078 <memcpy>
   11740:	89aa      	ldrh	r2, [r5, #12]
   11742:	9b01      	ldr	r3, [sp, #4]
   11744:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   11748:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1174c:	81aa      	strh	r2, [r5, #12]
   1174e:	ebc9 0207 	rsb	r2, r9, r7
   11752:	eb03 0009 	add.w	r0, r3, r9
   11756:	616f      	str	r7, [r5, #20]
   11758:	612b      	str	r3, [r5, #16]
   1175a:	6028      	str	r0, [r5, #0]
   1175c:	60aa      	str	r2, [r5, #8]
   1175e:	4627      	mov	r7, r4
   11760:	46a1      	mov	r9, r4
   11762:	464a      	mov	r2, r9
   11764:	4659      	mov	r1, fp
   11766:	f7fc fd21 	bl	e1ac <memmove>
   1176a:	f8da 2008 	ldr.w	r2, [sl, #8]
   1176e:	68ab      	ldr	r3, [r5, #8]
   11770:	6828      	ldr	r0, [r5, #0]
   11772:	1bdb      	subs	r3, r3, r7
   11774:	4448      	add	r0, r9
   11776:	1b14      	subs	r4, r2, r4
   11778:	60ab      	str	r3, [r5, #8]
   1177a:	6028      	str	r0, [r5, #0]
   1177c:	f8ca 4008 	str.w	r4, [sl, #8]
   11780:	b324      	cbz	r4, 117cc <__ssprint_r+0xf4>
   11782:	f8d6 b000 	ldr.w	fp, [r6]
   11786:	6874      	ldr	r4, [r6, #4]
   11788:	3608      	adds	r6, #8
   1178a:	e7b4      	b.n	116f6 <__ssprint_r+0x1e>
   1178c:	4627      	mov	r7, r4
   1178e:	46a1      	mov	r9, r4
   11790:	e7e7      	b.n	11762 <__ssprint_r+0x8a>
   11792:	46b9      	mov	r9, r7
   11794:	e7e5      	b.n	11762 <__ssprint_r+0x8a>
   11796:	4640      	mov	r0, r8
   11798:	f7fc fdb6 	bl	e308 <_realloc_r>
   1179c:	4603      	mov	r3, r0
   1179e:	2800      	cmp	r0, #0
   117a0:	d1d5      	bne.n	1174e <__ssprint_r+0x76>
   117a2:	4640      	mov	r0, r8
   117a4:	6929      	ldr	r1, [r5, #16]
   117a6:	f7fd f8e1 	bl	e96c <_free_r>
   117aa:	89aa      	ldrh	r2, [r5, #12]
   117ac:	230c      	movs	r3, #12
   117ae:	f8c8 3000 	str.w	r3, [r8]
   117b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   117b6:	2300      	movs	r3, #0
   117b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   117bc:	81aa      	strh	r2, [r5, #12]
   117be:	f8ca 3008 	str.w	r3, [sl, #8]
   117c2:	f8ca 3004 	str.w	r3, [sl, #4]
   117c6:	b003      	add	sp, #12
   117c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117cc:	4620      	mov	r0, r4
   117ce:	f8ca 4004 	str.w	r4, [sl, #4]
   117d2:	b003      	add	sp, #12
   117d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000117d8 <__aeabi_uldivmod>:
   117d8:	b94b      	cbnz	r3, 117ee <__aeabi_uldivmod+0x16>
   117da:	b942      	cbnz	r2, 117ee <__aeabi_uldivmod+0x16>
   117dc:	2900      	cmp	r1, #0
   117de:	bf08      	it	eq
   117e0:	2800      	cmpeq	r0, #0
   117e2:	d002      	beq.n	117ea <__aeabi_uldivmod+0x12>
   117e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   117e8:	4608      	mov	r0, r1
   117ea:	f7fb bed3 	b.w	d594 <__aeabi_idiv0>
   117ee:	b082      	sub	sp, #8
   117f0:	46ec      	mov	ip, sp
   117f2:	e92d 5000 	stmdb	sp!, {ip, lr}
   117f6:	f7fb feb5 	bl	d564 <__gnu_uldivmod_helper>
   117fa:	f8dd e004 	ldr.w	lr, [sp, #4]
   117fe:	b002      	add	sp, #8
   11800:	bc0c      	pop	{r2, r3}
   11802:	4770      	bx	lr
   11804:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00011808 <_ZTV11AudioStream>:
	...
   11810:	6c05 0000 0000 0000                         .l......

00011818 <_ZTV25AudioEffectCustomEnvelope>:
	...
   11820:	2851 0000 0000 0000                         Q(......

00011828 <_ZTV6SK6812ILh32EL6EOrder66EE>:
	...
   11830:	2b39 0000 2a65 0000 2815 0000 27d9 0000     9+..e*...(...'..
   11840:	27d5 0000 2809 0000 2c0d 0000 0000 0000     .'...(...,......
   11850:	00ff 527f 5345 5445 5420 204f 4f4c 4441     ...RESET TO LOAD
   11860:	5245 007f 00ff 0000                         ER......

00011868 <_ZL5SCALE>:
   11868:	3331 3836 3d3a 423f 4644 0000 6552 656c     1368:=?BDF..Rele
   11878:	7361 3a65 2520 0a64 0000 0000 6144 6f74     ase: %d.....Dato
   11888:	4420 4f55 6620 7269 776d 7261 2065 0000      DUO firmware ..
   11898:	2e30 2e36 0036 ffff                         0.6.6...

000118a0 <_ZL9led_order>:
   118a0:	0001 0000 0002 0000 0003 0000 0004 0000     ................
   118b0:	0005 0000 0006 0000 0007 0000 0008 0000     ................
	...

000118ec <_ZL19MIDI_NOTE_FREQUENCY>:
   118ec:	d013 4102 9760 410a d517 4112 9041 411b     ...A`..A...AA..A
   118fc:	d054 4124 9d37 412e ff49 4138 ff6a 4143     T.$A7..AI.8Aj.CA
   1190c:	a700 414f 0000 415c 14f6 4169 f110 4176     ..OA..\A..iA..vA
   1191c:	d013 4182 9760 418a d517 4192 9041 419b     ...A`..A...AA..A
   1192c:	d054 41a4 9d37 41ae ff49 41b8 ff6a 41c3     T..A7..AI..Aj..A
   1193c:	a700 41cf 0000 41dc 14f6 41e9 f110 41f6     ...A...A...A...A
   1194c:	d013 4202 9760 420a d517 4212 9041 421b     ...B`..B...BA..B
   1195c:	d054 4224 9d37 422e ff49 4238 ff6a 4243     T.$B7..BI.8Bj.CB
   1196c:	a700 424f 0000 425c 14f6 4269 f110 4276     ..OB..\B..iB..vB
   1197c:	d013 4282 9760 428a d517 4292 9041 429b     ...B`..B...BA..B
   1198c:	d054 42a4 9d37 42ae ff49 42b8 ff6a 42c3     T..B7..BI..Bj..B
   1199c:	a700 42cf 0000 42dc 14f6 42e9 f110 42f6     ...B...B...B...B
   119ac:	d013 4302 9760 430a d517 4312 9041 431b     ...C`..C...CA..C
   119bc:	d054 4324 9d37 432e ff49 4338 ff6a 4343     T.$C7..CI.8Cj.CC
   119cc:	a700 434f 0000 435c 14f6 4369 f110 4376     ..OC..\C..iC..vC
   119dc:	d013 4382 9760 438a d517 4392 9041 439b     ...C`..C...CA..C
   119ec:	d054 43a4 9d37 43ae ff49 43b8 ff6a 43c3     T..C7..CI..Cj..C
   119fc:	a700 43cf 0000 43dc 14f6 43e9 f110 43f6     ...C...C...C...C
   11a0c:	d013 4402 9760 440a d517 4412 9041 441b     ...D`..D...DA..D
   11a1c:	d054 4424 9d37 442e ff49 4438 ff6a 4443     T.$D7..DI.8Dj.CD
   11a2c:	a700 444f 0000 445c 14f6 4469 f110 4476     ..OD..\D..iD..vD
   11a3c:	d013 4482 9760 448a d517 4492 9041 449b     ...D`..D...DA..D
   11a4c:	d054 44a4 9d37 44ae ff49 44b8 ff6a 44c3     T..D7..DI..Dj..D
   11a5c:	a700 44cf 0000 44dc 14f6 44e9 f110 44f6     ...D...D...D...D
   11a6c:	d013 4502 9760 450a d517 4512 9041 451b     ...E`..E...EA..E
   11a7c:	d054 4524 9d37 452e ff49 4538 ff6a 4543     T.$E7..EI.8Ej.CE
   11a8c:	a700 454f 0000 455c 14f6 4569 f110 4576     ..OE..\E..iE..vE
   11a9c:	d013 4582 9760 458a d517 4592 9041 459b     ...E`..E...EA..E
   11aac:	d054 45a4 9d37 45ae ff49 45b8 ff6a 45c3     T..E7..EI..Ej..E
   11abc:	a700 45cf 0000 45dc 14f6 45e9 f110 45f6     ...E...E...E...E
   11acc:	d013 4602 9760 460a d517 4612 9041 461b     ...F`..F...FA..F
   11adc:	d054 4624 9d37 462e ff49 4638               T.$F7..FI.8F

00011ae8 <pin2sc1a>:
   11ae8:	0e05 0908 0c0d 0706 040f 1300 9303 0e05     ................
   11af8:	0908 0c0d 0706 040f ffff 85c5 8684 c487     ................
   11b08:	ffff 1300 9303 921a 0017 0000               ............

00011b14 <digital_pin_to_info_PGM>:
   11b14:	0840 43fe a040 4004 0844 43fe a044 4004     @..C@..@D..CD..@
   11b24:	1800 43fe c000 4004 0030 43fe 9030 4004     ...C...@0..C0..@
   11b34:	0034 43fe 9034 4004 181c 43fe c01c 4004     4..C4..@...C...@
   11b44:	1810 43fe c010 4004 1808 43fe c008 4004     ...C...@...C...@
   11b54:	180c 43fe c00c 4004 100c 43fe b00c 4004     ...C...@...C...@
   11b64:	1010 43fe b010 4004 1018 43fe b018 4004     ...C...@...C...@
   11b74:	101c 43fe b01c 4004 1014 43fe b014 4004     ...C...@...C...@
   11b84:	1804 43fe c004 4004 1000 43fe b000 4004     ...C...@...C...@
   11b94:	0800 43fe a000 4004 0804 43fe a004 4004     ...C...@...C...@
   11ba4:	080c 43fe a00c 4004 0808 43fe a008 4004     ...C...@...C...@
   11bb4:	1814 43fe c014 4004 1818 43fe c018 4004     ...C...@...C...@
   11bc4:	1004 43fe b004 4004 1008 43fe b008 4004     ...C...@...C...@
   11bd4:	0014 43fe 9014 4004 084c 43fe a04c 4004     ...C...@L..CL..@
   11be4:	2004 43fe d004 4004 1024 43fe b024 4004     . .C...@$..C$..@
   11bf4:	1020 43fe b020 4004 1028 43fe b028 4004      ..C ..@(..C(..@
   11c04:	102c 43fe b02c 4004 2000 43fe d000 4004     ,..C,..@. .C...@
   11c14:	0848 43fe a048 4004 0010 43fe 9010 4004     H..CH..@...C...@

00011c24 <pin2tsi>:
   11c24:	0a09 ffff ffff ffff ffff ffff ffff 0dff     ................
   11c34:	0600 0708 ffff 0f0e 0cff ffff ffff ffff     ................
   11c44:	050b 0000                                   ....

00011c48 <usb_endpoint_config_table>:
   11c48:	1915 1915                                   ....

00011c4c <usb_descriptor_list>:
   11c4c:	0100 0000 0ce8 2000 0012 0000 0200 0000     ....... ........
   11c5c:	0d08 2000 0073 0000 2200 0001 0d7c 2000     ... s...."..|.. 
   11c6c:	0021 0000 2100 0001 0d64 2000 0009 0000     !....!..d.. ....
   11c7c:	0300 0000 0dbc 2000 0000 0000 0301 0409     ....... ........
   11c8c:	0cfc 2000 0000 0000 0302 0409 0da0 2000     ... ........... 
   11c9c:	0000 0000 0303 0409 0dc0 2000 0000 0000     ........... ....
	...

00011cb8 <_ZTV14HardwareSerial>:
	...
   11cc0:	9c19 0000 9c31 0000 9c01 0000 9c09 0000     ....1...........
   11cd0:	9c05 0000 9c0d 0000 9b91 0000 9ba5 0000     ................
   11ce0:	9bc5 0000 9bc9 0000 9bd1 0000 9bd9 0000     ................
   11cf0:	9be1 0000 9bf1 0000 9c11 0000 9c15 0000     ................
   11d00:	9b61 0000 9b6d 0000 9b79 0000 9b85 0000     a...m...y.......
   11d10:	9c41 0000 9c25 0000                         A...%...

00011d18 <_ZTV15HardwareSerial2>:
	...
   11d20:	9d31 0000 9d49 0000 9d19 0000 9d21 0000     1...I.......!...
   11d30:	9d1d 0000 9d25 0000 9ca9 0000 9cbd 0000     ....%...........
   11d40:	9cdd 0000 9ce1 0000 9ce9 0000 9cf1 0000     ................
   11d50:	9cf9 0000 9d09 0000 9d29 0000 9d2d 0000     ........)...-...
   11d60:	9c79 0000 9c85 0000 9c91 0000 9c9d 0000     y...............
   11d70:	9d59 0000 9d3d 0000                         Y...=...

00011d78 <_ZTV15HardwareSerial3>:
	...
   11d80:	9e49 0000 9e61 0000 9e31 0000 9e39 0000     I...a...1...9...
   11d90:	9e35 0000 9e3d 0000 9dc1 0000 9dd5 0000     5...=...........
   11da0:	9df5 0000 9df9 0000 9e01 0000 9e09 0000     ................
   11db0:	9e11 0000 9e21 0000 9e41 0000 9e45 0000     ....!...A...E...
   11dc0:	9d91 0000 9d9d 0000 9da9 0000 9db5 0000     ................
   11dd0:	9e71 0000 9e55 0000                         q...U...

00011dd8 <_ZTV9IPAddress>:
	...
   11de0:	9ea9 0000 0000 0000 0a0d 0000 ffff ffff     ................

00011df0 <_ZTV16usb_seremu_class>:
	...
   11df8:	a131 0000 a139 0000 a121 0000 a125 0000     1...9...!...%...
   11e08:	a129 0000 a12d 0000                         )...-...

00011e10 <AudioWaveformSine>:
   11e10:	0000 0324 0648 096a 0c8c 0fab 12c8 15e2     ..$.H.j.........
   11e20:	18f9 1c0b 1f1a 2223 2528 2826 2b1f 2e11     ......#"(%&(.+..
   11e30:	30fb 33df 36ba 398c 3c56 3f17 41ce 447a     .0.3.6.9V<.?.AzD
   11e40:	471c 49b4 4c3f 4ebf 5133 539b 55f5 5842     .G.I?L.N3Q.S.UBX
   11e50:	5a82 5cb3 5ed7 60eb 62f1 64e8 66cf 68a6     .Z.\.^.`.b.d.f.h
   11e60:	6a6d 6c23 6dc9 6f5e 70e2 7254 73b5 7504     mj#l.m^o.pTr.s.u
   11e70:	7641 776b 7884 7989 7a7c 7b5c 7c29 7ce3     Avkw.x.y|z\{)|.|
   11e80:	7d89 7e1d 7e9c 7f09 7f61 7fa6 7fd8 7ff5     .}.~.~..a.......
   11e90:	7fff 7ff5 7fd8 7fa6 7f61 7f09 7e9c 7e1d     ........a....~.~
   11ea0:	7d89 7ce3 7c29 7b5c 7a7c 7989 7884 776b     .}.|)|\{|z.y.xkw
   11eb0:	7641 7504 73b5 7254 70e2 6f5e 6dc9 6c23     Av.u.sTr.p^o.m#l
   11ec0:	6a6d 68a6 66cf 64e8 62f1 60eb 5ed7 5cb3     mj.h.f.d.b.`.^.\
   11ed0:	5a82 5842 55f5 539b 5133 4ebf 4c3f 49b4     .ZBX.U.S3Q.N?L.I
   11ee0:	471c 447a 41ce 3f17 3c56 398c 36ba 33df     .GzD.A.?V<.9.6.3
   11ef0:	30fb 2e11 2b1f 2826 2528 2223 1f1a 1c0b     .0...+&((%#"....
   11f00:	18f9 15e2 12c8 0fab 0c8c 096a 0648 0324     ..........j.H.$.
   11f10:	0000 fcdc f9b8 f696 f374 f055 ed38 ea1e     ........t.U.8...
   11f20:	e707 e3f5 e0e6 dddd dad8 d7da d4e1 d1ef     ................
   11f30:	cf05 cc21 c946 c674 c3aa c0e9 be32 bb86     ..!.F.t.....2...
   11f40:	b8e4 b64c b3c1 b141 aecd ac65 aa0b a7be     ..L...A...e.....
   11f50:	a57e a34d a129 9f15 9d0f 9b18 9931 975a     ~.M.).......1.Z.
   11f60:	9593 93dd 9237 90a2 8f1e 8dac 8c4b 8afc     ....7.......K...
   11f70:	89bf 8895 877c 8677 8584 84a4 83d7 831d     ....|.w.........
   11f80:	8277 81e3 8164 80f7 809f 805a 8028 800b     w...d.....Z.(...
   11f90:	8001 800b 8028 805a 809f 80f7 8164 81e3     ....(.Z.....d...
   11fa0:	8277 831d 83d7 84a4 8584 8677 877c 8895     w.........w.|...
   11fb0:	89bf 8afc 8c4b 8dac 8f1e 90a2 9237 93dd     ....K.......7...
   11fc0:	9593 975a 9931 9b18 9d0f 9f15 a129 a34d     ..Z.1.......).M.
   11fd0:	a57e a7be aa0b ac65 aecd b141 b3c1 b64c     ~.....e...A...L.
   11fe0:	b8e4 bb86 be32 c0e9 c3aa c674 c946 cc21     ....2.....t.F.!.
   11ff0:	cf05 d1ef d4e1 d7da dad8 dddd e0e6 e3f5     ................
   12000:	e707 ea1e ed38 f055 f374 f696 f9b8 fcdc     ....8.U.t.......
   12010:	0000 0000 ffff ffff                         ........

00012018 <_ZTV16AudioAnalyzePeak>:
	...
   12020:	a1bd 0000 0000 0000                         ........

00012028 <_ZTV21AudioEffectBitcrusher>:
	...
   12030:	a1fd 0000 0000 0000                         ........

00012038 <_ZTV16AudioEffectDelay>:
	...
   12040:	a2f9 0000 0000 0000                         ........

00012048 <_ZTV24AudioFilterStateVariable>:
	...
   12050:	a635 0000 0000 0000                         5.......

00012058 <_ZTV11AudioMixer4>:
	...
   12060:	a781 0000 0000 0000                         ........

00012068 <_ZTV17AudioOutputAnalog>:
	...
   12070:	a875 0000 0000 0000                         u.......

00012078 <_ZTV20AudioSynthWaveformDc>:
	...
   12080:	ab5d 0000 0000 0000                         ].......

00012088 <_ZTV20AudioSynthSimpleDrum>:
	...
   12090:	ac81 0000 0000 0000                         ........

00012098 <_ZTV18AudioSynthWaveform>:
	...
   120a0:	ae29 0000 0000 0000                         ).......

000120a8 <_ZTV20AudioSynthNoiseWhite>:
	...
   120b0:	b031 0000 0000 0000                         1.......

000120b8 <_ZTV6Keypad>:
	...
   120c0:	b3cd 0000 b3d5 0000 b3f1 0000 0000 0000     ................

000120d0 <npio2_hw>:
   120d0:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   120e0:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   120f0:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   12100:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   12110:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   12120:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   12130:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   12140:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

00012150 <two_over_pi>:
   12150:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   12160:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   12170:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   12180:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   12190:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   121a0:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   121b0:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   121c0:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   121d0:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   121e0:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   121f0:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   12200:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   12210:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   12220:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   12230:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   12240:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   12250:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   12260:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   12270:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   12280:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   12290:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   122a0:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   122b0:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   122c0:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   122d0:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   122e0:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   122f0:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   12300:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   12310:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   12320:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   12330:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   12340:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   12350:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   12360:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   12370:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   12380:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   12390:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   123a0:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   123b0:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   123c0:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   123d0:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   123e0:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   123f0:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   12400:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   12410:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   12420:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   12430:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   12440:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   12450:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   12460:	008c 0000 006b 0000                         ....k...

00012468 <init_jk>:
   12468:	0004 0000 0007 0000 0009 0000               ............

00012474 <PIo2>:
   12474:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   12484:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   12494:	0000 1fc4 0000 1bc6 0000 1744 0043 ffff     ..........D.C...

000124a4 <_global_impure_ptr>:
   124a4:	0df0 2000 4f50 4953 0058 0000 002e ffff     ... POSIX.......
   124b4:	ffff ffff                                   ....

000124b8 <__mprec_tens>:
   124b8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   124c8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   124d8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   124e8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   124f8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   12508:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   12518:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   12528:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   12538:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   12548:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   12558:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   12568:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   12578:	9db4 79d9 7843 44ea                         ...yCx.D

00012580 <__mprec_bigtens>:
   12580:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   12590:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   125a0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000125a8 <p05.5269>:
   125a8:	0005 0000 0019 0000 007d 0000 6e49 6966     ........}...Infi
   125b8:	696e 7974 0000 0000 614e 004e 0030 ffff     nity....NaN.0...

000125c8 <zeroes.6763>:
   125c8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   125d8:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
   125e8:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   125f8:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
   12608:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

00012618 <blanks.6762>:
   12618:	2020 2020 2020 2020 2020 2020 2020 2020                     

00012628 <_init>:
   12628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1262a:	bf00      	nop
   1262c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1262e:	bc08      	pop	{r3}
   12630:	469e      	mov	lr, r3
   12632:	4770      	bx	lr

00012634 <__init_array_start>:
   12634:	0000e88d 	.word	0x0000e88d

00012638 <__frame_dummy_init_array_entry>:
   12638:	00002435 000061f9 00009c5d 00009d75     5$...a..]...u...
   12648:	00009e8d 00009ee1 0000a055 0000a145     ........U...E...
   12658:	0000a739 0000a751 0000a769 0000aacd     9...Q...i.......
   12668:	0000aae5 0000aafd 0000ab15 0000ab2d     ............-...
   12678:	0000ab45 0000b3a9                       E.......

Disassembly of section .fini:

00012680 <_fini>:
   12680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12682:	bf00      	nop
